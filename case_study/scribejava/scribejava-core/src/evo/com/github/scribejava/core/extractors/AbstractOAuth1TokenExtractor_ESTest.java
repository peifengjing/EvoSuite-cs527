/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:05:24 GMT 2017
 */

package com.github.scribejava.core.extractors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.extractors.OAuth1AccessTokenExtractor;
import com.github.scribejava.core.extractors.OAuth1RequestTokenExtractor;
import com.github.scribejava.core.model.OAuth1RequestToken;
import com.github.scribejava.core.model.Response;
import java.io.IOException;
import java.io.PipedInputStream;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractOAuth1TokenExtractor_ESTest extends AbstractOAuth1TokenExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenExtractor0.createToken("", "", "");
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenExtractor0.createToken("wE9WOYQj&(uo", "wE9WOYQj&(uo", "ZJ~B/8MShu_^");
      assertFalse(oAuth1RequestToken0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      // Undeclared exception!
      try { 
        oAuth1RequestTokenExtractor0.extract((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.AbstractOAuth1TokenExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      Response response0 = new Response(3101, "", (Map<String, String>) null, "");
      // Undeclared exception!
      try { 
        oAuth1RequestTokenExtractor0.extract(response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = new OAuth1AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "cGX;FbzJA:h]", hashMap0, "oauth_token=([^&]+)");
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract token and secret from this: 'oauth_token=([^&]+)'
         //
         verifyException("com.github.scribejava.core.extractors.AbstractOAuth1TokenExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = new OAuth1AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Response response0 = new Response(1, "Z", hashMap0, pipedInputStream0);
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      // Undeclared exception!
      try { 
        oAuth1RequestTokenExtractor0.createToken((String) null, "(aY)bvJP!G7Cl", "i>1wg'5vH\"k_zg/p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
}
