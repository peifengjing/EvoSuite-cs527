/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:45:28 GMT 2017
 */

package com.github.scribejava.core.extractors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor;
import com.github.scribejava.core.model.OAuth2AccessToken;
import com.github.scribejava.core.model.Response;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth2AccessTokenJsonExtractor_ESTest extends OAuth2AccessTokenJsonExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      Response response0 = new Response((-781), "t'", (Map<String, String>) null, "t'");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a '\"error\"\\s*:\\s*\"(\\S*?)\"' from this: 't''
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a '\"error\"\\s*:\\s*\"(\\S*?)\"' from this: ''
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("\"access_token\"s*:s*\"(S*?)\"");
      try { 
        OAuth2AccessTokenJsonExtractor.extractParameter("\"access_token\"s*:s*\"(S*?)\"", pattern0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a '\"access_token\"s*:s*\"(S*?)\"' from this: '\"access_token\"s*:s*\"(S*?)\"'
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        OAuth2AccessTokenJsonExtractor.extractParameter("d?E}p0O", (Pattern) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, "");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-33), 2343);
      Response response0 = new Response((-1056), "]Lp+0=ro", hashMap0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 4218);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      Response response0 = new Response((-1320), ", headers=", hashMap0, bufferedInputStream0);
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.createToken((String) null, "gMYq/ _DHaR{PSh]", (Integer) null, "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("LvW!Q+x_,vq}v4^w/\"");
      String string0 = OAuth2AccessTokenJsonExtractor.extractParameter("LvW!Q+x_,vq}v4^w/\"", pattern0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("'1G");
      // Undeclared exception!
      try { 
        OAuth2AccessTokenJsonExtractor.extractParameter("'1G", pattern0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1608, "G 0C", hashMap0, "[:.!&F9[6-2jmk]~nI");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a '\"error\"\\s*:\\s*\"(\\S*?)\"' from this: '[:.!&F9[6-2jmk]~nI'
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      Response response0 = new Response(200, "\"refresh_token\"s*:s*\"(S*?)\"", (Map<String, String>) null, "\"refresh_token\"s*:s*\"(S*?)\"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a '\"access_token\"\\s*:\\s*\"(\\S*?)\"' from this: '\"refresh_token\"s*:s*\"(S*?)\"'
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken("gW3v'", "gW3v'", (Integer) null, "gW3v'", "com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", "gW3v'");
      assertEquals("gW3v'", oAuth2AccessToken0.getAccessToken());
      assertEquals("gW3v'", oAuth2AccessToken0.getTokenType());
      assertEquals("gW3v'", oAuth2AccessToken0.getRefreshToken());
      assertEquals("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", oAuth2AccessToken0.getScope());
  }
}
