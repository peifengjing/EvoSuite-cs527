/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:14:09 GMT 2017
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.HttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.model.OAuthConfig;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuthConfig_ESTest extends OAuthConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      String string0 = oAuthConfig0.getUserAgent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("there were problems while writting to the debug stream", "there were problems while writting to the debug stream", "there were problems while writting to the debug stream", "there were problems while writting to the debug stream", pipedOutputStream0, "there were problems while writting to the debug stream", "UTF8", "UTF8", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuthConfig0.getUserAgent();
      assertEquals("UTF8", oAuthConfig0.getResponseType());
      assertEquals("UTF8", string0);
      assertEquals("there were problems while writting to the debug stream", oAuthConfig0.getScope());
      assertEquals("there were problems while writting to the debug stream", oAuthConfig0.getCallback());
      assertEquals("there were problems while writting to the debug stream", oAuthConfig0.getState());
      assertEquals("there were problems while writting to the debug stream", oAuthConfig0.getApiKey());
      assertEquals("there were problems while writting to the debug stream", oAuthConfig0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      String string0 = oAuthConfig0.getState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("..m", "", (String) null, "", byteArrayOutputStream0, "", "Zc6X#v':V'$6~/>*IS", "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getState();
      assertEquals("", oAuthConfig0.getScope());
      assertNotNull(string0);
      assertEquals("..m", oAuthConfig0.getApiKey());
      assertEquals("Zc6X#v':V'$6~/>*IS", oAuthConfig0.getResponseType());
      assertEquals("", string0);
      assertEquals("", oAuthConfig0.getApiSecret());
      assertEquals("", oAuthConfig0.getUserAgent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      String string0 = oAuthConfig0.getScope();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("there were problems while writting to the debug stream", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "=Qv'", "", "=Qv'", mockPrintStream0, "", "=Qv'", "=Qv'", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getScope();
      assertEquals("=Qv'", oAuthConfig0.getUserAgent());
      assertEquals("=Qv'", oAuthConfig0.getResponseType());
      assertEquals("=Qv'", oAuthConfig0.getApiSecret());
      assertEquals("", oAuthConfig0.getState());
      assertEquals("", oAuthConfig0.getApiKey());
      assertEquals("=Qv'", string0);
      assertEquals("", oAuthConfig0.getCallback());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("BLYKqNL8]KAVN.{", "BLYKqNL8]KAVN.{", "BLYKqNL8]KAVN.{", "BLYKqNL8]KAVN.{", (OutputStream) null, "BLYKqNL8]KAVN.{", "d@v$r9b", "BLYKqNL8]KAVN.{", (HttpClientConfig) null, jDKHttpClient0);
      String string0 = oAuthConfig0.getResponseType();
      assertEquals("BLYKqNL8]KAVN.{", oAuthConfig0.getApiKey());
      assertEquals("BLYKqNL8]KAVN.{", oAuthConfig0.getState());
      assertEquals("d@v$r9b", string0);
      assertEquals("BLYKqNL8]KAVN.{", oAuthConfig0.getScope());
      assertEquals("BLYKqNL8]KAVN.{", oAuthConfig0.getApiSecret());
      assertEquals("BLYKqNL8]KAVN.{", oAuthConfig0.getUserAgent());
      assertEquals("BLYKqNL8]KAVN.{", oAuthConfig0.getCallback());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("DELETE", "DELETE", "DELETE", (String) null, pipedOutputStream0, "DELETE", "", "DELETE", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getResponseType();
      assertEquals("DELETE", oAuthConfig0.getCallback());
      assertEquals("", string0);
      assertEquals("DELETE", oAuthConfig0.getApiSecret());
      assertEquals("DELETE", oAuthConfig0.getApiKey());
      assertEquals("DELETE", oAuthConfig0.getState());
      assertEquals("DELETE", oAuthConfig0.getUserAgent());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      HttpClientConfig httpClientConfig0 = oAuthConfig0.getHttpClientConfig();
      assertNull(httpClientConfig0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      HttpClient httpClient0 = oAuthConfig0.getHttpClient();
      assertNull(httpClient0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("7kIrR6i-0Mc", "7kIrR6i-0Mc");
      String string0 = oAuthConfig0.getCallback();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("there were problems while writting to the debug stream", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "=Qv'", "", "=Qv'", mockPrintStream0, "", "=Qv'", "=Qv'", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getCallback();
      assertEquals("=Qv'", oAuthConfig0.getScope());
      assertEquals("", oAuthConfig0.getApiKey());
      assertEquals("", oAuthConfig0.getState());
      assertEquals("=Qv'", oAuthConfig0.getApiSecret());
      assertEquals("", string0);
      assertEquals("=Qv'", oAuthConfig0.getResponseType());
      assertEquals("=Qv'", oAuthConfig0.getUserAgent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("9=XH>vM$aX", (String) null);
      String string0 = oAuthConfig0.getApiSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      String string0 = oAuthConfig0.getApiSecret();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      String string0 = oAuthConfig0.getApiKey();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "there were problems while writting to the debug stream");
      String string0 = oAuthConfig0.getApiKey();
      assertNotNull(string0);
      assertEquals("there were problems while writting to the debug stream", oAuthConfig0.getApiSecret());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("there were problems while writting to the debug stream", "there were problems while writting to the debug stream", "there were problems while writting to the debug stream", "there were problems while writting to the debug stream", pipedOutputStream0, "there were problems while writting to the debug stream", "UTF8", "UTF8", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuthConfig0.log("there were problems while writting to the debug stream");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xtd7XjYD-+5aCMQ&^B");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("+GB", "xtd7XjYD-+5aCMQ&^B", "3)`8U,3nHi", "R{", mockFileOutputStream0, "UTF8", "3)`8U,3nHi", "99UnL,%9cADmanO:", jDKHttpClientConfig0, jDKHttpClient0);
      oAuthConfig0.log("3)`8U,3nHi");
      assertEquals("R{", oAuthConfig0.getScope());
      assertEquals("3)`8U,3nHi", oAuthConfig0.getCallback());
      assertEquals("3)`8U,3nHi", oAuthConfig0.getResponseType());
      assertEquals("99UnL,%9cADmanO:", oAuthConfig0.getUserAgent());
      assertEquals("UTF8", oAuthConfig0.getState());
      assertEquals("xtd7XjYD-+5aCMQ&^B", oAuthConfig0.getApiSecret());
      assertEquals("+GB", oAuthConfig0.getApiKey());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, "");
      oAuthConfig0.log("");
      assertNull(oAuthConfig0.getUserAgent());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("there were problems while writting to the debug stream", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "=Qv'", "", "=Qv'", mockPrintStream0, "", "=Qv'", "=Qv'", jDKHttpClientConfig0, jDKHttpClient0);
      oAuthConfig0.getHttpClient();
      assertEquals("", oAuthConfig0.getApiKey());
      assertEquals("", oAuthConfig0.getState());
      assertEquals("=Qv'", oAuthConfig0.getScope());
      assertEquals("=Qv'", oAuthConfig0.getResponseType());
      assertEquals("=Qv'", oAuthConfig0.getApiSecret());
      assertEquals("=Qv'", oAuthConfig0.getUserAgent());
      assertEquals("", oAuthConfig0.getCallback());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("HEAD", "UTF8", "HEAD", "_AH-J@qN/+[G;fTjT?(", (OutputStream) null, (String) null, "_AH-J@qN/+[G;fTjT?(", "_AH-J@qN/+[G;fTjT?(", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getCallback();
      assertEquals("HEAD", oAuthConfig0.getApiKey());
      assertEquals("HEAD", string0);
      assertEquals("_AH-J@qN/+[G;fTjT?(", oAuthConfig0.getScope());
      assertEquals("_AH-J@qN/+[G;fTjT?(", oAuthConfig0.getResponseType());
      assertNotNull(string0);
      assertEquals("_AH-J@qN/+[G;fTjT?(", oAuthConfig0.getUserAgent());
      assertEquals("UTF8", oAuthConfig0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "com.github.scribejava.core.exceptions.OAuthException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", dataOutputStream0, "com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getUserAgent();
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuthConfig0.getApiSecret());
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuthConfig0.getState());
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuthConfig0.getApiKey());
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuthConfig0.getScope());
      assertEquals("", string0);
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuthConfig0.getCallback());
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuthConfig0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "", "", byteArrayOutputStream0, "R_,xAHA[Q", "R_,xAHA[Q", "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getState();
      assertEquals("", oAuthConfig0.getScope());
      assertEquals("", oAuthConfig0.getCallback());
      assertEquals("R_,xAHA[Q", string0);
      assertEquals("", oAuthConfig0.getUserAgent());
      assertEquals("", oAuthConfig0.getApiSecret());
      assertEquals("R_,xAHA[Q", oAuthConfig0.getResponseType());
      assertEquals("", oAuthConfig0.getApiKey());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "", "", byteArrayOutputStream0, "R_,xAHA[Q", "R_,xAHA[Q", "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getScope();
      assertEquals("", oAuthConfig0.getApiSecret());
      assertEquals("", oAuthConfig0.getUserAgent());
      assertEquals("R_,xAHA[Q", oAuthConfig0.getState());
      assertEquals("", oAuthConfig0.getCallback());
      assertEquals("", string0);
      assertEquals("", oAuthConfig0.getApiKey());
      assertEquals("R_,xAHA[Q", oAuthConfig0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, "");
      String string0 = oAuthConfig0.getApiKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ob:K");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "Ob:K", "", objectOutputStream0, "", "Ob:K", "", jDKHttpClientConfig0, jDKHttpClient0);
      oAuthConfig0.getHttpClientConfig();
      assertEquals("Ob:K", oAuthConfig0.getCallback());
      assertEquals("", oAuthConfig0.getUserAgent());
      assertEquals("", oAuthConfig0.getApiSecret());
      assertEquals("Ob:K", oAuthConfig0.getResponseType());
      assertEquals("", oAuthConfig0.getScope());
      assertEquals("", oAuthConfig0.getState());
      assertEquals("", oAuthConfig0.getApiKey());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("9=XH>vM$aX", (String) null);
      String string0 = oAuthConfig0.getResponseType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "", "", byteArrayOutputStream0, "R_,xAHA[Q", "R_,xAHA[Q", "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuthConfig0.getApiSecret();
      assertEquals("R_,xAHA[Q", oAuthConfig0.getResponseType());
      assertEquals("", oAuthConfig0.getApiKey());
      assertEquals("", oAuthConfig0.getCallback());
      assertEquals("", oAuthConfig0.getScope());
      assertEquals("", oAuthConfig0.getUserAgent());
      assertEquals("R_,xAHA[Q", oAuthConfig0.getState());
      assertEquals("", string0);
  }
}
