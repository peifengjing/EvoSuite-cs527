/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:14:57 GMT 2017
 */

package com.github.scribejava.core.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.ServiceBuilder;
import com.github.scribejava.core.builder.api.BaseApi;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.HttpClientConfig;
import com.github.scribejava.core.oauth.OAuth20Service;
import com.github.scribejava.core.oauth.OAuthService;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServiceBuilder_ESTest extends ServiceBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("1m>n'ICYeFA");
      BaseApi<OAuth20Service> baseApi0 = (BaseApi<OAuth20Service>) mock(BaseApi.class, new ViolatedAssumptionAnswer());
      doReturn((OAuthService) null).when(baseApi0).createService(any(com.github.scribejava.core.model.OAuthConfig.class));
      OAuth20Service oAuth20Service0 = serviceBuilder0.build(baseApi0);
      assertNull(oAuth20Service0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("i$x<<4#d");
      OAuth20Service oAuth20Service0 = mock(OAuth20Service.class, new ViolatedAssumptionAnswer());
      doReturn("i$x<<4#d").when(oAuth20Service0).toString();
      BaseApi<OAuth20Service> baseApi0 = (BaseApi<OAuth20Service>) mock(BaseApi.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth20Service0).when(baseApi0).createService(any(com.github.scribejava.core.model.OAuthConfig.class));
      OAuth20Service oAuth20Service1 = serviceBuilder0.build(baseApi0);
      assertSame(oAuth20Service1, oAuth20Service0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("La");
      // Undeclared exception!
      try { 
        serviceBuilder0.state((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth state
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("5&7DmW=M|T;");
      // Undeclared exception!
      try { 
        serviceBuilder0.scope("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth scope
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("/&,%C^1NZ?=\"8");
      // Undeclared exception!
      try { 
        serviceBuilder0.responseType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth responseType
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("=");
      // Undeclared exception!
      try { 
        serviceBuilder0.debugStream((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // debug stream can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("oob");
      // Undeclared exception!
      try { 
        serviceBuilder0.callback((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callback can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("com.github.scribejava.core.model.Verb");
      // Undeclared exception!
      try { 
        serviceBuilder0.apiSecret("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api secret
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("cgn.[UsY7[vt[x:");
      // Undeclared exception!
      try { 
        serviceBuilder0.apiKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api key
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = null;
      try {
        serviceBuilder0 = new ServiceBuilder("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api key
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("1m>n'ICYeFA");
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ServiceBuilder serviceBuilder1 = serviceBuilder0.debugStream(outputStream0);
      assertSame(serviceBuilder1, serviceBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("cgn.[UsY7[vt[x:");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.apiKey("|");
      assertSame(serviceBuilder0, serviceBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("=");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.userAgent("!'N5+pS849:4=");
      assertSame(serviceBuilder0, serviceBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("cgn.[UsY7[vt[x:");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.state("cgn.[UsY7[vt[x:");
      assertSame(serviceBuilder1, serviceBuilder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(".Pf=%or");
      // Undeclared exception!
      try { 
        serviceBuilder0.httpClientConfig((HttpClientConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // httpClientConfig can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("cgn.[UsY7[vt[x:");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.debug();
      assertSame(serviceBuilder0, serviceBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("1m>n'ICYeFA");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.responseType("1m>n'ICYeFA");
      assertSame(serviceBuilder1, serviceBuilder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("cgn.[UsY7[vt[x:");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.apiSecret("Invalid Api secret");
      assertSame(serviceBuilder0, serviceBuilder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("cgn.[UsY7[vt[x:");
      HttpClient httpClient0 = mock(HttpClient.class, new ViolatedAssumptionAnswer());
      ServiceBuilder serviceBuilder1 = serviceBuilder0.httpClient(httpClient0);
      assertSame(serviceBuilder0, serviceBuilder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("B v+d(P2Cbo}*/q`^H");
      // Undeclared exception!
      try { 
        serviceBuilder0.build((BaseApi<OAuth20Service>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.builder.ServiceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("B v+d(P2Cbo}*/q`^H");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.scope("B v+d(P2Cbo}*/q`^H");
      assertSame(serviceBuilder1, serviceBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("B v+d(P2Cbo}*/q`^H");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.callback("Invalid Api secret");
      assertSame(serviceBuilder1, serviceBuilder0);
  }
}
