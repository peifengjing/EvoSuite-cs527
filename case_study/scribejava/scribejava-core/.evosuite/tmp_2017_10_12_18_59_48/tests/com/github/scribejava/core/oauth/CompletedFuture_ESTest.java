/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:21:54 GMT 2017
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.scribejava.core.oauth.CompletedFuture;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompletedFuture_ESTest extends CompletedFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CompletedFuture<Object> completedFuture0 = new CompletedFuture<Object>((Object) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Object object0 = completedFuture0.get(630L, timeUnit0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-69));
      CompletedFuture<Integer> completedFuture0 = new CompletedFuture<Integer>(integer0);
      Integer integer1 = completedFuture0.get();
      assertEquals((-69), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-69));
      CompletedFuture<Integer> completedFuture0 = new CompletedFuture<Integer>(integer0);
      boolean boolean0 = completedFuture0.cancel(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompletedFuture<Object> completedFuture0 = new CompletedFuture<Object>("G");
      boolean boolean0 = completedFuture0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompletedFuture<Object> completedFuture0 = new CompletedFuture<Object>("G");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Object object0 = completedFuture0.get(0L, timeUnit0);
      assertEquals("G", object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CompletedFuture<Object> completedFuture0 = new CompletedFuture<Object>((Object) null);
      Object object0 = completedFuture0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CompletedFuture<Object> completedFuture0 = new CompletedFuture<Object>("G");
      boolean boolean0 = completedFuture0.isCancelled();
      assertFalse(boolean0);
  }
}
