/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:02:10 GMT 2017
 */

package com.github.scribejava.core.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.services.Base64Encoder;
import com.github.scribejava.core.services.DatatypeConverterEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Encoder_ESTest extends Base64Encoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Base64Encoder base64Encoder0 = Base64Encoder.getInstance();
      String string0 = base64Encoder0.getType();
      assertEquals("CommonsCodec", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DatatypeConverterEncoder datatypeConverterEncoder0 = new DatatypeConverterEncoder();
      byte[] byteArray0 = new byte[1];
      String string0 = datatypeConverterEncoder0.encode(byteArray0);
      assertEquals("AA==", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Base64Encoder base64Encoder0 = Base64Encoder.getInstance();
      byte[] byteArray0 = new byte[0];
      String string0 = base64Encoder0.encode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Base64Encoder.type();
      Base64Encoder base64Encoder0 = Base64Encoder.getInstance();
      assertEquals("CommonsCodec", base64Encoder0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Base64Encoder base64Encoder0 = Base64Encoder.getInstance();
      // Undeclared exception!
      try { 
        base64Encoder0.encode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
