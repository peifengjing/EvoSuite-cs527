/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:50:24 GMT 2017
 */

package com.github.scribejava.core.extractors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.extractors.HeaderExtractorImpl;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Verb;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeaderExtractorImpl_ESTest extends HeaderExtractorImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "realm");
      // Undeclared exception!
      try { 
        headerExtractorImpl0.extract(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find oauth parameters in request: @Request(PATCH realm). OAuth parameters must be specified with the addOAuthParameter() method
         //
         verifyException("com.github.scribejava.core.extractors.HeaderExtractorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "realm");
      oAuthRequest0.addOAuthParameter("realm", "realm");
      oAuthRequest0.setRealm("");
      String string0 = headerExtractorImpl0.extract(oAuthRequest0);
      assertEquals("OAuth realm=\"realm\"", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "realm");
      oAuthRequest0.addOAuthParameter("realm", "realm");
      oAuthRequest0.setRealm("5");
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      String string0 = headerExtractorImpl0.extract(oAuthRequest0);
      assertEquals("OAuth realm=\"realm\", realm=\"5\"", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "realm");
      oAuthRequest0.addOAuthParameter("realm", "realm");
      String string0 = headerExtractorImpl0.extract(oAuthRequest0);
      assertEquals("OAuth realm=\"realm\"", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      // Undeclared exception!
      try { 
        headerExtractorImpl0.extract((OAuthRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot extract a header from a null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
}
