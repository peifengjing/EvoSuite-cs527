/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:42:46 GMT 2017
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.OAuth1RequestToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth1RequestToken_ESTest extends OAuth1RequestToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "");
      boolean boolean0 = oAuth1RequestToken0.isOauthCallbackConfirmed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", "");
      oAuth1RequestToken0.getTokenSecret();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("&", "&", true, "&");
      oAuth1RequestToken0.getToken();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken("rMX]OYnPy%KlZ'V*R", (String) null, true, "@X..;LB=ODkxBQZ'O!z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken("qQ|~@n", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "");
      oAuth1RequestToken0.getToken();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("`ocf", "`ocf", "`ocf");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("OAuth1RequestToken{oauth_token=`ocf, oauth_token_secret=`ocf, oauth_callback_confirmed=true}", "OAuth1RequestToken{oauth_token=`ocf, oauth_token_secret=`ocf, oauth_callback_confirmed=true}");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertFalse(boolean0);
      assertTrue(oAuth1RequestToken1.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("&", "&");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("&", "&", "&");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertTrue(oAuth1RequestToken1.isOauthCallbackConfirmed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("", "", false, "");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertFalse(boolean0);
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("`ocf", "`ocf", "`ocf");
      boolean boolean0 = oAuth1RequestToken0.equals((Object) null);
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "");
      Object object0 = new Object();
      boolean boolean0 = oAuth1RequestToken0.equals(object0);
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("`ocf", "`ocf", "`ocf");
      oAuth1RequestToken0.hashCode();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", false, "");
      oAuth1RequestToken0.hashCode();
      assertFalse(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("`ocf", "`ocf", "`ocf");
      String string0 = oAuth1RequestToken0.toString();
      assertEquals("OAuth1RequestToken{oauth_token=`ocf, oauth_token_secret=`ocf, oauth_callback_confirmed=true}", string0);
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("g+wm%T=VNLpW O L", "g+wm%T=VNLpW O L", false, "g+wm%T=VNLpW O L");
      boolean boolean0 = oAuth1RequestToken0.isOauthCallbackConfirmed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("=", "=");
      oAuth1RequestToken0.getTokenSecret();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("GUk", "GUk");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken0);
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
      assertTrue(boolean0);
  }
}
