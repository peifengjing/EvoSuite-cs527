/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:39:48 GMT 2017
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.api.DefaultApi10a;
import com.github.scribejava.core.builder.api.OAuth1SignatureType;
import com.github.scribejava.core.extractors.BaseStringExtractor;
import com.github.scribejava.core.extractors.HeaderExtractor;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.model.OAuth1AccessToken;
import com.github.scribejava.core.model.OAuth1RequestToken;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthConfig;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Verb;
import com.github.scribejava.core.oauth.OAuth10aService;
import com.github.scribejava.core.services.SignatureService;
import com.github.scribejava.core.services.TimestampService;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth10aService_ESTest extends OAuth10aService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("encodeInteger called with null parameter").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QueryString;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("s").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      OAuthConfig oAuthConfig0 = new OAuthConfig("h7A41v", "h7A41v");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      oAuth10aService0.prepareRequestTokenRequest();
      assertEquals("1.0", oAuth10aService0.getVersion());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      String string0 = oAuth10aService0.getAuthorizationUrl((OAuth1RequestToken) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(" 'A$?@JJ,5'oHN").when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "f.}(y&U]UeuX<Rg%*");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "f.}(y&U]UeuX<Rg%*", "zjOE+v_%6LeB");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
      assertEquals(" 'A$?@JJ,5'oHN", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, oAuthConfig0);
      DefaultApi10a defaultApi10a0 = oAuth10aService0.getApi();
      assertNull(defaultApi10a0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jf*", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null, (String) null, "", mockFileOutputStream0, (String) null, "Pu:P", "Pu:P", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/scribejava/scribejava-core/jf*");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("<5K6k", "", "");
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuthConfig oAuthConfig0 = new OAuthConfig(")']09n]^y", "TRACE");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest((OAuth1AccessToken) null, oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kv2P5;;-@=dZdBt");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      mockFileOutputStream0.close();
      OAuthConfig oAuthConfig0 = new OAuthConfig("kv2P5;;-@=dZdBt", "", "", "using Http Header signature", mockFileOutputStream0, "using Http Header signature", "kv2P5;;-@=dZdBt", "", jDKHttpClientConfig0, jDKHttpClient0);
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareRequestTokenRequest();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("lM&x72", "lM&x72", "lM&x72", "", dataOutputStream0, ":80/", "", "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("com.github.scribejava.core.exceptions.OAuthSignatureException", "", "");
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", true, "");
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, "signing request: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      MockFile mockFile0 = new MockFile("BV0F>Jv5T<F-+'IN}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      mockFileOutputStream0.close();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("Received an invalid parameter", "Received an invalid parameter", "Received an invalid parameter", "", mockFileOutputStream0, "za=$c", "", "&1H}Wj~b,<aHc", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("OAuth parameters must either be '%s', '%s' or start with '%s'", "OAuth parameters must either be '%s', '%s' or start with '%s'");
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QueryString;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("s", "s").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      OAuthConfig oAuthConfig0 = new OAuthConfig("s", "s");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("oauth_nonce", "oauth_nonce");
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("oauth_nonce", ";) vY@~1U\"3");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 103);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "?SjF", "", bufferedOutputStream0, "qf3sO x1x!L_", "?SjF", "WiP~-|<H%;rbzRs9", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("WiP~-|<H%;rbzRs9", "<=QGGoUld", false, "");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "2%cq!lr>[ch9", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync((OAuth1RequestToken) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("oauth_version").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QueryString;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      OAuthConfig oAuthConfig0 = new OAuthConfig("h7A41v", "h7A41v");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("}", "h7A41v", "");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "(!?gQ6D:=sCdzd!m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("X", "G;ITQ.{,4C`$#SOe", "oauth_nonce", "Content-Type", dataOutputStream0, "oauth_nonce", "G;ITQ.{,4C`$#SOe", "using base64 encoder: ", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("|+Rh5 DsV>", "X");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, "X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("https://").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("V&eM^J[/1", "https://").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((BaseStringExtractor) null).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      OAuthConfig oAuthConfig0 = new OAuthConfig(")']09n]^y", "V&eM^J[/1");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("https://", "");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, "https://");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.Header;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((HeaderExtractor) null).when(defaultApi10a0).getHeaderExtractor();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuth10aService0.appendSignature(oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.addOAuthParams((OAuthRequest) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = null;
      try {
        oAuth10aService0 = new OAuth10aService(defaultApi10a0, (OAuthConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      String string0 = oAuth10aService0.getVersion();
      assertEquals("1.0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", false, "");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.Header;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      OAuthConfig oAuthConfig0 = new OAuthConfig("(", "(");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "(");
      oAuth10aService0.appendSignature(oAuthRequest0);
      assertNull(oAuthRequest0.getRealm());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("UTF8").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("UTF8").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("+").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, (SignatureService) null).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      doReturn(false).when(defaultApi10a0).isEmptyOAuthTokenParamIsRequired();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF8");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null, (String) null, "", mockFileOutputStream0, (String) null, "Pu:P", "Pu:P", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("", "", "");
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("UTF8").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("UTF8").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, (SignatureService) null).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      doReturn(true).when(defaultApi10a0).isEmptyOAuthTokenParamIsRequired();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jMGdy", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null, (String) null, "", mockFileOutputStream0, (String) null, "jMGdy", "jMGdy", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("", "", "");
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("encodeInteger called with null parameter").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("yqb8|$w>z5ZQZ").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QueryString;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      OAuthConfig oAuthConfig0 = new OAuthConfig("h7A41v", "h7A41v");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("encodeInteger called with null parameter", "yqb8|$w>z5ZQZ");
      oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, "");
      assertEquals("1.0", oAuth10aService0.getVersion());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("oauth_nonce", "oauth_nonce", "", "", pipedOutputStream0, "", "", "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jzy", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null, (String) null, "", mockFileOutputStream0, (String) null, "uP", "uP", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("uP", "", true, "");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      MockFile mockFile0 = new MockFile("BV0F>Jv5T<F-+'IN}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("Received an invalid parameter", "Received an invalid parameter", "Received an invalid parameter", "", mockFileOutputStream0, "za=$c", "", "&1H}Wj~b,<aHc", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "", "", pipedOutputStream0, "", "k&4BhS(AD", "Content-Length", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("PUT", "PUT", "PUT");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "Ir^ 7RjDo+C\"d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("@)hPmi`Xtws").when(timestampService0).getTimestampInSeconds();
      Verb verb0 = Verb.TRACE;
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((BaseStringExtractor) null).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("DatatypeConverter").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("N(osnqNh,;<0", "Response{code=", "JzkgHaY+#}e+#C4&", "kD}2C", byteArrayOutputStream0, "Ne", "Response{code=", "Response{code=", jDKHttpClientConfig0, (HttpClient) null);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareRequestTokenRequest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
}
