/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:48:11 GMT 2017
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.Response;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Response_ESTest extends Response_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Response response0 = new Response(400, "#vog", hashMap0, sequenceInputStream0);
      boolean boolean0 = response0.isSuccessful();
      assertFalse(boolean0);
      assertEquals(400, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Response response0 = new Response((-24), (String) null, hashMap0, byteArrayInputStream0);
      response0.getBody();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-522), 0);
      Response response0 = new Response(0, (String) null, hashMap0, byteArrayInputStream0);
      response0.getStream();
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-553), (String) null, hashMap0, "Content-Encoding");
      response0.getMessage();
      assertEquals((-553), response0.getCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Response response0 = new Response(125, "", (Map<String, String>) null, "");
      response0.getMessage();
      assertEquals(125, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-1), "", hashMap0, "");
      response0.getHeaders();
      assertEquals((-1), response0.getCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      hashMap0.put((String) null, (String) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-522), 0);
      Response response0 = new Response(0, (String) null, hashMap0, byteArrayInputStream0);
      response0.getHeaders();
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1, ", message='", hashMap0, "");
      response0.getHeader(", message='");
      assertEquals(1, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "q");
      Response response0 = new Response((-553), (String) null, hashMap0, "Content-Encoding");
      response0.getHeader((String) null);
      assertEquals((-553), response0.getCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Response response0 = new Response(0, "", hashMap0, "%&");
      response0.getHeader("");
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-522), 0);
      Response response0 = new Response(0, (String) null, hashMap0, byteArrayInputStream0);
      int int0 = response0.getCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-553), (String) null, hashMap0, "Content-Encoding");
      int int0 = response0.getCode();
      assertEquals((-553), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, "%&");
      String string0 = response0.getBody();
      assertNotNull(string0);
      assertEquals(0, response0.getCode());
      assertEquals("%&", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Response response0 = new Response(1774, "", (Map<String, String>) null, pipedInputStream0);
      // Undeclared exception!
      try { 
        response0.getBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      Response response0 = new Response(719, "3<,#R", hashMap0, pushbackInputStream0);
      try { 
        response0.getBody();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      String string0 = response0.getBody();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(586, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(200, "", hashMap0, "");
      boolean boolean0 = response0.isSuccessful();
      assertTrue(boolean0);
      assertEquals(200, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      boolean boolean0 = response0.isSuccessful();
      assertFalse(boolean0);
      assertEquals(586, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-522), 0);
      Response response0 = new Response(0, (String) null, hashMap0, byteArrayInputStream0);
      boolean boolean0 = response0.isSuccessful();
      assertEquals(0, response0.getCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "jvfL", hashMap0, (InputStream) null);
      response0.getBody();
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      // Undeclared exception!
      try { 
        response0.getHeader("Response{code=586, message='t:3B0RA@)8*y~(avsHJ', body='', headers=null}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      int int0 = response0.getCode();
      assertEquals(586, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      response0.getStream();
      assertEquals(586, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      String string0 = response0.toString();
      assertEquals("Response{code=586, message='t:3B0RA@)8*y~(avsHJ', body='', headers=null}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      response0.getMessage();
      assertEquals(586, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 1931);
      Response response0 = new Response(125, ", message='", hashMap0, bufferedInputStream0);
      // Undeclared exception!
      try { 
        response0.getBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Response response0 = new Response(586, "t:3B0RA@)8*y~(avsHJ", (Map<String, String>) null, "");
      response0.getHeaders();
      assertEquals(586, response0.getCode());
  }
}
