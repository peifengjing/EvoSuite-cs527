/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:09:01 GMT 2017
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.api.DefaultApi20;
import com.github.scribejava.core.builder.api.OAuth2SignatureType;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.HttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.model.OAuth2AccessToken;
import com.github.scribejava.core.model.OAuth2Authorization;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthConfig;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Verb;
import com.github.scribejava.core.oauth.OAuth20ApiUnit;
import com.github.scribejava.core.oauth.OAuth20Service;
import com.github.scribejava.core.oauth.OAuth20ServiceUnit;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.net.MalformedURLException;
import java.net.UnknownServiceException;
import java.util.Map;
import java.util.concurrent.Future;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth20Service_ESTest extends OAuth20Service_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("The refreshToken cannot be null or empty", (String) null);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuth2Authorization oAuth2Authorization0 = oAuth20Service0.extractAuthorization("=s={BM");
      assertNull(oAuth2Authorization0.getState());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("i;1+", (String) null);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("i;1+", (String) null);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createRefreshTokenRequest("i;1+");
      oAuth20ServiceUnit0.signRequest(oAuth2AccessToken0, oAuthRequest0);
      assertNull(oAuth2AccessToken0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig(")A]lf,R>8.rj", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", (OutputStream) null, (String) null, ")A]lf,R>8.rj", "F^'W?9 dUUpR\"63r%w", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "F^'W?9 dUUpR\"63r%w");
      OAuth2AccessToken oAuth2AccessToken0 = oAuth20ServiceUnit0.sendAccessTokenRequestSync(oAuthRequest0);
      assertNull(oAuth2AccessToken0.getRefreshToken());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "'rWs`mU0");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<OAuth2AccessToken> future0 = oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("Unterminated arrXay", "Unterminated arrXay");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("Unterminated arrXay", "Co;=#z-0vrc>$");
      Future<OAuth2AccessToken> future0 = oAuth20ServiceUnit0.sendAccessTokenRequestAsync(oAuthRequest0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("<+`qi;b=l", "<+`qi;b=l");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      Future<OAuth2AccessToken> future0 = oAuth20Service0.refreshAccessTokenAsync("<+`qi;b=l");
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("DNx\"p4n%(AwOjEP", "DNx\"p4n%(AwOjEP");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<OAuth2AccessToken> future0 = oAuth20Service0.refreshAccessToken("Basic ", oAuthAsyncRequestCallback0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig(")A]lf,R>8.rj", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", (OutputStream) null, (String) null, ")A]lf,R>8.rj", "F^'W?9 dUUpR\"63r%w", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuth2AccessToken oAuth2AccessToken0 = oAuth20Service0.refreshAccessToken("The refreshToken cannot be null or empty");
      assertEquals("ae82980abab675c646a070686d5558ad", oAuth2AccessToken0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig(")A]lf,R>8.rj", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", (OutputStream) null, (String) null, ")A]lf,R>8.rj", "F^'W?9 dUUpR\"63r%w", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      String string0 = oAuth20Service0.getAuthorizationUrl();
      assertEquals("http://localhost:8080/authorize?response_type=%29A%5Dlf%2CR%3E8.rj&client_id=%29A%5Dlf%2CR%3E8.rj&redirect_uri=%28Wz.%24%26v%24X%3E%20UfV%3Dal&scope=%28Wz.%24%26v%24X%3E%20UfV%3Dal", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("&<4ohgabU3Uz", "&<4ohgabU3Uz");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      DefaultApi20 defaultApi20_0 = oAuth20Service0.getApi();
      assertEquals(OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER, defaultApi20_0.getSignatureType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig(")A]lf,R>8.rj", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", (OutputStream) null, (String) null, ")A]lf,R>8.rj", "F^'W?9 dUUpR\"63r%w", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuth2AccessToken oAuth2AccessToken0 = oAuth20Service0.getAccessTokenPasswordGrant("The refreshToken cannot be null or empty", "");
      assertEquals("ae82980abab675c646a070686d5558ad", oAuth2AccessToken0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("grant_type", "'O|?J$^U\"9tAG73|");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessTokenAsync("'O|?J$^U\"9tAG73|");
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("%s:%s", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenPasswordGrantRequest("", "#EU~1ZM\"uAyjI{>d#");
      oAuthRequest0.setCharset("\"access_token\"s*:s*\"(S*?)\"");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: \"access_token\"s*:s*\"(S*?)\"
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenPasswordGrantRequest("", "");
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("jFH9yE#", "w,D3z~u", "jFH9yE#", "w0#{^A]0|_uwf", pipedOutputStream0, "7=SK(K`SX6AYui", "7=SK(K`SX6AYui", "", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("");
      MockFile mockFile0 = new MockFile("", "2.0");
      oAuthRequest0.setPayload((File) mockFile0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient do not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("c1JVq+#");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("Rd", "Rd", "Rd", (String) null, dataOutputStream0, "", "Rd", "7%j1AiOq`|)^],E", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20ServiceUnit0.sendAccessTokenRequestSync((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20ServiceUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("&", "&", "&", "&", (OutputStream) null, "authorization_code", "authorization_code", "cY^t+-0Lbi4azP`", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Integer integer0 = new Integer((-342));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createRefreshTokenRequest("T L5`rl HuTRa");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "Basic ");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("Content-Length");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "'rWs`mU0");
      oAuthRequest0.setCharset("");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: 
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("&4U", " *with no args");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createRefreshTokenRequest(" *with no args");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      MockFile mockFile0 = new MockFile("");
      oAuthRequest0.setPayload((File) mockFile0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient do not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("Basic ", "code");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20ServiceUnit0.sendAccessTokenRequestAsync((OAuthRequest) null, oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20ServiceUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer((-1134));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("r>cWxM;dh&7hi$/M-i", "F}@/+h<[D aqV:;h!B", "r>cWxM;dh&7hi$/M-i", "'3(", pipedOutputStream0, "F}@/+h<[D aqV:;h!B", "", "fLOZ", jDKHttpClientConfig0, (HttpClient) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("#v7#'0rM86$,", "#v7#'0rM86$,");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest((String) null);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("Content-Type", "Content-Type");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ":^|*{SOm5R>]7jKj");
      oAuthRequest0.setCharset(":^|*{SOm5R>]7jKj");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: :^|*{SOm5R>]7jKj
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("code");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "", "", mockFileOutputStream0, "code", "Basic ", "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("|&z1<BM Bp(8G-#0");
      Integer integer0 = new Integer((-1764));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("^J.QzeWQ&H$", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("NaN");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("UTF-8", "UTF-8", "UTF-8", "UTF-8", (OutputStream) null, "UTF-8", "UTF-8", "UTF-8", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Integer integer0 = new Integer((-35));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("V>cENaEJcCnS]CpD", "V>cENaEJcCnS]CpD");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("O_oAOm");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("[.> of", "", "TwAr>9g8|d=SR<=H", "Mpe9-mb_", mockPrintStream0, "O_oAOm", "Infinity", "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("Mpe9-mb_", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockPrintStream mockPrintStream0 = new MockPrintStream("E[Pi,");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Integer integer0 = new Integer((-8));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("E[Pi,", "encodeInteger called with null parameter", "W|1)B\"mA", "", mockPrintStream0, "W|1)B\"mA", "E[Pi,", "W|1)B\"mA", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("encodeInteger called with null parameter", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("com.github.scribejava.core.oauth.OAuth20Service", "ab` uZAx");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(" with no args");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockPrintStream mockPrintStream0 = new MockPrintStream("E[Pi,");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Integer integer0 = new Integer((-8));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("E[Pi,", "encodeInteger called with null parameter", "W|1)B\"mA", "", mockPrintStream0, "W|1)B\"mA", "E[Pi,", "W|1)B\"mA", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("encodeInteger called with null parameter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "&(mJ-yQ$Nvr\"Q");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("F[>Q)>Xo!?mWFP %)D", "6q9L}yK~eW$UD!?<E");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createRefreshTokenRequest("F[>Q)>Xo!?mWFP %)D");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      // Undeclared exception!
      try { 
        oAuth20ServiceUnit0.getAuthorizationUrl(map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", (String) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("Unsupported Charset: ", ">%~zN 5}hn;U]c");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(">%~zN 5}hn;U]c", "", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", (String) null, (String) null, (String) null, pipedOutputStream0, "", "", "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync((String) null, "", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("org.apache.commons.codec.binary.Base64", "org.apache.commons.codec.binary.Base64");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(".%g*w!", "org.apache.commons.codec.binary.Base64");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("|", "|", "|", "2.0", pipedOutputStream0, (String) null, "4@WR^~5WFcB7`F", (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Integer integer0 = Integer.getInteger("M7^|Ey3Z:1", (-40));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("M7^|Ey3Z:1", "M7^|Ey3Z:1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("authorization_code", "Iuchm");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("authorization_code", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("UTF-8", "", "", "W!7^-Y?&-", (OutputStream) null, "W!7^-Y?&-", "W!7^-Y?&-", "UTF-8", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Integer integer0 = new Integer((-1375));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("", "code");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("b^!", "]P: R", "]P: R", "]P: R", (OutputStream) null, "authorization_code", "", "cY^t+-0Lbi4azP`", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("]P: R", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("g'\"E=~6>XR-0`wc~", "g'\"E=~6>XR-0`wc~");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync("g'\"E=~6>XR-0`wc~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "WJ`%e}Zm,mB");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("Av{Z7NjeTBHlIF", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("b!", "b!", "b!", "b!", (OutputStream) null, "authoCization_coze", "authoCization_coze", "cY^t+-0Lbi4azP`", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Integer integer0 = new Integer((-1391));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("b!", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("V8OVPe!6]X[_pyhCqz?", "V8OVPe!6]X[_pyhCqz?");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("O-`Pg%`4", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("b!", "b!", "b!", "b!", (OutputStream) null, "authorization_code", "authorization_code", "cY^t+-0Lbi4azP`", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Integer integer0 = new Integer((-60));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("authorization_code");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("com.github.scribejava.core.oauth.OAuth20Service", "wc<.'_^#={;n7");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("wc<.'_^#={;n7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("Unterm_na/tedUarray", "Unterm_na/tedUarray");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.extractAuthorization("ZGOi,#Tdr/T#?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bwdWZ");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("response_type", "G_T0MQexVotm%", (String) null, (String) null, mockPrintStream0, (String) null, "response_type", "bwdWZ", jDKHttpClientConfig0, (HttpClient) null);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.extractAuthorization((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createRefreshTokenRequest("but got: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("x>XdS", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenRequest("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("redirect_uri", (String) null, "=", "=", (OutputStream) null, "K-zkFd>j!B1^O~s!", (String) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenPasswordGrantRequest("authorization_code", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuth20Service oAuth20Service0 = null;
      try {
        oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, (OAuthConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("UTF-8", "", "", "W!7^-Y?&-", (OutputStream) null, "W!7^-Y?&-", "W!7^-Y?&-", "UTF-8", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessToken("W!7^-Y?&-", oAuthAsyncRequestCallback0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("UTF-8", "UTF-8", "UTF-8", "UTF-8", (OutputStream) null, "UTF-8", "UTF-8", "UTF-8", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("UTF-8");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      String string0 = oAuth20Service0.getAuthorizationUrl(map0);
      assertEquals("http://localhost:8080/authorize?response_type=UTF-8&client_id=UTF-8&redirect_uri=UTF-8&scope=UTF-8&state=UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("UTF-8", "UTF-8", "UTF-8", "UTF-8", (OutputStream) null, "UTF-8", "UTF-8", "UTF-8", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuth2Authorization oAuth2Authorization0 = oAuth20Service0.extractAuthorization("http://localhost:8080/authorize?response_type=UTF-8&client_id=UTF-8&redirect_uri=UTF-8&scope=UTF-8&state=UTF-8");
      assertEquals("UTF-8", oAuth2Authorization0.getState());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("b^!", "]P: R", "]P: R", "]P: R", (OutputStream) null, "authorization_code", "", "cY^t+-0Lbi4azP`", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuth2Authorization oAuth2Authorization0 = oAuth20Service0.extractAuthorization("");
      assertNull(oAuth2Authorization0.getState());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("The refreshToken cannot be null or empty", (String) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessTokenPasswordGrantAsync("The refreshToken cannot be null or empty", "S(A6C/S z3?RJ,%%", oAuthAsyncRequestCallback0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessTokenPasswordGrantAsync((String) null, (String) null);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("query-", (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig(")A]lf,R>8.rj", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", "(Wz.$&v$X> UfV=al", (OutputStream) null, (String) null, ")A]lf,R>8.rj", "F^'W?9 dUUpR\"63r%w", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20ServiceUnit0.createRefreshTokenRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("i;1+", (String) null);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("i;1+", (String) null);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuth2AccessToken oAuth2AccessToken0 = oAuth20Service0.getAccessToken("i;1+");
      assertEquals("ae82980abab675c646a070686d5558ad", oAuth2AccessToken0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("51yr", "O_oA5m");
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, oAuthConfig0);
      DefaultApi20 defaultApi20_0 = oAuth20Service0.getApi();
      assertNull(defaultApi20_0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockPrintStream mockPrintStream0 = new MockPrintStream("4#nK^^(q?Y[39'");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("am@yNOAQOJxt1AlD=*", "4#nK^^(q?Y[39'", "com.github.scribejava.core.model.OAuthRequest", "com.github.scribejava.core.model.OAuthRequest", mockPrintStream0, "com.github.scribejava.core.model.OAuthRequest", "com.github.scribejava.core.model.OAuthRequest", "b]h?~C^*7_5Z?>", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync("4#nK^^(q?Y[39'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("b^!", "]P: R", "]P: R", "]P: R", (OutputStream) null, "authorization_code", "", "cY^t+-0Lbi4azP`", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      String string0 = oAuth20Service0.getVersion();
      assertEquals("2.0", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("b!", "b!", "b!", "b!", (OutputStream) null, "authorization_code", "authorization_code", "cY^t+-0Lbi4azP`", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      try { 
        oAuth20Service0.getAccessToken("authorization_code");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockPrintStream mockPrintStream0 = new MockPrintStream("E[Pi,");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("E[Pi,", "encodeInteger called with null parameter", "W|1)B\"mA", "", mockPrintStream0, "W|1)B\"mA", "E[Pi,", "W|1)B\"mA", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      try { 
        oAuth20Service0.refreshAccessToken("encodeInteger called with null parameter");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("UTF-8", "UTF-8", "UTF-8", "UTF-8", (OutputStream) null, "UTF-8", "UTF-8", "UTF-8", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync("UTF-8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("DNx\"p4n%(AwOjEP", "DNx\"p4n%(AwOjEP");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("UTF-8", "", "", "W!7^-Y?&-", (OutputStream) null, "W!7^-Y?&-", "W!7^-Y?&-", "UTF-8", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("", "code");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("aXtf<", "7");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.signRequest((OAuth2AccessToken) null, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.builder.api.OAuth2SignatureType$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("code");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "", "", mockFileOutputStream0, "code", "Basic ", "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("|&z1<BM Bp(8G-#0");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }
}
