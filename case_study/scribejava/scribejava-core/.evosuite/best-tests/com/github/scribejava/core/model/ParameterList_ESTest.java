/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:14:09 GMT 2017
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.Parameter;
import com.github.scribejava.core.model.ParameterList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterList_ESTest extends ParameterList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.addQuerystring("x\"/\"G");
      parameterList0.sort();
      assertEquals(1, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      int int0 = parameterList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      List<Parameter> list0 = parameterList0.getParams();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      String string0 = parameterList0.asOauthBaseString();
      assertEquals("%3D", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      Parameter parameter0 = new Parameter((String) null, "%3D%266%3D6");
      // Undeclared exception!
      try { 
        parameterList0.contains(parameter0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.asOauthBaseString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add((String) null, "");
      // Undeclared exception!
      try { 
        parameterList0.asOauthBaseString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.offerLast((Parameter) null);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.asFormUrlEncodedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.add("", (String) null);
      // Undeclared exception!
      try { 
        parameterList0.asFormUrlEncodedString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.appendTo("'P=u&77iAP9iC!b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      // Undeclared exception!
      try { 
        parameterList0.appendTo((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      // Undeclared exception!
      try { 
        parameterList0.addQuerystring("=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.github.scribejava.core.model.ParameterList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.addAll((ParameterList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.ParameterList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterList parameterList0 = null;
      try {
        parameterList0 = new ParameterList((List<Parameter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      String string0 = parameterList0.asFormUrlEncodedString();
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      List<Parameter> list0 = parameterList0.getParams();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      ParameterList parameterList0 = new ParameterList(linkedList0);
      String string0 = parameterList0.asFormUrlEncodedString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.addQuerystring("x\"/\"G");
      Parameter parameter0 = new Parameter("x\"/\"G", "");
      boolean boolean0 = parameterList0.contains(parameter0);
      assertEquals(1, parameterList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      Parameter parameter0 = new Parameter("O[!t`$>", "");
      boolean boolean0 = parameterList0.contains(parameter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.addQuerystring("#YLRlGV/ox&Q=.");
      assertEquals(2, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring("vB~uR4u],&)*[H?<ha");
      parameterList0.add((String) null, "");
      // Undeclared exception!
      try { 
        parameterList0.sort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring("");
      assertEquals(0, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      // Undeclared exception!
      try { 
        parameterList0.addQuerystring(":%@e(kT$tqj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"@e\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.addQuerystring((String) null);
      assertEquals(0, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add("", "");
      String string0 = parameterList0.appendTo("V])Ao)?4F>I$W8ik}");
      assertEquals("V])Ao)?4F>I$W8ik}&=", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      String string0 = parameterList0.appendTo("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      String string0 = parameterList0.appendTo("");
      assertEquals("?=", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList((Map<String, String>) null);
      assertEquals(0, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addAll(parameterList0);
      assertEquals(0, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      int int0 = parameterList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      String string0 = parameterList0.asOauthBaseString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      ParameterList parameterList1 = parameterList0.sort();
      assertNotSame(parameterList1, parameterList0);
  }
}
