/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:12:32 GMT 2017
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth2AccessTokenErrorResponse_ESTest extends OAuth2AccessTokenErrorResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.unsupported_grant_type;
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, (String) null, uRI0, (String) null);
      String string0 = oAuth2AccessTokenErrorResponse0.getRawResponse();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_request;
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, "lm6k:&i;L!:Wu", (URI) null, "lm6k:&i;L!:Wu");
      String string0 = oAuth2AccessTokenErrorResponse0.getRawResponse();
      assertEquals("lm6k:&i;L!:Wu", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_request;
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, "lm6k:&i;L!:Wu", (URI) null, "lm6k:&i;L!:Wu");
      URI uRI0 = oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.unsupported_grant_type;
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, (String) null, uRI0, (String) null);
      URI uRI1 = oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertEquals((-1), uRI1.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_scope;
      URI uRI0 = MockURI.URI("com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", 0, "", "", "");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, "com.github.scribejava.core.exceptions.OAuthException", uRI0, "");
      oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertEquals("", oAuth2AccessTokenErrorResponse0.getRawResponse());
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuth2AccessTokenErrorResponse0.getErrorDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.unauthorized_client;
      URI uRI0 = MockURI.URI("t:3", "", "[vGrqZ%+_@A");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, "", uRI0, "[vGrqZ%+_@A");
      oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertEquals("[vGrqZ%+_@A", oAuth2AccessTokenErrorResponse0.getRawResponse());
      assertEquals("", oAuth2AccessTokenErrorResponse0.getErrorDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.unauthorized_client;
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, (String) null, (URI) null, "BRC");
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_grant;
      URI uRI0 = MockURI.URI("");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, "", uRI0, "*=Tk7tVK=A4gH=6");
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
      assertEquals("", string0);
      assertEquals("*=Tk7tVK=A4gH=6", oAuth2AccessTokenErrorResponse0.getRawResponse());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.URI("b&");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = null;
      try {
        oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse((OAuth2AccessTokenErrorResponse.ErrorCode) null, "b&", uRI0, "b&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // errorCode must not be null
         //
         verifyException("com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_scope;
      URI uRI0 = MockURI.URI("com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", "com.github.scribejava.core.exceptions.OAuthException", 23, "", "", "");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, "com.github.scribejava.core.exceptions.OAuthException", uRI0, "");
      oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertEquals("com.github.scribejava.core.exceptions.OAuthException", oAuth2AccessTokenErrorResponse0.getErrorDescription());
      assertEquals("", oAuth2AccessTokenErrorResponse0.getRawResponse());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_scope;
      URI uRI0 = MockURI.URI("");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, ":", uRI0, "");
      oAuth2AccessTokenErrorResponse0.getErrorCode();
      assertEquals(":", oAuth2AccessTokenErrorResponse0.getErrorDescription());
      assertEquals("", oAuth2AccessTokenErrorResponse0.getRawResponse());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_scope;
      URI uRI0 = MockURI.URI("");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, ":", uRI0, "");
      String string0 = oAuth2AccessTokenErrorResponse0.getRawResponse();
      assertEquals(":", oAuth2AccessTokenErrorResponse0.getErrorDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuth2AccessTokenErrorResponse.ErrorCode oAuth2AccessTokenErrorResponse_ErrorCode0 = OAuth2AccessTokenErrorResponse.ErrorCode.invalid_scope;
      URI uRI0 = MockURI.URI("");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2AccessTokenErrorResponse_ErrorCode0, ":", uRI0, "");
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
      assertEquals("", oAuth2AccessTokenErrorResponse0.getRawResponse());
      assertEquals(":", string0);
  }
}
