/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 02:23:41 GMT 2017
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.api.DefaultApi10a;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.HttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpProvider;
import com.github.scribejava.core.model.OAuth1AccessToken;
import com.github.scribejava.core.model.OAuth2AccessToken;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthConfig;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Response;
import com.github.scribejava.core.model.Verb;
import com.github.scribejava.core.oauth.OAuth10aService;
import com.github.scribejava.core.oauth.OAuth20ApiUnit;
import com.github.scribejava.core.oauth.OAuth20Service;
import com.github.scribejava.core.oauth.OAuth20ServiceUnit;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.MalformedURLException;
import java.net.UnknownServiceException;
import java.util.concurrent.Future;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuthService_ESTest extends OAuthService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", pipedOutputStream0, "http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", jDKHttpClientConfig0, (HttpClient) null);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("http://localhost:8080/token", "http://localhost:8080/token");
      OAuth2AccessToken oAuth2AccessToken0 = oAuth20ServiceUnit0.sendAccessTokenRequestSync(oAuthRequest0);
      oAuth20ServiceUnit0.signRequest(oAuth2AccessToken0, oAuthRequest0);
      assertNull(oAuthRequest0.getStringPayload());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k8Qe?rv%LV.bk8", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "w?Byv`E1*(A|@.b", "", "", mockPrintStream0, "", "async obtaining request token from ", "", jDKHttpClientConfig0, httpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      String string0 = oAuth10aService0.getVersion();
      assertEquals("1.0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("", "");
      oAuthRequest0.setPayload("");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      Future<Response> future0 = oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OAuthConfig oAuthConfig0 = new OAuthConfig("e4|N%6Ee", "e4|N%6Ee", "e4|N%6Ee", "e4|N%6Ee", pipedOutputStream0, (String) null, "B9=:.=7:Ds`xw9", "7Zuitjjzs7*", (HttpClientConfig) null, (HttpClient) null);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("B9=:.=7:Ds`xw9", "7Zuitjjzs7*", "");
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createRefreshTokenRequest("#8W;\"~");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OAuthConfig oAuthConfig0 = new OAuthConfig("&.9fE%z-?", "&.9fE%z-?", "", "com.google.gson.FieldNamingPolicy$1", byteArrayOutputStream0, "&.9fE%z-?", "&.9fE%z-?", "com.google.gson.FieldNamingPolicy$1", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "&.9fE%z-?");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest((OAuth1AccessToken) null, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "Add)%=EA`x0(R");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("ZI'w:r@T.5:5W*!gVs", "");
      oAuthRequest0.setCharset("\"&\u0001|JUP");
      // Undeclared exception!
      try { 
        oAuth10aService0.executeAsync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: \"&\u0001|JUP
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", pipedOutputStream0, "http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", jDKHttpClientConfig0, (HttpClient) null);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      Integer integer0 = new Integer((-2518));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createRefreshTokenRequest("http://localhost:8080/token");
      // Undeclared exception!
      try { 
        oAuth20ServiceUnit0.executeAsync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuthConfig oAuthConfig0 = new OAuthConfig("4dcmVznD4F% s;p", "cH>)AJB8)>&b");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenRequest("d.\"diAVr^");
      // Undeclared exception!
      try { 
        oAuth10aService0.executeAsync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      OAuthAsyncRequestCallback<JDKHttpProvider> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<JDKHttpProvider>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<JDKHttpProvider> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<JDKHttpProvider>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      oAuthRequest0.setCharset("hW$eY6Ka");
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: hW$eY6Ka
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("Wk7.9r%;#$UWP E", "Wk7.9r%;#$UWP E", "Wk7.9r%;#$UWP E", "Wk7.9r%;#$UWP E", pipedOutputStream0, "", "", "&", jDKHttpClientConfig0, (HttpClient) null);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenRequest("");
      OAuthRequest.ResponseConverter<Object> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Object>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Object>) null, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("", "");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      oAuthRequest0.setCharset("");
      // Undeclared exception!
      try { 
        oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: 
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuthConfig oAuthConfig0 = new OAuthConfig("username", "username");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "\"error_uri\"s*:s*\"(S*?)\"");
      MockFile mockFile0 = new MockFile("username", "\"error_uri\"s*:s*\"(S*?)\"");
      oAuthRequest0.setPayload((File) mockFile0);
      // Undeclared exception!
      try { 
        oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient do not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest("x**Lhe$BNKu#(ws*");
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuthConfig oAuthConfig0 = new OAuthConfig("pr", "Attempted to serialize java.lang.Class: ");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      try { 
        oAuth10aService0.execute(oAuthRequest0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "Add)%=EA`x0(R");
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth20Service0.execute((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("? U", "//$(=jqa", (String) null, "", (OutputStream) null, "//$(=jqa", "//$(=jqa", "", jDKHttpClientConfig0, httpClient0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenRequest("//$(=jqa");
      // Undeclared exception!
      try { 
        oAuth10aService0.execute(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("", "");
      oAuthRequest0.setPayload("");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuthAsyncRequestCallback<Object> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Object>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Object> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Object>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      Future<Object> future0 = oAuth10aService0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(oAuth20ApiUnit0, oAuthConfig0);
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      MockFile mockFile0 = new MockFile("8g{[3jLYL`X[E_Xw");
      oAuthRequest0.setPayload((File) mockFile0);
      OAuthAsyncRequestCallback<JDKHttpProvider> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<JDKHttpProvider>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<JDKHttpProvider> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<JDKHttpProvider>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient do not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("Wk7.9r%;#$UWP E", "Wk7.9r%;#$UWP E", "Wk7.9r%;#$UWP E", "Wk7.9r%;#$UWP E", pipedOutputStream0, "", "", "&", jDKHttpClientConfig0, (HttpClient) null);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuthConfig oAuthConfig1 = oAuth10aService0.getConfig();
      assertSame(oAuthConfig0, oAuthConfig1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("", "");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      // Undeclared exception!
      try { 
        oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest("", "");
      oAuthRequest0.setPayload("");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      try { 
        oAuth10aService0.execute(oAuthRequest0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig(">siWDI<\"v8", ">siWDI<\"v8");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest(">siWDI<\"v8", ">siWDI<\"v8");
      oAuthRequest0.setPayload(">siWDI<\"v8");
      Future<Response> future0 = oAuth10aService0.executeAsync(oAuthRequest0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      OAuthConfig oAuthConfig0 = new OAuthConfig(">siWDI<\"v8", ">siWDI<\"v8");
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = (OAuth20ServiceUnit)oAuth20ApiUnit0.createService(oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createAccessTokenPasswordGrantRequest(">siWDI<\"v8", ">siWDI<\"v8");
      MockFile mockFile0 = new MockFile("", "");
      oAuthRequest0.setPayload((File) mockFile0);
      // Undeclared exception!
      try { 
        oAuth10aService0.executeAsync(oAuthRequest0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient do not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "", "", "", (OutputStream) null, "", "", "", (HttpClientConfig) null, jDKHttpClient0);
      OAuth20Service oAuth20Service0 = oAuth20ApiUnit0.createService(oAuthConfig0);
      assertEquals("2.0", oAuth20Service0.getVersion());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, oAuthConfig0);
      oAuth10aService0.close();
      assertEquals("1.0", oAuth10aService0.getVersion());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OAuth20ApiUnit oAuth20ApiUnit0 = new OAuth20ApiUnit();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuthConfig oAuthConfig0 = new OAuthConfig("http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", pipedOutputStream0, "http://localhost:8080/token", "http://localhost:8080/token", "http://localhost:8080/token", jDKHttpClientConfig0, (HttpClient) null);
      OAuth20ServiceUnit oAuth20ServiceUnit0 = new OAuth20ServiceUnit(oAuth20ApiUnit0, oAuthConfig0);
      OAuthRequest oAuthRequest0 = oAuth20ServiceUnit0.createRefreshTokenRequest("http://localhost:8080/token");
      // Undeclared exception!
      try { 
        oAuth20ServiceUnit0.executeAsync(oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }
}
