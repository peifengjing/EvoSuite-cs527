/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:43:00 GMT 2017
 */

package com.github.scribejava.httpclient.ning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.httpclient.ning.OAuthAsyncCompletionHandler;
import com.ning.http.client.Response;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuthAsyncCompletionHandler_ESTest extends OAuthAsyncCompletionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuthAsyncRequestCallback<Object> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Object>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Object> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Object>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      OAuthAsyncCompletionHandler<Object> oAuthAsyncCompletionHandler0 = new OAuthAsyncCompletionHandler<Object>(oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
      MockThrowable mockThrowable0 = new MockThrowable();
      oAuthAsyncCompletionHandler0.onThrowable(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuthAsyncCompletionHandler<String> oAuthAsyncCompletionHandler0 = new OAuthAsyncCompletionHandler<String>((OAuthAsyncRequestCallback<String>) null, (OAuthRequest.ResponseConverter<String>) null);
      MockThrowable mockThrowable0 = new MockThrowable("");
      oAuthAsyncCompletionHandler0.onThrowable(mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuthAsyncRequestCallback<Object> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Object>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Object> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Object>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      OAuthAsyncCompletionHandler<Object> oAuthAsyncCompletionHandler0 = new OAuthAsyncCompletionHandler<Object>(oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
      // Undeclared exception!
      try { 
        oAuthAsyncCompletionHandler0.onCompleted((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.httpclient.ning.OAuthAsyncCompletionHandler", e);
      }
  }
}
