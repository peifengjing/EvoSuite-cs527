/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 03:41:17 GMT 2017
 */

package com.github.scribejava.httpclient.ning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Verb;
import com.github.scribejava.httpclient.ning.NingHttpClient;
import com.github.scribejava.httpclient.ning.NingHttpClientConfig;
import com.ning.http.client.AsyncHttpClient;
import com.ning.http.client.AsyncHttpClientConfig;
import com.ning.http.client.AsyncHttpProviderConfig;
import com.ning.http.client.RequestBuilder;
import com.ning.http.client.providers.jdk.JDKAsyncHttpProvider;
import com.ning.http.client.providers.netty.NettyAsyncHttpProvider;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NingHttpClient_ESTest extends NingHttpClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NingHttpClient ningHttpClient0 = new NingHttpClient((AsyncHttpClient) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      MockFile mockFile0 = new MockFile("1~B?#7MoSP#", "1~B?#7MoSP#");
      OAuthAsyncRequestCallback<RequestBuilder> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<RequestBuilder>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<RequestBuilder> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<RequestBuilder>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("1~B?#7MoSP#", (Map<String, String>) hashMap0, verb0, "C?C*-", (File) mockFile0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.httpclient.ning.NingHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NingHttpClient ningHttpClient0 = new NingHttpClient((AsyncHttpClient) null);
      // Undeclared exception!
      try { 
        ningHttpClient0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.httpclient.ning.NingHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHttpProviderConfig) null).when(asyncHttpClientConfig0).getAsyncHttpProviderConfig();
      AsyncHttpClient asyncHttpClient0 = new AsyncHttpClient("v%1M", asyncHttpClientConfig0);
      NingHttpClient ningHttpClient0 = new NingHttpClient(asyncHttpClient0);
      Verb verb0 = Verb.PATCH;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      OAuthAsyncRequestCallback<RequestBuilder> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<RequestBuilder>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<RequestBuilder> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<RequestBuilder>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("v%1M", (Map<String, String>) null, verb0, "v%1M", byteArray0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // message build error: unknown verb type
         //
         verifyException("com.github.scribejava.httpclient.ning.NingHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHttpProviderConfig) null).when(asyncHttpClientConfig0).getAsyncHttpProviderConfig();
      NingHttpClientConfig ningHttpClientConfig0 = new NingHttpClientConfig(asyncHttpClientConfig0);
      NingHttpClientConfig.defaultConfig();
      NingHttpClientConfig.defaultConfig();
      ningHttpClientConfig0.setNingAsyncHttpProviderClassName("");
      NingHttpClientConfig.defaultConfig();
      ningHttpClientConfig0.setNingAsyncHttpProviderClassName("");
      ningHttpClientConfig0.setNingAsyncHttpProviderClassName("");
      NingHttpClientConfig.defaultConfig();
      ningHttpClientConfig0.createDefaultConfig();
      NingHttpClient ningHttpClient0 = new NingHttpClient(ningHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.TRACE;
      // Undeclared exception!
      try { 
        ningHttpClient0.execute("dX5f5t7", (Map<String, String>) hashMap0, verb0, "fw/dHL|D<72g3,vmyJ", "V4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // message build error: unknown verb type
         //
         verifyException("com.github.scribejava.httpclient.ning.NingHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      NingHttpClientConfig ningHttpClientConfig0 = new NingHttpClientConfig(asyncHttpClientConfig0);
      NingHttpClientConfig ningHttpClientConfig1 = ningHttpClientConfig0.createDefaultConfig();
      ningHttpClientConfig1.setNingAsyncHttpProviderClassName("");
      NingHttpClient ningHttpClient0 = new NingHttpClient(ningHttpClientConfig1);
      ningHttpClient0.close();
      ningHttpClient0.close();
      ningHttpClient0.close();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NingHttpClient ningHttpClient0 = new NingHttpClient((AsyncHttpClient) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.OPTIONS;
      MockFile mockFile0 = new MockFile("");
      OAuthAsyncRequestCallback<AsyncHttpClient.BoundRequestBuilder> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<AsyncHttpClient.BoundRequestBuilder>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("", (Map<String, String>) hashMap0, verb0, "", (File) mockFile0, oAuthAsyncRequestCallback0, (OAuthRequest.ResponseConverter<AsyncHttpClient.BoundRequestBuilder>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // message build error: unknown verb type
         //
         verifyException("com.github.scribejava.httpclient.ning.NingHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutorService) null, (ExecutorService) null).when(asyncHttpClientConfig0).executorService();
      doReturn((AsyncHttpProviderConfig) null, (AsyncHttpProviderConfig) null, (AsyncHttpProviderConfig) null).when(asyncHttpClientConfig0).getAsyncHttpProviderConfig();
      doReturn(0, 0).when(asyncHttpClientConfig0).getIoThreadMultiplier();
      doReturn(0, 0, 0, 0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0, 0, 0, 0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(false, false).when(asyncHttpClientConfig0).isAllowPoolingConnections();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundedRequests();
      AsyncHttpClient asyncHttpClient0 = new AsyncHttpClient(asyncHttpClientConfig0);
      NingHttpClient ningHttpClient0 = new NingHttpClient(asyncHttpClient0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.POST;
      MockFile mockFile0 = new MockFile("4TBq06Wim/");
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<String> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<String>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("", (Map<String, String>) hashMap0, verb0, "Content-Type", (File) mockFile0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("com.ning.http.client.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutorService) null).when(asyncHttpClientConfig0).executorService();
      doReturn((AsyncHttpProviderConfig) null).when(asyncHttpClientConfig0).getAsyncHttpProviderConfig();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadMultiplier();
      doReturn(0, 0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0, 0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(false).when(asyncHttpClientConfig0).isAllowPoolingConnections();
      NettyAsyncHttpProvider nettyAsyncHttpProvider0 = null;
      try {
        nettyAsyncHttpProvider0 = new NettyAsyncHttpProvider(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // workerExecutor
         //
         verifyException("org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NingHttpClient ningHttpClient0 = new NingHttpClient((AsyncHttpClient) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.TRACE;
      String string0 = "Null keys are not allowed";
      OAuthAsyncRequestCallback<RequestBuilder> oAuthAsyncRequestCallback0 = null;
      OAuthRequest.ResponseConverter<RequestBuilder> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<RequestBuilder>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("", (Map<String, String>) hashMap0, verb0, "", "Null keys are not allowed", (OAuthAsyncRequestCallback<RequestBuilder>) null, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // message build error: unknown verb type
         //
         verifyException("com.github.scribejava.httpclient.ning.NingHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutorService) null, (ExecutorService) null).when(asyncHttpClientConfig0).executorService();
      doReturn((AsyncHttpProviderConfig) null, (AsyncHttpProviderConfig) null, (AsyncHttpProviderConfig) null).when(asyncHttpClientConfig0).getAsyncHttpProviderConfig();
      doReturn(0, 0).when(asyncHttpClientConfig0).getIoThreadMultiplier();
      doReturn(0, 0, 0, 0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0, 0, 0, 0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(false, false).when(asyncHttpClientConfig0).isAllowPoolingConnections();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundedRequests();
      NingHttpClientConfig ningHttpClientConfig0 = new NingHttpClientConfig(asyncHttpClientConfig0);
      NingHttpClient ningHttpClient0 = new NingHttpClient(ningHttpClientConfig0);
      ningHttpClient0.close();
      String string0 = "V[~).jM||7o";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      OAuthAsyncRequestCallback<AsyncHttpClient.BoundRequestBuilder> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<AsyncHttpClient.BoundRequestBuilder>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      ningHttpClientConfig0.createDefaultConfig();
      OAuthRequest.ResponseConverter<AsyncHttpClient.BoundRequestBuilder> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<AsyncHttpClient.BoundRequestBuilder>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("V[~).jM||7o", (Map<String, String>) hashMap0, verb0, "", "", oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("com.ning.http.client.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NingHttpClient ningHttpClient0 = null;
      try {
        ningHttpClient0 = new NingHttpClient((NingHttpClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.httpclient.ning.NingHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutorService) null, (ExecutorService) null).when(asyncHttpClientConfig0).executorService();
      doReturn((AsyncHttpProviderConfig) null, (AsyncHttpProviderConfig) null, (AsyncHttpProviderConfig) null).when(asyncHttpClientConfig0).getAsyncHttpProviderConfig();
      doReturn(0, 0).when(asyncHttpClientConfig0).getIoThreadMultiplier();
      doReturn(0, 0, 0, 0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0, 0, 0, 0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(false, false).when(asyncHttpClientConfig0).isAllowPoolingConnections();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundedRequests();
      NingHttpClientConfig ningHttpClientConfig0 = new NingHttpClientConfig(asyncHttpClientConfig0);
      NingHttpClient ningHttpClient0 = new NingHttpClient(ningHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.GET;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)0;
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<String> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<String>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("", (Map<String, String>) hashMap0, verb0, "j", byteArray0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("com.ning.http.client.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHttpProviderConfig) null).when(asyncHttpClientConfig0).getAsyncHttpProviderConfig();
      JDKAsyncHttpProvider jDKAsyncHttpProvider0 = new JDKAsyncHttpProvider(asyncHttpClientConfig0);
      AsyncHttpClient asyncHttpClient0 = new AsyncHttpClient(jDKAsyncHttpProvider0);
      NingHttpClient ningHttpClient0 = new NingHttpClient(asyncHttpClient0);
      String string0 = "ZTRDDIXcSai@=";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.POST;
      OAuthAsyncRequestCallback<AsyncHttpClient.BoundRequestBuilder> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<AsyncHttpClient.BoundRequestBuilder>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<AsyncHttpClient.BoundRequestBuilder> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<AsyncHttpClient.BoundRequestBuilder>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ningHttpClient0.executeAsync("ZTRDDIXcSai@=", (Map<String, String>) hashMap0, verb0, "ZTRDDIXcSai@=", "ZTRDDIXcSai@=", oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("com.ning.http.client.uri.Uri", e);
      }
  }
}
