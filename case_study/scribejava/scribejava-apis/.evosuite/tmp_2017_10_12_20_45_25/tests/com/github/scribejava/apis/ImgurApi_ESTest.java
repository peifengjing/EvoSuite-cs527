/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 05:12:55 GMT 2017
 */

package com.github.scribejava.apis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.apis.ImgurApi;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.model.OAuthConfig;
import com.github.scribejava.core.oauth.OAuth20Service;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImgurApi_ESTest extends ImgurApi_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImgurApi imgurApi0 = new ImgurApi();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("", "_g/i@LtaL", "xJ<MSR<}^FZPv8z;K", ";S~!}kGHDMag", byteArrayOutputStream0, "xJ<MSR<}^FZPv8z;K", "xJ<MSR<}^FZPv8z;K", "_g/i@LtaL", jDKHttpClientConfig0, jDKHttpClient0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = imgurApi0.getAuthorizationUrl(oAuthConfig0, hashMap0);
      assertEquals("https://api.imgur.com/oauth2/authorize?response_type=code&client_id=&redirect_uri=xJ%3CMSR%3C%7D%5EFZPv8z%3BK&scope=%3BS~%21%7DkGHDMag&state=xJ%3CMSR%3C%7D%5EFZPv8z%3BK", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OAuthConfig oAuthConfig0 = new OAuthConfig("use getAuthorizationUrl instead", "use getAuthorizationUrl instead");
      boolean boolean0 = ImgurApi.isOob(oAuthConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImgurApi imgurApi0 = ImgurApi.instance();
      OAuthConfig oAuthConfig0 = new OAuthConfig("[ 8okE,oot!=\r", "[ 8okE,oot!=\r");
      OAuth20Service oAuth20Service0 = imgurApi0.createService(oAuthConfig0);
      assertEquals("2.0", oAuth20Service0.getVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImgurApi.isOob((OAuthConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.apis.ImgurApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImgurApi imgurApi0 = new ImgurApi();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        imgurApi0.getAuthorizationUrl((OAuthConfig) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.apis.ImgurApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImgurApi imgurApi0 = new ImgurApi();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig((String) null, (String) null, "", "", (OutputStream) null, "", "there were problems while writting to the debug stream", (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        imgurApi0.getAuthorizationUrl(oAuthConfig0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("oob", "oob", "oob", "oob", byteArrayOutputStream0, "oob", "oob", "oob", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = ImgurApi.isOob(oAuthConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImgurApi imgurApi0 = ImgurApi.instance();
      OAuthConfig oAuthConfig0 = new OAuthConfig("[ 8okE,oot!=\r", "[ 8okE,oot!=\r");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = imgurApi0.getAuthorizationUrl(oAuthConfig0, hashMap0);
      assertEquals("https://api.imgur.com/oauth2/authorize?response_type=code&client_id=%5B%208okE%2Coot%7F%21%3D%0D", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImgurApi imgurApi0 = ImgurApi.instance();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("https://api.imgur.com/oauth2/token");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("GpY", "GpY", "https://api.imgur.com/oauth2/token", "https://api.imgur.com/oauth2/token", mockFileOutputStream0, ", refresh_token=", ", refresh_token=", "https://api.imgur.com/oauth2/token", jDKHttpClientConfig0, jDKHttpClient0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = imgurApi0.getAuthorizationUrl(oAuthConfig0, hashMap0);
      assertEquals("https://api.imgur.com/oauth2/authorize?response_type=code&client_id=GpY&redirect_uri=https%3A%2F%2Fapi.imgur.com%2Foauth2%2Ftoken&scope=https%3A%2F%2Fapi.imgur.com%2Foauth2%2Ftoken&state=%2C%20refresh_token%3D", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImgurApi imgurApi0 = ImgurApi.instance();
      // Undeclared exception!
      try { 
        imgurApi0.getAuthorizationBaseUrl();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // use getAuthorizationUrl instead
         //
         verifyException("com.github.scribejava.apis.ImgurApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImgurApi imgurApi0 = new ImgurApi();
      // Undeclared exception!
      try { 
        imgurApi0.createService((OAuthConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImgurApi imgurApi0 = ImgurApi.instance();
      String string0 = imgurApi0.getAccessTokenEndpoint();
      assertEquals("https://api.imgur.com/oauth2/token", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImgurApi imgurApi0 = new ImgurApi();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthConfig oAuthConfig0 = new OAuthConfig("oob", "oob", "oob", "oob", byteArrayOutputStream0, "oob", "oob", "oob", jDKHttpClientConfig0, jDKHttpClient0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = imgurApi0.getAuthorizationUrl(oAuthConfig0, hashMap0);
      assertEquals("https://api.imgur.com/oauth2/authorize?response_type=pin&client_id=oob&redirect_uri=oob&scope=oob&state=oob", string0);
  }
}
