/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 05:28:09 GMT 2017
 */

package com.github.scribejava.apis.openid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.apis.openid.OpenIdOAuth2AccessToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenIdOAuth2AccessToken_ESTest extends OpenIdOAuth2AccessToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("", "OL.-#b}~<?/)", "");
      openIdOAuth2AccessToken0.hashCode();
      assertEquals("OL.-#b}~<?/)", openIdOAuth2AccessToken0.getOpenIdToken());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("l_", "l_", "[@");
      String string0 = openIdOAuth2AccessToken0.getOpenIdToken();
      assertNotNull(string0);
      assertEquals("l_", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("", "", "");
      String string0 = openIdOAuth2AccessToken0.getOpenIdToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = null;
      try {
        openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken((String) null, "", "M8,*va;{A$(fT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(41);
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = null;
      try {
        openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken((String) null, "", integer0, "", ", expires_in=", (String) null, ", expires_in=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("Q,Pu%", "Q,Pu%", "Q,Pu%");
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken1 = new OpenIdOAuth2AccessToken("Q,Pu%", "Q,Pu%", "Q,Pu%");
      boolean boolean0 = openIdOAuth2AccessToken1.equals(openIdOAuth2AccessToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("Q,Pu%", "Q,Pu%", "Q,Pu%");
      boolean boolean0 = openIdOAuth2AccessToken0.equals("Q,Pu%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("Q,Pu%", "Q,Pu%", "Q,Pu%");
      boolean boolean0 = openIdOAuth2AccessToken0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("", "", "");
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken1 = new OpenIdOAuth2AccessToken("", "", (Integer) null, "", "", "", "");
      boolean boolean0 = openIdOAuth2AccessToken0.equals(openIdOAuth2AccessToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1188);
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("", ", token_type=", integer0, (String) null, ", token_type=", (String) null, (String) null);
      String string0 = openIdOAuth2AccessToken0.getOpenIdToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("", "", "");
      String string0 = openIdOAuth2AccessToken0.toString();
      assertEquals("OpenIdOAuth2AccessToken{access_token=, token_type=null, expires_in=null, refresh_token=null, scope=null, open_id_token=}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = new OpenIdOAuth2AccessToken("p", "p", "p");
      boolean boolean0 = openIdOAuth2AccessToken0.equals(openIdOAuth2AccessToken0);
      assertTrue(boolean0);
  }
}
