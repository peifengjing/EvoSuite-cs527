/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 05:53:21 GMT 2017
 */

package com.github.scribejava.apis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.apis.FlickrApi;
import com.github.scribejava.core.builder.api.OAuth1SignatureType;
import com.github.scribejava.core.model.OAuth1RequestToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FlickrApi_ESTest extends FlickrApi_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FlickrApi.FlickrPerm flickrApi_FlickrPerm0 = FlickrApi.FlickrPerm.READ;
      FlickrApi flickrApi0 = new FlickrApi(flickrApi_FlickrPerm0);
      // Undeclared exception!
      try { 
        flickrApi0.getAuthorizationUrl((OAuth1RequestToken) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.apis.FlickrApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FlickrApi flickrApi0 = FlickrApi.instance((FlickrApi.FlickrPerm) null);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(")`Vh,K=p`hhi+oY", ")`Vh,K=p`hhi+oY");
      String string0 = flickrApi0.getAuthorizationUrl(oAuth1RequestToken0);
      assertEquals("https://www.flickr.com/services/oauth/authorize?oauth_token=)`Vh,K=p`hhi+oY", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FlickrApi.FlickrPerm flickrApi_FlickrPerm0 = FlickrApi.FlickrPerm.READ;
      FlickrApi flickrApi0 = FlickrApi.instance(flickrApi_FlickrPerm0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(")`Vh,K=p`hhi+oY", ")`Vh,K=p`hhi+oY");
      String string0 = flickrApi0.getAuthorizationUrl(oAuth1RequestToken0);
      assertEquals("https://www.flickr.com/services/oauth/authorize?oauth_token=)`Vh,K=p`hhi+oY&perms=read", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FlickrApi flickrApi0 = new FlickrApi();
      String string0 = flickrApi0.getAccessTokenEndpoint();
      assertEquals("https://www.flickr.com/services/oauth/access_token", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FlickrApi flickrApi0 = FlickrApi.instance();
      assertEquals(OAuth1SignatureType.Header, flickrApi0.getSignatureType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FlickrApi flickrApi0 = null;
      try {
        flickrApi0 = new FlickrApi((FlickrApi.FlickrPerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.apis.FlickrApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FlickrApi flickrApi0 = new FlickrApi();
      String string0 = flickrApi0.getRequestTokenEndpoint();
      assertEquals("https://www.flickr.com/services/oauth/request_token", string0);
  }
}
