/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 05:38:17 GMT 2017
 */

package com.github.scribejava.apis.salesforce;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.apis.salesforce.SalesforceToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SalesforceToken_ESTest extends SalesforceToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken("d^H2Xz4YO)=-Z", "d^H2Xz4YO)=-Z", "d^H2Xz4YO)=-Z");
      String string0 = salesforceToken0.getInstanceUrl();
      assertEquals("d^H2Xz4YO)=-Z", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(37);
      SalesforceToken salesforceToken0 = new SalesforceToken("", "", integer0, "", "", "", "");
      String string0 = salesforceToken0.getInstanceUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SalesforceToken salesforceToken0 = null;
      try {
        salesforceToken0 = new SalesforceToken((String) null, "#t5EL2wBY", "com.github.scribejava.apis.salesforce.SalesforceToken");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(125);
      SalesforceToken salesforceToken0 = null;
      try {
        salesforceToken0 = new SalesforceToken((String) null, (String) null, integer0, (String) null, "<v_6", "<v_6", "This token object was not constructed by ScribeJava and does not have a rawResponse");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken("SalesforceToken{access_token=", "SalesforceToken{access_token=", "SalesforceToken{access_token=");
      SalesforceToken salesforceToken1 = new SalesforceToken("SalesforceToken{access_token=", "SalesforceToken{access_token=", "SalesforceToken{access_token=");
      boolean boolean0 = salesforceToken1.equals(salesforceToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken(":cr#", ":cr#", (Integer) null, ":cr#", ":cr#", ":cr#", ":cr#");
      SalesforceToken salesforceToken1 = new SalesforceToken("SalesforceToken{access_token=:cr#, token_type=:cr#, expires_in=null, refresh_token=:cr#, scope=:cr#, instance_url=:cr#}", "SalesforceToken{access_token=:cr#, token_type=:cr#, expires_in=null, refresh_token=:cr#, scope=:cr#, instance_url=:cr#}", "SalesforceToken{access_token=:cr#, token_type=:cr#, expires_in=null, refresh_token=:cr#, scope=:cr#, instance_url=:cr#}");
      boolean boolean0 = salesforceToken0.equals(salesforceToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken(":cr#", ":cr#", (Integer) null, ":cr#", ":cr#", ":cr#", ":cr#");
      boolean boolean0 = salesforceToken0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken("", "", "");
      boolean boolean0 = salesforceToken0.equals(salesforceToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken(":cr#", ":cr#", (Integer) null, ":cr#", ":cr#", ":cr#", ":cr#");
      boolean boolean0 = salesforceToken0.equals("SalesforceToken{access_token=:cr#, token_type=:cr#, expires_in=null, refresh_token=:cr#, scope=:cr#, instance_url=:cr#}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken("[Z>h+a0$(U`2B", (String) null, "yp_@XZ!h.6pZ@7VYf*");
      String string0 = salesforceToken0.getInstanceUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken(":cr#", ":cr#", (Integer) null, ":cr#", ":cr#", ":cr#", ":cr#");
      String string0 = salesforceToken0.toString();
      assertEquals("SalesforceToken{access_token=:cr#, token_type=:cr#, expires_in=null, refresh_token=:cr#, scope=:cr#, instance_url=:cr#}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SalesforceToken salesforceToken0 = new SalesforceToken("SalesforceToken{access_token=", "SalesforceToken{access_token=", "SalesforceToken{access_token=");
      salesforceToken0.hashCode();
  }
}
