/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 06:42:49 GMT 2017
 */

package com.github.scribejava.apis.openid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.apis.openid.OpenIdJsonTokenExtractor;
import com.github.scribejava.apis.openid.OpenIdOAuth2AccessToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenIdJsonTokenExtractor_ESTest extends OpenIdJsonTokenExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenIdJsonTokenExtractor openIdJsonTokenExtractor0 = OpenIdJsonTokenExtractor.instance();
      // Undeclared exception!
      try { 
        openIdJsonTokenExtractor0.createToken((String) null, ".`G)tFUk'.", (Integer) null, ".`G)tFUk'.", "0\tr3&", "0\tr3&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenIdJsonTokenExtractor openIdJsonTokenExtractor0 = new OpenIdJsonTokenExtractor();
      Integer integer0 = new Integer(0);
      OpenIdOAuth2AccessToken openIdOAuth2AccessToken0 = openIdJsonTokenExtractor0.createToken("i|^->\"h9Bz=>", "i|^->\"h9Bz=>", integer0, "i|^->\"h9Bz=>", "i|^->\"h9Bz=>", "");
      assertEquals("i|^->\"h9Bz=>", openIdOAuth2AccessToken0.getRefreshToken());
      assertEquals("i|^->\"h9Bz=>", openIdOAuth2AccessToken0.getTokenType());
      assertEquals("i|^->\"h9Bz=>", openIdOAuth2AccessToken0.getScope());
      assertEquals("i|^->\"h9Bz=>", openIdOAuth2AccessToken0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenIdJsonTokenExtractor openIdJsonTokenExtractor0 = OpenIdJsonTokenExtractor.instance();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        openIdJsonTokenExtractor0.createToken("", (String) null, integer0, "", "OAuth2AccessToken{access_token=", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
