/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 02:46:45 GMT 2017
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.StringWriter;
import java.io.Writer;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseDate;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NoMidnight", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((-2583.078882541033));
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1178);
      periodFormatterBuilder_PluralAffix0.parse("M+#%@f$On~S|j", (-61));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M+#%@f$On~S|j";
      stringArray0[1] = "NoMidnight";
      stringArray0[2] = "";
      stringArray0[3] = "M+#%@f$On~S|j";
      stringArray0[4] = "";
      stringArray0[5] = "NoMidnight";
      stringArray0[6] = "M+#%@f$On~S|j";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      String[] stringArray1 = new String[4];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "days", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0);
      Period period0 = Period.hours(1178);
      Locale locale0 = Locale.CANADA;
      periodFormatterBuilder_Separator0.calculatePrintedLength(period0, locale0);
      Period period1 = period0.minusYears(29);
      Locale locale1 = Locale.CANADA_FRENCH;
      periodFormatterBuilder_Separator1.printTo(stringBuffer1, (ReadablePeriod) period1, locale1);
      periodFormatterBuilder1.toParser();
      stringArray1[0] = "";
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z";
      stringArray0[1] = "No formatter supplied";
      stringArray0[2] = "}[@'HnU";
      stringArray0[3] = "lu6h)b1";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "lu6h)b1";
      stringArray1[1] = "No formatter supplied";
      stringArray1[2] = "}[@'HnU";
      stringArray1[3] = "lu6h)b1";
      stringArray1[4] = "lu6h)b1";
      stringArray1[5] = "Z";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(">PA_ca");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1997, 1997, 1997, false, 1997, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(">PA_ca", "aa~s__#[*(f*", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter1, false, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      DateTime dateTime0 = new DateTime((long) 1997, (Chronology) null);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, (ReadableDuration) null);
      StringWriter stringWriter0 = new StringWriter(311);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Locale locale0 = Locale.PRC;
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      mutablePeriod0.copy();
      Locale locale1 = null;
      try {
        locale1 = new Locale(">PA_ca", "7tmF", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "d]w?EO0wz:IS|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 3233, 3233, true, 3797, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-890), 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot have two adjacent separators");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-890));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "00+0";
      stringArray1[1] = "NIu*J\ru$2,AQ/M/tS";
      stringArray1[2] = "Cannot have two adjacent separators";
      stringArray1[3] = "00+0";
      stringArray1[4] = "00+0";
      stringArray1[5] = "Cannot have two adjacent separators";
      stringArray1[6] = "2002-06-09t02:dhf/0.000+02:00";
      stringArray1[7] = "NIu*J\ru$2,AQ/M/tS";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("NIu*J\ru$2,AQ/M/tS", "00+0", stringArray1, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(3797, 3797, 34, true, Integer.MAX_VALUE, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "00+0", (-890), locale0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3797
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NoMidnight", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((-2583.078882541033));
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1178);
      periodFormatterBuilder_PluralAffix0.parse("M+#%@f$On~S|j", (-61));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M+#%@f$On~S|j";
      stringArray0[1] = "NoMidnight";
      stringArray0[2] = "";
      stringArray0[3] = "M+#%@f$On~S|j";
      stringArray0[4] = "";
      stringArray0[5] = "NoMidnight";
      stringArray0[6] = "M+#%@f$On~S|j";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      String[] stringArray1 = new String[4];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "days", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0);
      Period period0 = Period.hours(1178);
      Locale locale0 = Locale.CANADA;
      periodFormatterBuilder_Separator0.calculatePrintedLength(period0, locale0);
      Period period1 = period0.minusYears(29);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      periodFormatterBuilder_Separator1.printTo(stringBuffer1, (ReadablePeriod) period1, locale1);
      periodFormatterBuilder1.toParser();
      stringArray1[0] = "";
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("M,=*eh-5w|1Wd!");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1402), 1184, 1184, false, (-2045460569), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      periodFormatterBuilder_FieldFormatter0.isSupported(periodType0, (-1986));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix("M,=*eh-5w|1Wd!");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2045460569
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.parse("*OiV-", 4890);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("*OiV-");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*OiV-", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(9223372036854775807L, 9223372036854775807L, periodType0);
      periodFormatterBuilder_RegExAffix0.getAffixes();
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "f", (-463), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "d]w?EO0wz:IS|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 4, 4, true, 3797, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 3233, 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot have two adjacent separators");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "00+0";
      stringArray1[1] = "NIu*J\ru$2,AQ/M/tS";
      stringArray1[2] = "Cannot have two adjacent separators";
      stringArray1[3] = "00+0";
      stringArray1[4] = "00+0";
      stringArray1[5] = "Cannot have two adjacent separators";
      stringArray1[6] = "Cannot have two adjacent separators";
      stringArray1[7] = "NIu*J\ru$2,AQ/M/tS";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("NIu*J\ru$2,AQ/M/tS", "00+0", stringArray1, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(3797, 3797, 34, true, Integer.MAX_VALUE, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "00+0", 3233, locale0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("d]w?EO0wz:IS|mwmcwo");
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder3.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendMonths();
      periodFormatterBuilder4.clear();
      periodFormatterBuilder3.appendSeparator("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EoHcB>mn6UB~BYY-@jX";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "]{)C";
      stringArray0[6] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "EoHcB>mn6UB~BYY-@jX", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      MockFile mockFile0 = new MockFile("]{)C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, (byte)37);
      Locale locale1 = new Locale("]{)C", "org.joda.no field to apply suffix tobuilder", "]{)C");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator1.printTo((Writer) bufferedWriter0, (ReadablePeriod) null, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.parse("*OiV-", 4890);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("*OiV-");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*OiV-", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("*OiV-");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0);
      periodFormatter0.parseMutablePeriod("*OiV-");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroRarelyLast();
      periodFormatterBuilder6.printZeroIfSupported();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal rounding mode: ");
      periodFormatterBuilder_SimpleAffix0.getAffixes();
      periodFormatterBuilder0.appendPrefix("7X_5o|X19}:eFN");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-217), 1970, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      Period period0 = Period.parse("", periodFormatter1);
      period0.toString();
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("5T83fEFvA!0:s 73M", "7X_5o|X19}:eFN");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "7X_5o|X19}:eFN");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparator("zXmD_InP,3:", "5T83fEFvA!0:s 73M");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      periodFormatterBuilder5.printZeroIfSupported();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal rounding mode: ");
      periodFormatterBuilder_SimpleAffix0.getAffixes();
      periodFormatterBuilder0.appendPrefix("7X_5o|X19}:eFN");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-217), 1970, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.ENGLISH;
      periodFormatter0.withLocale(locale0);
      Period period0 = Period.months((-217));
      period0.toString();
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NoMidnight", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((-2583.078882541033));
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1178);
      periodFormatterBuilder_PluralAffix0.parse("M+#%@f$On~S|j", (-61));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M+#%@f$On~S|j";
      stringArray0[1] = "NoMidnight";
      stringArray0[2] = "";
      stringArray0[3] = "M+#%@f$On~S|j";
      stringArray0[4] = "";
      stringArray0[5] = "NoMidnight";
      stringArray0[6] = "M+#%@f$On~S|j";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      String[] stringArray1 = new String[4];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "days", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0);
      Period period0 = new Period();
      Period period1 = period0.minusYears(29);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      periodFormatterBuilder_Separator1.printTo(stringBuffer1, (ReadablePeriod) period1, locale0);
      periodFormatterBuilder1.toParser();
      stringArray1[0] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray1, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyLast();
      periodFormatterBuilder4.printZeroIfSupported();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal rounding mode: ");
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      periodFormatterBuilder0.appendPrefix("7X_5o|X19}:eFN");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-217), 1970, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      Period period0 = Period.parse("", periodFormatter1);
      period0.toString();
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
      periodFormatterBuilder1.appendMinutes();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Illegal rounding mode: ", "Illegal rounding mode: ", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NoMidnight", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((-2583.078882541033));
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1178);
      periodFormatterBuilder_PluralAffix0.parse("M+#%@f$On~S|j", (-61));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M+#%@f$On~S|j";
      stringArray0[1] = "NoMidnight";
      stringArray0[2] = "";
      stringArray0[3] = "M+#%@f$On~S|j";
      stringArray0[4] = "";
      stringArray0[5] = "NoMidnight";
      stringArray0[6] = "M+#%@f$On~S|j";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      String[] stringArray1 = new String[4];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "days", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0);
      Period period0 = new Period();
      Period period1 = period0.minusYears(29);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      periodFormatterBuilder_Separator1.printTo(stringBuffer1, (ReadablePeriod) period1, locale0);
      periodFormatterBuilder1.toParser();
      stringArray1[0] = "";
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.testlocaldatetime_.000cs", "d]w?EO0wz:IS|mwmcwo");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 3233, 3233, true, 3233, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-890), 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-890));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendWeeks();
      periodFormatterBuilder5.appendSuffix(stringArray0, stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      periodFormatter0.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      Locale locale0 = new Locale("2002-06-09t02:dhf/0.000+02:00");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) charArrayWriter1, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "d]w?EO0wz:IS|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 4, 4, true, 3797, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-890), 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot have two adjacent separators");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-890));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "00+0";
      stringArray1[1] = "NIu*J\ru$2,AQ/M/tS";
      stringArray1[2] = "Cannot have two adjacent separators";
      stringArray1[3] = "00+0";
      stringArray1[4] = "00+0";
      stringArray1[5] = "00+0";
      stringArray1[6] = "2002-06-09t02:dhf/0.000+02:00";
      stringArray1[7] = "NIu*J\ru$2,AQ/M/tS";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("NIu*J\ru$2,AQ/M/tS", "00+0", stringArray1, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(3797, 3797, 34, true, Integer.MAX_VALUE, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "00+0", (-890), locale0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("2002-06-09t02:dhf/0.000+02:00");
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("{imE<Z");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.joda.time.base.BaseDateTime";
      stringArray0[1] = "org.joda.time.base.BaseDateTime";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("{imE<Z", "org.joda.time.base.BaseDateTime", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Separator1);
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Locale locale0 = Locale.KOREAN;
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale(locale0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("org.joda.time.field.TestPreciseDurationDateTimeField$MockZeroDurationField", periodFormatter2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.field.TestPreciseD...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(4);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyLast();
      periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      periodFormatterBuilder4.appendSeconds();
      periodFormatterBuilder4.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendDays();
      periodFormatterBuilder5.printZeroRarelyLast();
      periodFormatterBuilder5.toFormatter();
      periodFormatterBuilder2.maximumParsedDigits(0);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1776);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-3090), 0, false, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Period period0 = Period.seconds((-672));
      Seconds seconds0 = period0.toStandardSeconds();
      Locale locale0 = Locale.KOREAN;
      periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(seconds0, 0, locale0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.finish((PeriodFormatterBuilder.FieldFormatter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "d]w?EO0wz:IS|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 4, 4, true, 3797, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 4, 3233);
      periodFormatterBuilder_PluralAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(3797);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "00+0";
      stringArray0[1] = "NIu*J\ru$2,AQ/M/tS";
      stringArray0[2] = "Cannot have two adjacent separators";
      stringArray0[3] = "00+0";
      stringArray0[4] = "00+0";
      stringArray0[5] = "Cannot have two adjacent separators";
      stringArray0[6] = "2002-06-09t02:dhf/0.000+02:00";
      stringArray0[7] = "NIu*J\ru$2,AQ/M/tS";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("NIu*J\ru$2,AQ/M/tS", "00+0", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(3797, 3797, 34, true, Integer.MAX_VALUE, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      periodFormatterBuilder3.appendSeparator("2002-06-09t02:dhf/0.000+02:00");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "d]w?EO0wz:IS|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 4, 4, true, 3797, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-890), 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-890));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      periodFormatterBuilder2.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3797
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      periodFormatterBuilder_PluralAffix0.calculatePrintedLength(4);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-3090), 0, false, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Period period0 = Period.seconds((-672));
      Locale locale0 = Locale.KOREAN;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "o";
      stringArray0[1] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "o", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, true);
      StringBuffer stringBuffer0 = new StringBuffer("o");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      Locale locale0 = Locale.CHINESE;
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale(locale0);
      periodFormatterBuilder0.append(periodFormatter2);
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Millis");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      periodFormatterBuilder5.printZeroIfSupported();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal rounding mode: ");
      periodFormatterBuilder_SimpleAffix0.getAffixes();
      periodFormatterBuilder0.appendPrefix("7X_5o|X19}:eFN");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-217), 1970, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      Period period0 = Period.parse("", periodFormatter1);
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
      periodFormatterBuilder_FieldFormatter0.getFieldValue(period0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.parse("*OiV-", 4890);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("*OiV-");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*OiV-", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("*OiV-");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      periodFormatterBuilder5.printZeroIfSupported();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal rounding mode: ");
      periodFormatterBuilder_SimpleAffix0.getAffixes();
      periodFormatterBuilder0.appendPrefix("7X_5o|X19}:eFN");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-217), 1970, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      Period period0 = Period.parse("", periodFormatter1);
      period0.toString();
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("lI++eV16", true);
      periodFormatterBuilder_FieldFormatter0.printTo((Writer) mockFileWriter0, (ReadablePeriod) period0, locale0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("subtrahend");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 48, 1533, false, 48, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.millis((-271L));
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      DateTime dateTime2 = dateTime1.withTimeAtStartOfDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime2, dateTime0);
      Locale locale0 = new Locale(":(r\"Fx)", "subtrahend");
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("GMT+01:23", "GMT+01:23");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.getAffixes();
      periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.parse("*OiV-", 4890);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("*OiV-");
      StringBuffer stringBuffer0 = new StringBuffer("");
      Period period0 = Period.days(4890);
      Locale locale0 = Locale.FRANCE;
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*OiV-", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("P9U@\"8+*2tZ'u9:rFNJ");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "*OiV-";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix(stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("00:0", "dhf/");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits(5);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder4.toPrinter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "dhf/";
      stringArray0[1] = "00:0";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[3] = "t02:";
      stringArray0[4] = "No field to apply suffix to";
      stringArray0[5] = "00:0";
      stringArray0[6] = "dhf/";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("t02:", "dhf/", stringArray0, periodPrinter0, periodFormat_DynamicWordBased0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "No field to apply suffix to");
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits(43);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("2002-06-09t02:00:00.00dhf/:00");
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NoMidnight", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((-2583.078882541033));
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1178);
      periodFormatterBuilder_PluralAffix0.parse("M+#%@f$On~S|j", (-61));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M+#%@f$On~S|j";
      stringArray0[1] = "NoMidnight";
      stringArray0[2] = "";
      stringArray0[3] = "M+#%@f$On~S|j";
      stringArray0[4] = "";
      stringArray0[6] = "M+#%@f$On~S|j";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "PeriodFormat.days";
      stringArray0[0] = "XM'f1X8";
      stringArray0[2] = "EL+z";
      stringArray0[3] = "PeriodFormat.days";
      stringArray0[4] = "XM'f1X8";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("PeriodFormat.days");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayName(locale1);
      periodFormatter0.withLocale(locale0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSuffix("Literal must not be null");
      periodFormatterBuilder4.printZeroIfSupported();
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      System.setCurrentTimeMillis((-1510));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$Literal");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits((-1510));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.append(periodFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[2] = null;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[0]);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("?dr?z:I%N");
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 0, 0, (-913), (-913));
      mutablePeriod0.add(4, 4, 123, (-913), (-1008), 44, (-913), 3618);
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "?dr?z:I%N", 123, locale0);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("?dr?z:I%N");
      periodFormatterBuilder_SimpleAffix0.parse("?dr?z:I%N", 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("?dr?z:I%N");
      MockFileWriter mockFileWriter0 = new MockFileWriter("owlTAcHV#NO3+BfEA", true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      periodFormatterBuilder_Literal0.printTo((Writer) mockFileWriter0, (ReadablePeriod) null, (Locale) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 0, 0, (-913), (-913));
      Locale locale0 = Locale.US;
      Locale.getISOCountries();
      periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "?dr?z:I%N", 123, locale0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("?dr?z:I%N");
      Period period0 = Period.hours(9);
      Period period1 = period0.withMonths(9);
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Literal0.printTo((Writer) null, (ReadablePeriod) period1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("rmat.periodformatterbuilder", "rmat.periodformatterbuilder");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4177984), (-954), (-954), true, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      periodFormatterBuilder_FieldFormatter1.isSupported(periodType0, 5890);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q{!?EHyL_yYnQbNJbP");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(959, (-3426), Integer.MAX_VALUE, true, Integer.MAX_VALUE, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 959, (Chronology) buddhistChronology0);
      Locale locale0 = Locale.US;
      periodFormatterBuilder_FieldFormatter1.parseInto(mutablePeriod0, "q{!?EHyL_yYnQbNJbP", 8, locale0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix((String) null);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2, 3, 20587500, false, 2, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter1.parseInto((ReadWritablePeriod) null, (String) null, 3, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("No field to apply suffix to", "No field to apply suffix to");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      linkedList0.add((Object) periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("2002-06-09T00:00:00.000+02:00", "No field to apply suffix to", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, false);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyLast();
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix("", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("uvk7  Tc", "Maximum value exceeded for add");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      periodFormatterBuilder1.toFormatter();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyLast();
      periodFormatterBuilder2.appendPrefix("}j]o'JhjQV6Gnp");
      periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder1.appendSuffix("uvk7  Tc");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      periodFormatterBuilder4.appendSeconds();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Maximum value exceeded for add";
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("Jy\"M<}6AS.jX", "", stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparatorIfFieldsBefore("Maximum value exceeded for add");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      Duration duration0 = new Duration(1674L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      periodFormatterBuilder_Literal0.calculatePrintedLength(period0, locale0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Q8y");
      periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(2620);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "WP`5@@A";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "t\"+HIm8fl;86";
      stringArray0[5] = "";
      stringArray0[6] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("t\"+HIm8fl;86", 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>(1203);
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet1 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet1);
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(4869, "", 4869);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      MutablePeriod mutablePeriod0 = new MutablePeriod(4869, 4869);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Literal0.printTo((StringBuffer) null, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Duration duration0 = Duration.millis((-2415L));
      DateTime dateTime0 = DateTime.now();
      Period period0 = new Period(duration0, dateTime0, (PeriodType) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Literal0.printTo((StringBuffer) null, (ReadablePeriod) period0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix("<(L~CL~XSjN*h", "<(L~CL~XSjN*h");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<(L~CL~XSjN*h";
      stringArray0[1] = "<(L~CL~XSjN*h";
      stringArray0[2] = "<(L~CL~XSjN*h";
      stringArray0[3] = "<(L~CL~XSjN*h";
      stringArray0[4] = "<(L~CL~XSjN*h";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "<(L~CL~XSjN*h";
      stringArray1[1] = "<(L~CL~XSjN*h";
      stringArray1[2] = "<(L~CL~XSjN*h";
      stringArray1[3] = "<(L~CL~XSjN*h";
      stringArray1[4] = "<(L~CL~XSjN*h";
      stringArray1[5] = "<(L~CL~XSjN*h";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      periodFormatterBuilder5.printZeroIfSupported();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal rounding mode: ");
      periodFormatterBuilder0.appendPrefix("7X_5o|X19}:eFN");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-217), 1970, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      Period period0 = Period.parse("", periodFormatter1);
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "ky%qfvsjOj _J";
      stringArray0[2] = "Builder has created neither a printer nor a parser";
      stringArray0[3] = "S@";
      stringArray0[4] = "MMbe/9;+D17p&";
      stringArray0[5] = "The field must be supported";
      stringArray0[6] = "J]Lr#%j>;FlHV`Ksr";
      stringArray0[7] = "";
      stringArray0[8] = "317TZ>cK<noan";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "J]Lr#%j>;FlHV`Ksr");
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 193);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p():;ZRs?z7Sw,F";
      stringArray0[1] = "org.joda.time.DurationFieldType$StandardDurationFieldType";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.printTo((StringBuffer) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsAfter("a(=D;Ct?");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparator("a(=D;Ct?", "a(=D;Ct?", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSuffix("6tcFZeHRsq#S|");
      periodFormatterBuilder5.toFormatter();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("No formatter supplied");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.maximumParsedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendLiteral("No formatter supplied");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("sBVisV49}g$}9", "sBVisV49}g$}9");
      periodFormatterBuilder_PluralAffix0.parse("sBVisV49}g$}9", (-811));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
          PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(0);
          PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
          PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroAlways();
          String[] stringArray0 = new String[5];
          stringArray0[0] = "<J3#4J";
          stringArray0[1] = "oGqya`4W.g";
          stringArray0[2] = "oGqya`4W.g";
          periodFormatterBuilder0.appendSuffix("oGqya`4W.g", "oGqya`4W.g");
          stringArray0[3] = "oGqya`4W.g";
          stringArray0[4] = "oGqya`4W.g";
          periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
          PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("oGqya`4W.g", "oGqya`4W.g");
          periodFormatterBuilder4.appendSecondsWithOptionalMillis();
          PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("a", "a");
          periodFormatterBuilder5.appendMinutes();
          PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("a", "oGqya`4W.g");
          periodFormatterBuilder_PluralAffix0.calculatePrintedLength(0);
          periodFormatterBuilder2.appendSecondsWithMillis();
          PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
          periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.maximumParsedDigits((-28));
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("org.joda.time.fono field to apply suffix to", "org.joda.time.fono field to apply suffix to", stringArray0);
      periodFormatterBuilder5.toParser();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Prefix not followed by field";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[2];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendPrefix("~ncA.ge@.L4OXF", "Bm[45U");
      periodFormatterBuilder1.appendPrefix("jAaM)B0 DffCqbqY7Y", "jAaM)B0 DffCqbqY7Y");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("2004-06-09T07:08:09.010Z/2005-08-13T12:14:16.018Z");
      periodFormatterBuilder_SimpleAffix0.scan("", 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("XF9}D.#XbC&i\"IzE");
      periodFormatterBuilder_SimpleAffix0.scan("$BG)Ze", 44);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The DateTimeFieldType must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "Rr=Q/Z1h+m$qu";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('*');
      periodFormatterBuilder_RegExAffix0.printTo((Writer) charArrayWriter1, 971);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      periodFormatterBuilder2.maximumParsedDigits(1320);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, (String) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_PluralAffix0.calculatePrintedLength(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "dYvnNE";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator("dYvnNE", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("?dr?z:I%N");
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 0, 0, (-913), (-913));
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "?dr?z:I%N", 123, locale0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("G");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparator("G", "G");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("EYXxW2pwp%", "f");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(818);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) charArrayWriter0, (-303));
      LinkedHashSet<ChronoLocalDate> linkedHashSet1 = new LinkedHashSet<ChronoLocalDate>();
      java.time.Period period0 = java.time.Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.from(localDate0);
      linkedHashSet1.add(japaneseDate0);
      linkedHashSet0.retainAll(linkedHashSet1);
      linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.getAffixes();
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(0);
      periodFormatterBuilder_RegExAffix0.getAffixes();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("EYXxW2pwp%");
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) charArrayWriter0, 43);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      StringWriter stringWriter0 = new StringWriter(818);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      Period period1 = new Period(0L, periodType1);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) period1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("pS`fG=%Nb+u)Ko@m", "_:K:FX0d");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      periodFormatterBuilder3.appendWeeks();
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix((String) null, "f\"E%:IwK#C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("+HNHe.j");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits((-1821));
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix("20", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("30");
      StringBuffer stringBuffer0 = new StringBuffer(3113);
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 3113);
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("30", "30", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("30");
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparatorIfFieldsBefore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis3Digit();
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendPrefix("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("GjLc");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "!kq[pv");
      periodFormatterBuilder_PluralAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, "!kq[pv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      Instant instant0 = new Instant(43200000L);
      Duration duration0 = new Duration(instant0, instant0);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      periodFormatterBuilder_Literal0.countFieldsToPrint(minutes0, 0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      periodFormatterBuilder2.appendMonths();
      periodFormatterBuilder3.appendSeparator("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      periodFormatterBuilder4.appendMillis3Digit();
      periodFormatterBuilder2.toPrinter();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto((ReadWritablePeriod) null, "", (-624), locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.append((CharSequence) "");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-232));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.rejectSignedValues(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparatorIfFieldsAfter("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.chrono.JulianChronology");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits(400);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "N}ojH-hq<Q.JL";
      stringArray0[3] = "P1DT2H/2010-07-01T14:30";
      stringArray0[4] = "2002-04-05T12:24:00.000Z";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.parse("", 0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("c", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c");
      mockPrintWriter0.print("No field to apply suffix to");
      mockPrintWriter0.write("", (-3083), 0);
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) mockPrintWriter0, 0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("c");
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("d3/");
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter1);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-3083), 0, (-2566));
      periodFormatter0.parseInto(mutablePeriod0, "lHZxnX", 2086);
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.append((PeriodPrinter) periodFormat_DynamicWordBased0, (PeriodParser) periodFormat_DynamicWordBased0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("|~8V.CE{h", "-");
      periodFormatterBuilder_PluralAffix0.scan("-", 2);
      MockFileWriter mockFileWriter0 = new MockFileWriter("|~8V.CE{h");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, 46);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|~8V.CE{h";
      stringArray0[1] = "-";
      stringArray0[2] = "|~8V.CE{h";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("-");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("-", "|~8V.CE{h", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = new PeriodFormatterBuilder.Separator("|~8V.CE{h", "-", stringArray0, periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0, true, true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(5);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_RegExAffix0.printTo((Writer) stringWriter0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(1043);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      periodFormatterBuilder2.appendSeparator("7", "org.joda.time.format.PeriodFormatterBuilder$Literal", (String[]) null);
      periodFormatterBuilder2.minimumPrintedDigits((-19));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("+WWVnKNa", "org.joda.time.field.DividedDateTimeField");
      StringWriter stringWriter0 = new StringWriter(0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.joda.time.field.DividedDateTimeField");
      stringWriter1.append(')');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.joda.time.field.DividedDateTimeField", 0, 0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) stringWriter2, 0);
      periodFormatterBuilder_PluralAffix0.scan("org.joda.time.field.DividedDateTimeField", 1849);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix1 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.field.DividedDateTimeField", "+WWVnKNa");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix1, periodFormatterBuilder_PluralAffix1);
      periodFormatterBuilder_CompositeAffix0.scan("e@CyWg\"i,#]#*K\"Dr", (-1850));
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.TAIWAN;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        Period.parse("+WWVnKNa", periodFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+WWVnKNa\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix((String) null);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      periodFormatterBuilder1.appendHours();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append((PeriodPrinter) null, (PeriodParser) periodFormat_DynamicWordBased0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendDays();
      periodFormatterBuilder5.minimumPrintedDigits(1734);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, "+XxTGD~Hc", stringArray0, periodFormat_DynamicWordBased0, (PeriodParser) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      linkedList0.offerFirst(mockThaiBuddhistDate0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("org.joda.time.format.PeriodFormatterBuilder", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength(mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("1]w@G");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("The");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "47Wf&H]";
      stringArray0[1] = "9<D`;Rmfv)P-Em5";
      stringArray0[2] = "H^4R";
      stringArray0[3] = "Zentraleurop\u00E4ische Sommerzeit";
      stringArray0[4] = "No formatter supplied";
      stringArray0[5] = "Subtracting time zone offset caused overflow";
      stringArray0[6] = "Literal must not be null";
      stringArray0[7] = "";
      stringArray0[8] = "The date must not be null";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 8
         // 9<D`;Rmfv)P-Em5
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(5);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "1970-06-09T10:20:30.040";
      stringArray0[2] = "Tb`[D9|zwha";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 11
         // Tb`[D9|zwha
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      periodFormatterBuilder2.appendPrefix("c*5tw$i");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("-00:15", "-00:15");
      periodFormatterBuilder_PluralAffix0.scan("G6*;e_8Y", 9);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-00:15";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("~-SBaK.:ut8Jg4", "~-SBaK.:ut8Jg4");
      // Undeclared exception!
      periodFormatterBuilder_PluralAffix0.scan("Qr", (-4177984));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("PeriodFormat.week");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("bHc?$/RA=Tbe)Fw", "bHc?$/RA=Tbe)Fw");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_aq'\"v`9NbHnR=<Lu";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(0);
      periodFormatterBuilder_RegExAffix0.parse("Jc|.", 0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.rejectSignedValues(true);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendPrefix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Nau|DIwOM1&;&");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("Nau|DIwOM1&;&");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      periodFormatterBuilder5.printZeroRarelyFirst();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral("No printer or parser supplied");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "No printer or parser supplied";
      stringArray0[1] = "No printer or parser supplied";
      stringArray0[2] = "No printer or parser supplied";
      stringArray0[3] = "No printer or parser supplied";
      stringArray0[4] = "*,r";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Period period0 = Period.millis(292272992);
      Period period1 = period0.plusMonths(292272992);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.countFieldsToPrint(period1, 292272992, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder0.appendMonths();
      periodFormatterBuilder1.appendSeparator("'(1EqhJh-Us)5v`+6");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder2.appendSuffix("'(1EqhJh-Us)5v`+6");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("'(1EqhJh-Us)5v`+6", "eK zN0uH3");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("eK zN0uH3", 2145662203);
      periodFormatterBuilder0.printZeroRarelyLast();
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("00+0", "p]w?eo0wz:is|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-10), (-839), 1, false, 1, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Period period0 = Period.millis(8);
      Days days0 = period0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Days days1 = weeks0.toStandardDays();
      Seconds seconds0 = days1.toStandardSeconds();
      periodFormatterBuilder_FieldFormatter0.isZero(seconds0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "p]w?eo0wz:is|mwmcwo";
      stringArray0[1] = "00+0";
      stringArray0[2] = "p]w?eo0wz:is|mwmcwo";
      stringArray0[3] = "00+0";
      stringArray0[4] = "00+0";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("p]w?eo0wz:is|mwmcwo", "p]w?eo0wz:is|mwmcwo", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, true);
      periodFormatterBuilder_Separator0.countFieldsToPrint(days1, (-10), (Locale) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("ztZJ:V;#$");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("ztZJ:V;#$");
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) stringWriter0, 3);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_CompositeAffix0.parse("PeriodFormat.minutes.regex", (-96));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NoMidnight", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((-2583.078882541033));
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1178);
      periodFormatterBuilder_PluralAffix0.parse("M+#%@f$On~S|j", (-61));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M+#%@f$On~S|j";
      stringArray0[1] = "NoMidnight";
      stringArray0[2] = "";
      stringArray0[3] = "M+#%@f$On~S|j";
      stringArray0[4] = "";
      stringArray0[5] = "NoMidnight";
      stringArray0[6] = "M+#%@f$On~S|j";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      String[] stringArray1 = new String[4];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "days", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0);
      Period period0 = Period.hours(1178);
      Locale locale0 = Locale.CANADA;
      periodFormatterBuilder_Separator0.calculatePrintedLength(period0, locale0);
      Period period1 = period0.minusYears(29);
      Locale locale1 = Locale.CANADA_FRENCH;
      periodFormatterBuilder_Separator1.printTo(stringBuffer1, (ReadablePeriod) period1, locale1);
      periodFormatterBuilder1.toParser();
      stringArray1[0] = "";
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No field to apply suffix to";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet1 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet1.add(periodFormatterBuilder_RegExAffix0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No field to apply suffix to");
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet1);
      periodFormatterBuilder_RegExAffix0.scan("No field to apply suffix to", 56);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No field to apply suffix to");
      periodFormatterBuilder_SimpleAffix0.parse("No field to apply suffix to", (-10384350));
      periodFormatterBuilder_RegExAffix0.scan("No field to apply suffix to", 56);
      periodFormatterBuilder_RegExAffix0.scan("org.joda.time.format.PeriodFormatterBuilder", 8);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F6uB/jlXeVZO]ihDf4<");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("etim", "F6uB/jlXeVZO]ihDf4<");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("etim", (-1871));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder3.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      periodFormatterBuilder2.appendMonths();
      periodFormatterBuilder3.appendSeparator("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto((ReadWritablePeriod) null, "", (-624), locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.testlocaldatetime_.000cs", "d]w?EO0wz:IS|mwmcwo");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 4, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-890), 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-890));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendWeeks();
      periodFormatterBuilder5.appendSuffix(stringArray0, stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      periodFormatter0.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.joda.time.testlocaldatetime_.000cs");
      Locale locale0 = new Locale("2002-06-09t02:dhf/0.000+02:00");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) charArrayWriter1, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "d]w?EO0wz:IS|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 4, 4, true, 3797, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-890), 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot have two adjacent separators");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-890));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "00+0";
      stringArray1[1] = "NIu*J\ru$2,AQ/M/tS";
      stringArray1[2] = "Cannot have two adjacent separators";
      stringArray1[3] = "00+0";
      stringArray1[4] = "00+0";
      stringArray1[5] = "Cannot have two adjacent separators";
      stringArray1[6] = "2002-06-09t02:dhf/0.000+02:00";
      stringArray1[7] = "NIu*J\ru$2,AQ/M/tS";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("NIu*J\ru$2,AQ/M/tS", "00+0", stringArray1, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(3797, 3797, 34, true, Integer.MAX_VALUE, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "00+0", (-890), locale0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("2002-06-09t02:dhf/0.000+02:00");
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "d]w?EO0wz:IS|mwmcwo");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3233, 4, 4, true, 3797, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-890), 3233);
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot have two adjacent separators");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "00+0";
      stringArray1[1] = "NIu*J\ru$2,AQ/M/tS";
      stringArray1[2] = "Cannot have two adjacent separators";
      stringArray1[3] = "00+0";
      stringArray1[4] = "00+0";
      stringArray1[5] = "Cannot have two adjacent separators";
      stringArray1[6] = "2002-06-09t02:dhf/0.000+02:00";
      stringArray1[7] = "NIu*J\ru$2,AQ/M/tS";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("NIu*J\ru$2,AQ/M/tS", "00+0", stringArray1, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(3797, 3797, 34, true, Integer.MAX_VALUE, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "00+0", (-890), locale0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("2002-06-09t02:dhf/0.000+02:00");
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      periodFormatterBuilder5.printZeroIfSupported();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal rounding mode: ");
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      periodFormatterBuilder0.appendPrefix("");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-217), 1970, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      Period period0 = Period.parse("", periodFormatter1);
      period0.toString();
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
      periodFormatterBuilder1.appendSeconds();
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Illegal rounding mode: ", "Y7oX~vO<Gi' sSKW", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter1);
      periodFormatterBuilder_Separator1.parseInto((ReadWritablePeriod) null, "Illegal rounding mode: ", 1970, locale0);
      periodFormatterBuilder1.appendMinutes();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendDays();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2002-06-09t02:00:00.000+dhf/0";
      stringArray0[1] = "`nBzkAJ7bs)Cw";
      stringArray0[2] = "`nBzkAJ7bs)Cw";
      stringArray0[3] = "No field to apply suffix to";
      stringArray0[4] = "No printer or parser supplied";
      stringArray0[5] = "`nBzkAJ7bs)Cw";
      stringArray0[6] = "2002-06-09t02:00:00.000+dhf/0";
      stringArray0[7] = "`nBzkAJ7bs)Cw";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("`nBzkAJ7bs)Cw");
      Locale locale0 = Locale.JAPAN;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, (PeriodType) null);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No field to apply suffix to", "Jk&", stringArray0, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) null, (ReadableInstant) null, (PeriodType) null);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "No field to apply suffix to";
      stringArray1[1] = "2002-06-09t02:00:00.000+dhf/0";
      stringArray1[2] = "+02:";
      stringArray1[3] = "`nBzkAJ7bs)Cw";
      stringArray1[4] = "EoHcB>mn6UB~BYY-@jX";
      stringArray1[5] = ".000";
      stringArray1[6] = ".000";
      stringArray1[7] = "Jk&";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = new PeriodFormatterBuilder.Separator("EoHcB>mn6UB~BYY-@jX", "2002-06-09t02:pjn|9#>2lh7uf>0", stringArray1, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, false, true);
      periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormatterBuilder_Separator2);
      periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "No field to apply suffix to", (-33), locale0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(107, 19, 0, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      periodFormatterBuilder_CompositeAffix0.parse("subtrahend", 107);
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.parse("*OiV-", 4890);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("*OiV-");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*OiV-", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("*OiV-");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "V";
      stringArray0[2] = "waS\"_lbc]$l.aP";
      stringArray0[3] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral("Cannot have two adjacent separators");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("");
      periodFormatterBuilder3.appendLiteral("No formatter supplied");
      periodFormatterBuilder2.appendSeparatorIfFieldsAfter("fznlAhGPp/W }_Wz'");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      periodFormatterBuilder_SimpleAffix0.parse("waS\"_lbc]$l.aP", 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Period period0 = Period.weeks((-292269054));
      Period period1 = period0.withMillis(1340);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) period1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      periodFormatterBuilder2.appendMillis3Digit();
      periodFormatterBuilder0.appendSeconds();
      periodFormatterBuilder1.appendSeconds();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("SM]kX#j3WV]z4s", "dq^Bk");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.TestLocalDateTime_Basics");
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) mockPrintWriter0, 0);
      StringBuffer stringBuffer0 = new StringBuffer("The chronology of the time does not match");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 2007);
      periodFormatterBuilder1.maximumParsedDigits(2007);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.TestLocalDateTime_Basics");
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 0);
      periodFormatterBuilder_SimpleAffix0.scan("dq^Bk", 0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?0-?/H/XPbLt5Z+jc";
      stringArray0[1] = "The chronology of the time does not match";
      stringArray0[2] = "SM]kX#j3WV]z4s";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/org.joda.time.TestLocalDateTime_Basics");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[2] = "org.joda.time.TestLocalDateTime_Basics";
      stringArray0[4] = "org.joda.time.TestLocalDateTime_Basics";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("?0-?/H/XPbLt5Z+jc", "?0-?/H/XPbLt5Z+jc", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pjN|9#>2lH7Uf>";
      stringArray0[1] = "DHF/";
      stringArray0[2] = "DHF/";
      stringArray0[3] = "DHF/";
      stringArray0[4] = "DHF/";
      stringArray0[5] = "DHF/";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "pjN|9#>2lH7Uf>";
      stringArray1[1] = "DHF/";
      stringArray1[2] = "pjN|9#>2lH7Uf>";
      stringArray1[3] = "DHF/";
      stringArray1[4] = "pjN|9#>2lH7Uf>";
      stringArray1[5] = "DHF/";
      stringArray1[6] = "DHF/";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_RegExAffix0.scan("DHF/", 0);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("DHF/", "DHF/");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 0);
      periodFormatterBuilder_CompositeAffix0.scan("DHF/", (-1241));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("<@Cyo");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("sOn", "Z");
      periodFormatterBuilder3.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("pjN|9#>2lH7Uf>", "DHF/");
      periodFormatterBuilder4.appendWeeks();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.getBuffer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pjN|9#>2lH7Uf>";
      stringArray0[1] = "DHF/";
      stringArray0[2] = "DHF/";
      stringArray0[3] = "DHF/";
      stringArray0[4] = "DHF/";
      stringArray0[5] = "DHF/";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "pjN|9#>2lH7Uf>";
      stringArray1[1] = "DHF/";
      stringArray1[2] = "pjN|9#>2lH7Uf>";
      stringArray1[3] = "DHF/";
      stringArray1[4] = "pjN|9#>2lH7Uf>";
      stringArray1[5] = "DHF/";
      stringArray1[6] = "DHF/";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_RegExAffix0.scan("DHF/", 0);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("DHF/", "DHF/");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("DHF/", (-1241));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("<@Cyo");
      periodFormatterBuilder1.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder2 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparator("pjN|9#>2lH7Uf>", "DHF/");
      periodFormatterBuilder4.appendWeeks();
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix(stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NoMidnight", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((-3905.90127980473));
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1178);
      periodFormatterBuilder_PluralAffix0.parse("M+#%@f$On~S|j", (-61));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M+#%@f$On~S|j";
      stringArray0[1] = "NoMidnight";
      stringArray0[2] = "";
      stringArray0[3] = "M+#%@f$On~S|j";
      stringArray0[4] = "";
      stringArray0[5] = "NoMidnight";
      stringArray0[6] = "M+#%@f$On~S|j";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      periodFormatterBuilder1.toPrinter();
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("pS`fG=%Nb+u)Ko@m", "_:K:FX0d");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      periodFormatterBuilder3.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("_:K:FX0d", "f\"E%:IwK#C");
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder3.printZeroNever();
      periodFormatterBuilder0.appendPrefix("_:K:FX0d");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
      periodFormatterBuilder2.appendWeeks();
      periodFormatterBuilder5.appendSeparator("_", "Prefix not followed by field");
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.rejectSignedValues(false);
      periodFormatterBuilder6.appendDays();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("pS`fG=%Nb+u)Ko@m", "f\"E%:IwK#C");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "_");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 863);
      assertEquals("_f\"E%:IwK#C", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(4);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeconds();
      periodFormatterBuilder6.toParser();
      periodFormatterBuilder5.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendDays();
      periodFormatterBuilder7.printZeroRarelyLast();
      periodFormatterBuilder7.toFormatter();
      periodFormatterBuilder2.maximumParsedDigits(0);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1776);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-3090), 0, false, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Period period0 = Period.seconds((-672));
      Seconds seconds0 = period0.toStandardSeconds();
      Locale locale0 = Locale.KOREAN;
      periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(seconds0, 10, locale0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.finish((PeriodFormatterBuilder.FieldFormatter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }
}
