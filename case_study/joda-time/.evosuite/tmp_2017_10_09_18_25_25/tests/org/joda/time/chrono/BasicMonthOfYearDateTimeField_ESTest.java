/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:15:27 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicMonthOfYearDateTimeField_ESTest extends BasicMonthOfYearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(31536000001L);
      assertFalse(boolean0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(4313L, 4313L);
      assertEquals(0L, long0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertNotNull(monthDay0);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay1 = monthDay0.minusDays(3461);
      assertNotNull(monthDay1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay1.size());
      assertEquals(31, monthDay1.getDayOfMonth());
      assertEquals(8, monthDay1.getMonthOfYear());
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add(15552000000L, 15552000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 15552000000
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 444);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.add((-383L), (-21));
      assertEquals((-55296000383L), long0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = Period.seconds(2147483643);
      assertNotNull(period0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, 185542587187200000L, (long) 1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-5879610), (-6), (-1), (-3), (-23), (-59), (-59), (-999)}, intArray0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicMonthOfYearDateTimeField0.set((long) 0, 4);
      assertEquals(0L, long0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = basicMonthOfYearDateTimeField0.set((long) 1, 1);
      assertEquals((-22982399999L), long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      
      long long0 = gJMonthOfYearDateTimeField0.roundFloor(1971L);
      assertEquals(0L, long0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.roundFloor(2592000001L);
      assertEquals(691200000L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      
      long long0 = gJMonthOfYearDateTimeField0.remainder(0L);
      assertEquals(0L, long0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong((-6447513599999L), (-10799999999L));
      assertEquals((-2651L), long0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 0);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = basicMonthOfYearDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-2295));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.addWrapField(29L, (-2558));
      assertEquals(26265600029L, long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add(0L, (long) 0);
      assertEquals(0L, long0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicMonthOfYearDateTimeField0.add(0L, (long) (-12));
      assertEquals((-28944000000L), long0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = basicMonthOfYearDateTimeField0.add((long) 0, 0);
      assertEquals(0L, long0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 12);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.set((long) 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, locale0, (IslamicChronology.LeapYearPatternType) null);
      assertNotNull(islamicChronology0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.getDifferenceAsLong((-7200000L), (-1028L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-116));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.getDifferenceAsLong((-9223372036854775808L), (-3621L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 3507324295
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, (IslamicChronology.LeapYearPatternType) null);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.get(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      MonthDay monthDay0 = new MonthDay((Chronology) copticChronology0);
      assertNotNull(monthDay0);
      assertEquals(7, monthDay0.getDayOfMonth());
      assertEquals(6, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 1, intArray0, (-306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3081);
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) localDateTime0, (-3081), intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = null;
      try {
        basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField((BasicChronology) null, (-3642));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1665));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap((-60000L));
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.set(466L, 12);
      assertEquals(20736000466L, long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-116));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(29000L, (-3516L));
      assertEquals(0L, long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      
      long long0 = gJMonthOfYearDateTimeField0.add((long) 1, 12);
      assertEquals(31536000001L, long0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = gJMonthOfYearDateTimeField0.getMaximumValue();
      assertEquals(13, int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      int int0 = gJMonthOfYearDateTimeField0.get(2592000004L);
      assertEquals(5, int0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1557);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(4404468641356800001L);
      assertFalse(boolean0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1557);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = basicMonthOfYearDateTimeField0.getLeapAmount(2592000004L);
      assertEquals(0, int0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJMonthOfYearDateTimeField0.set((long) 13, 13);
      assertEquals(21772800013L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong((-339L), 2678397882L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong((-6447513599999L), (-7518441599999L));
      assertEquals(441L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-652));
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-652), (-10540801399L));
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, (-2590), (int[]) null, 2146997901);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      LocalTime localTime0 = LocalTime.now();
      int[] intArray0 = new int[7];
      int[] intArray1 = gJMonthOfYearDateTimeField0.add((ReadablePartial) localTime0, 1, intArray0, 1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Partial partial0 = new Partial(julianChronology0);
      int[] intArray0 = julianChronology0.get((ReadablePartial) partial0, (-567L));
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 444);
      int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) partial0, 1734, intArray0, 189);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1665));
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      basicMonthOfYearDateTimeField0.add((ReadablePartial) yearMonth0, 0, (int[]) null, 0);
      assertEquals(2, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add(1086L, (-61725369599880L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -61725369599880
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((long) 1, (-6447513599999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -6447513599999
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      long long0 = basicMonthOfYearDateTimeField0.add(452L, 2678399985L);
      assertEquals(6501836566828800452L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      long long0 = gJMonthOfYearDateTimeField0.add((-57632860800000L), (-1));
      assertEquals((-57633897600000L), long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      long long0 = gJMonthOfYearDateTimeField0.add((long) 1, (-3097));
      assertEquals((-7518441599999L), long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1557);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-652));
      long long0 = basicMonthOfYearDateTimeField0.addWrapField((-1399L), (-652));
      assertEquals((-10540801399L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1557);
      MonthDay monthDay0 = new MonthDay((long) 1557, (Chronology) ethiopicChronology0);
      int[] intArray0 = new int[4];
      int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 0, intArray0, 18);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertArrayEquals(new int[] {6, 1, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1557);
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1557);
      int int0 = basicMonthOfYearDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1665));
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 0);
      long long0 = basicMonthOfYearDateTimeField0.remainder((-1789L));
      assertEquals(1900798211L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1557);
      long long0 = basicMonthOfYearDateTimeField0.roundFloor(1);
      assertEquals((-1900800000L), long0);
  }
}
