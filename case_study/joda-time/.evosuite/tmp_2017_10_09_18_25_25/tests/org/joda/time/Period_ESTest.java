/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:57:37 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestLocalDateTime_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestMutablePeriod_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(5097600000L, periodType0);
      Duration duration0 = period0.toStandardDuration();
      Period period1 = new Period(instant0, duration0);
      duration0.toStandardDays();
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Period period0 = Period.fieldDifference(testAbstractPartial_MockPartial0, testAbstractPartial_MockPartial0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-2552));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Period period0 = new Period((-2147483647), 1896, (-1069), 4223);
      Period period1 = period0.minusMonths(1896);
      Period period2 = period1.ZERO.minusDays(2640);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      period2.withFieldAdded(durationFieldType0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      int[] intArray0 = new int[0];
      testAbstractPartial_MockPartial0.val = intArray0;
      // Undeclared exception!
      try { 
        Period.fieldDifference(testAbstractPartial_MockPartial0, testAbstractPartial_MockPartial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.TestAbstractPartial$MockPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period(8123L, 8123L);
      period0.getYears();
      Period period1 = period0.negated();
      period0.plusHours(0);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.seconds();
      period0.withPeriodType(periodType0);
      PeriodType.YEAR_INDEX = 1050;
      // Undeclared exception!
      try { 
        period1.minusYears(1607);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1050
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.months(1565);
      Period period1 = period0.toPeriod();
      PeriodType.HOUR_INDEX = 12;
      period1.getWeeks();
      // Undeclared exception!
      try { 
        period1.plusHours(1565);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " as this period contains years and years vary in length");
      Period period0 = new Period((-16), (-16), 10209375, (-53), (-53), (-53), (-16), (-16));
      Period period1 = period0.plusMonths((-53));
      period0.indexOf((DurationFieldType) null);
      period1.getDays();
      Period period2 = period1.minusHours((-53));
      Period period3 = period2.minusYears((-16));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " as this period contains years and years vary in length");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Period period4 = period3.minusMillis((-3403));
      period2.ZERO.getMinutes();
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      period4.isSupported(durationFieldType0);
      Period period5 = period0.minusWeeks((-53));
      PeriodType.years();
      PeriodType.standard();
      period1.plusDays((-1003));
      period5.ZERO.withYears((-1));
      period4.ZERO.plusHours(10209375);
      Period.months((-1003));
      period5.withFieldAdded(durationFieldType0, (-1003));
      period2.plus(period4);
      // Undeclared exception!
      try { 
        period5.multipliedBy(538);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 10209428 * 538
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.days(1259);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[8];
      intArray0[0] = 1259;
      intArray0[1] = 1259;
      intArray0[2] = 1259;
      intArray0[3] = 1259;
      intArray0[4] = 1259;
      PeriodType.days();
      intArray0[5] = 1259;
      intArray0[6] = 400;
      intArray0[7] = 1259;
      PeriodType periodType0 = new PeriodType("w5=gdtmK)u_@{z9xLd", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays(400);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1259
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period(0L, (-283L), (PeriodType) null);
      period0.ZERO.getWeeks();
      Period period1 = period0.plusMinutes(682);
      Period period2 = period0.minusHours((-3927));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      period1.getMonths();
      Period period3 = period2.plusWeeks(0);
      period1.ZERO.getWeeks();
      period3.ZERO.toString();
      Period period4 = period3.normalizedStandard();
      Period period5 = period0.toPeriod();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      period4.ZERO.equals(mockJapaneseDate0);
      period5.getPeriodType();
      period4.toPeriod();
      Period.parse("PT0S");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-394L));
      Duration duration1 = duration0.withMillis((-2132L));
      Duration duration2 = duration1.minus((-394L));
      duration0.toString();
      duration2.plus((ReadableDuration) duration1);
      duration1.minus((ReadableDuration) duration0);
      Period period0 = duration2.toPeriod();
      duration0.compareTo(duration2);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period1 = period0.plusDays((-1));
      Duration.standardHours((-477));
      Period period2 = period1.minusMonths((-792));
      period1.normalizedStandard();
      period2.normalizedStandard(periodType0);
      PeriodType.MONTH_INDEX = 2255;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2255
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Period period0 = Period.millis((-448));
      period0.ZERO.plusMinutes((-448));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#isS");
      int int0 = Calendar.SATURDAY;
      System.setCurrentTimeMillis(3120L);
      Period period1 = period0.plusMinutes((-448));
      period1.ZERO.plusMonths(9);
      Period period2 = period1.ZERO.plusMillis((-448));
      Period.millis(7);
      Period period3 = period1.multipliedBy(7);
      period3.toStandardHours();
      period3.getYears();
      period3.minusWeeks(7);
      PeriodType.minutes();
      period2.minusYears(7);
      period3.toStandardWeeks();
      period1.multipliedBy((-1941));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      periodType0.withMinutesRemoved();
      Period period0 = new Period(43200000L, periodType1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "roJY_ID?WDF2");
      periodType0.withMillisRemoved();
      periodType1.withMonthsRemoved();
      period0.ZERO.equals(mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(2871);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Period period0 = Period.fieldDifference(testAbstractPartial_MockPartial0, testAbstractPartial_MockPartial0);
      // Undeclared exception!
      try { 
        period0.withHours(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-394L));
      Duration duration1 = duration0.withMillis((-2132L));
      Duration duration2 = duration1.minus((-394L));
      duration0.toString();
      duration2.plus((ReadableDuration) duration1);
      duration1.minus((ReadableDuration) duration0);
      Period period0 = duration2.toPeriod();
      duration0.compareTo(duration2);
      PeriodType.yearWeekDayTime();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period1 = period0.plusDays((-1));
      Period period2 = period1.minusMonths((-792));
      period1.normalizedStandard();
      PeriodType.millis();
      period2.normalizedStandard(periodType0);
      period0.toStandardDays();
      period2.getMonths();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.ZERO;
      period0.ZERO.getMillis();
      Period period1 = period0.withMonths((-8));
      Period period2 = period1.plusYears((-8));
      PeriodType.days();
      PeriodType.dayTime();
      Period period3 = Period.days((-2718));
      period1.withMinutes((-2718));
      period1.getDays();
      period0.minusWeeks(0);
      period2.getMonths();
      period3.getDays();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.days(1891);
      period0.ZERO.toStandardMinutes();
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.ZERO;
      period0.ZERO.getMillis();
      Period period1 = period0.withMonths((-8));
      period1.plusYears((-8));
      PeriodType.days();
      PeriodType.dayTime();
      Period period2 = Period.days((-2718));
      period2.ZERO.plusWeeks((-8));
      period1.withMinutes((-2718));
      period1.getDays();
      period0.minusWeeks(0);
      period1.normalizedStandard();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.weeks((-29));
      PeriodType.yearMonthDay();
      Period period1 = period0.plusMillis((-1507));
      Period period2 = period0.plus(period1);
      period2.ZERO.minusMonths(39);
      PeriodType.yearWeekDay();
      Period period3 = period0.plusSeconds((-1507));
      period0.toStandardMinutes();
      ISOPeriodFormat.standard();
      Period period4 = period3.minusMinutes((-2255));
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(0);
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      period0.withFieldAdded(durationFieldType0, (-2255));
      period4.getSeconds();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8|:IE3aL{!k^[^~N%D");
      Period period0 = new Period(1716L, (-2933L));
      Period period1 = period0.withMinutes(43);
      period1.ZERO.toStandardSeconds();
      Period period2 = Period.hours((-4138));
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      period2.ZERO.equals(mockHijrahDate0);
      period2.toStandardSeconds();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      Period period0 = new Period(mutableDateTime0, instant0);
      Period period1 = period0.minusMinutes((-406));
      PeriodType.yearWeekDayTime();
      Period period2 = period1.plusWeeks(1);
      period2.toStandardDuration();
      Period period3 = period1.multipliedBy((-406));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      period0.ZERO.minusMillis(0);
      byteArray0[1] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      period0.equals(mockJapaneseDate0);
      period1.ZERO.minusMillis((byte)44);
      Period period4 = period3.withFields(period0);
      Period period5 = period4.ZERO.multipliedBy(4);
      period5.ZERO.toMutablePeriod();
      period4.ZERO.minusMillis(2);
      PeriodType.weeks();
      Period period6 = period1.plusWeeks(0);
      period0.getValue(2);
      period6.ZERO.toStandardMinutes();
      PeriodType.MONTH_INDEX = 4;
      Period period7 = period6.plusMillis(1);
      period7.ZERO.toString();
      period7.withFields(period2);
      period4.minusSeconds(0);
      Period period8 = Period.minutes(3);
      period8.toString();
      period6.withHours(2255);
      Period.weeks(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.years((-4713));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      period0.ZERO.indexOf(durationFieldType0);
      Period period1 = period0.minusMonths((-4713));
      Period period2 = period1.plusYears(3271);
      period1.plusMonths(2);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P-1442Y4713M
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.hours((-1));
      Period period1 = period0.minusSeconds(477);
      Period period2 = Period.weeks(694);
      period1.ZERO.plusMonths(2147483646);
      Period period3 = Period.months(3472);
      period2.plus(period1);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period4 = period0.minusSeconds(477);
      period0.ZERO.get(durationFieldType0);
      Period period5 = period1.withField(durationFieldType0, 694);
      period5.ZERO.getHours();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      period0.getHours();
      Period.months((-1));
      Period period6 = period1.plusMonths((-1));
      DurationFieldType durationFieldType1 = DurationFieldType.YEARS_TYPE;
      period6.getYears();
      period1.withFieldAdded(durationFieldType1, 5);
      period6.withWeeks((-1454));
      Period.minutes((-1));
      period3.getYears();
      PeriodType periodType0 = PeriodType.days();
      period4.normalizedStandard(periodType0);
      period3.minusMillis(2297);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.weeks(0);
      PeriodType.yearMonthDay();
      Period period1 = period0.plusMillis((-1507));
      Period period2 = period0.plus(period1);
      period2.ZERO.minusMonths(39);
      PeriodType.yearWeekDay();
      period0.plusSeconds((-1507));
      PeriodType.DAY_INDEX = (-254);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -254
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.weeks((-3913));
      PeriodType.yearMonthDay();
      period0.plusMillis((-1507));
      Period period1 = Period.years((-3913));
      Period period2 = period1.ZERO.minusMonths(39);
      PeriodType.yearWeekDay();
      Period period3 = period0.plusSeconds((-1507));
      period0.getWeeks();
      Period period4 = period3.ZERO.withYears((-1770));
      period4.ZERO.withMillis((-1341));
      // Undeclared exception!
      try { 
        period2.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodType.WEEK_INDEX = 614;
      PeriodType.millis();
      PeriodType.WEEK_INDEX = 9;
      Period period0 = Period.months((-1046));
      // Undeclared exception!
      try { 
        period0.withWeeks(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.multipliedBy(3271);
      // Undeclared exception!
      try { 
        period1.minusYears((-3081));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.days((-466));
      period0.plusWeeks(254);
      Weeks weeks0 = period0.ZERO.toStandardWeeks();
      Period period1 = period0.withDays(983);
      weeks0.toStandardMinutes();
      Period period2 = period1.plusMinutes((-2159));
      Period.hours(1971);
      period2.toStandardMinutes();
      Period period3 = Period.millis((-466));
      Period.months((-1003));
      Period period4 = Period.millis(25);
      Period period5 = period4.minusWeeks(170);
      Period period6 = period5.plusDays((-3081));
      Period period7 = period6.negated();
      period3.withYears(254);
      period7.toStandardHours();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.hours(0);
      period0.ZERO.minusDays(0);
      Period period1 = period0.ZERO.withHours((-1454));
      Period period2 = period1.ZERO.plusDays((-1454));
      PeriodType periodType0 = PeriodType.millis();
      Period period3 = period0.ZERO.withDays(0);
      period3.getPeriodType();
      Period period4 = period0.withMinutes(0);
      Period period5 = period4.plusYears((-3559));
      period5.ZERO.toStandardHours();
      Period period6 = period1.ZERO.normalizedStandard(periodType0);
      Period period7 = Period.months((-1046));
      period7.withWeeks(2);
      period2.toStandardMinutes();
      period1.toStandardWeeks();
      // Undeclared exception!
      try { 
        period6.minusDays(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Period period0 = new Period(3496L, 3496L);
      period0.toStandardDuration();
      period0.toStandardWeeks();
      Period period1 = Period.days(3);
      period1.ZERO.withMinutes(3);
      PeriodType.days();
      Period period2 = period0.normalizedStandard();
      period0.getHours();
      PeriodType.WEEK_INDEX = 682;
      period2.plusMonths((-586));
      Period period3 = period0.plusMonths(2);
      // Undeclared exception!
      try { 
        period3.minusWeeks(682);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 682
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.weeks(1);
      period0.toStandardDuration();
      Period.years(1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.seconds(4157);
      Hours hours0 = period0.toStandardHours();
      PeriodType.millis();
      PeriodType.yearWeekDayTime();
      hours0.toStandardDays();
      hours0.toStandardDays();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodType.yearDayTime();
      Period period0 = Period.millis(16);
      period0.ZERO.getWeeks();
      Period period1 = period0.plusDays((-4138));
      Period.weeks(0);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      period1.toStandardDuration();
      period0.withYears((-1681));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.weeks(1386);
      Period period1 = period0.withYears(1386);
      Period period2 = period1.ZERO.withYears(1386);
      period1.ZERO.toString();
      period2.equals(period0);
      Period period3 = period1.plusMinutes(1);
      PeriodType.standard();
      Period period4 = period3.plusMonths(40);
      period1.withFields(period4);
      PeriodType.MILLI_INDEX = 1444;
      PeriodType.yearMonthDayTime();
      period2.negated();
      Period period5 = period4.withSeconds(12);
      period5.minusDays(1386);
      PeriodType.yearWeekDayTime();
      Period period6 = period1.negated();
      // Undeclared exception!
      try { 
        period6.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1444
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withDays(0);
      PeriodType.MILLI_INDEX = (-1562);
      period1.withHours(2);
      period0.getWeeks();
      Period period2 = period0.plusDays(0);
      period2.ZERO.plus(period1);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodType.years();
      period1.ZERO.getFieldTypes();
      // Undeclared exception!
      try { 
        period2.plusMillis((-3179));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1562
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.weeks(0);
      PeriodType.days();
      period0.plusMillis((-1507));
      Period period1 = period0.plus((ReadablePeriod) null);
      period1.ZERO.minusMonths(39);
      PeriodType.yearWeekDay();
      Period period2 = period0.plusSeconds((-1507));
      period2.ZERO.withYears((-1770));
      period0.toStandardMinutes();
      ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse(">h7JxxAs)cF$+;Hjk]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">h7JxxAs)cF$+;Hjk]\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period.weeks(0);
      MockDate mockDate0 = new MockDate();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      period0.toStandardSeconds();
      Period.seconds((-2715));
      PeriodType.yearMonthDayTime();
      mockDate0.after(mockDate0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(682);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      DateTimeZone.getDefault();
      DurationFieldType.centuries();
      Duration duration0 = Duration.standardDays(0L);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-236L), (DateTimeZone) uTCDateTimeZone0);
      Interval interval0 = new Interval(duration0, mutableDateTime0);
      Interval interval1 = interval0.toInterval();
      Duration duration1 = interval1.toDuration();
      Duration duration2 = duration1.plus(86400L);
      Duration duration3 = duration2.withDurationAdded((ReadableDuration) duration1, 3362);
      Minutes minutes0 = duration1.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = duration3.toPeriodFrom((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      periodType0.withHoursRemoved();
      PeriodType periodType1 = PeriodType.months();
      PeriodType.WEEK_INDEX = (-6060);
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      Period period0 = new Period(86400000L, 528L, periodType2);
      // Undeclared exception!
      try { 
        period0.minusDays((-4412));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Period period0 = null;
      try {
        period0 = new Period((-826L), (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.seconds(2);
      period0.toStandardSeconds();
      PeriodType.yearDayTime();
      period0.ZERO.getMonths();
      Period period1 = Period.millis(16);
      Period period2 = period1.plusHours(2);
      period0.toStandardDuration();
      period1.plusDays((-4138));
      Period.weeks(0);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      period2.withField(durationFieldType0, 0);
      period2.withWeeks(0);
      period2.toStandardDuration();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(300, 2248, 4006, 1469, 46);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      Period period2 = period1.normalizedStandard();
      period2.plusMinutes(46);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = periodType1.withMinutesRemoved();
      PeriodType.WEEK_INDEX = (-6060);
      PeriodType periodType3 = periodType2.withSecondsRemoved();
      Period period0 = new Period(86400000L, 528L, periodType3);
      Period period1 = period0.minusDays((-4412));
      Period.seconds((-6060));
      // Undeclared exception!
      try { 
        period1.minusMillis((-6060));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-1607);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      period0.toDurationTo(mutableDateTime0);
      mutableDateTime0.minuteOfHour();
      mutableDateTime0.clone();
      mutableDateTime0.getEra();
      // Undeclared exception!
      try { 
        period0.plusMonths(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1607
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period.weeks(0);
      MockDate mockDate0 = new MockDate();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period(2014, (-4138), (-4138), (-4138));
      Period period1 = period0.plusDays((-4138));
      period0.ZERO.getMillis();
      ISOPeriodFormat.standard();
      Period period2 = period1.withHours(1477);
      period1.getYears();
      Period period3 = period1.withDays((-4138));
      period3.ZERO.withHours((-4138));
      period0.getMinutes();
      period2.plusMillis(1000);
      TestDateTime_Basics testDateTime_Basics0 = null;
      try {
        testDateTime_Basics0 = new TestDateTime_Basics("Seconds");
        fail("Expecting exception: ExceptionInInitializerError");
      
      } catch(ExceptionInInitializerError e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Duration duration1 = duration0.withMillis((-2132L));
      Duration duration2 = duration1.minus(0L);
      duration0.toString();
      duration2.plus((ReadableDuration) duration1);
      duration1.minus((ReadableDuration) duration0);
      Period period0 = duration2.toPeriod();
      duration0.compareTo(duration2);
      PeriodType.yearWeekDayTime();
      Period period1 = period0.minusMinutes((-477));
      period1.minusMonths((-792));
      Period period2 = period1.normalizedStandard();
      period1.withDays(1);
      period0.toStandardDays();
      period2.toStandardDays();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone.forOffsetHoursMinutes(0, 0);
      Period period0 = new Period(366, 0, 999, 5, 0, (-3082), 999, 0);
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      period0.normalizedStandard(periodType1);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1314, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1314
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours((-11));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.getZone();
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      Period period0 = new Period(localTime0, localTime0);
      Period period1 = new Period(period0);
      period0.minus(period1);
      Duration duration0 = Duration.standardHours(3L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes1 = hours0.toStandardMinutes();
      Weeks weeks0 = minutes1.toStandardWeeks();
      weeks0.toStandardHours();
      Period.days(834);
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.minutes((-2846));
      Period period1 = period0.withWeeks((-85));
      Period period2 = Period.minutes((-2846));
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      Period period3 = period2.withField(durationFieldType0, (-2846));
      period3.ZERO.minusHours(2347);
      period3.withDays((-2846));
      Period.months((-2454));
      period1.toStandardSeconds();
      Period.years(400);
      period1.plusMillis(1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.minutes(1689);
      DateTime dateTime0 = new DateTime();
      period0.ZERO.toDurationFrom(dateTime0);
      period0.toStandardSeconds();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period(0L, (-787L), (Chronology) null);
      Period period1 = period0.minusMinutes(1552);
      period1.getHours();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.weeks(4);
      MockDate mockDate0 = new MockDate();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.plusDays(4);
      period1.toStandardSeconds();
      Period.seconds((-2715));
      period0.ZERO.plusHours((-2715));
      MockDate mockDate1 = null;
      try {
        mockDate1 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(100L, 100L, periodType0);
      period0.ZERO.minusWeeks(85);
      // Undeclared exception!
      try { 
        period0.plusDays((-3803));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.millis(630);
      Duration duration0 = period0.toStandardDuration();
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Period period1 = period0.minus(minutes0);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period2 = period1.withFieldAdded(durationFieldType0, (-1382));
      Period period3 = period0.withHours((-1382));
      PeriodType.months();
      period3.negated();
      PeriodType periodType0 = PeriodType.time();
      period2.withSeconds(0);
      Period.weeks(2457);
      PeriodType.seconds();
      period0.getMillis();
      Period period4 = period3.minusYears(630);
      PeriodType.yearDay();
      period3.getMinutes();
      period2.getMinutes();
      period0.getSeconds();
      Period.months(630);
      Period period5 = Period.minutes(6);
      period4.getMillis();
      period1.withPeriodType(periodType0);
      period5.toPeriod();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.years((-3559));
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period((-397L), periodType0);
      period0.getFieldTypes();
      period0.getWeeks();
      Period period1 = period0.withDays(0);
      period1.getMillis();
      Period period2 = period1.negated();
      Period period3 = Period.minutes((-397));
      PeriodType.yearDay();
      Period period4 = period2.withDays(0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      period4.equals(mockHijrahDate0);
      period4.withSeconds(134);
      period3.toStandardHours();
      period2.negated();
      period2.normalizedStandard(periodType0);
      period1.negated();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = Period.days((-1222));
      PeriodType periodType0 = period0.getPeriodType();
      Hours hours0 = period0.toStandardHours();
      hours0.toStandardDays();
      hours0.toStandardDays();
      Period period1 = period0.withFields(hours0);
      period1.withPeriodType(periodType0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Period period0 = Period.minutes(2635);
      period0.toStandardDays();
      period0.ZERO.toMutablePeriod();
      period0.toStandardHours();
      period0.getMinutes();
      period0.minusHours(2635);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType.yearDay();
      PeriodType.yearDayTime();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      period0.ZERO.toStandardMinutes();
      period0.toStandardDays();
      period0.getSeconds();
      // Undeclared exception!
      try { 
        period0.withMinutes(20503125);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period(3984, 1714, 1714, 1714);
      Period period1 = period0.plusWeeks(2005);
      Period period2 = period1.ZERO.plusHours(2005);
      period2.ZERO.toStandardHours();
      PeriodType.YEAR_INDEX = 3984;
      period1.minusDays(2342);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3984
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.years(400);
      Period period1 = Period.weeks(400);
      period1.ZERO.minusMonths(400);
      Period period2 = Period.hours(400);
      period2.getMinutes();
      PeriodType.WEEK_INDEX = 21;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Period period0 = Period.years(2014);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period(0, 2615625, 2615625, 0, 0, 2070, 2070, 0);
      Period period1 = period0.minusHours(1992);
      period1.ZERO.toStandardDays();
      period0.getWeeks();
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period((-2030L), (-2030L));
      Period period1 = period0.ZERO.withDays((-1597));
      period1.ZERO.getDays();
      Period period2 = period0.minusYears(0);
      ISOPeriodFormat.standard();
      PeriodType.WEEK_INDEX = (-1597);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      period2.withFieldAdded(durationFieldType0, 0);
      Period period3 = period0.plusMillis(0);
      period3.getDays();
      period1.getMonths();
      period1.getYears();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.hours(1710);
      period0.getSeconds();
      Period period1 = period0.minusMillis(0);
      period1.toStandardHours();
      Period.hours(0);
      PeriodType.years();
      PeriodType.seconds();
      Period period2 = Period.seconds((-9));
      period2.ZERO.minusHours(1710);
      period2.withSeconds(0);
      period2.minusSeconds(0);
      PeriodType.MINUTE_INDEX = 1710;
      // Undeclared exception!
      try { 
        period0.plusMinutes(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1710
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.multipliedBy(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PeriodType.SECOND_INDEX = 2613;
      period1.get(durationFieldType0);
      Period period2 = period1.ZERO.withField(durationFieldType0, 2613);
      // Undeclared exception!
      try { 
        period2.plusSeconds(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2613
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.ZERO;
      Days days0 = period0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy(0L);
      Instant instant0 = new Instant();
      Instant instant1 = instant0.minus(0L);
      Instant instant2 = instant1.plus(0L);
      Period period1 = new Period(duration1, instant2);
      period1.minusMinutes(313);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.days(4157);
      Hours hours0 = period0.toStandardHours();
      PeriodType.millis();
      PeriodType.yearWeekDayTime();
      hours0.toStandardDays();
      hours0.toStandardDays();
      Period period1 = period0.withFields(hours0);
      period1.toStandardWeeks();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = new Period(monthDay0, monthDay0);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      durationFieldType0.isSupported(chronology0);
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = null;
      try {
        testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("KW#?C");
        fail("Expecting exception: ExceptionInInitializerError");
      
      } catch(ExceptionInInitializerError e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.years(1202);
      period0.normalizedStandard();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.months(0);
      period0.getValue(0);
      period0.ZERO.toString();
      Period period1 = period0.minusMillis(0);
      period1.ZERO.getMillis();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      Period period2 = period1.minus(period0);
      period2.ZERO.plusMonths(0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("Seconds", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = period0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      Hours hours1 = seconds0.toStandardHours();
      Duration duration0 = hours1.toStandardDuration();
      Duration duration1 = duration0.plus((-876L));
      PeriodType periodType0 = PeriodType.minutes();
      duration1.toPeriodTo((ReadableInstant) null, periodType0);
      duration1.toStandardDays();
      Period period1 = new Period((ReadableInstant) null, duration1, (PeriodType) null);
      Period period2 = period1.ZERO.plusMillis(1708);
      period2.ZERO.getYears();
      Period period3 = period1.plus(seconds0);
      period3.withMillis((-70));
      period0.toStandardDuration();
      PeriodType.WEEK_INDEX = 1427;
      Period.months(8);
      period1.getDays();
      // Undeclared exception!
      try { 
        period3.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1427
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = new Period(0L, (-3584L));
      Period period1 = period0.withMillis((-32));
      Period period2 = Period.hours(2546);
      PeriodType.WEEK_INDEX = 1015;
      PeriodType.days();
      Period period3 = period2.plus(period1);
      // Undeclared exception!
      try { 
        period3.ZERO.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1015
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = Period.seconds(0);
      period0.minusSeconds(0);
      Period period1 = period0.minusYears(0);
      period0.getDays();
      Period period2 = period1.withMonths(0);
      period0.minus(period1);
      period0.plusMinutes(0);
      period2.withSeconds(0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(3913L, periodType0);
      Period period1 = period0.normalizedStandard(periodType0);
      Period period2 = period1.toPeriod();
      // Undeclared exception!
      try { 
        period2.withWeeks((-2214));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = new Period((Object) null, (Chronology) null);
      TestMutablePeriod_Basics testMutablePeriod_Basics0 = null;
      try {
        testMutablePeriod_Basics0 = new TestMutablePeriod_Basics("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.months(0);
      LocalTime localTime0 = new LocalTime((long) 0);
      Period period1 = Period.fieldDifference(localTime0, localTime0);
      PeriodType.MILLI_INDEX = (-145);
      period0.getSeconds();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      periodType0.withYearsRemoved();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -145
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = new Period((-1909), (-1909), (-1909), 906, (-1909), 906, 9, 1207);
      period0.ZERO.minusMonths((-4177));
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      Period period0 = new Period(2101L, (PeriodType) null, chronology0);
      PeriodType.dayTime();
      Duration duration0 = new Duration((Object) null);
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours1 = weeks0.toStandardHours();
      Duration duration1 = hours1.toStandardDuration();
      instant0.minus((ReadableDuration) duration1);
      period0.withSeconds(99);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Period period0 = null;
      try {
        period0 = new Period(1309L, periodType0, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period((-984L), periodType0);
      Period period1 = period0.normalizedStandard();
      PeriodType.yearDay();
      ISOPeriodFormat.standard();
      PeriodType.yearMonthDayTime();
      period1.withMinutes(1194);
      // Undeclared exception!
      try { 
        period0.minusMonths(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      Period period0 = new Period(dateTime0, (ReadableDuration) null);
      Period period1 = period0.minusDays(4);
      period1.toStandardDays();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(86400L);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      period0.normalizedStandard(periodType0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.ZERO;
      period0.toStandardSeconds();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-394L));
      Duration duration1 = duration0.withMillis((-2132L));
      Duration duration2 = duration1.minus((-394L));
      duration0.toString();
      duration2.plus((ReadableDuration) duration1);
      duration1.minus((ReadableDuration) duration0);
      Period period0 = duration2.toPeriod();
      duration0.compareTo(duration2);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period1 = period0.minusMonths((-792));
      period0.normalizedStandard();
      period1.normalizedStandard(periodType0);
      period0.toStandardDays();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.days(4157);
      Hours hours0 = period0.toStandardHours();
      PeriodType periodType0 = PeriodType.millis();
      PeriodType.yearWeekDayTime();
      hours0.toStandardDays();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 359164800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period.hours(0);
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale((Locale) null);
      // Undeclared exception!
      try { 
        Period.parse("tn$", periodFormatter2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"tn$\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Period period0 = null;
      try {
        period0 = new Period(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, periodType0);
      period0.getSeconds();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      period0.toDurationFrom(mutableDateTime0);
      DateTime dateTime0 = new DateTime(0L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      periodType0.toString();
      Period period1 = period0.minus(mutablePeriod0);
      mutablePeriod0.add((ReadableInterval) null);
      Period period2 = period1.plus(mutablePeriod0);
      period2.ZERO.normalizedStandard();
      // Undeclared exception!
      try { 
        period2.withMonths(234);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = Period.millis(3433);
      Period period1 = period0.ZERO.plusDays(3433);
      period1.multipliedBy(3433);
      period0.plusYears(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-196L), periodType0);
      period0.getWeeks();
      Period period1 = period0.withHours((-2022));
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      period1.indexOf(durationFieldType0);
      PeriodType.SECOND_INDEX = (-2022);
      // Undeclared exception!
      try { 
        period0.withSeconds((-2022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2022
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = Period.days((-3428));
      Period period1 = period0.normalizedStandard();
      Period period2 = period1.ZERO.withWeeks((-1));
      period1.minus(period0);
      PeriodType.minutes();
      period0.withMinutes(0);
      Period.weeks(508);
      period2.toStandardMinutes();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.hours(12);
      PeriodType.millis();
      PeriodType.yearWeekDay();
      Period period1 = Period.months((-2898));
      period0.getHours();
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = Period.years(0);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period(12, 12, (-1127), 12);
      period0.toStandardMinutes();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period(0L, (Chronology) null);
      Period period1 = period0.plusHours(0);
      period1.ZERO.getHours();
      Period period2 = period0.normalizedStandard((PeriodType) null);
      period2.toMutablePeriod();
      PeriodType.yearMonthDayTime();
      period0.withWeeks(0);
      period0.getMillis();
      Period period3 = period2.ZERO.minusMonths((-1708));
      period3.withWeeks(0);
      period0.getMonths();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = Period.hours((-1752));
      PeriodType.weeks();
      PeriodType.YEAR_INDEX = (-1752);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period.parse("", periodFormatter0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1752
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.minutes((-528));
      PeriodType.WEEK_INDEX = (-528);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -528
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.seconds(1000);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Duration duration0 = new Duration(0L, (-787L));
      Duration duration1 = duration0.plus(3600000L);
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      Days days0 = period0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = new Period((ReadableInstant) null, duration1, periodType0);
      Duration duration2 = period1.toStandardDuration();
      period0.withMillis(7);
      Period period2 = new Period(duration2, (ReadableInstant) null, periodType0);
      period0.plusSeconds(913);
      // Undeclared exception!
      try { 
        period1.plusYears(1998);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      PeriodType periodType0 = PeriodType.weeks();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      Period period0 = null;
      try {
        period0 = new Period(mockMinguoDate0, periodType0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, uTCDateTimeZone0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, (PeriodType) null);
      Period period1 = period0.multipliedBy(2);
      period1.withSeconds(4);
      period0.toStandardDuration();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Duration duration0 = new Duration(41000L);
      Period period0 = new Period(duration0, (ReadableInstant) null, (PeriodType) null);
      Period period1 = period0.minusDays((-31));
      Period period2 = period1.withHours(0);
      period2.negated();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodType.yearMonthDay();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      ISOPeriodFormat.standard();
      Period period0 = null;
      try {
        period0 = new Period(39, 39, 39, (-1507), (-1507), 39, 39, 39, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period(4, 4, 4, 4, 4, 4, 4, 4, (PeriodType) null);
      Period period1 = period0.minusWeeks(1126);
      DurationFieldType durationFieldType0 = period0.ZERO.getFieldType(4);
      Period period2 = period0.ZERO.withYears(4);
      Period period3 = period1.ZERO.withMinutes(1126);
      period3.ZERO.isSupported(durationFieldType0);
      Period.days(1672);
      PeriodType periodType0 = PeriodType.time();
      period3.normalizedStandard(periodType0);
      period3.ZERO.getFieldTypes();
      period0.ZERO.getMonths();
      PeriodType.hours();
      period1.ZERO.negated();
      period0.getDays();
      Period period4 = period0.plusWeeks(70);
      Period period5 = period4.ZERO.withFields(period2);
      period5.ZERO.minusWeeks(1);
      Period period6 = period1.ZERO.withWeeks(0);
      Period period7 = period6.withMillis(0);
      period7.withMillis(70);
      period0.getSeconds();
      period1.getHours();
      period5.minusHours(1126);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType.dayTime();
      Period period0 = new Period(0L, 0L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusMinutes(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.plusMonths(1078);
      Period.days((-82));
      period1.ZERO.plus(period0);
      period0.getSeconds();
      period0.getSeconds();
      period0.ZERO.toStandardHours();
      period1.minusMonths((-243));
      // Undeclared exception!
      try { 
        period1.withSeconds(1078);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.years((-1791));
      Period period1 = period0.minusHours((-1791));
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      period1.ZERO.getSeconds();
      period0.getYears();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getValueAsLong((long) (-1791));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = new Period(1669L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.weeks((-1510));
      period0.plusSeconds(0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.ZERO;
      period0.multipliedBy(7);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period((Object) null, periodType0);
      Period period1 = period0.withFields(period0);
      PeriodType.time();
      period1.toStandardMinutes();
      period0.toStandardHours();
      period1.plusDays(0);
      period0.minusMonths(0);
      period0.getYears();
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("ij7fP:tY-", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.millis(3458);
      Period period1 = period0.ZERO.plusDays(3458);
      period1.multipliedBy(3458);
      period0.plusYears(3458);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
      try {
        period0 = new Period(mockHijrahDate0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period();
      period0.toMutablePeriod();
      PeriodType periodType0 = PeriodType.millis();
      PeriodType.DAY_INDEX = 1971;
      PeriodType.yearMonthDay();
      Period period1 = period0.withPeriodType(periodType0);
      Period period2 = Period.seconds(1971);
      Period period3 = period2.minusMonths(1063);
      period3.withYears(1971);
      PeriodType.HOUR_INDEX = 1971;
      period1.ZERO.getMinutes();
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1971
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Instant instant0 = new Instant((-102L));
      Period period0 = new Period(instant0, instant0);
      Period period1 = period0.plusSeconds(3399);
      period1.plusMinutes(3399);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.seconds((-4189));
      period0.toStandardWeeks();
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = duration0.minus((long) (-4189));
      duration0.minus((ReadableDuration) duration1);
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = null;
      try {
        testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("@mz2 U6t-NK1LN;X5");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeriodType periodType0 = PeriodType.minutes();
      Instant instant0 = new Instant(4028L);
      Duration duration0 = new Duration((Object) null);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 1000);
      Period period0 = new Period(instant1, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(1000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.minutes(712);
      PeriodType.HOUR_INDEX = 712;
      Period.years(712);
      Period.weeks(18);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 712
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Instant instant0 = new Instant(2586L);
      Period period0 = new Period(instant0, instant0);
      period0.withWeeks((-2363));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      Instant instant1 = instant0.withMillis(5097600000L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(5097600000L, periodType0);
      Duration duration0 = period0.toStandardDuration();
      Period period1 = new Period(instant1, duration0);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      PeriodType.years();
      PeriodType.seconds();
      Period period0 = mutablePeriod0.toPeriod();
      period0.ZERO.getValues();
      Period period1 = period0.withPeriodType(periodType0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      period1.withMonths(4);
      period1.withFields(period0);
      Period.days((-1507));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = new Period();
      period0.toStandardMinutes();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Period period0 = new Period((-2147483625), 1896, 1896, 4223);
      Period period1 = period0.minusMonths(1896);
      Period period2 = period1.ZERO.minusDays(2640);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      period2.withFieldAdded(durationFieldType0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Period.parse("org.joda.time.TestInterval_Constructors");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.TestInterval_Const...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Period period0 = Period.millis((-448));
      period0.ZERO.plusMinutes((-448));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#isS");
      period0.ZERO.getMonths();
      System.setCurrentTimeMillis(3120L);
      Period period1 = period0.plusMinutes((-448));
      period1.ZERO.plusMonths(9);
      Period period2 = period1.ZERO.plusMillis((-448));
      Period.millis(0);
      Period period3 = period1.multipliedBy(0);
      period3.toStandardHours();
      period3.getYears();
      period3.minusWeeks(0);
      PeriodType.minutes();
      period2.minusYears(0);
      period3.toStandardWeeks();
      period1.multipliedBy((-1941));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period(0L, (-545L));
      Period period1 = period0.minusYears((-3289));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, millisDurationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      DurationFieldType durationFieldType0 = dateTimeFieldType1.getDurationType();
      // Undeclared exception!
      try { 
        period1.withFieldAdded(durationFieldType0, (-3289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = new Period(0L, (-545L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, millisDurationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      dateTimeFieldType1.getDurationType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      period0.withYears((-254));
      period0.getYears();
      PeriodType.minutes();
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.years((-4713));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      period0.ZERO.indexOf(durationFieldType0);
      Period period1 = period0.minusMonths((-4713));
      Period period2 = period1.plusYears(3271);
      int int0 = 2;
      Period period3 = period1.plusMonths(2);
      Period period4 = period2.minusMillis((-4713));
      period4.ZERO.toStandardDays();
      period3.withMonths((-4713));
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      period4.withHours((-4713));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period5 = period0.withSeconds(2014);
      period5.ZERO.getMinutes();
      period2.normalizedStandard();
      Period.days((-4713));
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = new Period(0L, (-283L), (PeriodType) null);
      period0.ZERO.getWeeks();
      Period period1 = period0.plusMinutes(106);
      Period period2 = period0.minusHours((-3927));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      period1.getMonths();
      Period period3 = period2.plusWeeks(0);
      period1.ZERO.getWeeks();
      period3.ZERO.toString();
      Period period4 = period3.normalizedStandard();
      Period period5 = period0.toPeriod();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      period4.ZERO.equals(mockJapaneseDate0);
      period5.getPeriodType();
      period4.toPeriod();
      period1.plusYears(1607);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.months(1565);
      int int0 = Calendar.DECEMBER;
      Period period1 = period0.toPeriod();
      period1.getWeeks();
      period1.minusMillis(11);
      Period period2 = period1.minusSeconds(0);
      period2.plusHours(1565);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Period period0 = Period.fieldDifference(testAbstractPartial_MockPartial0, testAbstractPartial_MockPartial0);
      int int0 = 8;
      // Undeclared exception!
      try { 
        period0.minusWeeks(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.days((-466));
      period0.plusWeeks(254);
      Weeks weeks0 = period0.ZERO.toStandardWeeks();
      Period period1 = period0.withDays(983);
      weeks0.toStandardMinutes();
      Period period2 = period1.plusMinutes((-2159));
      Period.hours(1971);
      period2.toStandardMinutes();
      Period period3 = Period.millis((-466));
      Period period4 = Period.months((-1003));
      Period period5 = Period.millis(25);
      period5.minusWeeks(170);
      period4.negated();
      period3.withDays((-2159));
      Period.minutes(983);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.ZERO.minusDays(0);
      int int0 = 614;
      PeriodType.WEEK_INDEX = 614;
      period1.toDurationTo((ReadableInstant) null);
      Period period2 = period0.ZERO.withHours((-1454));
      period2.ZERO.plusDays((-1454));
      PeriodType.millis();
      PeriodType.WEEK_INDEX = 9;
      Period period3 = period0.ZERO.withDays(0);
      period3.getPeriodType();
      Period period4 = period0.withMinutes(0);
      Period period5 = period4.plusYears((-3559));
      // Undeclared exception!
      try { 
        period5.ZERO.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.days(4157);
      period0.getPeriodType();
      Hours hours0 = period0.toStandardHours();
      hours0.toStandardDays();
      hours0.toStandardDays();
      Period period1 = period0.withFields(hours0);
      PeriodType periodType0 = PeriodType.minutes();
      // Undeclared exception!
      try { 
        period1.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = new Period((-1561), 33, (-1561), (-1567), (-2552), 33, (-2552), (-1000));
      period0.plusMillis(572);
      DateTimeZone.getDefault();
      DurationFieldType.centuries();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(0);
      PeriodType.yearMonthDay();
      Period period1 = period0.plusMillis((-1507));
      period1.getHours();
      Period period2 = period0.plus(period1);
      period2.ZERO.minusMillis(0);
      PeriodType.yearWeekDay();
      Period period3 = period0.plusSeconds((-1507));
      Period period4 = period3.ZERO.withYears((-1770));
      period0.toStandardMinutes();
      ISOPeriodFormat.standard();
      period3.minusMinutes(0);
      period4.minusHours(0);
      MonthDay monthDay0 = null;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1770);
      intArray0[1] = 39;
      intArray0[2] = (-1770);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 39;
      intArray0[7] = 39;
      MonthDay monthDay1 = null;
      try {
        monthDay1 = new MonthDay((MonthDay) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.weeks(0);
      PeriodType.yearMonthDay();
      int int0 = (-1507);
      Period period1 = period0.plusMillis((-1507));
      Period period2 = period0.plus(period1);
      int int1 = 39;
      period2.ZERO.minusMonths(39);
      PeriodType.yearWeekDay();
      period0.plusSeconds((-1507));
      period0.toStandardMinutes();
      ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse(">h7JxxAs)cF$+;Hjk]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">h7JxxAs)cF$+;Hjk]\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-394L));
      Duration duration1 = duration0.withMillis((-2132L));
      Duration duration2 = duration1.minus((-394L));
      duration0.toString();
      duration2.plus((ReadableDuration) duration1);
      duration1.minus((ReadableDuration) duration0);
      Period period0 = duration2.toPeriod();
      duration0.compareTo(duration2);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period1 = period0.plusDays((-1));
      Period period2 = period1.minusMonths((-1));
      period1.normalizedStandard();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P1M-1DT-1.738S
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Period.fieldDifference(localTime0, localTime0);
      int int0 = (-2715);
      Period.seconds((-2715));
      String string0 = "h=";
      PeriodType.yearMonthDayTime();
      mockDate0.after(mockDate0);
      // Undeclared exception!
      try { 
        Date.from((java.time.Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.seconds(2);
      Seconds seconds0 = period0.toStandardSeconds();
      PeriodType.yearDayTime();
      period0.ZERO.getMonths();
      Period period1 = Period.millis(16);
      Period period2 = period1.plusHours(2);
      period0.toStandardDuration();
      Period period3 = period1.plusDays((-4138));
      Period.weeks((-4138));
      Period period4 = period3.ZERO.minus(seconds0);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      period4.withField(durationFieldType0, 16);
      Period.minutes(0);
      period2.withWeeks(0);
      Period period5 = period0.withMillis(430);
      period5.ZERO.plusMillis(5);
      Duration duration0 = period4.toStandardDuration();
      assertEquals((-2L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = new Period(8123L, 8123L);
      period0.getYears();
      Period period1 = period0.negated();
      period0.plusHours(0);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.seconds();
      period0.withPeriodType(periodType0);
      int int0 = 1587;
      Period period2 = period1.minusYears(1587);
      int int1 = 0;
      Period period3 = period2.ZERO.minus(period0);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      int int2 = (-2);
      // Undeclared exception!
      try { 
        period3.withFieldAdded(durationFieldType0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
}
