/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:28:34 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.MockZone;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicDayOfMonthDateTimeField;
import org.joda.time.chrono.BasicSingleEraDateTimeField;
import org.joda.time.chrono.GJDayOfWeekDateTimeField;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZonedChronology_ESTest extends ZonedChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, millisDurationField0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      DurationField durationField0 = gJEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicDayOfMonthDateTimeField0, (DateTimeZone) null, millisDurationField0, millisDurationField0, durationField0);
      DurationField durationField1 = zonedChronology_ZonedDateTimeField0.getLeapDurationField();
      assertEquals(0L, durationField1.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("-02:00");
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-131L));
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, decoratedDurationField0, preciseDurationField0, preciseDurationField0);
      DurationField durationField0 = zonedChronology_ZonedDateTimeField0.getRangeDurationField();
      assertSame(durationField0, preciseDurationField0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2977L);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDurationField0.getMillis(9223372036854775807L, 1659L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.add(2949L, 2949L);
      assertEquals(5898L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-131L));
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, (DateTimeZone) null);
      boolean boolean0 = zonedChronology_ZonedDurationField0.isPrecise();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.getUnitMillis();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2954L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, dateTimeZone0);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDurationField0.add((-9223372036854775808L), (-3689L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -10897306
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2930L);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDurationField0.add((-9223372036854775808L), (-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.set((-1242L), "2Qk[QZ`X Z5ib", (Locale) null);
      assertEquals((-1242L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.roundFloor(1);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483597), (-2147483597));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.remainder(2922L);
      assertEquals(9223372034707346133L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedDate(formatStyle0);
      Locale locale0 = dateTimeFormatter0.getLocale();
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((-4527L), locale0);
      assertEquals("2Qk[QZ`X Z5ib", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483597), (-2147483597));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(549L);
      assertEquals("2Qk[QZ`X Z5ib", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483597), (-2147483597));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.addWrapField((-4527L), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5iH");
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = ZonedChronology.useTimeArithmetic((DurationField) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, (DurationField) null, (DurationField) null, (DurationField) null);
      Locale locale0 = Locale.ITALIAN;
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.roundCeiling(604799983L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1574L), (-2147483597), (-2147483597));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfEven((-2147483597));
      assertEquals((-9223372034707292212L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1, 604799983L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1, (-2147327595L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField((BasicChronology) null, millisDurationField0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, millisDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(370L, (-604800000L));
      assertEquals(604800370, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483617), 143);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.getDifference((-800L), (-2147483617));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.set(2977L, 1);
      assertEquals(2977L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5iH");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.addWrapField((-3835L), 1706);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.add((-131L), (-131L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), 1136, 1136);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.add((long) 1136, (long) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.add(2931L, 2147483646);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483617), 143);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.add(2285L, 845);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2954L);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = null;
      try {
        zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(unsupportedDateTimeField0, (DateTimeZone) null, preciseDurationField0, preciseDurationField0, preciseDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2954L);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, (DateTimeZone) null);
      boolean boolean0 = zonedChronology_ZonedDurationField0.equals(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2954L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, dateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(2724L, (byte)123);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
      int int0 = zonedChronology_ZonedDurationField0.getDifference((-980L), 2949L);
      assertEquals((-3929), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.subtract((-980L), (-980L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 9223372036854775807L);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, (DateTimeZone) null);
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance((Chronology) null, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, (DurationField) null, (DurationField) null, (DurationField) null);
      Locale locale0 = Locale.KOREAN;
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483617), 143);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      Locale locale0 = Locale.US;
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, (DurationField) null, (DurationField) null, (DurationField) null);
      int[] intArray0 = new int[4];
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, (DurationField) null, (DurationField) null, (DurationField) null);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedDate(formatStyle0);
      Locale locale0 = dateTimeFormatter0.getLocale();
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.getAsShortText(3490L, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, (DurationField) null, (DurationField) null, (DurationField) null);
      int[] intArray0 = new int[6];
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) null, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483597), (-2147483597));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1574L), (-2147483597), (-2147483597));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue(2957L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField((BasicChronology) null, millisDurationField0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, (DateTimeZone) null, millisDurationField0, millisDurationField0, millisDurationField0);
      DurationField durationField0 = zonedChronology_ZonedDateTimeField0.getDurationField();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), 1136, 1136);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue((-1586L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1586L), (-2147483597), 156);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getLeapAmount(156);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, (DurationField) null, (DurationField) null, (DurationField) null);
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5iH");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      Locale locale0 = Locale.PRC;
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(1, locale0);
      assertEquals("2Qk[QZ`X Z5iH", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, millisDurationField0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      DurationField durationField0 = gJEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicDayOfMonthDateTimeField0, (DateTimeZone) null, millisDurationField0, millisDurationField0, durationField0);
      Locale locale0 = Locale.GERMAN;
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(0, locale0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      MockZone mockZone0 = new MockZone((-1574L), (-2147483597), (-2147483597));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, mockZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.get(0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5ib");
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, (DateTimeZone) null, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("2Qk[QZ`X Z5iH");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicSingleEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2954L);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDurationField0.getValue(1293L, 2954L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.getMillis(4606, 1680000L);
      assertEquals(4606L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.getMillis((long) 4606, (long) 4606);
      assertEquals(4606L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2954L);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDurationField0.getValueAsLong(543L, (-1175L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
      }
  }
}
