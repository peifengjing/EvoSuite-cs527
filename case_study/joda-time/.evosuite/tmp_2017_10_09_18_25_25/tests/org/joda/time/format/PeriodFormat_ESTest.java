/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 05:27:57 GMT 2017
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Days;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormat_ESTest extends PeriodFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.hours(0);
      Locale locale0 = Locale.ITALY;
      int int0 = periodFormat_DynamicWordBased0.calculatePrintedLength(period0, locale0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodFormat.wordBased((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2242L));
      int int0 = periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "*d", (-2236), (Locale) null);
      assertEquals((-2236), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Locale locale0 = new Locale("USYm)^F=d", "USYm)^F=d");
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased(locale0);
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.hours(0);
      Locale locale0 = Locale.ITALY;
      StringWriter stringWriter0 = new StringWriter(328);
      periodFormat_DynamicWordBased0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("0 millisecondi", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.hours(0);
      Locale locale0 = Locale.ITALY;
      StringWriter stringWriter0 = new StringWriter(328);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      periodFormat_DynamicWordBased0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("0 millisecondi", stringBuffer0.toString());
      assertEquals("0 millisecondi", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.hours(0);
      Locale locale0 = Locale.ITALY;
      int int0 = periodFormat_DynamicWordBased0.countFieldsToPrint(period0, 531, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.days((-3220));
      Days days0 = period0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Locale locale0 = Locale.KOREA;
      int int0 = periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "weekyear", (-3220), locale0);
      assertEquals((-3220), int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2242L));
      int int0 = periodFormat_DynamicWordBased0.countFieldsToPrint(mutablePeriod0, (-2236), (Locale) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PeriodFormat periodFormat0 = new PeriodFormat();
  }
}
