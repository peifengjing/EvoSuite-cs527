/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:58:39 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJDayOfWeekDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      long long0 = iSOChronology0.add(260L, (long) 1, 1);
      assertEquals(261L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      assertNotNull(strictChronology0);
      
      long long0 = strictChronology0.add(839L, 839L, 3468);
      assertEquals(2910491L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.add((long) 20, (long) 20, 0);
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      Period period0 = Period.minutes((byte)101);
      assertNotNull(period0);
      
      long long0 = islamicChronology0.add((ReadablePeriod) period0, (-2998L), (int) (byte)101);
      assertEquals(612057002L, long0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1));
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      assertNotNull(mockDate0);
      
      mockDate0.setTime((-1));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.getDateTimeMillis((-1485L), 457, 1, (-2781), (-63));
      assertEquals(1556078937L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.getDateTimeMillis((-2279), 2145303461, 31, 3441, 0, (-1334), 365);
      assertEquals(5641584966837466365L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      try { 
        buddhistChronology0.getDateTimeMillis((-2112), (-292269054), (-2414), (-2112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269054 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertNotNull(lenientChronology0);
      
      DateTimeZone dateTimeZone0 = lenientChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DurationField durationField0 = islamicChronology0.years();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2506);
      assertEquals("+00:00:02.506", dateTimeZone0.getID());
      assertEquals("+00:00:02.506", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:02.506", dateTimeZone0.getID());
      assertEquals("+00:00:02.506", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(iSOChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      assertEquals("+00:00:02.506", dateTimeZone0.getID());
      assertEquals("+00:00:02.506", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(lenientChronology0);
      
      DateTimeField dateTimeField0 = lenientChronology0.yearOfCentury();
      assertEquals("+00:00:02.506", dateTimeZone0.getID());
      assertEquals("+00:00:02.506", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeField0.isLenient());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeField dateTimeField0 = strictChronology0.year();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone((DateTimeZone) null);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withUTC();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DurationField durationField0 = julianChronology0.weekyears();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.weekyearOfCentury();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.weeks();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.weekOfWeekyear();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1, 0);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      String string0 = islamicChronology0.toString();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("IslamicChronology[UTC]", string0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(lenientChronology0);
      
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) buddhistChronology0);
      assertEquals(2513, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      
      long long0 = lenientChronology0.set(yearMonth0, 1);
      assertEquals(2513, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1807), (-1807), 2514, (-929), (-1807), (-1807));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1807,MONTH=-1807,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2514,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-929,HOUR_OF_DAY=-929,MINUTE=-1807,SECOND=-1807,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-123730414627000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1952,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=68,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=22,SECOND=53,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      long long0 = julianChronology0.set(localDate0, 2514);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-123730414627000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1952,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=68,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=22,SECOND=53,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
      assertEquals((-123698879997486L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.seconds();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(lenientChronology0);
      
      DateTimeField dateTimeField0 = lenientChronology0.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertTrue(dateTimeField0.isLenient());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)gregorianChronology0.secondOfDay();
      assertEquals("secondOfDay", preciseDateTimeField0.getName());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals(86399, preciseDateTimeField0.getMaximumValue());
      assertEquals(86400, preciseDateTimeField0.getRange());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(1000L, preciseDateTimeField0.getUnitMillis());
      assertTrue(preciseDateTimeField0.isSupported());
      assertNotNull(preciseDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      assertNotNull(strictChronology0);
      
      DurationField durationField0 = strictChronology0.months();
      assertEquals("months", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.monthOfYear();
      assertFalse(dateTimeField0.isLenient());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(12, dateTimeField0.getMaximumValue());
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.minutes();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)iSOChronology0.minuteOfHour();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("minuteOfHour", preciseDateTimeField0.getName());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals(60, preciseDateTimeField0.getRange());
      assertEquals(59, preciseDateTimeField0.getMaximumValue());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertTrue(preciseDateTimeField0.isSupported());
      assertNotNull(preciseDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(iSOChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(strictChronology0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)strictChronology0.minuteOfDay();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals(1440, preciseDateTimeField0.getRange());
      assertEquals("minuteOfDay", preciseDateTimeField0.getName());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertEquals(1439, preciseDateTimeField0.getMaximumValue());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(preciseDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.millisOfDay();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.millis();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DurationField durationField0 = ethiopicChronology0.hours();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)julianChronology0.hourOfDay();
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(24, preciseDateTimeField0.getRange());
      assertEquals("hourOfDay", preciseDateTimeField0.getName());
      assertEquals(23, preciseDateTimeField0.getMaximumValue());
      assertEquals(3600000L, preciseDateTimeField0.getUnitMillis());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertFalse(preciseDateTimeField0.isLenient());
      assertNotNull(preciseDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DurationField durationField0 = ethiopicChronology0.halfdays();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      EthiopicChronology ethiopicChronology0 = new EthiopicChronology(islamicChronology0, object0, 1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.halfdayOfDay();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertNotNull(lenientChronology0);
      
      DateTimeZone dateTimeZone0 = lenientChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      long long0 = buddhistChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals((-79271567999999L), long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("eras", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertFalse(durationField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.era();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.days();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.dayOfYear();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = (GJDayOfWeekDateTimeField)gregorianChronology0.dayOfWeek();
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertNotNull(gJDayOfWeekDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.clockhourOfDay();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(lenientChronology0);
      
      DateTimeField dateTimeField0 = lenientChronology0.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertTrue(dateTimeField0.isLenient());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DurationField durationField0 = islamicChronology0.centuries();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      long long0 = buddhistChronology0.add(0L, 0L, 400);
      assertEquals(0L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        ethiopicChronology0.validate((ReadablePartial) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      Duration duration0 = Duration.standardSeconds(1);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) hours0, 4980000L);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(intArray0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) islamicChronology0);
      assertEquals(1435, yearMonth0.getYear());
      assertEquals(4, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      
      // Undeclared exception!
      try { 
        buddhistChronology0.validate(yearMonth0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1279));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.279", dateTimeZone0.toString());
      assertEquals("-00:00:01.279", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.279", dateTimeZone0.toString());
      assertEquals("-00:00:01.279", dateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      
      // Undeclared exception!
      try { 
        iSOChronology0.set((ReadablePartial) null, (-9L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("uZ<-i");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis(1L, 3600, 3600, 3600, 3600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3600 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      try { 
        buddhistChronology0.getDateTimeMillis(2182, 2182, 2182, 2182, (-32), (-412), 2182);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2182 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      assertNotNull(gregorianChronology0);
      
      try { 
        gregorianChronology0.getDateTimeMillis(1, 292278993, Integer.MAX_VALUE, (-4262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4262 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.get((ReadablePeriod) null, 1084L, (long) 659);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertNotNull(lenientChronology0);
      
      DateTimeZone dateTimeZone0 = lenientChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.get((ReadablePeriod) null, 934L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.get((ReadablePartial) null, 41L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.standardDays((byte) (-64));
      assertEquals((-1536L), duration0.getStandardHours());
      assertEquals((-64L), duration0.getStandardDays());
      assertEquals((-5529600L), duration0.getStandardSeconds());
      assertEquals((-92160L), duration0.getStandardMinutes());
      assertEquals((-5529600000L), duration0.getMillis());
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals((-1536L), duration0.getStandardHours());
      assertEquals((-64L), duration0.getStandardDays());
      assertEquals((-5529600L), duration0.getStandardSeconds());
      assertEquals((-92160L), duration0.getStandardMinutes());
      assertEquals((-5529600000L), duration0.getMillis());
      assertEquals((-1536), hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals((-1536L), duration0.getStandardHours());
      assertEquals((-64L), duration0.getStandardDays());
      assertEquals((-5529600L), duration0.getStandardSeconds());
      assertEquals((-92160L), duration0.getStandardMinutes());
      assertEquals((-5529600000L), duration0.getMillis());
      assertEquals((-1536), hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals((-5529600), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Days days0 = seconds0.toStandardDays();
      assertEquals((-1536L), duration0.getStandardHours());
      assertEquals((-64L), duration0.getStandardDays());
      assertEquals((-5529600L), duration0.getStandardSeconds());
      assertEquals((-92160L), duration0.getStandardMinutes());
      assertEquals((-5529600000L), duration0.getMillis());
      assertEquals((-1536), hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals((-5529600), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals((-64), days0.getDays());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals((-1536L), duration0.getStandardHours());
      assertEquals((-64L), duration0.getStandardDays());
      assertEquals((-5529600L), duration0.getStandardSeconds());
      assertEquals((-92160L), duration0.getStandardMinutes());
      assertEquals((-5529600000L), duration0.getMillis());
      assertEquals((-1536), hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals((-5529600), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals((-64), days0.getDays());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(duration0, dateTime0, periodType0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-1536L), duration0.getStandardHours());
      assertEquals((-64L), duration0.getStandardDays());
      assertEquals((-5529600L), duration0.getStandardSeconds());
      assertEquals((-92160L), duration0.getStandardMinutes());
      assertEquals((-5529600000L), duration0.getMillis());
      assertEquals((-1536), hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals((-5529600), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals((-64), days0.getDays());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        buddhistChronology0.add((ReadablePeriod) period0, (long) 1, (-2146532169));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 137378058816 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Duration duration0 = new Duration(1, 1);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) weeks0, 168L);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateTime dateTime0 = new DateTime((-1557L));
      assertEquals((-1557L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-1557L), dateTime0.getMillis());
      assertNotNull(period0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, (long) 0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-1557L), dateTime0.getMillis());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Period period0 = Period.months(1);
      assertNotNull(period0);
      
      int[] intArray0 = ethiopicChronology0.get((ReadablePeriod) period0, (long) 1, 1907L);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1, 906}, intArray0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Period period0 = Period.months(1);
      assertNotNull(period0);
      
      int[] intArray0 = ethiopicChronology0.get((ReadablePeriod) period0, (long) 1, (long) 1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int[] intArray0 = copticChronology0.get((ReadablePartial) localDateTime0, (long) (-912));
      assertEquals(4, localDateTime0.size());
      assertArrayEquals(new int[] {1686, 4, 22, 86399088}, intArray0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      LocalTime localTime0 = new LocalTime((long) 20, (Chronology) gJChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      strictChronology0.validate(localTime0, intArray0);
      assertEquals(4, localTime0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalTime localTime0 = new LocalTime((-2L), dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 182;
      // Undeclared exception!
      try { 
        gJChronology0.validate(localTime0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 182 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.add((-2268L), (-2268L), 0);
      assertEquals((-2268L), long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.add((-189L), (-189L), (-958));
      assertEquals(180873L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      long long0 = buddhistChronology0.add((long) 1, 0L, 1);
      assertEquals(1L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      Period period0 = Period.months((-2279));
      // Undeclared exception!
      try { 
        lenientChronology0.add((ReadablePeriod) period0, 28L, 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      long long0 = julianChronology0.add((ReadablePeriod) null, (long) (-963), (-963));
      assertEquals((-963L), long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-189L), (-189L));
      long long0 = gJChronology0.add((ReadablePeriod) mutablePeriod0, (long) 0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-189L), (-189L));
      mutablePeriod0.add((-189L), (Chronology) gJChronology0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-189L), (-189L));
      // Undeclared exception!
      try { 
        gJChronology0.get((ReadablePeriod) mutablePeriod0, 180873L, (-9223372036854774759L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7014576573
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) buddhistChronology0);
      long long0 = lenientChronology0.set(yearMonth0, 0);
      assertEquals(2513, yearMonth0.getYear());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((long) 1);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        islamicChronology0.validate(yearMonth0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(ethiopicChronology0);
      int[] intArray0 = gregorianChronology0.get((ReadablePartial) partial0, (-975L));
      ethiopicChronology0.validate(partial0, intArray0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JulianChronology julianChronology0 = new JulianChronology(islamicChronology0, mockHijrahDate0, 1);
      long long0 = julianChronology0.getDateTimeMillis((-3046L), 1, 1, 46, 46);
      assertEquals((-82693954L), long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      long long0 = lenientChronology0.getDateTimeMillis(3431, 3431, (-5), 1);
      assertEquals(37988784000001L, long0);
  }
}
