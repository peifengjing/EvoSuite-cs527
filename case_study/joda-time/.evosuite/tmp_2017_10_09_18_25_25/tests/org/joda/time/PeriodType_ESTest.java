/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 02:52:20 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Period period0 = new Period(548, 548, 548, 548, 548, 548, 548, 6);
      assertNotNull(period0);
      
      Period period1 = period0.minusWeeks(548);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals("YearsNoYears", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("WeeksNoWeeks", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType1.getName());
      assertEquals(5, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MonthsNoMonths", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("HoursNoHours", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      
      PeriodType periodType2 = periodType1.withDaysRemoved();
      assertNotNull(periodType2);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertEquals("MillisNoMillis", periodType2.getName());
      assertEquals(0, periodType2.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertEquals(0, periodType1.size());
      
      int int0 = periodType1.size();
      assertEquals(0, int0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1448L, 22L);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = new int[8];
      boolean boolean0 = periodType0.setIndexedField(mutablePeriod0, 0, intArray0, 2012);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2012, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(1, int0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(1);
      assertNotNull(testBaseSingleFieldPeriod_Single0);
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.getValue());
      
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.MONTHS_TYPE;
      assertNotNull(durationFieldType1);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.HOURS_TYPE;
      assertNotNull(durationFieldType2);
      assertFalse(durationFieldType2.equals((Object)durationFieldType1));
      assertFalse(durationFieldType2.equals((Object)durationFieldType0));
      assertNotSame(durationFieldType2, durationFieldType1);
      assertNotSame(durationFieldType2, durationFieldType0);
      assertEquals("hours", durationFieldType2.getName());
      assertEquals("hours", durationFieldType2.toString());
      
      durationFieldTypeArray0[2] = durationFieldType2;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("StandardNoYearsNoWeeksNoMinutesNoSecondsNoMillis", periodType0.getName());
      
      int int0 = periodType0.getIndexedField(testBaseSingleFieldPeriod_Single0, 1);
      assertEquals(1, int0);
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(3, periodType0.size());
      assertEquals("StandardNoYearsNoWeeksNoMinutesNoSecondsNoMillis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(32, 32, (-77), (-77), (-77), (-77), 1462, (-77), periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      int int0 = periodType0.getIndexedField(mutablePeriod0, 7);
      assertEquals((-77), int0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      int[] intArray0 = new int[8];
      boolean boolean0 = periodType0.addIndexedField((ReadablePeriod) null, 0, intArray0, 0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(periodType0);
      assertEquals("", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("GMT+2", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(periodType0);
      assertEquals("GMT+2", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[8];
      intArray0[6] = 2204;
      PeriodType periodType0 = new PeriodType("DayTime", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 2204, 0}, intArray0);
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(9, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withSecondsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(periodType0);
      assertEquals(0, periodType0.size());
      assertEquals("", periodType0.getName());
      
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("YearMonthDayTime", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("m0|", durationFieldTypeArray0, (int[]) null);
      assertNotNull(periodType0);
      assertEquals("m0|", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[8];
      intArray0[4] = (-5);
      PeriodType periodType0 = new PeriodType("]", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-5), 0, 0, 0}, intArray0);
      assertNotNull(periodType0);
      assertEquals("]", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[9];
      intArray0[3] = 1607;
      PeriodType periodType0 = new PeriodType("@P=0z'G7'2=\"?aT", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1607, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(periodType0);
      assertEquals("@P=0z'G7'2=\"?aT", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(mutablePeriod0, 13, intArray0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(1);
      assertNotNull(testBaseSingleFieldPeriod_Single0);
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.getValue());
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(testBaseSingleFieldPeriod_Single0, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      
      Period period0 = Period.millis(851);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(period0, 851);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 851
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      // Undeclared exception!
      try { 
        periodType0.getFieldType((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period0 = new Period(548, 548, 548, 548, 548, 548, 548, 6);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(period0, 6, (int[]) null, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      
      Period period0 = Period.months(3416);
      assertNotNull(period0);
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(period0, 135, intArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 135
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      
      periodType0.hashCode();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType1, periodType0);
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      
      boolean boolean0 = periodType0.equals(periodType1);
      assertFalse(boolean0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      boolean boolean0 = periodType0.equals(periodType0);
      assertTrue(boolean0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Period period0 = Period.days((-23));
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals((-1987200), seconds0.getSeconds());
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, seconds0.size());
      assertEquals((-1987200), seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(1, seconds0.size());
      assertEquals((-1987200), seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      
      Period period0 = Period.millis(0);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Days days0 = hours0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = PeriodType.millis();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.seconds();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.minutes();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType1, periodType0);
      assertEquals("Minutes", periodType1.getName());
      assertEquals(1, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = PeriodType.hours();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.days();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = PeriodType.weeks();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Duration duration0 = new Duration(1L);
      assertNotNull(duration0);
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      
      int[] intArray0 = new int[3];
      boolean boolean0 = periodType0.addIndexedField(period0, 1, intArray0, 1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = PeriodType.years();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.time();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      
      PeriodType periodType1 = PeriodType.dayTime();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(5, periodType1.size());
      assertEquals("DayTime", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      PeriodType periodType1 = PeriodType.yearDay();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("YearDay", periodType1.getName());
      assertEquals(2, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.yearDayTime();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("YearDayTime", periodType1.getName());
      assertEquals(6, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("YearMonthDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Period period0 = Period.millis(0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("DayTime", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(periodType0);
      assertEquals(9, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(9, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals("DayTimeNoSeconds", periodType1.getName());
      assertEquals(8, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("NoMinutes", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(periodType0);
      assertEquals("NoMinutes", periodType0.getName());
      assertEquals(0, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertNotNull(durationFieldType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("HkGC2{1^Q'y9", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(periodType0);
      assertEquals("HkGC2{1^Q'y9", periodType0.getName());
      assertEquals(0, periodType0.size());
      
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = periodType0.size();
      assertEquals(1, int0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      String string0 = periodType0.getName();
      assertEquals("Millis", string0);
      assertNotNull(string0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("StandardNoMinutes", periodType1.getName());
      assertEquals(7, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      boolean boolean0 = periodType0.equals(mockHijrahDate0);
      assertFalse(boolean0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals("YearWeekDayNoYears", periodType1.getName());
      assertEquals(2, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = Period.millis(0);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Days days0 = hours0.toStandardDays();
      assertNotNull(days0);
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(days0, 3, intArray0, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = Period.months((-625));
      assertNotNull(period0);
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(period0, 3, intArray0, (-625));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = Period.millis(0);
      assertNotNull(period0);
      
      int int0 = periodType0.getIndexedField(period0, 0);
      assertEquals(0, int0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Period period0 = new Period(548, 548, 548, 548, 548, 548, 548, 3);
      assertNotNull(period0);
      
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(548);
      assertNotNull(testBaseSingleFieldPeriod_Single0);
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals(548, testBaseSingleFieldPeriod_Single0.getValue());
      
      PeriodType periodType0 = testBaseSingleFieldPeriod_Single0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals(548, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P548Y548M548W548DT548H548M548.003S
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [millis, millis, millis, millis, millis]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType1);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals("seconds", durationFieldType1.toString());
      assertEquals("seconds", durationFieldType1.getName());
      
      durationFieldTypeArray0[8] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days, days, days, days, days, days, days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      DurationFieldType durationFieldType1 = DurationFieldType.minutes();
      assertNotNull(durationFieldType1);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals("minutes", durationFieldType1.toString());
      assertEquals("minutes", durationFieldType1.getName());
      
      durationFieldTypeArray0[2] = durationFieldType1;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldType1;
      durationFieldTypeArray0[8] = durationFieldTypeArray0[2];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days, days, minutes, days, days, minutes, minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[5] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.weeks();
      durationFieldTypeArray0[6] = durationFieldType1;
      durationFieldTypeArray0[7] = durationFieldType0;
      durationFieldTypeArray0[8] = durationFieldTypeArray0[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days, days, days, days, days, days, days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.years();
      durationFieldTypeArray0[2] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [weekyears, weekyears]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType1 = PeriodType.months();
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(1);
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[2] = durationFieldType2;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals(7, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      
      String string0 = periodType0.toString();
      assertEquals(5, periodType0.size());
      assertEquals("PeriodType[DayTime]", string0);
  }
}
