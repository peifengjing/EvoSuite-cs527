/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:05:08 GMT 2017
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZonedDateTime;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractPartial_ESTest extends AbstractPartial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      // Undeclared exception!
      try { 
        monthDay0.isEqual((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial cannot be null
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      int int0 = yearMonth0.compareTo((ReadablePartial) yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(0, int0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = new YearMonth();
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertNotNull(yearMonth1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      
      YearMonth yearMonth2 = yearMonth1.withYear(1);
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(1, yearMonth2.getYear());
      assertEquals(2, yearMonth2.getMonthOfYear());
      assertNotNull(yearMonth2);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      
      boolean boolean0 = yearMonth1.equals(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertFalse(boolean0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      
      YearMonth yearMonth3 = yearMonth1.plusYears(1097);
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(3111, yearMonth3.getYear());
      assertEquals(2, yearMonth3.getMonthOfYear());
      assertEquals(2, yearMonth3.size());
      assertNotNull(yearMonth3);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth3.equals((Object)yearMonth2));
      assertFalse(yearMonth3.equals((Object)yearMonth0));
      assertFalse(yearMonth3.equals((Object)yearMonth1));
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth3);
      assertNotSame(yearMonth3, yearMonth2);
      assertNotSame(yearMonth3, yearMonth0);
      assertNotSame(yearMonth3, yearMonth1);
      
      boolean boolean1 = yearMonth1.isAfter(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertTrue(boolean1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth3));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth1.equals((Object)yearMonth3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      boolean boolean0 = localDate0.equals(mockMinguoDate0);
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      boolean boolean1 = localDate0.equals(partial0);
      assertEquals(3, localDate0.size());
      assertEquals(0, partial0.size());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      // Undeclared exception!
      try { 
        yearMonth0.isAfter((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial cannot be null
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((-1L), (Chronology) islamicChronology0);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      LocalDate localDate1 = localDate0.withYearOfEra(2923);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      Date date0 = localDate0.toDate();
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertNotNull(date0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate0, localDate1);
      
      LocalDate localDate2 = LocalDate.fromDateFields(date0);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      LocalDate localDate3 = localDate2.withYear(23118750);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertNotNull(localDate3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate2));
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate2);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      String string0 = monthDay0.toString();
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals("--10-22", string0);
      assertNotNull(string0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = localDateTime0.size();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, int0);
      assertEquals(1, BuddhistChronology.BE);
      
      MockPartial mockPartial0 = new MockPartial();
      assertNotNull(mockPartial0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = mockPartial0.toDateTime((ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNull(dateTime1);
      
      DateTime dateTime2 = monthDay0.toDateTime((ReadableInstant) null);
      assertEquals(1414009281320L, dateTime2.getMillis());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(dateTime2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertNotSame(dateTime2, dateTime0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(2147483646).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(51);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(51, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(51, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(51, dateTimeFormatter2.getDefaultYear());
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-536));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(51, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(51, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(51, dateTimeFormatter3.getDefaultYear());
      assertEquals((-536), (int)dateTimeFormatter3.getPivotYear());
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      
      // Undeclared exception!
      localTime0.toString(dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = yearMonth0.plusYears(1);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1971, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertNotNull(yearMonth1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      YearMonth yearMonth2 = yearMonth0.minusYears((-502));
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2472, yearMonth2.getYear());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertNotNull(yearMonth2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withUTC();
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(31083597720000L, chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter0);
      
      String string0 = yearMonth0.toString((DateTimeFormatter) null);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(string0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      LocalDate localDate1 = localDate0.withYearOfEra(1);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean2 = partial0.isSupported(dateTimeFieldType0);
      assertEquals(0, partial0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      boolean boolean3 = partial0.equals(mockHijrahDate0);
      assertEquals(0, partial0.size());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = yearMonth0.isEqual(yearMonth2);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2472, yearMonth2.getYear());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertFalse(boolean4);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(29, int0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(31083523197199L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTime0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      
      boolean boolean5 = partial0.isMatch((ReadableInstant) dateTime0);
      assertEquals(31083523197199L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, partial0.size());
      assertEquals(3, localDate0.size());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter1);
      
      YearMonth yearMonth3 = yearMonth0.withChronologyRetainFields(iSOChronology0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth3.getYear());
      assertEquals(2, yearMonth3.size());
      assertEquals(1, yearMonth3.getMonthOfYear());
      assertNotNull(yearMonth3);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(yearMonth3.equals((Object)yearMonth2));
      assertFalse(yearMonth3.equals((Object)yearMonth1));
      assertSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(yearMonth3, yearMonth2);
      assertNotSame(yearMonth3, yearMonth1);
      assertSame(yearMonth3, yearMonth0);
      
      Chronology chronology1 = localDateTime0.getChronology();
      assertEquals(4, localDateTime0.size());
      assertNotNull(chronology1);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(chronology1.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology1);
      assertNotSame(iSOChronology0, chronology0);
      assertSame(chronology0, chronology1);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(chronology1, iSOChronology0);
      assertSame(chronology1, chronology0);
      
      int[] intArray0 = partial0.getValues();
      assertEquals(0, partial0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      MonthDay monthDay0 = new MonthDay((long) 29, chronology0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(iSOChronology0.equals((Object)chronology1));
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-2573L), 2801, 0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertNotNull(mockZone0);
      
      DateTimeZone.setDefault(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeField[] dateTimeFieldArray0 = localTime0.getFields();
      assertEquals(4, localTime0.size());
      assertNotNull(dateTimeFieldArray0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertSame(dateTimeZone0, mockZone0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      LocalDate localDate0 = new LocalDate((-2606L), (Chronology) buddhistChronology1);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(period0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(period1.equals((Object)period0));
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      LocalDate localDate1 = new LocalDate((long) 1);
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockGregorianCalendar.from(zonedDateTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDate localDate2 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      boolean boolean0 = localDate2.isBefore(localDate1);
      assertEquals(3, localDate1.size());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate2.size());
      assertFalse(boolean0);
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      LocalDate.Property localDate_Property0 = localDate2.dayOfMonth();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate_Property0);
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = localTime0.indexOf(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, int0);
      
      LocalTime localTime1 = localTime0.minusMillis(1973);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      LocalTime.Property localTime_Property0 = localTime1.minuteOfHour();
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime_Property0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      
      MockDate mockDate0 = new MockDate(1973, 1563, 1973, (-1839), 2960);
      assertEquals("Tue Jun 10 10:20:00 GMT 4008", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertEquals("Tue Jun 10 10:20:00 GMT 4008", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear((-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -59 for dayOfYear must be in the range [1,366]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes(1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localDateTime0.getFieldTypes();
      assertEquals(4, localDateTime0.size());
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = localDateTime1.isSupported(dateTimeFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertTrue(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(79);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes(79);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localDateTime0.getFieldTypes();
      assertEquals(4, localDateTime0.size());
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertFalse(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((long) 79, dateTimeZone0);
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withYearOfCentury(79);
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      LocalDate localDate2 = localDate0.plusYears(79);
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = localDateTime1.get(dateTimeFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(24, int0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      LocalTime localTime0 = new LocalTime(1, 1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(0L, periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(period0);
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      
      localTime0.hashCode();
      assertEquals(4, localTime0.size());
      assertSame(localTime0, localTime1);
      
      MockDate mockDate0 = new MockDate(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusDays(51);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = localTime0.indexOf(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(3, int0);
      assertSame(localTime0, localTime1);
      
      Partial partial0 = new Partial(dateTimeFieldType0, 51, buddhistChronology0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        partial0.getFieldType((-1321));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1321
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      boolean boolean0 = monthDay0.isBefore(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertFalse(boolean0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      LocalDate localDate0 = new LocalDate((long) 0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertEquals(3, localDate0.size());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals((-2801L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Date date0 = localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      LocalDate localDate1 = LocalDate.fromDateFields(date0);
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertTrue(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      LocalDate localDate2 = localDate1.withYear(1);
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertTrue(localDate0.equals((Object)localDate1));
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime1 = localDate2.toDateTimeAtStartOfDay();
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals((-62135596802801L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(localDate0.equals((Object)localDate2));
      assertTrue(localDate0.equals((Object)localDate1));
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 3);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withUTC();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertNotNull(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      
      YearMonth yearMonth1 = yearMonth0.withYear(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getYear());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertNotNull(yearMonth1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Duration duration0 = Duration.millis(0L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Hours hours1 = minutes0.toStandardHours();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertNotNull(hours1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      
      Days days0 = hours1.toStandardDays();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      
      Days days1 = hours0.toStandardDays();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertNotNull(days1);
      assertSame(hours0, hours1);
      assertSame(days1, days0);
      
      Days days2 = days1.plus(days0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0, days2.getDays());
      assertEquals(1, days2.size());
      assertNotNull(days2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(days0, days1);
      assertSame(days0, days2);
      assertSame(days1, days2);
      assertSame(days1, days0);
      assertSame(days2, days0);
      assertSame(days2, days1);
      
      Days days3 = days0.plus(days1);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0, days3.getDays());
      assertEquals(1, days3.size());
      assertNotNull(days3);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(days0, days3);
      assertSame(days0, days1);
      assertSame(days0, days2);
      assertSame(days1, days2);
      assertSame(days1, days3);
      assertSame(days1, days0);
      assertSame(days3, days0);
      assertSame(days3, days1);
      assertSame(days3, days2);
      
      Period period1 = period0.minus(days0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(days0, days3);
      assertSame(days0, days1);
      assertSame(days0, days2);
      assertNotSame(period1, period0);
      
      YearMonth yearMonth2 = yearMonth1.plus(period0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getYear());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(1, yearMonth2.getYear());
      assertEquals(6, yearMonth2.getMonthOfYear());
      assertNotNull(yearMonth2);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertTrue(period0.equals((Object)period1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertTrue(yearMonth2.equals((Object)yearMonth1));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(period0, period1);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      
      YearMonth yearMonth3 = yearMonth2.withChronologyRetainFields(copticChronology0);
      assertEquals(2, yearMonth3.size());
      assertEquals(6, yearMonth3.getMonthOfYear());
      assertEquals(1, yearMonth3.getYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getYear());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(1, yearMonth2.getYear());
      assertEquals(6, yearMonth2.getMonthOfYear());
      assertNotNull(yearMonth3);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(yearMonth3.equals((Object)yearMonth1));
      assertFalse(yearMonth3.equals((Object)yearMonth0));
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertTrue(yearMonth1.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertTrue(period0.equals((Object)period1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertTrue(yearMonth2.equals((Object)yearMonth1));
      assertNotSame(yearMonth3, yearMonth0);
      assertNotSame(yearMonth3, yearMonth1);
      assertSame(yearMonth3, yearMonth2);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth3);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(period0, period1);
      assertNotSame(yearMonth2, yearMonth0);
      assertSame(yearMonth2, yearMonth3);
      assertNotSame(yearMonth2, yearMonth1);
      
      String string0 = yearMonth2.toString();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getYear());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(1, yearMonth2.getYear());
      assertEquals(6, yearMonth2.getMonthOfYear());
      assertEquals("0001-06", string0);
      assertNotNull(string0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth3));
      assertTrue(yearMonth1.equals((Object)yearMonth3));
      assertTrue(yearMonth1.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertTrue(period0.equals((Object)period1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertTrue(yearMonth2.equals((Object)yearMonth1));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth3);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(period0, period1);
      assertNotSame(yearMonth2, yearMonth0);
      assertSame(yearMonth2, yearMonth3);
      assertNotSame(yearMonth2, yearMonth1);
      
      DateTimeFieldType dateTimeFieldType0 = yearMonth0.getFieldType(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:00", dateTimeZone0.toString());
      assertEquals("+03:00", dateTimeZone0.getID());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertNotNull(dateTimeFieldType0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth3));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-172), 0, 1, 2966, 2600, (-1697), 0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2966 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = yearMonth0.plusYears(1);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1971, yearMonth1.getYear());
      assertNotNull(yearMonth1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      YearMonth yearMonth2 = yearMonth0.minusYears((-502));
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(2472, yearMonth2.getYear());
      assertNotNull(yearMonth2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withUTC();
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(31083597720000L, chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter0);
      
      String string0 = yearMonth0.toString((DateTimeFormatter) null);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(string0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      LocalDate localDate1 = localDate0.withYearOfEra(1);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      boolean boolean2 = yearMonth0.isEqual(yearMonth2);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(2472, yearMonth2.getYear());
      assertFalse(boolean2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(29, int0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(31083523197199L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTime0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      
      DateTimeField[] dateTimeFieldArray0 = partial0.getFields();
      assertEquals(0, partial0.size());
      assertNotNull(dateTimeFieldArray0);
      
      boolean boolean3 = partial0.isMatch((ReadableInstant) dateTime0);
      assertEquals(31083523197199L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, partial0.size());
      assertEquals(3, localDate0.size());
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter1);
      
      YearMonth yearMonth3 = yearMonth0.withChronologyRetainFields(iSOChronology0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth3.getMonthOfYear());
      assertEquals(1970, yearMonth3.getYear());
      assertEquals(2, yearMonth3.size());
      assertNotNull(yearMonth3);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth3.equals((Object)yearMonth2));
      assertFalse(yearMonth3.equals((Object)yearMonth1));
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertNotSame(yearMonth0, yearMonth2);
      assertSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth3, yearMonth2);
      assertNotSame(yearMonth3, yearMonth1);
      assertSame(yearMonth3, yearMonth0);
      assertNotSame(iSOChronology0, chronology0);
      
      MonthDay monthDay0 = new MonthDay((long) 29, chronology0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      
      LocalDate localDate2 = localDate1.withDayOfMonth(1);
      assertEquals(3, localDate2.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate2);
      assertFalse(iSOChronology0.equals((Object)chronology0));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(chronology0.equals((Object)iSOChronology0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = YearMonth.now();
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertNotNull(yearMonth1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth1, yearMonth0);
      
      int int0 = yearMonth0.compareTo((ReadablePartial) yearMonth1);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals((-1), int0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      YearMonth yearMonth2 = new YearMonth(0L);
      assertEquals(2, yearMonth2.size());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(1970, yearMonth2.getYear());
      assertNotNull(yearMonth2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertTrue(yearMonth2.equals((Object)yearMonth0));
      
      boolean boolean0 = yearMonth2.isAfter(yearMonth0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth2.size());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(1970, yearMonth2.getYear());
      assertFalse(boolean0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertTrue(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertTrue(yearMonth2.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      
      // Undeclared exception!
      try { 
        YearMonth.parse("kg&6TX>O?x!`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"kg&6TX>O?x!`\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(2014, int0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        yearMonth0.getFieldType((-840));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((-1L), (Chronology) islamicChronology0);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate0 = monthDay0.toLocalDate(46);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      Date date0 = localDate0.toDate();
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 46", date0.toString());
      assertNotNull(date0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate1 = LocalDate.fromDateFields(date0);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      LocalDate localDate2 = localDate1.withYear(23118750);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      int[] intArray0 = localDate1.getValues();
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertArrayEquals(new int[] {46, 10, 22}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate2.toDateTimeAtStartOfDay(dateTimeZone0);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(729495142243197199L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime1 = dateTime0.plusMillis(1);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(729495142243197199L, dateTime0.getMillis());
      assertEquals(729495142243197200L, dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      String string0 = monthDay0.toString();
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals("--10-22", string0);
      assertNotNull(string0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = localDateTime0.size();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, int0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int1 = localTime0.getSecondOfMinute();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(24, int1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = monthDay0.isSupported(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((-1L), (Chronology) islamicChronology0);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      Date date0 = localDate0.toDate();
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertNotNull(date0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate1 = LocalDate.fromDateFields(date0);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      LocalDate localDate2 = localDate1.withYear(23118750);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate2.toDateTimeAtStartOfDay(dateTimeZone0);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(729495142243197199L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime1 = dateTime0.plusMillis(1);
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(729495142243197199L, dateTime0.getMillis());
      assertEquals(729495142243197200L, dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      String string0 = monthDay0.toString();
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals("--10-22", string0);
      assertNotNull(string0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = localDateTime0.size();
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, int0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = localDateTime0.getField(0);
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = yearMonth0.plusYears(1);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(1971, yearMonth1.getYear());
      assertNotNull(yearMonth1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      YearMonth yearMonth2 = yearMonth0.minusYears(1);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(1969, yearMonth2.getYear());
      assertNotNull(yearMonth2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(31083597720000L, chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter0);
      
      String string0 = yearMonth0.toString((DateTimeFormatter) null);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertNotNull(string0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      
      LocalDate localDate1 = localDate0.withYearOfEra(1);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      boolean boolean2 = yearMonth0.isEqual(yearMonth2);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(1969, yearMonth2.getYear());
      assertFalse(boolean2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(29, int0);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(31083523197199L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTime0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      
      boolean boolean3 = partial0.isMatch((ReadableInstant) dateTime0);
      assertEquals(31083523197199L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, partial0.size());
      assertEquals(3, localDate0.size());
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(localDate0.equals((Object)localDate1));
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      assertNotSame(localDate0, localDate1);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter1);
      
      YearMonth yearMonth3 = yearMonth0.withChronologyRetainFields(iSOChronology0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth3.size());
      assertEquals(1, yearMonth3.getMonthOfYear());
      assertEquals(1970, yearMonth3.getYear());
      assertNotNull(yearMonth3);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth3.equals((Object)yearMonth2));
      assertFalse(yearMonth3.equals((Object)yearMonth1));
      assertNotSame(yearMonth0, yearMonth1);
      assertSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth3, yearMonth2);
      assertSame(yearMonth3, yearMonth0);
      assertNotSame(yearMonth3, yearMonth1);
      assertSame(iSOChronology0, chronology0);
      
      MonthDay monthDay0 = new MonthDay((long) 29, chronology0);
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay1 = monthDay0.plusDays((-2245));
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(13, monthDay1.getDayOfMonth());
      assertEquals(11, monthDay1.getMonthOfYear());
      assertNotNull(monthDay1);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
      
      MonthDay.Property monthDay_Property0 = monthDay1.dayOfMonth();
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(13, monthDay1.getDayOfMonth());
      assertEquals(11, monthDay1.getMonthOfYear());
      assertEquals(13, monthDay_Property0.get());
      assertNotNull(monthDay_Property0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertSame(iSOChronology0, chronology0);
      assertSame(chronology0, iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay1 = MonthDay.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertNotNull(monthDay1);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(monthDay1.equals((Object)monthDay0));
      assertNotSame(monthDay1, monthDay0);
      
      LocalDate localDate0 = monthDay0.toLocalDate(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(monthDay0.equals((Object)monthDay1));
      assertNotSame(monthDay0, monthDay1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        monthDay0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        yearMonth0.toString(dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn((-473)).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNotNull(dateTimeFormatter2);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        yearMonth0.toString(dateTimeFormatter2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((-1L), (Chronology) islamicChronology0);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      Date date0 = localDate0.toDate();
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertNotNull(date0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate1 = LocalDate.fromDateFields(date0);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      LocalDate localDate2 = localDate1.withYear(23118750);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("MockZone", dateTimeZone0.getID());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate2.toDateTimeAtStartOfDay(dateTimeZone0);
      assertEquals(22, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Oct 22 00:00:00 GMT 1", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertEquals(729495142243197199L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        monthDay0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyearOfCentury' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(8L);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(2014);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      
      LocalDateTime localDateTime2 = localDateTime0.plusDays(0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime1);
      assertSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(localDateTime2, localDateTime0);
      
      // Undeclared exception!
      try { 
        yearMonth0.isBefore(localDateTime2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((-2074L), 748L, periodType0, (Chronology) null);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(period0);
      
      Partial partial1 = partial0.minus(period0);
      assertEquals(0, partial0.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial2 = partial1.with(dateTimeFieldType0, 0);
      assertEquals(0, partial0.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(0, partial1.size());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(1, partial2.size());
      assertNotNull(partial2);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertFalse(partial2.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      
      int int0 = partial2.get(dateTimeFieldType0);
      assertEquals(0, partial0.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(0, partial1.size());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(1, partial2.size());
      assertEquals(0, int0);
      assertTrue(partial0.equals((Object)partial1));
      assertFalse(partial0.equals((Object)partial2));
      assertTrue(partial1.equals((Object)partial0));
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial2.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial2.getFormatter();
      assertEquals(0, partial0.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(0, partial1.size());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(1, partial2.size());
      assertNull(dateTimeFormatter0);
      assertTrue(partial0.equals((Object)partial1));
      assertFalse(partial0.equals((Object)partial2));
      assertTrue(partial1.equals((Object)partial0));
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial2.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      
      // Undeclared exception!
      try { 
        MonthDay.parse("*okV|kjs=.b", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.isEqual(partial0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertNotNull(yearMonth1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      boolean boolean0 = yearMonth1.isAfter(yearMonth0);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertFalse(boolean0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(0L, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      int int0 = localDate0.getYearOfCentury();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(70, int0);
      
      // Undeclared exception!
      try { 
        localDate0.getField(70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 70
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getYearOfCentury();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(14, int0);
      
      // Undeclared exception!
      try { 
        localDateTime0.getFieldType(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 14
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = localTime0.indexOf(dateTimeFieldType0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals((-1), int0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType1.getName());
      assertEquals("dayOfMonth", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(25L);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      int int0 = yearMonth0.compareTo((ReadablePartial) yearMonth0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(0, int0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      YearMonth yearMonth1 = new YearMonth(25L);
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(1970, yearMonth1.getYear());
      assertNotNull(yearMonth1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      
      YearMonth yearMonth2 = yearMonth1.withYear(1);
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(1970, yearMonth1.getYear());
      assertEquals(1, yearMonth2.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertNotNull(yearMonth2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      
      boolean boolean0 = yearMonth1.equals(yearMonth0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(1970, yearMonth1.getYear());
      assertTrue(boolean0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertTrue(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      
      YearMonth yearMonth3 = yearMonth1.plusYears(1097);
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(1970, yearMonth1.getYear());
      assertEquals(2, yearMonth3.size());
      assertEquals(3067, yearMonth3.getYear());
      assertEquals(1, yearMonth3.getMonthOfYear());
      assertNotNull(yearMonth3);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth3.equals((Object)yearMonth2));
      assertFalse(yearMonth3.equals((Object)yearMonth0));
      assertFalse(yearMonth3.equals((Object)yearMonth1));
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth3);
      assertNotSame(yearMonth3, yearMonth2);
      assertNotSame(yearMonth3, yearMonth0);
      assertNotSame(yearMonth3, yearMonth1);
      
      boolean boolean1 = yearMonth1.isAfter(yearMonth0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(1970, yearMonth1.getYear());
      assertFalse(boolean1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertTrue(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth3));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth1.equals((Object)yearMonth3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth3);
      
      // Undeclared exception!
      try { 
        yearMonth2.getFieldType(1528);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-2573L), 2801, 0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertNotNull(mockZone0);
      
      DateTimeZone.setDefault(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeField[] dateTimeFieldArray0 = localTime0.getFields();
      assertEquals(4, localTime0.size());
      assertNotNull(dateTimeFieldArray0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      assertSame(dateTimeZone0, mockZone0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      LocalDate localDate0 = new LocalDate((-2606L), (Chronology) buddhistChronology1);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(period0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(period1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(period1.equals((Object)period0));
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      Period period2 = period1.withMinutes((-1));
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(period2);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      
      LocalDate localDate1 = localDate0.plus(period1);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertSame(localDate0, localDate1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(localDate1, localDate0);
      
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockGregorianCalendar.from(zonedDateTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDate localDate2 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(3, localDate2.size());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(localDate2);
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      
      boolean boolean0 = localDate2.isBefore(localDate1);
      assertEquals(3, localDate2.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", dateTimeZone0.getID());
      assertEquals("MockZone", dateTimeZone0.toString());
      assertFalse(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(3, localDate1.size());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(boolean0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertSame(mockZone0, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, mockZone0);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(localDate0, localDate2);
      assertSame(localDate0, localDate1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((-7L), (Chronology) islamicChronology0);
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate0 = monthDay0.toLocalDate(46);
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      Date date0 = localDate0.toDate();
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Oct 21 00:00:00 GMT 46", date0.toString());
      assertNotNull(date0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate1 = LocalDate.fromDateFields(date0);
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Oct 21 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      LocalDate localDate2 = localDate1.withYear(23118750);
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Oct 21 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      int[] intArray0 = localDate1.getValues();
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Oct 21 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertArrayEquals(new int[] {46, 10, 21}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = localDate2.toDateTimeAtStartOfDay(dateTimeZone0);
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Oct 21 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(729495142156800000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime1 = dateTime0.plusMillis(1);
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Fri Oct 21 00:00:00 GMT 46", date0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(729495142156800000L, dateTime0.getMillis());
      assertEquals(729495142156800001L, dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      String string0 = monthDay0.toString();
      assertEquals(21, monthDay0.getDayOfMonth());
      assertEquals(10, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals("--10-21", string0);
      assertNotNull(string0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = localDateTime0.size();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, int0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int1 = localTime0.getSecondOfMinute();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(21, int1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        localDate1.isAfter(localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      YearMonth yearMonth1 = yearMonth0.plusYears(1);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1971, yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(yearMonth1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      YearMonth yearMonth2 = yearMonth0.minusYears((-502));
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(2472, yearMonth2.getYear());
      assertNotNull(yearMonth2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      
      boolean boolean1 = yearMonth0.equals(yearMonth1);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1971, yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertFalse(boolean1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      YearMonth yearMonth3 = YearMonth.now();
      assertEquals(2014, yearMonth3.getYear());
      assertEquals(2, yearMonth3.getMonthOfYear());
      assertEquals(2, yearMonth3.size());
      assertNotNull(yearMonth3);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth3.equals((Object)yearMonth0));
      assertFalse(yearMonth3.equals((Object)yearMonth1));
      assertFalse(yearMonth3.equals((Object)yearMonth2));
      assertNotSame(yearMonth3, yearMonth0);
      assertNotSame(yearMonth3, yearMonth1);
      assertNotSame(yearMonth3, yearMonth2);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter0);
      
      String string0 = yearMonth0.toString((DateTimeFormatter) null);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertNotNull(string0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth3));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean3 = partial0.isSupported(dateTimeFieldType0);
      assertEquals(0, partial0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = yearMonth0.isEqual(yearMonth2);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(2472, yearMonth2.getYear());
      assertFalse(boolean4);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth3));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth2.equals((Object)yearMonth3));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth2, yearMonth3);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1L));
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      boolean boolean0 = yearMonth0.isEqual(yearMonth0);
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertTrue(boolean0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter0);
      
      int int0 = (-2238);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-2238), 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2238 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localDateTime0.getFieldTypes();
      assertEquals(4, localDateTime0.size());
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime1);
      
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      LocalDateTime localDateTime2 = localDateTime0.minusWeeks(157);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      
      DateTime dateTime0 = localDateTime2.toDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(1297455681320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      
      DateTime dateTime1 = dateTime0.toDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(1297455681320L, dateTime0.getMillis());
      assertEquals(1297455681320L, dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      
      DateTime dateTime2 = localDateTime1.toDateTime(dateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(1297455681320L, dateTime0.getMillis());
      assertEquals(1297455681320L, dateTime1.getMillis());
      assertEquals(1392409221320L, dateTime2.getMillis());
      assertNotNull(dateTime2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      
      LocalDateTime localDateTime3 = localDateTime1.minusWeeks((-4502));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime3.size());
      assertNotNull(localDateTime3);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.withUTC();
      LocalTime localTime0 = LocalTime.now();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-536));
      localTime0.toString(dateTimeFormatter2);
      PeriodType.yearDayTime();
      localTime0.hashCode();
      MockDate mockDate0 = new MockDate(3L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.plusDays(51);
      boolean boolean0 = localDate0.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        monthDay0.isBefore((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial cannot be null
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology.getInstance();
      MockZone mockZone0 = new MockZone(1, 0, 23118748);
      LocalTime localTime0 = LocalTime.now((DateTimeZone) mockZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.isEqual(localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      yearMonth0.isAfter(yearMonth0);
      Duration.standardMinutes(2772L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      // Undeclared exception!
      try { 
        yearMonth0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfSecond' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      YearMonth yearMonth1 = yearMonth0.plusYears(952);
      yearMonth1.isAfter(yearMonth0);
      MockDate mockDate0 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withWeekyear(620);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      yearMonth1.withYear((-4876));
      // Undeclared exception!
      try { 
        localDate1.withFieldAdded(durationFieldType0, 157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      // Undeclared exception!
      try { 
        yearMonth0.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
}
