/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:03:25 GMT 2017
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.format.FormatUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      int int0 = FormatUtils.calculateDigitCount(9223372036854775797L);
      assertEquals(19, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((-3113));
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(5, stringBuffer0.length());
      assertEquals("-3113", stringBuffer0.toString());
      assertEquals("-3113", stringBuffer1.toString());
      assertEquals(5, stringBuffer1.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 9223372036854775797L);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("-31139223372036854775797", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 9223372036854775797L, 19);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("-311392233720368547757979223372036854775797", stringBuffer0.toString());
      assertEquals(43, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 9223372036854775797L, (-814));
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(62, stringBuffer0.length());
      assertEquals("-3113922337203685477579792233720368547757979223372036854775797", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      FormatUtils.writePaddedInteger((Writer) pipedWriter0, 9223372036854775791L, (-1595));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 898);
      assertNotNull(bufferedWriter0);
      
      Writer writer0 = bufferedWriter0.append('B');
      assertSame(bufferedWriter0, writer0);
      assertSame(writer0, bufferedWriter0);
      assertNotNull(writer0);
      
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 898, (-581));
      assertSame(bufferedWriter0, writer0);
      
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) pipedWriter0, (-1952257860));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 1);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = FormatUtils.calculateDigitCount(1);
      assertEquals(1, int0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid format: \"\" is too short");
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 1483L, (-1815));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1483L);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 181L, 1);
      assertEquals(3, stringBuffer0.length());
      assertEquals("181", stringBuffer0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 9223372036854775777L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(9223372036854775798L);
      assertEquals(19, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 9223372036854775798L);
      assertEquals("9223372036854775798", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 9223372036854775798L, 41);
      assertEquals("922337203685477579800000000000000000000009223372036854775798", stringBuffer0.toString());
      assertEquals(60, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 9223372036854775798L, 41);
      assertEquals(101, stringBuffer0.length());
      assertEquals("92233720368547757980000000000000000000000922337203685477579800000000000000000000009223372036854775798", stringBuffer0.toString());
      
      int int1 = FormatUtils.parseTwoDigits(stringBuffer0, 19);
      assertEquals(0, int1);
      assertEquals(101, stringBuffer0.length());
      assertEquals("92233720368547757980000000000000000000000922337203685477579800000000000000000000009223372036854775798", stringBuffer0.toString());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 1, (-1856));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(9223372036854775804L);
      assertEquals(19, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 9223372036854775804L);
      assertEquals("9223372036854775804", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 9223372036854775804L, 41);
      assertEquals(60, stringBuffer0.length());
      assertEquals("922337203685477580400000000000000000000009223372036854775804", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(1277L);
      assertEquals(4, int0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byteArrayOutputStream0.reset();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, 556, 556);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      FormatUtils.writeUnpaddedInteger((Writer) outputStreamWriter0, 1277L);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      outputStreamWriter0.close();
      assertEqualsbyteArrayOutputStream0.toString());
      assertEquals(560, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      StringBuffer stringBuffer0 = new StringBuffer("D_^@y=yWvrHj6>O");
      assertNotNull(stringBuffer0);
      assertEquals(15, stringBuffer0.length());
      assertEquals("D_^@y=yWvrHj6>O", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 4);
      assertEquals(16, stringBuffer0.length());
      assertEquals("D_^@y=yWvrHj6>O4", stringBuffer0.toString());
      
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, (long) 556);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("k!w8h]<ee+", (-24));
      assertEquals("Invalid format: \"k!w8h]<ee+\"", string0);
      assertNotNull(string0);
      
      String string1 = FormatUtils.createErrorMessage("", 2909);
      assertEquals("Invalid format: \"\" is too short", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        MockURI.URI("", "k!w8h]<ee+", "Invalid format: \"k!w8h]<ee+\"");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :k!w8h]%3Cee+#Invalid%20format:%20%22k!w8h]%3Cee+%22
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("6", 1);
      assertEquals("Invalid format: \"6\" is too short", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2d");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2d");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = FormatUtils.createErrorMessage("2d", 2143);
      assertEquals("Invalid format: \"2d\" is too short", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.forLanguageTag("2d");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) "Invalid format: \"2d\" is too short";
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = FormatUtils.calculateDigitCount((-1L));
      assertEquals(2, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"2d\" is too short");
      assertNotNull(stringBuffer0);
      assertEquals("Invalid format: \"2d\" is too short", stringBuffer0.toString());
      assertEquals(33, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, Integer.MIN_VALUE, 2143);
      assertEquals(2177, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 100L, 2143);
      assertEquals(4320, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L??I5)y\"-M',#");
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, Integer.MIN_VALUE, 45);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, (-306L), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("z)Ql6tt(;/%vBQ2");
      assertNotNull(stringBuffer0);
      assertEquals(15, stringBuffer0.length());
      assertEquals("z)Ql6tt(;/%vBQ2", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, Integer.MIN_VALUE);
      assertEquals("z)Ql6tt(;/%vBQ2-2147483648", stringBuffer0.toString());
      assertEquals(26, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-9223372036854775808L));
      assertEquals(20, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      assertEquals("-9223372036854775808", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-9223372036854775808L));
      assertEquals(40, stringBuffer0.length());
      assertEquals("-9223372036854775808-9223372036854775808", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(1000L);
      assertEquals(4, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits((CharSequence) null, 13421772);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE);
      assertEquals("-2147483648", stringWriter0.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, (long) (-2839));
      assertEquals("-2147483648-2839", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("-2147483648-2839", stringWriter0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("-2147483648-2839", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.append(1.0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("-2147483648-28391.0", stringWriter0.toString());
      assertEquals("-2147483648-28391.0", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(19, stringBuffer1.length());
      assertEquals("-2147483648-28391.0", stringBuffer1.toString());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 830, Integer.MIN_VALUE);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("-2147483648-28391.0830", stringWriter0.toString());
      assertEquals("-2147483648-28391.0830", stringBuffer0.toString());
      assertEquals(22, stringBuffer0.length());
      
      stringWriter0.close();
      assertEquals("-2147483648-28391.0830", stringWriter0.toString());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, (-3872));
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("-2147483648-28391.08300", stringWriter0.toString());
      assertEquals("-2147483648-28391.08300", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, Integer.MIN_VALUE, (-2839));
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("-2147483648-28391.08300-2147483648", stringWriter0.toString());
      assertEquals("-2147483648-28391.08300-2147483648", stringBuffer0.toString());
      assertEquals(34, stringBuffer0.length());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2034L), (-126));
      assertEquals("-2147483648-28391.08300-2147483648-2034", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 17);
      assertEquals("-2147483648-28391.08300-2147483648-203417", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      assertNotNull(mockPrintWriter0);
      assertEquals("-2147483648-28391.08300-2147483648-203417", stringWriter0.toString());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals("-2147483648-28391.08300-2147483648-203417", stringWriter0.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) bufferedWriter0, 17);
      assertEquals("-2147483648-28391.08300-2147483648-203417", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(100L);
      assertEquals(3, int0);
      
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1008));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1008
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2927);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('p');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("p", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("p", charArrayWriter1.toString());
      
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) 2927, 2927);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(2928, charArrayWriter0.size());
      assertEquals(2928, charArrayWriter1.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArrayWriter0.write(charArray0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertEquals(2930, charArrayWriter0.size());
      
      charArrayWriter1.write(charArray0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertEquals(2932, charArrayWriter0.size());
      assertEquals(2932, charArrayWriter1.size());
      
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 1394L, 2927);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertEquals(5859, charArrayWriter0.size());
      
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 1394L, 2927);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(8786, charArrayWriter0.size());
      assertEquals(8786, charArrayWriter1.size());
      
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 2453, 6452);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 232);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("Invalid format: \"\" is too short", "");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 232, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 100, 1241);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9s)['");
      assertNotNull(mockFileWriter0);
      
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, (-1989L));
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1989L));
      assertEquals("-1989", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      int int0 = FormatUtils.parseTwoDigits(stringBuffer0, 0);
      assertEquals((-29), int0);
      assertEquals("-1989", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 232);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("Invalid format: \"\" is too short", "");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      printWriter0.close();
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 232, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 10000, 10000);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 232);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("Invalid format: \"\" is too short", "");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 232, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      StringBuffer stringBuffer0 = new StringBuffer("Invalid format: \"\" is too short");
      assertNotNull(stringBuffer0);
      assertEquals(31, stringBuffer0.length());
      assertEquals("Invalid format: \"\" is too short", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 10000);
      assertEquals("Invalid format: \"\" is too short10000", stringBuffer0.toString());
      assertEquals(36, stringBuffer0.length());
      
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-1L), 10000);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 232);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("Invalid format: \"\" is too short", "");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 232, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 10000, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8192L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-2603L));
      assertEquals(5, int0);
      
      int int1 = FormatUtils.calculateDigitCount(1L);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = FormatUtils.calculateDigitCount((-2603L));
      assertEquals(5, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 1L, 5);
      assertEquals("00001", stringWriter0.toString());
      
      stringWriter0.close();
      assertEquals("00001", stringWriter0.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 3741L);
      assertEquals("000013741", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0089';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = 'X';
      StringBuffer stringBuffer1 = stringBuffer0.append((String) null);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("null", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals(4, stringBuffer1.length());
      assertEquals("null", stringBuffer1.toString());
      
      charArray0[4] = '\u0089';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotNull(stringBuffer2);
      assertArrayEquals(new char[] {'\u0089', ']', 'J', 'X', '\u0089'}, charArray0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("null\u0089]JX\u0089", stringBuffer0.toString());
      assertEquals(9, stringBuffer2.length());
      assertEquals("null\u0089]JX\u0089", stringBuffer2.toString());
      
      StringBuffer stringBuffer3 = stringBuffer0.insert(1, (float) 3741L);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer3);
      assertNotNull(stringBuffer3);
      assertEquals("n3741.0ull\u0089]JX\u0089", stringBuffer3.toString());
      assertEquals(15, stringBuffer3.length());
      assertEquals("n3741.0ull\u0089]JX\u0089", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 5, 1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer3);
      assertEquals(16, stringBuffer0.length());
      assertEquals("n3741.0ull\u0089]JX\u00895", stringBuffer0.toString());
      
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 100);
      assertEquals("000013741100", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 232);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("Invalid format: \"\" is too short", "");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean0 = mockFile0.setReadOnly();
      assertTrue(boolean0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time");
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 232, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, (long) 232, 10000);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, 100, (-1538));
      assertEquals("100", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 232);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("Invalid format: \"\" is too short", "");
      assertNotNull(mockFile0);
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 232, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, 10000, 232);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L?5)y\"-M',#");
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, Integer.MIN_VALUE, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("hp4", false);
      assertNotNull(mockFileWriter0);
      
      Writer writer0 = mockFileWriter0.append((CharSequence) "hp4");
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      
      mockFileWriter0.close();
      assertSame(mockFileWriter0, writer0);
      
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, (-1784L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, 10000L, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L?5)y\"-',#");
      assertNotNull(mockPrintWriter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "NhzCQ");
      assertNotNull(stringBuffer0);
      assertEquals("NhzCQ", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 27);
      assertEquals("NhzCQ27", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 232);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("Invalid format: \"\" is too short", "");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'Q';
      charArray0[2] = 'n';
      charArray0[3] = 'S';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'`', 'Q', 'n', 'S'}, charArray0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 232, 10000);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/Invalid format: \"\" is too short", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid format: \"\" is too short", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 10000, 232);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(10);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2530);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 43, 10000);
      assertEquals(10000, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, 74, 1073741824);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L?5)y\"-M',#");
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-16), 0);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-16));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append(object0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(25, stringBuffer0.length());
      assertEquals(25, stringBuffer1.length());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      IntStream intStream0 = stringBuffer0.codePoints();
      assertSame(stringBuffer0, stringBuffer1);
      assertNotNull(intStream0);
      assertEquals(25, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 100L);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(28, stringBuffer0.length());
      
      try { 
        MockURI.URI("", "", "", "@(i=oI@2r4Q,", "@(i=oI@2r4Q,");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?@(i=oI@2r4Q,#@(i=oI@2r4Q,
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(9223372036854775794L);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, 45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.flush();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 1L, 2775);
      assertEquals(2775, charArrayWriter0.size());
      
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter0, 3063);
      assertEquals(2779, charArrayWriter0.size());
      
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, (long) 3063);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, (-1), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-1582), (-1582));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage((String) null, 434);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(503L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g_c7Z'|;H)H");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "\" is malformed at \"";
      PrintWriter printWriter0 = mockPrintWriter0.format("\" is malformed at \"", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 3);
      assertSame(mockPrintWriter0, printWriter0);
      
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-2767), 3);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, (long) (-2767), 0);
      assertSame(mockPrintWriter0, printWriter0);
      
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, (-135));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("0", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, (-6178));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7S/oY^");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Locale locale1 = Locale.forLanguageTag("");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "O7S/oY^";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "O7S/oY^";
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "O7S/oY^", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(locale0, locale1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 10, 10);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(locale0, locale1);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 3108L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, (-1098L), 980);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("m<'n%.A5OLjM^");
      assertNotNull(mockPrintStream0);
      
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-3422), (-3422));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-4329), 23);
      assertEquals("-00000000000000000004329", charArrayWriter0.toString());
      assertEquals(24, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-1912));
      assertEquals("-1912", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NhzCQ");
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-16), 0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits((CharSequence) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("...", "...");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("...", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/...", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/.../...", mockFile0.toString());
      assertFalse(mockFile0.exists());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("...", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/...", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/.../...", mockFile0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("...", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/...", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/.../...", mockFile0.toString());
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "...");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("...", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/...", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/.../...", mockFile0.toString());
      
      FormatUtils.writePaddedInteger((Writer) printWriter0, 0, 1307);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("...", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/...", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/joda-time/.../...", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 984, 2113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, 1565, 1565);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 0L, 1977);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 0);
      assertEquals("Invalid format: \"\"", string0);
      assertNotNull(string0);
      
      String string1 = FormatUtils.createErrorMessage("", 0);
      assertEquals("Invalid format: \"\"", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("Invalid format: \"\"", (-2980));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 1);
      assertEquals("Invalid format: \"\" is too short", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = FormatUtils.calculateDigitCount(1);
      assertEquals(1, int0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid format: \"\" is too short");
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 1, (-1815));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 1);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 181L, 1);
      assertEquals("181", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-9223372036854775795L));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-9223372036854775808L));
      assertEquals(20, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      assertEquals(20, stringBuffer0.length());
      assertEquals("-9223372036854775808", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-9223372036854775808L), 41);
      assertEquals("-9223372036854775808-00000000000000000000009223372036854775808", stringBuffer0.toString());
      assertEquals(62, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2d");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2d");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = FormatUtils.createErrorMessage("2d", 2143);
      assertEquals("Invalid format: \"2d\" is too short", string0);
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"2d\" is too short");
      assertNotNull(stringBuffer0);
      assertEquals("Invalid format: \"2d\" is too short", stringBuffer0.toString());
      assertEquals(33, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 2143);
      assertEquals("Invalid format: \"2d\" is too short2143", stringBuffer0.toString());
      assertEquals(37, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 693L, Integer.MIN_VALUE);
      assertEquals(40, stringBuffer0.length());
      assertEquals("Invalid format: \"2d\" is too short2143693", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 2143);
      assertEquals(44, stringBuffer0.length());
      assertEquals("Invalid format: \"2d\" is too short21436932143", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, Integer.MIN_VALUE);
      assertEquals("Invalid format: \"2d\" is too short21436932143-2147483648", stringBuffer0.toString());
      assertEquals(55, stringBuffer0.length());
      
      Locale locale0 = Locale.forLanguageTag("2d");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) "Invalid format: \"2d\" is too short";
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int0 = FormatUtils.calculateDigitCount((-20L));
      assertEquals(3, int0);
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-20L), (-433));
      assertEquals("Invalid format: \"2d\" is too short21436932143-2147483648-20", stringBuffer0.toString());
      assertEquals(58, stringBuffer0.length());
      
      int int1 = FormatUtils.calculateDigitCount(3);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, (-3848));
      assertEquals(5, charArrayWriter0.size());
      assertEquals("-3848", charArrayWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 10);
      assertEquals("-384810", charArrayWriter0.toString());
      assertEquals(7, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-218L));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 9223372036854775781L);
      stringBuffer0.insert(12, false);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 9223372036854775781L, 1);
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775781L, 48);
      assertEquals(91, stringBuffer0.length());
      assertEquals("922337203685false47757819223372036854775781000000000000000000000000000009223372036854775781", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-9223372036854775808L), 20);
      assertEquals(41, stringBuffer0.length());
      assertEquals("-9223372036854775808-09223372036854775808", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('d');
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, (-1), (int) (byte)54);
      assertEquals(55, charArrayWriter1.size());
      assertEquals("-000000000000000000000000000000000000000000000000000001", charArrayWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FormatUtils.calculateDigitCount(1277L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      Charset charset0 = Charset.defaultCharset();
      byteArrayOutputStream0.reset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, 556, 556);
      FormatUtils.writeUnpaddedInteger((Writer) outputStreamWriter0, 1277L);
      StringBuffer stringBuffer0 = new StringBuffer("D_^@y=yWvrHj6>O");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 4);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, (long) 556);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("D_^@y=yWvrHj6>O", (-1447));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FormatUtils.createErrorMessage("9223372036854775808", 44);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 44);
      StringBuffer stringBuffer0 = new StringBuffer("Invalid format: \"9223372036854775808\" is too short");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 44);
      stringWriter0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[0] = '3';
      charArray0[4] = '3';
      charArray0[6] = '^';
      charArray0[7] = '^';
      charArray0[8] = 'Q';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 10L);
      FormatUtils.createErrorMessage("Invalid format: \"9223372036854775808\" is too short", 44);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 10L, 10);
      FormatUtils.appendPaddedInteger(stringBuffer0, 10, 17);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, 2149);
      assertEquals(84, stringBuffer1.length());
      assertEquals("Invalid format: \"9223372036854775808\" is too short443c\u0000\u00003\u0000^^Q10000000000000000102149", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9s)['", false);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, (-1784L));
      StringBuffer stringBuffer0 = new StringBuffer("9s)['");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1784L));
      FormatUtils.parseTwoDigits(stringBuffer0, 0);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("9s)['", 157);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FormatUtils.createErrorMessage("V5WJ6K<&>", (-25));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"V5WJ6K...\"");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-190L), 12);
      assertEquals(40, stringBuffer0.length());
      assertEquals("Invalid format: \"V5WJ6K...\"-000000000190", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append(1.0);
      FormatUtils.appendPaddedInteger(stringBuffer0, 365, Integer.MIN_VALUE);
      stringWriter0.close();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, (-3872));
      FormatUtils.appendPaddedInteger(stringBuffer0, Integer.MIN_VALUE, 18);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (-3872), (-126));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-3872));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) Integer.MIN_VALUE, 18);
      FormatUtils.appendPaddedInteger(stringBuffer0, Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(77, stringBuffer0.length());
      assertEquals("-21474836481.03650-000000002147483648-3872-3872-000000002147483648-2147483648", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FormatUtils.calculateDigitCount((-2603L));
      FormatUtils.calculateDigitCount(1L);
      FormatUtils.calculateDigitCount((-2603L));
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 1L, 5);
      stringWriter0.append('g');
      stringWriter0.close();
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 3741L);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0089';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = 'X';
      charArray0[4] = '\u0089';
      stringBuffer0.append(charArray0);
      stringBuffer0.insert(1, (float) 3741L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 5, 1);
      FormatUtils.calculateDigitCount(0L);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4Og#- #4ZW-P7hI;");
      Locale locale0 = Locale.JAPAN;
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 10000L, 0);
      StringBuffer stringBuffer0 = new StringBuffer("4Og#- #4ZW-P7hI;");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2938), (-2938));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, 10000L);
      MockFile mockFile0 = new MockFile("4Og#- #4ZW-P7hI;", "4Og#- #4ZW-P7hI;");
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, 10000L, 897);
      FormatUtils.calculateDigitCount(10000L);
      StringBuffer stringBuffer1 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (long) (-2098));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      FormatUtils.writePaddedInteger((Writer) pipedWriter0, (-9223372036854775808L), (-1595));
      FormatUtils.writePaddedInteger((Writer) pipedWriter0, (-9223372036854775788L), (-1595));
  }
}
