/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:51:18 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockPartial;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minutes_ESTest extends Minutes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(60000L);
      Duration duration1 = duration0.multipliedBy(60000L);
      Days days0 = duration1.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertEquals(59999040, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = new Duration(0L, 104767008L);
      Duration duration1 = duration0.multipliedBy(1214L);
      Minutes minutes0 = duration1.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(2119785, minutes0.getMinutes());
      assertEquals(210, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(733L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      assertEquals(43980, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1685));
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals((-101100), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus(23118750);
      Hours hours1 = minutes1.toStandardHours();
      assertEquals(22985910, minutes1.getMinutes());
      assertEquals(383098, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = new Duration((-298L), (-298L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.MAX_VALUE.toStandardDays();
      Minutes minutes1 = days0.toStandardMinutes();
      Duration duration1 = minutes1.toStandardDuration();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(2147483520L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Duration duration1 = minutes0.ONE.toStandardDuration();
      assertEquals(60000L, duration1.getMillis());
      assertEquals((-132840), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      minutes0.toStandardDays();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-2290));
      Days days0 = minutes0.toStandardDays();
      assertEquals((-1), days0.getDays());
      assertEquals((-2290), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.MIN_VALUE.plus(minutes0);
      assertEquals(Integer.MIN_VALUE, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardHours(21L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy(357);
      assertEquals(449820, minutes1.getMinutes());
      assertEquals(1260, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = new Duration((-313L), (-313L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.MIN_VALUE.multipliedBy(1);
      assertEquals(0, minutes0.getMinutes());
      assertEquals(Integer.MIN_VALUE, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardDays(60000L);
      Duration duration1 = duration0.multipliedBy((-1L));
      Minutes minutes0 = duration1.toStandardMinutes();
      Minutes minutes1 = minutes0.minus((Minutes) null);
      assertEquals((-86400000), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Minutes minutes1 = minutes0.ZERO.minus(0);
      assertSame(minutes1, minutes0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Minutes minutes1 = minutes0.THREE.minus((-20));
      assertEquals(23, minutes1.getMinutes());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-313L));
      Minutes minutes0 = duration0.toStandardMinutes();
      int int0 = minutes0.getMinutes();
      assertEquals((-450720), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(10209375);
      Minutes minutes1 = minutes0.MIN_VALUE.dividedBy(1224);
      assertEquals((-1754480), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-313L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.MAX_VALUE.toStandardDays();
      Minutes minutes1 = days0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483520 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardHours(21L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.plus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1260
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.MIN_VALUE.plus((-450720));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -450720
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      // Undeclared exception!
      try { 
        minutes0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = Instant.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Duration duration1 = minutes0.MIN_VALUE.toStandardDuration();
      Minutes minutes1 = duration1.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.minus(minutes1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      // Undeclared exception!
      try { 
        minutes0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Minutes", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Minutes minutes1 = minutes0.TWO.plus(0);
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertFalse(boolean0);
      assertEquals(2, minutes1.getMinutes());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1);
      assertEquals(1, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      minutes0.getFieldType();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus(2845);
      boolean boolean0 = minutes0.isLessThan(minutes1);
      assertEquals(2845, minutes1.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.standardDays(60000L);
      Duration duration1 = duration0.multipliedBy((-1L));
      Minutes minutes0 = duration1.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertTrue(boolean0);
      assertEquals((-86400000), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(60000L);
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertFalse(boolean0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(10209375);
      boolean boolean0 = minutes0.isLessThan(minutes0);
      assertEquals(10209375, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus(23118750);
      boolean boolean0 = minutes1.isGreaterThan(minutes0);
      assertEquals(22985910, minutes1.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(60000L);
      Duration duration1 = duration0.multipliedBy(60000L);
      Days days0 = duration1.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertEquals(59999040, minutes0.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(60000L);
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan(minutes0);
      assertEquals((-132840), minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = new Duration((-298L), (-298L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.THREE.dividedBy(1);
      assertEquals(3, minutes1.getMinutes());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = new Duration((-313L), (-313L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.dividedBy((-571));
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.standardDays(60000L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.minus((Minutes) null);
      assertEquals(86400000, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.minus(minutes0);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2125);
      minutes0.ZERO.plus((Minutes) null);
      assertEquals(2125, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.parseMinutes("2A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2A\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      Minutes minutes1 = minutes0.multipliedBy((-40649346));
      assertEquals(0, minutes1.getMinutes());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-274L), (Chronology) mockNullZoneChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, mutableDateTime0);
      // Undeclared exception!
      try { 
        Minutes.minutesIn(mutableInterval0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minutes field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPartial mockPartial0 = (MockPartial)MockPartial.EMPTY_INSTANCE;
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) mockPartial0, (ReadablePartial) mockPartial0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3);
      assertEquals(3, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2);
      int int0 = minutes0.getMinutes();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1));
      Minutes minutes1 = minutes0.negated();
      assertEquals(1, minutes1.getMinutes());
      assertEquals((-1), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus(Integer.MIN_VALUE);
      assertEquals(0, minutes0.getMinutes());
      assertEquals(Integer.MIN_VALUE, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Duration duration0 = new Duration((-298L), (-298L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Duration duration1 = minutes0.toStandardDuration();
      assertEquals(0L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = new Duration((-313L), (-313L));
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.multipliedBy((-572));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * -572
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      minutes0.toStandardSeconds();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.minus(1);
      boolean boolean0 = minutes0.isLessThan(minutes1);
      assertFalse(boolean0);
      assertEquals((-132841), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Hours hours1 = minutes0.THREE.toStandardHours();
      Days days0 = hours1.toStandardDays();
      Minutes minutes1 = days0.toStandardMinutes();
      Minutes minutes2 = minutes0.MAX_VALUE.plus(minutes1);
      // Undeclared exception!
      try { 
        minutes2.minus((-2138));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2138
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      String string0 = minutes0.toString();
      assertEquals("PT-132840M", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = new Duration((-313L), (-313L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = Minutes.standardMinutesIn(minutes0);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minutes field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      int int0 = minutes0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Duration duration0 = new Duration((-298L), (-298L));
      Minutes minutes0 = duration0.toStandardMinutes();
      minutes0.getPeriodType();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = new Duration((-298L), (-298L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.MAX_VALUE.toStandardDays();
      Minutes minutes1 = days0.toStandardMinutes();
      minutes1.negated();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(2147483520, minutes1.getMinutes());
      assertEquals(1491308, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = new Duration((-298L), (-298L));
      Minutes minutes0 = duration0.toStandardMinutes();
      minutes0.negated();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2214L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals((-13), weeks0.getWeeks());
      assertEquals((-132840), minutes0.getMinutes());
  }
}
