/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 02:40:27 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateTimeZone;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMillis((-1209));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusSeconds((-1));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMinutes((-311));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2475), (-2475), (-2475), (-2475), 41, 0);
      assertNotNull(mockDate0);
      assertEquals("Wed Sep 08 21:41:00 GMT 790", mockDate0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertNotNull(localTime0);
      assertEquals("Wed Sep 08 21:41:00 GMT 790", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours((-2475));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("Wed Sep 08 21:41:00 GMT 790", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMillis(1475);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusSeconds((-148));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2475), (-2475), (-2475), (-2475), 41, 0);
      assertNotNull(mockDate0);
      assertEquals("Wed Sep 08 21:41:00 GMT 790", mockDate0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertNotNull(localTime0);
      assertEquals("Wed Sep 08 21:41:00 GMT 790", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-2475));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("Wed Sep 08 21:41:00 GMT 790", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.plusHours((-1));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withLocalMillis((-1048L));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      boolean boolean0 = localTime1.equals(localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-554));
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertNotNull(localTime0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 1, 0, 0, (Chronology) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      assertNotNull(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, localTime0.size());
      
      long long0 = localTime_Property0.getMillis();
      assertEquals(0L, long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(29L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)localTime_Property0.getField();
      assertNotNull(preciseDateTimeField0);
      assertEquals(4, localTime0.size());
      assertEquals(23, preciseDateTimeField0.getMaximumValue());
      assertEquals(3600000L, preciseDateTimeField0.getUnitMillis());
      assertFalse(preciseDateTimeField0.isLenient());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(24, preciseDateTimeField0.getRange());
      assertEquals("hourOfDay", preciseDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(484, 14, 14, 484, 484);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=484,MONTH=14,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=484,HOUR_OF_DAY=484,MINUTE=484,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-46853898960000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=485,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=93,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=4,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, (DateTimeField) null);
      assertNotNull(localTime_Property0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-46853898960000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=485,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=93,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=4,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(14);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      LocalTime localTime1 = localTime0.withField(dateTimeFieldType0, 14);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn((long)0).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      LocalTime localTime1 = localTime0.withMillisOfDay(0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      DateTime dateTime0 = localTime1.toDateTimeToday();
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertNotNull(dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals((-32400000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withLocalMillis((-1048L));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      int int0 = localTime1.getSecondOfMinute();
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(58, int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(0, int0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getMillisOfDay();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      long long0 = localTime0.getLocalMillis();
      assertEquals(0L, long0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      long long0 = localTime0.getLocalMillis();
      assertEquals(73281320L, long0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(4, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = localTime0.getField(0, (Chronology) mockNullZoneChronology0);
      assertNotNull(dateTimeField0);
      assertEquals(4, localTime0.size());
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(556L, (DateTimeZone) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = new Period(91L);
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks((-2146689459));
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      // Undeclared exception!
      try { 
        localTime0.withPeriodAdded(period1, (-2146689459));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 4608275633381712681 * 604800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-4274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4274 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.withHourOfDay(50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 50 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        LocalTime.parse("-9DFk44+Sj", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("nkPnk9IZtt1`((", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
      try { 
        LocalTime.parse("M9}H", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"M9}H\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      // Undeclared exception!
      try { 
        LocalTime.fromMillisOfDay(0L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(62, 62, 11);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=62,MONTH=62,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      mockGregorianCalendar0.setLenient(false);
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=62,MONTH=62,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(22);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.022", dateTimeZone0.toString());
      assertEquals("+00:00:00.022", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.022", dateTimeZone0.toString());
      assertEquals("+00:00:00.022", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.compareTo((ReadablePartial) localDateTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Object) null, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(1000L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(2149, (-1646), 0, (-32), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2149 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(371, 371, 2219, (-4224));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 371 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(719527, (-2563), 719527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 719527 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-1021), 2007);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1021 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(271);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMillis(0);
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withPeriodAdded((ReadablePeriod) null, 0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals((-1), int0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Duration duration0 = Duration.millis(0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(777L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(29L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      int int0 = localTime0.get(dateTimeFieldType0);
      assertEquals(21, int0);
      assertEquals(4, localTime0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getValue(3);
      assertEquals(320, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.MIDNIGHT.getValue(2);
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getValue(1);
      assertEquals(21, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getValue(0);
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(mockThaiBuddhistDate0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Chronology chronology0 = localTime0.getChronology();
      assertNotNull(chronology0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(86399999L, (Chronology) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5045, 1000, 2147483612, 5045, 1000, 1000);
      assertNotNull(mockDate0);
      assertEquals("Thu May 02 21:56:40 GMT 5886639", mockDate0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertNotNull(localTime0);
      assertEquals("Thu May 02 21:56:40 GMT 5886639", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertEquals("Thu May 02 21:56:40 GMT 5886639", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      Chronology chronology0 = localTime_Property0.getChronology();
      assertNotNull(chronology0);
      assertEquals("Thu May 02 21:56:40 GMT 5886639", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = new LocalTime(chronology0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("Thu May 02 21:56:40 GMT 5886639", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.size();
      assertEquals(4, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(0, 0, 0, 0, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withSecondOfMinute(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy((-1970));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy((-554));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.MIDNIGHT.toString((String) null, (Locale) null);
      assertNotNull(string0);
      assertEquals("00:00:00.000", string0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = new Locale("`-onR&~V#uWm[T");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("`-onr&~v#uwm[t", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("`-onr&~v#uwm[t", locale0.getLanguage());
      
      try { 
        localTime0.toString("Pu{ S[Puk0.<U}uy ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.toString((String) null);
      assertNotNull(string0);
      assertEquals("20:21:21.320", string0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(29L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(6000L, (Chronology) buddhistChronology0);
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMillis(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMillis(999);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusSeconds(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      assertNotNull(dateTimeZone0);
      assertEquals("+11:00", dateTimeZone0.toString());
      assertEquals("+11:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("+11:00", dateTimeZone0.toString());
      assertEquals("+11:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusSeconds(11);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("+11:00", dateTimeZone0.toString());
      assertEquals("+11:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMinutes(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      assertNotNull(dateTimeZone0);
      assertEquals("+11:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:00", dateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("+11:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:00", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusMinutes(11);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("+11:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:00", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMillis((-1350));
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusSeconds(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusSeconds(3);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusHours(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusHours(999);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Duration duration0 = Duration.millis(1483L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      
      Hours hours0 = duration0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Days days0 = hours0.toStandardDays();
      assertNotNull(days0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 954);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withFieldAdded((DurationFieldType) null, 97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Duration duration0 = Duration.millis(1483L);
      assertNotNull(duration0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      
      Hours hours0 = duration0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Days days0 = hours0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1483L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("_`");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.getID());
      
      LocalTime localTime0 = new LocalTime((Object) null, testDateTimeZone_MockDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, (-2147483615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfYear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      assertNotNull(localTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, (-1350));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1350 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes(999);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      LocalTime localTime2 = localTime1.withFields(localTime0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      
      int int0 = localTime0.compareTo((ReadablePartial) localTime2);
      assertTrue(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertTrue(localTime2.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusHours(4);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      int int0 = localTime0.compareTo((ReadablePartial) localTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(29L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      boolean boolean0 = localTime0.isAfter(localTime0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withLocalMillis(0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      boolean boolean0 = localTime0.MIDNIGHT.equals(localTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("_`");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      
      LocalTime localTime0 = new LocalTime((Object) null, testDateTimeZone_MockDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      boolean boolean0 = localTime0.equals("_`");
      assertFalse(boolean0);
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("_`", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      boolean boolean0 = localTime0.equals(localTime0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withLocalMillis(0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      boolean boolean0 = localTime1.equals(localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      boolean boolean0 = localTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      boolean boolean0 = localTime0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'era' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        localTime0.getValue(286);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 286
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      // Undeclared exception!
      try { 
        localTime0.getField(236548278, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 236548278
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      Chronology chronology0 = localTime_Property0.getChronology();
      LocalTime localTime1 = LocalTime.now(chronology0);
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        localTime0.withMinuteOfHour(2154);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2154 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(556L, (DateTimeZone) null);
      Period period0 = new Period(91L);
      LocalTime localTime1 = localTime0.withPeriodAdded(period0, (-2146689459));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute(1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      // Undeclared exception!
      try { 
        localTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      int int0 = localTime0.MIDNIGHT.getHourOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      String string0 = localTime0.toString();
      assertEquals("20:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1773L));
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond(1187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1187 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      int int0 = localTime0.getMillisOfSecond();
      assertEquals(320, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(1103);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Object) integer0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      int int0 = localTime0.getSecondOfMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      Partial partial0 = new Partial(chronology0, (DateTimeFieldType[]) null, (int[]) null);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      int int0 = localTime0.getMillisOfDay();
      assertEquals(54000000, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.minus((ReadablePeriod) null);
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      LocalTime localTime1 = localTime0.withHourOfDay(14);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalTime localTime0 = LocalTime.parse("10:20:30.040");
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(31083663600000L);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(4, localTime0.size());
      assertEquals(1392390000000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.addWrapFieldToCopy((-740));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4, 0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.getLocalTime();
      assertSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.addCopy(0L);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1177L));
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundHalfCeilingCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1773L));
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.addCopy((-1938));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("\uFFFD\uFFFD:21:21.320");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\uFFFD\uFFFD:21:21.320\" for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1177L));
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.withMaximumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertSame(localTime1, localTime0);
  }
}
