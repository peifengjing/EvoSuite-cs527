/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:25:29 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockPartial;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Hours_ESTest extends Hours_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration(38898367008L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.plus(23118750);
      boolean boolean0 = hours0.isGreaterThan(hours1);
      assertFalse(boolean0);
      assertEquals(23129550, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals(0, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1149L);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(1149, hours0.getHours());
      assertEquals(6, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.hours((-774));
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals((-774), hours0.getHours());
      assertEquals((-4), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-806L));
      Days days0 = duration0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals((-2851200), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-806L));
      Days days0 = duration0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals((-47520), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Duration duration1 = hours0.toStandardDuration();
      assertEquals(0L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-806L));
      Days days0 = duration0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Duration duration1 = hours0.toStandardDuration();
      assertEquals((-2851200000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3600000L);
      Hours hours0 = duration0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      assertEquals(86400000, hours0.getHours());
      assertEquals(3600000, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-806L));
      Days days0 = duration0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Days days1 = hours0.toStandardDays();
      assertEquals((-33), days1.getDays());
      assertEquals((-792), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-3104));
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.plus(hours0);
      assertEquals((-148992), hours1.getHours());
      assertEquals((-74496), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      Days days0 = duration0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.plus((-1));
      assertEquals((-1), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      hours0.negated();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-27L));
      Hours hours0 = duration0.toStandardHours();
      hours0.negated();
      assertEquals((-27), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-806L));
      Days days0 = duration0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.multipliedBy(581);
      assertEquals((-792), hours0.getHours());
      assertEquals((-460152), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.minus(hours0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = new Duration(38898367008L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.minus((-1202));
      assertEquals(12002, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.hours(3195);
      Hours hours1 = hours0.ONE.minus(3195);
      assertEquals((-3194), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.SEVEN.multipliedBy(7);
      int int0 = hours1.getHours();
      assertEquals(49, int0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-3104));
      Hours hours0 = duration0.toStandardHours();
      int int0 = hours0.getHours();
      assertEquals((-74496), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-806L));
      Days days0 = duration0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.dividedBy(60);
      assertEquals((-792), hours0.getHours());
      assertEquals((-13), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(38898367008L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 10805088 * 3600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(789L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.SEVEN.multipliedBy(7);
      // Undeclared exception!
      try { 
        hours1.MAX_VALUE.plus(hours1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 49
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.millis((-687L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MAX_VALUE.multipliedBy(3127);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 3127
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3600000L);
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.minus(2005);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2005
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Instant instant0 = new Instant((-439L));
      Hours hours0 = Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      // Undeclared exception!
      try { 
        hours0.SIX.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Hours", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = new Duration(1087L, (-75L));
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.plus(0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.standardDays(517L);
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MAX_VALUE.plus(238);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 238
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.hours(8);
      assertEquals(8, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.hours(2);
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      hours0.getFieldType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = new Duration(1087L, (-75L));
      Duration duration1 = Duration.standardDays((-3104));
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      Hours hours0 = duration1.toStandardHours();
      Hours hours1 = duration2.toStandardHours();
      boolean boolean0 = hours0.isLessThan(hours1);
      assertTrue(boolean0);
      assertEquals((-74495), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-3104));
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertEquals((-74496), hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = new Duration(1087L, (-75L));
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertEquals(0, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      boolean boolean0 = hours0.isLessThan(hours0);
      assertFalse(boolean0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(38898367008L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = minutes0.toStandardHours();
      boolean boolean0 = hours1.isGreaterThan(hours0);
      assertTrue(boolean0);
      assertEquals(10805101, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.hours(6);
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals(6, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-27L));
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals((-27), hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Duration duration0 = Duration.standardDays(517L);
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isGreaterThan(hours0);
      assertEquals(12408, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = new Duration(1123L, (-75L));
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.dividedBy(1);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hours hours0 = Hours.hours(6);
      hours0.MAX_VALUE.minus((Hours) null);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = new Duration(1087L, (-75L));
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.plus(hours0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("*L-$0{ 5d/1(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"*L-$0{ 5d/1(\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPartial mockPartial0 = (MockPartial)MockPartial.EMPTY_INSTANCE;
      Hours hours0 = Hours.hoursBetween((ReadablePartial) mockPartial0, (ReadablePartial) mockPartial0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MAX_VALUE);
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(7730941129200L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(38898367008L);
      Duration duration1 = duration0.minus(38898367008L);
      Minutes minutes0 = duration1.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = minutes0.toStandardHours();
      Hours hours2 = hours1.minus(hours0);
      assertEquals(10794296, hours1.getHours());
      assertEquals(8, hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hours hours0 = Hours.hours(7);
      assertEquals(7, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.hours(6);
      Hours hours1 = hours0.plus((Hours) null);
      assertEquals(6, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hours hours0 = Hours.hours(5);
      assertEquals(5, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Hours hours0 = Hours.hours(4);
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      Hours hours1 = hours0.SEVEN.negated();
      Hours hours2 = hours1.minus(hours0);
      assertEquals(3, hours0.getHours());
      assertEquals((-10), hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Duration duration1 = duration0.withDurationAdded((-2851L), (-2925));
      Seconds seconds0 = duration1.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = duration1.toStandardDays();
      Hours hours1 = days0.toStandardHours();
      boolean boolean0 = hours0.isLessThan(hours1);
      assertEquals(0, hours1.getHours());
      assertFalse(boolean0);
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.MAX_VALUE.dividedBy(Integer.MAX_VALUE);
      assertEquals(1, hours1.getHours());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = Duration.standardDays(517L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(744480, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Duration duration0 = new Duration(1087L, (-75L));
      Hours hours0 = duration0.toStandardHours();
      int int0 = hours0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(0, hours0.getHours());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Hours hours0 = duration0.toStandardHours();
      hours0.getPeriodType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      assertEquals(0, days0.getDays());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      hours0.multipliedBy((-2873));
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Hours hours0 = Hours.standardHoursIn(days0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-927L));
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      String string0 = hours0.FIVE.toString();
      assertEquals("PT5H", string0);
      assertEquals((-912), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.minus(0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = new Duration(1087L, (-75L));
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = hours0.TWO.toStandardSeconds();
      assertEquals(0, hours0.getHours());
      assertEquals(7200, seconds0.getSeconds());
  }
}
