/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 05:26:11 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestInstant_Basics;
import org.joda.time.TestLocalDateTime_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.TimeOfDay;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-1535L), chronology0);
      timeOfDay0.getHourOfDay();
      timeOfDay0.minusMillis(23);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(346L);
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, chronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 0;
      TimeOfDay timeOfDay2 = new TimeOfDay(timeOfDay1, intArray0);
      timeOfDay2.minusHours(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(timeOfDay0, timeOfDay0, periodType0);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      period0.getDays();
      period0.getFieldType(0);
      PeriodType.YEAR_INDEX = 3116;
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      System.setCurrentTimeMillis(3);
      timeOfDay1.toLocalTime();
      timeOfDay0.withPeriodAdded(period0, 0);
      TimeOfDay.fromMillisOfDay(288L);
      timeOfDay1.size();
      timeOfDay1.getHourOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.withSecondOfMinute(143);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 143 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = (-1613);
      TimeOfDay timeOfDay0 = new TimeOfDay();
      int[] intArray1 = new int[7];
      intArray1[0] = (-1613);
      intArray1[1] = 1;
      intArray1[2] = 3;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-1613);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray1);
      timeOfDay1.withMillisOfSecond(0);
      intArray0[5] = (-3);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TimeOfDay timeOfDay2 = null;
      try {
        timeOfDay2 = new TimeOfDay(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      TimeOfDay timeOfDay0 = new TimeOfDay(0L, chronology0);
      timeOfDay0.withMinuteOfHour(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1000L);
      timeOfDay0.getSecondOfMinute();
      Period period0 = Period.ZERO;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withHourOfDay(0);
      Instant instant0 = new Instant((long) 1);
      Chronology chronology0 = instant0.getChronology();
      // Undeclared exception!
      try { 
        timeOfDay1.MIDNIGHT.getField(140, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 140
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, (Chronology) null);
      TimeOfDay timeOfDay1 = new TimeOfDay(0, 1, 2, 2, (Chronology) null);
      TimeOfDay timeOfDay2 = null;
      try {
        timeOfDay2 = new TimeOfDay(timeOfDay0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = new TimeOfDay(2321L, (Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      durationFieldType0.isSupported((Chronology) null);
      int int0 = 416;
      timeOfDay0.withFieldAdded(durationFieldType0, 416);
      timeOfDay0.withChronologyRetainFields(chronology0);
      // Undeclared exception!
      try { 
        timeOfDay0.withSecondOfMinute(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 416 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
      timeOfDay0.MIDNIGHT.toDateTimeToday();
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.plusHours(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(13, 13, 50);
      // Undeclared exception!
      try { 
        timeOfDay0.minusMinutes(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Integer integer0 = new Integer(0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      Locale locale0 = Locale.ITALIAN;
      MockCalendar.getInstance(locale0);
      LocalDate.now();
      int int0 = PeriodType.MONTH_INDEX;
      timeOfDay0.size();
      // Undeclared exception!
      try { 
        timeOfDay0.plusSeconds(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(13, 13, 50);
      TimeOfDay timeOfDay1 = new TimeOfDay(13, 13);
      Integer integer0 = new Integer(50);
      timeOfDay0.MIDNIGHT.getFields();
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      DateTimeUtils.setCurrentMillisSystem();
      // Undeclared exception!
      try { 
        timeOfDay1.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("sJ");
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      // Undeclared exception!
      try { 
        timeOfDay0.plusSeconds(60000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L, (Chronology) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        timeOfDay0.minusHours(16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(13, 13, 50);
      // Undeclared exception!
      try { 
        timeOfDay0.minusMinutes(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-814)).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      Date date0 = localDateTime0.toDate();
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(date0);
      // Undeclared exception!
      try { 
        timeOfDay0.minusHours(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeOfDay.fromMillisOfDay((long) 462);
      int[] intArray0 = new int[3];
      intArray0[0] = 462;
      intArray0[1] = 3;
      intArray0[2] = 55;
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((TimeOfDay) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1207L);
      timeOfDay0.MIDNIGHT.toDateTimeToday();
      timeOfDay0.getHourOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.minusMinutes(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(7, 7, 50);
      // Undeclared exception!
      try { 
        timeOfDay0.minusMinutes(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.JAPANESE;
      Locale.setDefault(locale0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      Period period0 = Period.years(709);
      Period period1 = period0.withWeeks(62);
      period1.toMutablePeriod();
      TimeOfDay timeOfDay1 = timeOfDay0.minus(period1);
      timeOfDay0.MIDNIGHT.getValue(2);
      timeOfDay1.withMillisOfSecond(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      // Undeclared exception!
      try { 
        timeOfDay0.plusMinutes(1443);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Integer integer0 = new Integer(0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      Locale locale0 = Locale.ITALIAN;
      MockCalendar.getInstance(locale0);
      LocalDate.now();
      int int0 = PeriodType.MONTH_INDEX;
      timeOfDay0.size();
      // Undeclared exception!
      try { 
        timeOfDay0.plusSeconds(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      timeOfDay0.withSecondOfMinute(0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(3, 0, 0, 23, 3878, 2, 2, 3);
      timeOfDay0.minus(mutablePeriod0);
      TestDateTime_Basics testDateTime_Basics0 = null;
      try {
        testDateTime_Basics0 = new TestDateTime_Basics("");
        fail("Expecting exception: ExceptionInInitializerError");
      
      } catch(ExceptionInInitializerError e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      Period period0 = new Period((-637L), 0L);
      timeOfDay0.minus(period0);
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(12);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      timeOfDay1.indexOf(dateTimeFieldType0);
      timeOfDay1.MIDNIGHT.equals((Object) null);
      timeOfDay0.withMillisOfSecond(3);
      DateTimeUtils.setCurrentMillisFixed(0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Date date0 = localDateTime0.toDate();
      TimeOfDay.fromDateFields(date0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L);
      ReadablePeriod readablePeriod0 = null;
      TimeOfDay timeOfDay1 = timeOfDay0.minus((ReadablePeriod) null);
      timeOfDay1.plus((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        timeOfDay0.plusMinutes(2003);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(208L);
      // Undeclared exception!
      try { 
        timeOfDay0.plusMillis((-608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("L%?8Slj2`^n");
      testDateTimeZone_MockDateTimeZone0.convertUTCToLocal(1708L);
      testDateTimeZone_MockDateTimeZone0.getName(1708L);
      DateTimeZone.setDefault(testDateTimeZone_MockDateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      DateTimeUtils.setCurrentMillisFixed((-1125L));
      timeOfDay0.withSecondOfMinute(1);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        TimeOfDay.fromMillisOfDay((long) 2, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
      Period period0 = new Period((Object) null);
      period0.normalizedStandard();
      // Undeclared exception!
      try { 
        timeOfDay0.plusMillis(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-20L));
      timeOfDay0.plus((ReadablePeriod) null);
      timeOfDay0.withPeriodAdded((ReadablePeriod) null, (-17));
      // Undeclared exception!
      try { 
        timeOfDay0.minusMinutes(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1000L);
      timeOfDay0.getSecondOfMinute();
      Period period0 = Period.ZERO;
      timeOfDay0.MIDNIGHT.withHourOfDay(0);
      timeOfDay0.minus(period0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-511), (-511), (-575), 461, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -511 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(348L, (Chronology) null);
      TimeOfDay timeOfDay1 = null;
      try {
        timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.withMillisOfSecond((-1873));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1873 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(60, (-1556), chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, (Chronology) null);
      // Undeclared exception!
      try { 
        timeOfDay0.plusSeconds(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
      timeOfDay0.toDateTimeToday();
      MockZone mockZone0 = new MockZone(2805L, 2, 2);
      uTCDateTimeZone0.getMillisKeepLocal(mockZone0, 2);
      // Undeclared exception!
      try { 
        timeOfDay0.plusHours(20503125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(2845, 2845, 2845, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2845 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertSame(buddhistChronology1, buddhistChronology0);
      
      String string0 = testAbstractPartial_MockPartial0.toString();
      assertNotNull(string0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      TimeOfDay timeOfDay1 = timeOfDay0.withSecondOfMinute(3);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(20, timeOfDay1.getHourOfDay());
      assertEquals(320, timeOfDay1.getMillisOfSecond());
      assertEquals(3, timeOfDay1.getSecondOfMinute());
      assertEquals(21, timeOfDay1.getMinuteOfHour());
      assertEquals(4, timeOfDay1.size());
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      
      // Undeclared exception!
      try { 
        timeOfDay1.MIDNIGHT.minusHours(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(0);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(dateTimeFieldType0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      Duration duration1 = Duration.standardDays(1);
      assertNotNull(duration1);
      assertEquals(86400000L, duration1.getMillis());
      assertEquals(1L, duration1.getStandardDays());
      assertEquals(86400L, duration1.getStandardSeconds());
      assertEquals(24L, duration1.getStandardHours());
      assertEquals(1440L, duration1.getStandardMinutes());
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      Days days0 = duration0.toStandardDays();
      assertNotNull(days0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotSame(duration0, duration1);
      assertFalse(duration0.equals((Object)duration1));
      
      Weeks weeks0 = days0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotSame(duration0, duration1);
      assertFalse(duration0.equals((Object)duration1));
      
      Weeks weeks1 = Weeks.weeks(0);
      assertNotNull(weeks1);
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertSame(weeks1, weeks0);
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotSame(duration0, duration1);
      assertSame(weeks0, weeks1);
      assertFalse(duration0.equals((Object)duration1));
      
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = null;
      try {
        testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("PeriodFormat.day");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      
      DateTimeUtils.setCurrentMillisSystem();
      int int0 = timeOfDay0.getMinuteOfHour();
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, int0);
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      
      int int1 = timeOfDay0.getSecondOfMinute();
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, int1);
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        timeOfDay0.minusHours(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(3068L, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(3, timeOfDay0.getSecondOfMinute());
      assertEquals(68, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-2626L));
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay0);
      assertEquals(59, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(23, timeOfDay0.getHourOfDay());
      assertEquals(374, timeOfDay0.getMillisOfSecond());
      assertEquals(57, timeOfDay0.getSecondOfMinute());
      
      DateTimeUtils.setCurrentMillisOffset(1);
      DateTimeField[] dateTimeFieldArray0 = timeOfDay0.MIDNIGHT.getFields();
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(dateTimeFieldArray0);
      assertEquals(59, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(23, timeOfDay0.getHourOfDay());
      assertEquals(374, timeOfDay0.getMillisOfSecond());
      assertEquals(57, timeOfDay0.getSecondOfMinute());
      
      int int0 = 3512;
      // Undeclared exception!
      try { 
        timeOfDay0.plusSeconds(3512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(13, 13, 13);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(13, timeOfDay0.getHourOfDay());
      assertEquals(13, timeOfDay0.getSecondOfMinute());
      assertEquals(13, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      
      int int0 = timeOfDay0.getMillisOfSecond();
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, int0);
      assertEquals(13, timeOfDay0.getHourOfDay());
      assertEquals(13, timeOfDay0.getSecondOfMinute());
      assertEquals(13, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusSeconds(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      
      // Undeclared exception!
      try { 
        timeOfDay0.withFieldAdded((DurationFieldType) null, (-1302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'null' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 3, 3, 2);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals(3, timeOfDay0.getSecondOfMinute());
      assertEquals(2, timeOfDay0.getMillisOfSecond());
      assertEquals(3, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(2, timeOfDay0.getHourOfDay());
      
      // Undeclared exception!
      try { 
        timeOfDay0.minusSeconds(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(13, 13);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(13, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(13, timeOfDay0.getMinuteOfHour());
      
      int int0 = timeOfDay0.getMillisOfSecond();
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, int0);
      assertEquals(13, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(13, timeOfDay0.getMinuteOfHour());
      
      // Undeclared exception!
      try { 
        timeOfDay0.minusSeconds(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-643L), chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay("org.joda.time.TimeOfDay", chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.TimeOfDay\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      java.time.LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      assertNotNull(localDateTime0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(localDateTime0, (ZoneId) zoneOffset0);
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertNotNull(gregorianCalendar0);
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392344481320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=64800000,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(gregorianCalendar0);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay0);
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392344481320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=64800000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.plusMinutes(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(21600000L);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(6, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusMillis(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(1, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(1, timeOfDay0.getMinuteOfHour());
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusMillis(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(1, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusMillis(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(10080, (-3800), (-2208));
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=10080,MONTH=-3800,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2208,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=245742854400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=9757,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=103,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (int[]) null);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay1.size());
      
      // Undeclared exception!
      try { 
        timeOfDay1.minusMillis((-107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(0, 0, 0, 0, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(309, (-2272), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 309 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-2667), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2667 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-515), (-515), (-515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -515 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, 2, (Chronology) null);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(2, timeOfDay0.getMinuteOfHour());
      assertEquals(2, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(2, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay1);
      assertEquals(2, timeOfDay0.getMinuteOfHour());
      assertEquals(2, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(2, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, timeOfDay1.size());
      assertEquals(1, timeOfDay1.getHourOfDay());
      assertArrayEquals(new int[] {1}, intArray0);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      
      // Undeclared exception!
      try { 
        timeOfDay1.getMinuteOfHour();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(2147483646);
      assertNotNull(integer0);
      assertEquals(2147483646, (int)integer0);
      
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-1), (-1), 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      System.setCurrentTimeMillis((-1046L));
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, 2, (Chronology) null);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(2, timeOfDay0.getMinuteOfHour());
      assertEquals(2, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(2, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      
      int int0 = timeOfDay0.getMinuteOfHour();
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, int0);
      assertEquals(2, timeOfDay0.getMinuteOfHour());
      assertEquals(2, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(2, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = timeZone0.getDisplayName();
      assertNotNull(string0);
      assertEquals("Greenwich Mean Time", string0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      Locale.setDefault(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Period period0 = Period.years(709);
      assertNotNull(period0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withField(dateTimeFieldType0, 2);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(2, timeOfDay1.getMillisOfSecond());
      assertEquals(0, timeOfDay1.getMinuteOfHour());
      assertEquals(4, timeOfDay1.size());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      
      DateTimeUtils.setCurrentMillisOffset(2251L);
      // Undeclared exception!
      try { 
        timeOfDay1.minusSeconds(444);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Instant instant0 = new Instant(147L);
      assertNotNull(instant0);
      assertEquals(147L, instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals(147L, instant0.getMillis());
      
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null, chronology0);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay0);
      assertEquals(147L, instant0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(147L, instant0.getMillis());
      assertEquals(147L, dateTime0.getMillis());
      
      int int0 = timeOfDay0.getSecondOfMinute();
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(21, int0);
      assertEquals(147L, instant0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      
      TimeOfDay timeOfDay1 = new TimeOfDay((long) 21);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay1);
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(0, timeOfDay1.getMinuteOfHour());
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertEquals(21, timeOfDay1.getMillisOfSecond());
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      
      System.setCurrentTimeMillis(0L);
      int int1 = timeOfDay1.getSecondOfMinute();
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(0, int1);
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(0, timeOfDay1.getMinuteOfHour());
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertEquals(21, timeOfDay1.getMillisOfSecond());
      assertNotSame(timeOfDay1, timeOfDay0);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertFalse(int1 == int0);
      
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((long) 2, chronology0);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay2);
      assertEquals(147L, instant0.getMillis());
      assertEquals(4, timeOfDay2.size());
      assertEquals(0, timeOfDay2.getHourOfDay());
      assertEquals(0, timeOfDay2.getSecondOfMinute());
      assertEquals(2, timeOfDay2.getMillisOfSecond());
      assertEquals(0, timeOfDay2.getMinuteOfHour());
      assertNotSame(timeOfDay2, timeOfDay1);
      assertNotSame(timeOfDay2, timeOfDay0);
      assertFalse(timeOfDay2.equals((Object)timeOfDay1));
      assertFalse(timeOfDay2.equals((Object)timeOfDay0));
      
      TimeOfDay timeOfDay3 = new TimeOfDay(timeOfDay0);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay3);
      assertEquals(147L, instant0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay3.getSecondOfMinute());
      assertEquals(21, timeOfDay3.getMinuteOfHour());
      assertEquals(4, timeOfDay3.size());
      assertEquals(20, timeOfDay3.getHourOfDay());
      assertEquals(320, timeOfDay3.getMillisOfSecond());
      assertFalse(timeOfDay0.equals((Object)timeOfDay1));
      assertFalse(timeOfDay0.equals((Object)timeOfDay2));
      assertFalse(timeOfDay3.equals((Object)timeOfDay1));
      assertFalse(timeOfDay3.equals((Object)timeOfDay2));
      assertTrue(timeOfDay3.equals((Object)timeOfDay0));
      
      TimeOfDay timeOfDay4 = timeOfDay0.withMillisOfSecond(1);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay4);
      assertEquals(147L, instant0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay4.getSecondOfMinute());
      assertEquals(1, timeOfDay4.getMillisOfSecond());
      assertEquals(20, timeOfDay4.getHourOfDay());
      assertEquals(4, timeOfDay4.size());
      assertEquals(21, timeOfDay4.getMinuteOfHour());
      assertNotSame(timeOfDay0, timeOfDay4);
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay0, timeOfDay2);
      assertNotSame(timeOfDay0, timeOfDay3);
      assertNotSame(timeOfDay4, timeOfDay1);
      assertNotSame(timeOfDay4, timeOfDay2);
      assertNotSame(timeOfDay4, timeOfDay0);
      assertNotSame(timeOfDay4, timeOfDay3);
      assertFalse(timeOfDay0.equals((Object)timeOfDay1));
      assertTrue(timeOfDay0.equals((Object)timeOfDay3));
      assertFalse(timeOfDay0.equals((Object)timeOfDay2));
      assertFalse(timeOfDay4.equals((Object)timeOfDay1));
      assertFalse(timeOfDay4.equals((Object)timeOfDay2));
      assertFalse(timeOfDay4.equals((Object)timeOfDay0));
      assertFalse(timeOfDay4.equals((Object)timeOfDay3));
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-638), 2, 3069, (-638), 3, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -638 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-27L));
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals(59, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      assertEquals(973, timeOfDay0.getMillisOfSecond());
      assertEquals(59, timeOfDay0.getMinuteOfHour());
      assertEquals(23, timeOfDay0.getHourOfDay());
      
      TimeOfDay timeOfDay1 = new TimeOfDay(0, 3, 1);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay1);
      assertEquals(3, timeOfDay1.getMinuteOfHour());
      assertEquals(1, timeOfDay1.getSecondOfMinute());
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(0, timeOfDay1.getMillisOfSecond());
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      
      TimeOfDay timeOfDay2 = timeOfDay1.withPeriodAdded((ReadablePeriod) null, (-17));
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay2);
      assertEquals(3, timeOfDay1.getMinuteOfHour());
      assertEquals(1, timeOfDay1.getSecondOfMinute());
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(0, timeOfDay1.getMillisOfSecond());
      assertEquals(1, timeOfDay2.getSecondOfMinute());
      assertEquals(0, timeOfDay2.getMillisOfSecond());
      assertEquals(0, timeOfDay2.getHourOfDay());
      assertEquals(4, timeOfDay2.size());
      assertEquals(3, timeOfDay2.getMinuteOfHour());
      assertSame(timeOfDay1, timeOfDay2);
      assertNotSame(timeOfDay1, timeOfDay0);
      assertNotSame(timeOfDay2, timeOfDay0);
      assertSame(timeOfDay2, timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertFalse(timeOfDay2.equals((Object)timeOfDay0));
      
      TimeOfDay timeOfDay3 = new TimeOfDay(1, 3, 2);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay3);
      assertEquals(1, timeOfDay3.getHourOfDay());
      assertEquals(2, timeOfDay3.getSecondOfMinute());
      assertEquals(4, timeOfDay3.size());
      assertEquals(0, timeOfDay3.getMillisOfSecond());
      assertEquals(3, timeOfDay3.getMinuteOfHour());
      assertFalse(timeOfDay3.equals((Object)timeOfDay0));
      assertFalse(timeOfDay3.equals((Object)timeOfDay1));
      assertFalse(timeOfDay3.equals((Object)timeOfDay2));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-1466), 1771, 1771, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) null);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      
      TimeOfDay timeOfDay1 = null;
      try {
        timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, (Chronology) null);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(2, timeOfDay0.getHourOfDay());
      assertEquals(2, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withChronologyRetainFields((Chronology) null);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay1);
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(2, timeOfDay0.getHourOfDay());
      assertEquals(2, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(0, timeOfDay1.getMillisOfSecond());
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getMinuteOfHour());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusSeconds(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(37230040L);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay0);
      assertEquals(10, timeOfDay0.getHourOfDay());
      assertEquals(20, timeOfDay0.getMinuteOfHour());
      assertEquals(40, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(30, timeOfDay0.getSecondOfMinute());
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusHours((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getHourOfDay());
      
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withMinuteOfHour(3);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay1);
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay1.getMillisOfSecond());
      assertEquals(0, timeOfDay1.getHourOfDay());
      assertEquals(4, timeOfDay1.size());
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertEquals(3, timeOfDay1.getMinuteOfHour());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      
      int int0 = (-1665);
      // Undeclared exception!
      try { 
        timeOfDay0.plusMillis((-1665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(calendar0);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      
      int int0 = timeOfDay0.size();
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(4, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay0.size());
      
      // Undeclared exception!
      try { 
        timeOfDay0.minusHours((-5653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusMinutes((-1609));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(13, 13, 50);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(13, timeOfDay0.getHourOfDay());
      assertEquals(50, timeOfDay0.getSecondOfMinute());
      assertEquals(13, timeOfDay0.getMinuteOfHour());
      
      // Undeclared exception!
      try { 
        timeOfDay0.minusMinutes(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(timeOfDay0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      boolean boolean0 = timeOfDay0.equals(dateTimeFieldType0);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertFalse(boolean0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      int int0 = timeOfDay0.indexOf(dateTimeFieldType0);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals((-1), int0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      int int1 = timeOfDay0.getMillisOfSecond();
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(320, int1);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertFalse(int1 == int0);
      
      LocalTime localTime0 = timeOfDay0.toLocalTime();
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertNotNull(localTime0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(4, localTime0.size());
      
      MockZone mockZone0 = new MockZone(0L, 3, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) mockZone0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(gregorianCalendar0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      
      TimeOfDay timeOfDay1 = TimeOfDay.fromCalendarFields(gregorianCalendar0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay1);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(21, timeOfDay1.getMinuteOfHour());
      assertEquals(20, timeOfDay1.getHourOfDay());
      assertEquals(320, timeOfDay1.getMillisOfSecond());
      assertEquals(4, timeOfDay1.size());
      assertEquals(21, timeOfDay1.getSecondOfMinute());
      assertNotSame(timeOfDay1, timeOfDay0);
      assertTrue(timeOfDay1.equals((Object)timeOfDay0));
      
      // Undeclared exception!
      try { 
        timeOfDay0.plusMillis(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.minusMillis(123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getDisplayName();
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Locale.setDefault(locale0);
      MockDate mockDate1 = new MockDate();
      mockDate0.after(mockDate1);
      TimeOfDay.fromDateFields(mockDate0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate1);
      TimeOfDay timeOfDay1 = timeOfDay0.withMillisOfSecond(444);
      timeOfDay1.getFieldTypes();
      timeOfDay0.getHourOfDay();
      // Undeclared exception!
      try { 
        timeOfDay1.MIDNIGHT.getField(1000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1000
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 0;
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.withField(dateTimeFieldType0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfYear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
}
