/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:41:58 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDuration_Basics;
import org.joda.time.TestInterval_Constructors;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTime_ESTest extends DateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      // Undeclared exception!
      try { 
        testAbstractPartial_MockPartial0.getChronology();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.TestAbstractPartial$MockPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      // Undeclared exception!
      try { 
        LocalDate.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = new Instant();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      DateTime dateTime0 = instant0.toDateTime(chronology0);
      dateTime0.withMillis(0L);
      // Undeclared exception!
      try { 
        instant0.toDateTime();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = new DateTime((-1619L), (Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateTime0.minusDays((-2615));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("' is not supported");
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((-2807L));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("' is not supported");
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      // Undeclared exception!
      try { 
        testAbstractPartial_MockPartial0.getChronology();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.TestAbstractPartial$MockPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = new DateTime((-61721494718680L), (Chronology) mockNullZoneChronology0);
      mockNullZoneChronology0.era();
      // Undeclared exception!
      try { 
        dateTime0.minusYears(263);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = null;
      try {
        testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      // Undeclared exception!
      try { 
        LocalDate.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = null;
      try {
        testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("2002-06");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      // Undeclared exception!
      try { 
        dateTime0.withFieldAdded(durationFieldType0, 2547);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1906L, (-500), (-500));
      Locale locale0 = Locale.FRENCH;
      mockZone0.getShortName(1906L, locale0);
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) mockZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-2901L));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      // Undeclared exception!
      try { 
        testAbstractPartial_MockPartial0.getChronology();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.TestAbstractPartial$MockPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1906L, (-500), (-500));
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) mockZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((-2806L));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("' i not supprted");
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(1315L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        DateTime.parse("Chronology must not be null", dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType.minuteOfDay();
      Partial partial0 = null;
      try {
        partial0 = new Partial();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(1163L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(1392409282154L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(16149L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(1392409283521L, (DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2220L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("' is not supported");
      testDateTimeZone_MockDateTimeZone0.adjustOffset(1392409281001L, true);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0L, (DateTimeZone) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((Object) null, uTCDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.convert.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = new DateTime(1426L, (Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateTime0.minusSeconds(172);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // seconds field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone.setNameProvider((NameProvider) null);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(dateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1249));
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(dateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-328));
      // Undeclared exception!
      try { 
        DateTime.parse("sXpqtaPhImfj!z", dateTimeFormatter2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-3439), (-3189), (-3189), 0, 0, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(mockJapaneseDate0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-853), (-853), (-853), 0, 32, dateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Instant instant0 = new Instant((-5247L));
      Duration duration0 = Duration.standardMinutes(1903L);
      // Undeclared exception!
      try { 
        instant0.withDurationAdded((ReadableDuration) duration0, 2941);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2323, 1, 1, 2323, 1970, (-943), mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(17117045, 17117045, 17117045, 2270, 714, (Chronology) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.hourOfHalfday();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, (-2439), 0, (-2439), 0, 0, 719527, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1926L), (DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(mockMinguoDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2954, 2954, (-404), (-1), (-861), (-404), (-404));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        DateTime.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        Instant.parse("", dateTimeFormatter1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 10125000;
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("*C$#]$MYj<1&_y");
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(468, 468, 468, 468, 10125000, 10125000, (DateTimeZone) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 23118750;
      int int1 = 15;
      int int2 = 0;
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(23118750, 23118750, 15, 15, 23118750, 0, 15, uTCDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      System.setCurrentTimeMillis(128849018880000L);
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        instant0.getChronology();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-2882L));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long long0 = 1906L;
      MockZone mockZone0 = new MockZone(1906L, (-500), (-500));
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) mockZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.base.BaseDateTime", e);
      }
  }
}
