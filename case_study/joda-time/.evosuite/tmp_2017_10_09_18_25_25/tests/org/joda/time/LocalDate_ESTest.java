/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 02:15:11 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.TestDateTimeZone;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      localDate0.minusDays((-42));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      localDate0.minusWeeks((-519));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.minusMonths((-70));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-794L));
      LocalDate localDate0 = monthDay0.toLocalDate(1024);
      localDate0.plusWeeks(47);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((-1966L), (DateTimeZone) uTCDateTimeZone0);
      localDate0.plusMonths((-2728));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      localDate0.plusYears((-519));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.toDate();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 5);
      localDate1.equals(localDate0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      localDate_Property0.getField();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, (DateTimeField) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.withWeekOfWeekyear(9);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.withMonthOfYear(2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      localDate0.withLocalMillis(10000000L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1787L), 28, 28);
      LocalDate localDate0 = new LocalDate((Object) null, mockZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      localDate0.withField(dateTimeFieldType0, 28);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.withEra(0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1890L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1134));
      localDate0.toInterval(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.toInterval((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L);
      localDate0.toInterval();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((-653L), (DateTimeZone) uTCDateTimeZone0);
      localDate0.toInterval();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toInterval();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2056L, (DateTimeZone) null);
      localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L);
      localDate0.toDateTimeAtStartOfDay();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(21, 5, 5);
      localDate0.toDateTimeAtStartOfDay();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = new LocalDate(1000L);
      localDate0.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      Chronology chronology0 = mockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate((-43286400000L), chronology0);
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("U}CTgq+p)M");
      localDate0.toDateTimeAtMidnight((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L);
      localDate0.toDateTimeAtMidnight();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      localDate0.toDateTimeAtMidnight();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withWeekyear(21);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      localDate1.toDateTimeAtCurrentTime(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = new LocalDate(232L, (DateTimeZone) uTCDateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      LocalDate localDate1 = localDate_Property0.setCopy(6);
      localDate1.toDateTimeAtCurrentTime();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(570);
      localDate1.toDateTime((LocalTime) null, (DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5, 2).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      LocalDate localDate1 = localDate0.plusYears(2);
      LocalTime localTime0 = LocalTime.parse("(", dateTimeFormatter0);
      localDate1.toDateTime(localTime0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5, 2).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1259));
      LocalTime localTime0 = LocalTime.parse("(", dateTimeFormatter0);
      localDate1.toDateTime(localTime0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDate localDate0 = LocalDate.parse("2");
      localDate0.getYear();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYear(5);
      LocalDate localDate2 = localDate1.minusMonths(1900);
      localDate2.getWeekyear();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(44L);
      localDate0.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      localDate0.getField(0, (Chronology) mockNullZoneChronology0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYear(0);
      localDate1.getCenturyOfEra();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withYearOfCentury((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -8 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withYear(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483645 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withWeekyear((-2147483621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483621 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(9223372036854775806L);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, 86400000);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036828800000 + 7464960000000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("Z", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        localDate0.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek(72);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 72 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withDayOfMonth(2549);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2549 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-13));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withCenturyOfEra((-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -13 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1617), (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localDate0.toString("3ZC*[v7lEbALGul7l}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.plusYears(2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483646
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        LocalDate.parse("Z", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483644)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDate.parse(")yvj\"k1d/RGY%)2oJI", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDate.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDate.parse("org.joda.time.chrono.LimitChronology$LimitDurationField", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.chrono.LimitChrono...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("3ZC*[v7lEbALGul7l}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3ZC*[v7lEbALGul7l}\" is malformed at \"ZC*[v7lEbALGul7l}\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      Chronology chronology0 = mockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate((-43286400000L), chronology0);
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) mockPartial0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testBasePartial_MockPartial0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(mockHijrahDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(1L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(0, 0, 0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(1456, 1456, 1368);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1456 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-13));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.plusDays((-13));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Period period0 = Period.minutes(1855);
      localDate0.withPeriodAdded(period0, (-2855));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(172);
      // Undeclared exception!
      try { 
        localDate0.withPeriodAdded(testBaseSingleFieldPeriod_Single0, 2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 172 * 2147483646
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L);
      localDate0.withPeriodAdded((ReadablePeriod) null, (-1224));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5, 2).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      LocalTime localTime0 = LocalTime.parse("(", dateTimeFormatter0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      localDate0.toDateTime(localTime0, (DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      MonthDay monthDay0 = new MonthDay((Object) null);
      LocalDate localDate1 = monthDay0.toLocalDate((-4270));
      LocalDate localDate2 = localDate0.withFields(localDate1);
      localDate2.compareTo((ReadablePartial) localDate1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.compareTo((ReadablePartial) localDate0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.equals(localDate0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      localDate0.isSupported(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Duration duration0 = Duration.standardMinutes(0);
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      localDate0.isSupported(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      localDate0.isSupported(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      localDate0.isSupported(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      localDate0.get(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.getValue(1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.getValue(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, (-450), 865);
      LocalDate.fromCalendarFields(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      localDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((-2720), 58, (-2720), mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.getChronology();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDate localDate0 = LocalDate.parse("2");
      localDate0.getMonthOfYear();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3570L));
      localDate0.size();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(616L);
      LocalDate localDate0 = monthDay0.toLocalDate((-8));
      localDate0.getYear();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(21, 5, 5);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      localDate0.toDateTimeAtStartOfDay((DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(object0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      Chronology chronology0 = mockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate((-43286400000L), chronology0);
      localDate0.toString((String) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      Chronology chronology0 = mockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate((-43286400000L), chronology0);
      Locale locale0 = new Locale("}feDl|1P~", "}feDl|1P~");
      try { 
        localDate0.toString("}feDl|1P~", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toString((String) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-230947200000L));
      localDate0.toString("Z");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3570L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(20L);
      LocalDate localDate0 = monthDay0.toLocalDate(2);
      // Undeclared exception!
      try { 
        localDate0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      localDate0.property(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.minusDays(2515);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.minusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.minusWeeks(1848);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.minusMonths(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.minusYears(0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.plusDays(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.plusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.plusWeeks((-2147483642));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.plusMonths(0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.plusMonths(2004);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.plusYears(0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      Period period0 = new Period((long) 0);
      localDate0.withPeriodAdded(period0, 0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.minus((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      localDate0.withFieldAdded(durationFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, 1558);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1787L), 28, 28);
      LocalDate localDate0 = new LocalDate((Object) null, mockZone0);
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, 2806);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 1388);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1388 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        localDate0.withField((DateTimeFieldType) null, 2014);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdayOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDate localDate0 = LocalDate.parse("2");
      localDate0.withFields((ReadablePartial) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.toDateTime((LocalTime) null, (DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2715L);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalTime localTime0 = LocalTime.now();
      localDate0.toLocalDateTime(localTime0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate localDate1 = localDate0.withYear(337);
      localDate0.compareTo((ReadablePartial) localDate1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.hashCode();
      localDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Date date0 = localDate0.toDate();
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      boolean boolean0 = localDate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-794L));
      LocalDate localDate0 = monthDay0.toLocalDate(1024);
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1787L), 28, 28);
      LocalDate localDate0 = new LocalDate((Object) null, mockZone0);
      // Undeclared exception!
      try { 
        localDate0.getValue(86399999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 86399999
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.getField(263, (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 263
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2008), (-2251), 0, 1, (-2251));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localDate0.plusYears(2147483623);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483327 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      LocalDate localDate1 = localDate_Property0.addToCopy(1478);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      int int0 = localDate1.compareTo((ReadablePartial) localDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1787L), 28, 28);
      LocalDate localDate0 = new LocalDate((Object) null, mockZone0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(10800000);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = new LocalDate(232L, (DateTimeZone) uTCDateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      Chronology chronology0 = localDate_Property0.getChronology();
      LocalDate localDate1 = LocalDate.now(chronology0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1787L), 28, 28);
      LocalDate localDate0 = new LocalDate((Object) null, mockZone0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-230947200000L));
      Duration duration0 = Duration.ZERO;
      Period period0 = duration0.toPeriod((PeriodType) null);
      LocalDate localDate1 = localDate0.plus(period0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate(chronology0);
      // Undeclared exception!
      try { 
        localDate0.minusYears((-2147483642));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483642
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getEra();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(1392336000000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      LocalDate localDate1 = localDate0.withDayOfWeek(5);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getYearOfEra();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-230947200000L));
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      int int0 = localDate0.getWeekyear();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = new LocalDate(localDate0);
      assertTrue(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) (-2644), (DateTimeZone) null);
      Interval interval0 = localDate0.toInterval((DateTimeZone) null);
      assertEquals(0L, interval0.getEndMillis());
      assertEquals((-86400000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      int int0 = localDate0.getDayOfYear();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      Chronology chronology0 = mockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate((-43286400000L), chronology0);
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      int int0 = localDate0.getYearOfCentury();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withDayOfMonth(11);
      boolean boolean0 = localDate1.equals(localDate0);
      assertFalse(boolean0);
      assertFalse(localDate0.equals((Object)localDate1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      int int0 = localDate0.getDayOfWeek();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3570L));
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertEquals((-86400000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear((-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -12 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-48), (-3518));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      Interval interval0 = localDate0.toInterval();
      assertEquals((-2639174400000L), interval0.getEndMillis());
      assertEquals((-2639260800000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withCenturyOfEra(11);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYearOfEra(11);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      int int0 = localDate1.get(dateTimeFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5, 2).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      LocalTime localTime0 = LocalTime.parse("(", dateTimeFormatter0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      LocalDate localDate1 = localDate0.withDayOfYear(12);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(3, localDate0.size());
      assertEquals(73281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("(", dateTimeFormatter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      String string0 = localDate0.toString();
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LocalDate localDate0 = LocalDate.parse("2");
      // Undeclared exception!
      try { 
        localDate0.withEra(1601);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1601 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
