/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 05:08:03 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.Seconds;
import org.joda.time.TestDuration_Basics;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Duration_ESTest extends Duration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      RoundingMode roundingMode0 = RoundingMode.UP;
      Duration duration1 = duration0.dividedBy(2120L, roundingMode0);
      assertEquals(86400000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3006L);
      Duration duration1 = duration0.withMillis(86400000L);
      assertEquals(86400000L, duration1.getMillis());
      assertEquals(259718400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(3600000L);
      Duration duration1 = duration0.withDurationAdded(500L, 37);
      assertEquals(3600018500L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2147483648L));
      Duration duration1 = duration0.withDurationAdded((-2147483648L), (-3721));
      assertEquals((-3092243273342L), duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = new Period(5502, (-1), 1, (-1));
      Weeks weeks0 = period0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy((-1));
      Seconds seconds1 = duration1.toStandardSeconds();
      assertEquals((-19353600), seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1796L));
      duration0.ZERO.toStandardMinutes();
      assertEquals((-107760L), duration0.getStandardMinutes());
      assertEquals((-6465600L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.standardDays(23L);
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(1987200000L, duration0.getMillis());
      assertEquals(33120, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3234L);
      Hours hours0 = duration0.toStandardHours();
      assertEquals(53, hours0.getHours());
      assertEquals(194040000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2566L));
      Hours hours0 = duration0.toStandardHours();
      assertEquals((-9237600000L), duration0.getMillis());
      assertEquals((-2566), hours0.getHours());
      assertEquals((-2566L), duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.millis(26050L);
      Days days0 = duration0.toStandardDays();
      assertEquals(26050L, duration0.getMillis());
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = Period.weeks((-461));
      Duration duration0 = period0.toStandardDuration();
      Days days0 = duration0.toStandardDays();
      assertEquals((-3227), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.weeks(2304);
      Minutes minutes0 = period0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.toDuration();
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2299L));
      Duration duration1 = duration0.toDuration();
      assertEquals((-198633600L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-19353600000L));
      assertEquals((-224000L), duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3916L);
      Duration duration1 = duration0.plus((ReadableDuration) duration0);
      assertEquals(676684800000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3006L);
      Duration duration1 = duration0.plus(86400000L);
      assertEquals(259804800000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3041L, 3041L);
      Instant instant0 = new Instant(3041L);
      Duration duration0 = mutablePeriod0.toDurationTo(instant0);
      Duration duration1 = duration0.plus(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1796L));
      Duration duration1 = duration0.plus((-1920L));
      assertEquals((-6465601L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Duration duration1 = duration0.negated();
      assertEquals(0L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2147483647L);
      Duration duration1 = duration0.negated();
      assertEquals((-128849018820000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      duration0.ZERO.multipliedBy(2120L);
      assertEquals(183168000L, duration0.getStandardSeconds());
      assertEquals(50880L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2274L);
      Duration duration1 = duration0.multipliedBy(2274L);
      assertEquals(446780966400L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2299L));
      Duration duration1 = Duration.standardMinutes(3600000L);
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      assertEquals(414633600L, duration2.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.millis(26050L);
      Duration duration1 = Duration.standardDays(26050L);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertEquals((-2250719973950L), duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1796L));
      Duration duration1 = duration0.ZERO.minus(2147483647L);
      assertEquals((-6465600L), duration0.getStandardSeconds());
      assertEquals((-24L), duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(86400000L);
      Duration duration1 = duration0.minus((long) 4);
      assertEquals(86399999996L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.minus(10800000L);
      assertEquals((-180L), duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.millis(31083597720000L);
      assertEquals(359763L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = Duration.millis((-9223372036854775808L));
      assertEquals((-2562047788015L), duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3006L);
      long long0 = duration0.getStandardSeconds();
      assertEquals(259718400L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-475L));
      long long0 = duration0.getStandardSeconds();
      assertEquals((-28500L), long0);
      assertEquals((-28500000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      long long0 = duration0.getStandardMinutes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1000L);
      long long0 = duration0.getStandardMinutes();
      assertEquals(1000L, long0);
      assertEquals(60000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.millis(2120L);
      long long0 = duration0.getStandardHours();
      assertEquals(2L, duration0.getStandardSeconds());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2299L));
      long long0 = duration0.getStandardHours();
      assertEquals((-198633600L), duration0.getStandardSeconds());
      assertEquals((-55176L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardHours(4121L);
      long long0 = duration0.getStandardDays();
      assertEquals(14835600000L, duration0.getMillis());
      assertEquals(171L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-2257L));
      long long0 = duration0.getStandardDays();
      assertEquals((-1L), long0);
      assertEquals((-135420000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      Duration duration1 = duration0.dividedBy((-25534000L), roundingMode0);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1052L);
      duration0.ZERO.dividedBy(1052L);
      assertEquals(90892800000L, duration0.getMillis());
      assertEquals(1052L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      Duration duration1 = duration0.dividedBy((-19L));
      assertEquals((-9640421052L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3916L);
      // Undeclared exception!
      try { 
        duration0.withDurationAdded((ReadableDuration) duration0, (-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 338342400000 * -2147483646
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(31449600000L);
      // Undeclared exception!
      try { 
        duration0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1886976000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3600000L);
      // Undeclared exception!
      try { 
        duration0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 5184000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Period period0 = new Period(5502, (-1), 1, 1);
      Weeks weeks0 = period0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.withMillis((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration1.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -106751991167
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardSeconds((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardMinutes((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 60000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardDays((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = Duration.standardDays(3006L);
      // Undeclared exception!
      try { 
        duration0.multipliedBy(86400000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 259718400000 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration((-9223372036854775808L));
      Duration duration1 = testDuration_Basics_MockMutableDuration0.toDuration();
      // Undeclared exception!
      try { 
        duration0.minus((ReadableDuration) duration1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Period period0 = new Period(5502, (-1), 1, 1);
      Weeks weeks0 = period0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.withMillis((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration1.minus(1934L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -1934
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      // Undeclared exception!
      try { 
        duration0.dividedBy(0L, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        duration0.ZERO.dividedBy(0L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Duration duration0 = null;
      try {
        duration0 = new Duration(mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No duration converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Duration duration0 = null;
      try {
        duration0 = new Duration((-9223372036854775808L), 2146471161);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2146471161 - -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded(0L, (-4));
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = Duration.millis((-2804L));
      // Undeclared exception!
      try { 
        duration0.withDurationAdded((-9223372036854775808L), 2365);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 2365
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      long long0 = duration0.getStandardSeconds();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = new Duration(1000L);
      assertEquals(0L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(1000L);
      Duration duration0 = testDuration_Basics_MockMutableDuration0.toDuration();
      long long0 = duration0.getStandardDays();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1796L));
      long long0 = duration0.getStandardMinutes();
      assertEquals((-107760L), long0);
      assertEquals((-6465600000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1796L));
      Duration duration1 = duration0.negated();
      assertEquals(6465600L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Period period0 = new Period(5502, (-1), 1, 1);
      Weeks weeks0 = period0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      Duration duration1 = duration0.dividedBy((long) 1, roundingMode0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Period period0 = new Period(5502, (-1), 1, 1);
      Weeks weeks0 = period0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      Duration duration1 = duration0.dividedBy((long) (-1), roundingMode0);
      assertEquals((-19353600L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      Duration duration1 = duration0.dividedBy(1L);
      assertSame(duration1, duration0);
      assertEquals(183168000000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2147483648L));
      Duration duration1 = duration0.multipliedBy(1L);
      assertSame(duration1, duration0);
      assertEquals((-2147483648L), duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Period period0 = new Period(5502, (-1), 1, 1);
      Weeks weeks0 = period0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy((-1));
      // Undeclared exception!
      try { 
        duration1.plus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -19353600000 + -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableDuration) null);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = interval0.toPeriod(periodType0);
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = duration0.minus((ReadableDuration) null);
      assertEquals(0L, duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableDuration) null);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = interval0.toPeriod(periodType0);
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = duration0.plus((ReadableDuration) null);
      assertEquals(0L, duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1796L));
      Duration duration1 = duration0.ZERO.plus((ReadableDuration) duration0);
      assertEquals((-6465600000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) null);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(0L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1000L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, (-2147483050));
      assertEquals(3600000L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0);
      Duration duration1 = duration0.withDurationAdded((-4310L), 0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0);
      Duration duration1 = duration0.withMillis(0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1796L));
      Duration duration1 = duration0.withMillis((-1796L));
      assertEquals((-1796L), duration1.getMillis());
      assertEquals((-6465600L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-2804L));
      Duration duration1 = duration0.ZERO.withDurationAdded((ReadableDuration) duration0, 2146471140);
      assertEquals((-1671862521L), duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      assertEquals(0L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardHours((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2299L));
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals((-3310560L), duration0.getStandardMinutes());
      assertEquals((-198633600L), duration0.getStandardSeconds());
      assertEquals((-3310560), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10125000);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0, dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      duration0.ZERO.minus(0L);
      assertEquals(183168000L, duration0.getStandardSeconds());
      assertEquals(2120L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Period period0 = new Period(5502, (-1), 1, 1);
      Weeks weeks0 = period0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      Days days0 = duration0.toStandardDays();
      assertEquals(224L, duration0.getStandardDays());
      assertEquals(224, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Duration duration0 = new Duration(0L, (-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2562047788015
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Hours hours0 = duration0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      long long0 = duration0.getStandardHours();
      assertEquals(183168000L, duration0.getStandardSeconds());
      assertEquals(50880L, long0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2120L);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(183168000, seconds0.getSeconds());
      assertEquals(183168000L, duration0.getStandardSeconds());
  }
}
