/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 05:12:09 GMT 2017
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.joda.time.Chronology;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.Weeks;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDuration_ESTest extends AbstractDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.millis(3);
      String string0 = duration0.toString();
      assertEquals("PT0.003S", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.millis((-2462L));
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Period period1 = period0.plusDays(2006);
      Weeks weeks0 = period1.toStandardWeeks();
      Duration duration1 = weeks0.toStandardDuration();
      String string0 = duration1.toString();
      assertEquals("PT172972800S", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1086L));
      duration0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1630L));
      Duration duration1 = duration0.minus((ReadableDuration) duration0);
      boolean boolean0 = duration1.equals(duration0);
      assertFalse(boolean0);
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1L);
      Duration duration1 = new Duration(1L);
      boolean boolean0 = duration1.isEqual(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = new Duration((-705L), (-705L));
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1000L);
      Duration duration1 = duration0.toDuration();
      assertEquals(1000L, duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Period period0 = Period.days((-59));
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = duration0.toDuration();
      assertEquals((-84960L), duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = Period.days((-59));
      Duration duration0 = period0.toStandardDuration();
      boolean boolean0 = duration0.isEqual(duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.millis((-2462L));
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Weeks weeks0 = period0.toStandardWeeks();
      Duration duration1 = weeks0.toStandardDuration();
      boolean boolean0 = duration1.isEqual(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-186645772800000L));
      // Undeclared exception!
      try { 
        duration0.toPeriod();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -51846048000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-599L));
      // Undeclared exception!
      try { 
        duration0.compareTo((ReadableDuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractDuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.millis((-60L));
      String string0 = duration0.toString();
      assertEquals("PT-0.060S", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.millis((-2462L));
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Weeks weeks0 = period0.toStandardWeeks();
      Duration duration1 = weeks0.toStandardDuration();
      String string0 = duration1.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1612L));
      Duration duration1 = duration0.minus((ReadableDuration) duration0);
      Duration duration2 = duration1.dividedBy((-1612L));
      boolean boolean0 = duration1.equals(duration2);
      assertTrue(boolean0);
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.millis(880L);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      boolean boolean0 = duration0.equals(mockThaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1630L));
      boolean boolean0 = duration0.equals(duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-380L));
      Duration duration1 = duration0.minus((-380L));
      boolean boolean0 = duration0.equals(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = new Duration((-678L), (-678L));
      Duration duration1 = duration0.minus((-678L));
      boolean boolean0 = duration0.isShorterThan(duration1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(967379955L);
      boolean boolean0 = duration0.isShorterThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = duration0.isShorterThan(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2267L);
      Duration duration1 = Duration.standardDays(0L);
      boolean boolean0 = duration0.isLongerThan(duration1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-36L));
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2267L);
      boolean boolean0 = duration0.isLongerThan(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(967379955L);
      boolean boolean0 = duration0.isEqual((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1L);
      Duration duration1 = new Duration(1L);
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-380L));
      Duration duration1 = duration0.negated();
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      int int0 = duration0.compareTo((ReadableDuration) duration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = new Duration((-1092L), (-186645772800000L));
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
  }
}
