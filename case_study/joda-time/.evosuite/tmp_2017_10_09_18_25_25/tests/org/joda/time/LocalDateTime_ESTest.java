/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 02:22:18 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateMidnight_Basics;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestInterval_Basics;
import org.joda.time.TestYearMonthDay_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.convert.ConverterManager;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-35));
      LocalDateTime localDateTime2 = localDateTime1.minusHours(0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.weekyear();
      localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime1.size();
      localDateTime3.withWeekyear(208);
      LocalDateTime localDateTime4 = localDateTime3.minusMonths(0);
      MockZone mockZone0 = new MockZone(1392431718397L, 208, 1031);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) mockZone0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      Days days0 = period0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Days days1 = seconds0.toStandardDays();
      localDateTime4.withPeriodAdded(days1, (-1261));
      Duration duration0 = new Duration((long) (-35));
      localDateTime2.withDurationAdded(duration0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      LocalDateTime localDateTime2 = localDateTime1.withEra(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.yearOfCentury();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundCeilingCopy();
      localDateTime3.getWeekyear();
      localDateTime3.toDateTime();
      localDateTime0.plusHours(0);
      localDateTime1.getHourOfDay();
      localDateTime2.withMillisOfDay(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 3);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(1);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.dayOfWeek();
      localDateTime0.yearOfCentury();
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(169);
      LocalDateTime localDateTime3 = localDateTime_Property0.withMinimumValue();
      localDateTime2.secondOfMinute();
      Period period0 = Period.months(1113);
      Period period1 = period0.withDays(169);
      // Undeclared exception!
      try { 
        localDateTime3.withPeriodAdded(period1, (-2147483068));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -2390148654684
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-908L), (DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDateTime0.plusYears((-2146826119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146824150 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(1423L, dateTimeZone0);
      localDateTime0.millisOfDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) mutablePeriod0);
      LocalDateTime localDateTime2 = localDateTime1.minusWeeks((-1142));
      localDateTime2.minusSeconds(0);
      LocalDateTime localDateTime3 = localDateTime1.minus((ReadablePeriod) mutablePeriod0);
      localDateTime0.equals(localDateTime3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      localDateTime0.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime1.withField((DateTimeFieldType) null, (-1142));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-35));
      LocalDateTime localDateTime2 = localDateTime1.minusHours(0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.weekyear();
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfFloorCopy();
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      localDateTime3.withFieldAdded(durationFieldType0, (-2249));
      localDateTime1.size();
      localDateTime2.toString("' is not supported");
      localDateTime3.withWeekyear(208);
      localDateTime3.minusYears((-2592));
      LocalDateTime localDateTime5 = localDateTime4.plusWeeks(208);
      // Undeclared exception!
      try { 
        localDateTime5.minusYears(2147483600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481583 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      testAbstractPartial_MockPartial0.isSupported(dateTimeFieldType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime0.monthOfYear();
      LocalDateTime localDateTime1 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime1.withYear((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483646 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getCenturyOfEra();
      LocalDateTime localDateTime1 = localDateTime0.plusDays(1);
      localDateTime1.getYearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime1.get(dateTimeFieldType0);
      LocalDateTime localDateTime2 = localDateTime1.withDate(1, 1, 1);
      LocalDateTime localDateTime3 = localDateTime2.plusDays(1);
      localDateTime0.withMillisOfDay(1);
      localDateTime3.getCenturyOfEra();
      localDateTime1.yearOfEra();
      localDateTime1.hourOfDay();
      MockDate mockDate0 = new MockDate(9, 491, 1, 73281, 2014);
      LocalDateTime localDateTime4 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime4.dayOfYear();
      try { 
        localDateTime3.toString("0?uO<4WJJQR3| -K8", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusHours(1);
      int int0 = Calendar.ZONE_OFFSET;
      DateTimeFieldType.secondOfDay();
      // Undeclared exception!
      try { 
        localDateTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      int int0 = Calendar.AM_PM;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      dateTimeFieldType0.getField(mockNullZoneChronology0);
      localDateTime1.get(dateTimeFieldType0);
      LocalDateTime localDateTime2 = localDateTime1.withDate(1, 1, 1);
      LocalDateTime localDateTime3 = localDateTime2.plusDays(1);
      localDateTime3.dayOfMonth();
      localDateTime1.hourOfDay();
      localDateTime1.minuteOfHour();
      Locale locale0 = Locale.PRC;
      localDateTime0.toString((String) null, locale0);
      try { 
        localDateTime3.toString("0?uO<4WJJQR3| -K8", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2603).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2603);
      LocalDateTime localDateTime2 = localDateTime1.minusYears((-1186));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      localDateTime2.withYear((-56));
      localDateTime0.toDateTime();
      Period period0 = Period.millis(2145303461);
      Seconds seconds0 = period0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = new Period(1L, (-115277557740000L), periodType0);
      localDateTime0.plus((ReadablePeriod) period1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(11, 11, 11, 11, 11);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(758);
      LocalDateTime localDateTime2 = localDateTime1.minusMonths(1386);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 758);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.year();
      LocalDateTime localDateTime4 = localDateTime_Property0.withMaximumValue();
      localDateTime4.withDayOfMonth(11);
      localDateTime2.getEra();
      localDateTime_Property0.roundHalfCeilingCopy();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3681), "%KdC");
      localDateTime2.toDate((TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      DateTimeUtils.setCurrentMillisFixed(0);
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      localDateTime1.getField(0, chronology0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(14, (-305), 169, (-2147483643), 169, 14);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(169);
      localDateTime1.getFieldTypes();
      // Undeclared exception!
      try { 
        localDateTime1.withFieldAdded((DurationFieldType) null, 4023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      localDateTime0.getFields();
      LocalDateTime localDateTime1 = localDateTime0.withTime(6, 6, 6, 6);
      DateTimeZone.getProvider();
      localDateTime1.withFields(localDateTime0);
      localDateTime0.millisOfDay();
      // Undeclared exception!
      try { 
        localDateTime1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Duration duration0 = Duration.ZERO;
      duration0.negated();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PeriodFormat.years.regex");
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      localDateTime1.plusMonths(0);
      localDateTime1.secondOfMinute();
      LocalDateTime localDateTime2 = localDateTime0.minusHours(4);
      localDateTime2.isSupported((DateTimeFieldType) null);
      localDateTime0.secondOfMinute();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(3265);
      localDateTime1.getHourOfDay();
      LocalDateTime localDateTime2 = localDateTime0.withFields(localDateTime0);
      localDateTime1.getYearOfEra();
      localDateTime2.compareTo((ReadablePartial) localDateTime2);
      localDateTime1.minusDays(1000);
      // Undeclared exception!
      try { 
        localDateTime1.getValue(3265);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 3265
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      dateTimeFieldType0.getField(mockNullZoneChronology0);
      DurationField durationField0 = mockNullZoneChronology0.seconds();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      localDateTime0.isSupported(dateTimeFieldType1);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      localDateTime0.isSupported(durationFieldType0);
      localDateTime0.dayOfMonth();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType1.getDurationType();
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayVariant(locale1);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(2325, 13, 13, 2325, 13, 12, 1000, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 3);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(1);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.dayOfWeek();
      localDateTime0.yearOfCentury();
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(169);
      LocalDateTime localDateTime3 = localDateTime_Property0.withMinimumValue();
      localDateTime2.secondOfMinute();
      LocalDateTime localDateTime4 = localDateTime2.minusSeconds(12);
      localDateTime2.plusDays((-305));
      localDateTime3.getLocalMillis();
      localDateTime0.plusMillis((-2147483643));
      localDateTime2.getYearOfEra();
      // Undeclared exception!
      try { 
        localDateTime4.withTime(12, 1, 386, (-305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 386 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) null);
      Duration duration0 = Duration.standardMinutes(3077L);
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Seconds seconds1 = hours0.toStandardSeconds();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) seconds1);
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded(duration0, 41);
      mockNullZoneChronology0.monthOfYear();
      seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      localDateTime2.plusHours(193);
      LocalDateTime localDateTime3 = LocalDateTime.now();
      LocalDateTime localDateTime4 = localDateTime3.withYearOfCentury(13);
      localDateTime4.withHourOfDay(13);
      localDateTime1.getHourOfDay();
      LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(0);
      localDateTime5.toDateTime((DateTimeZone) null);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      localDateTime5.withFieldAdded(durationFieldType0, 41);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withCenturyOfEra(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.joda.time.format.FormatUtils");
      Date date0 = localDate1.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      localDateTime0.minuteOfHour();
      localDateTime0.getMinuteOfHour();
      System.setCurrentTimeMillis(499L);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ino)ss6");
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-55599104318715L), (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-5648L), (-5648L), (Chronology) null);
      mutablePeriod0.setPeriod((-5648L));
      Duration duration0 = Duration.ZERO;
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      mutablePeriod0.getSeconds();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) mutablePeriod0);
      Duration duration1 = duration0.plus((ReadableDuration) null);
      duration0.compareTo((ReadableDuration) duration1);
      localDateTime1.toLocalDate();
      localDateTime0.getDayOfWeek();
      localDateTime0.toLocalDate();
      localDateTime0.getEra();
      localDateTime0.getSecondOfMinute();
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(21);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0);
      Minutes minutes0 = period0.toStandardMinutes();
      Seconds seconds0 = duration1.toStandardSeconds();
      Days days0 = minutes0.toStandardDays();
      days0.toMutablePeriod();
      Seconds seconds1 = days0.toStandardSeconds();
      seconds1.dividedBy(39);
      seconds0.plus(seconds1);
      localDateTime2.withDurationAdded((ReadableDuration) null, (-417));
      Duration duration2 = seconds0.toStandardDuration();
      duration2.isEqual(duration0);
      LocalDateTime localDateTime3 = localDateTime0.minus((ReadableDuration) duration2);
      localDateTime0.getMillisOfSecond();
      localDateTime3.getWeekyear();
      localDateTime2.withPeriodAdded(period0, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      testAbstractPartial_MockPartial0.isSupported(dateTimeFieldType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-112);
      byteArray0[8] = (byte)127;
      localDateTime0.toDate();
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime0.monthOfYear();
      LocalDateTime.now();
      localDateTime0.weekyear();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = new LocalDateTime(1, 1, 1, 1, 1, 1, 1);
      localDateTime1.getYearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime1.get(dateTimeFieldType0);
      localDateTime1.withDate(1, 1, 1);
      LocalDateTime localDateTime2 = localDateTime0.minusYears(1);
      localDateTime1.yearOfEra();
      localDateTime1.hourOfDay();
      localDateTime2.yearOfEra();
      dateTimeFieldType0.toString();
      localDateTime2.getEra();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 3);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(1);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfDay();
      localDateTime0.yearOfCentury();
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(169);
      LocalDateTime localDateTime3 = localDateTime_Property0.withMinimumValue();
      localDateTime2.secondOfMinute();
      localDateTime2.minusSeconds(12);
      localDateTime2.plusDays((-305));
      Integer integer0 = new Integer(1);
      localDateTime0.plusMillis((-2147483643));
      localDateTime2.getYearOfEra();
      localDateTime3.getSecondOfMinute();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-35));
      LocalDateTime localDateTime2 = localDateTime1.minusHours(0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.weekyear();
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime1.size();
      localDateTime4.withCenturyOfEra(4);
      localDateTime4.toString("' is not supported");
      localDateTime3.withWeekyear(208);
      // Undeclared exception!
      try { 
        localDateTime2.getField(0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(1403L, dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) mutablePeriod0);
      localDateTime1.minusWeeks((-1133));
      localDateTime0.plusSeconds(0);
      // Undeclared exception!
      try { 
        localDateTime0.toDate((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) null, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      testAbstractPartial_MockPartial0.isSupported(dateTimeFieldType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)3;
      byteArray0[8] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime0.monthOfYear();
      LocalDateTime localDateTime1 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime1.compareTo((ReadablePartial) testAbstractPartial_MockPartial0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(4256L, (Chronology) null);
      Duration duration0 = new Duration(4256L, (-2352L));
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        localDateTime0.isBefore(localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(2025L);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(11);
      LocalDateTime localDateTime2 = localDateTime1.withWeekyear(11);
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadablePeriod) null);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis(3913L);
      LocalDateTime.Property localDateTime_Property0 = localDateTime4.dayOfWeek();
      LocalDateTime localDateTime5 = localDateTime0.withMinuteOfHour(11);
      localDateTime5.minusWeeks(11);
      LocalDateTime localDateTime6 = localDateTime_Property0.roundHalfFloorCopy();
      localDateTime_Property0.remainder();
      localDateTime6.getDayOfWeek();
      localDateTime6.dayOfYear();
      localDateTime4.getHourOfDay();
      localDateTime0.minusMonths(11);
      // Undeclared exception!
      try { 
        localDateTime0.withTime(0, 11, 0, (-2087831323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2087831323 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      LocalDateTime localDateTime2 = localDateTime1.withEra(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.yearOfCentury();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("Invalid index: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Invalid index: \" for yearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2146946911).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      LocalDateTime localDateTime1 = localDateTime0.plusHours(984);
      LocalDateTime localDateTime2 = localDateTime0.minusDays(984);
      Duration duration0 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.withDurationAdded(duration0, (-1683));
      localDateTime3.getFieldTypes();
      LocalDateTime localDateTime4 = localDateTime2.plusHours(0);
      localDateTime3.getDayOfMonth();
      localDateTime3.era();
      LocalDateTime localDateTime5 = localDateTime1.minusMinutes(0);
      localDateTime5.toString((String) null);
      localDateTime0.minusDays(23);
      localDateTime4.withHourOfDay(0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone.forOffsetHoursMinutes(3, 3);
      LocalDateTime localDateTime0 = new LocalDateTime(3, 3, 3, 3, 3, 3);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(3);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.dayOfWeek();
      localDateTime0.yearOfCentury();
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(169);
      LocalDateTime localDateTime3 = localDateTime_Property0.withMinimumValue();
      localDateTime0.hourOfDay();
      localDateTime2.plusDays((-305));
      localDateTime3.getLocalMillis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      localDateTime1.property(dateTimeFieldType0);
      localDateTime1.year();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(21, 21);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(21);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.dayOfWeek();
      localDateTime0.yearOfCentury();
      localDateTime0.getValue(1);
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(169);
      LocalDateTime localDateTime3 = localDateTime_Property0.withMinimumValue();
      localDateTime3.dayOfYear();
      localDateTime2.plusDays(169);
      localDateTime3.getLocalMillis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      localDateTime1.property(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2274), 3265, (-2274), (-2274), (-2274), (-2274));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      int int0 = Calendar.LONG_STANDALONE;
      TimeZone timeZone0 = TimeZone.getDefault();
      localDateTime0.secondOfMinute();
      localDateTime0.withMillisOfDay(11);
      Date date0 = localDateTime0.toDate(timeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(date0);
      mockGregorianCalendar0.getTime();
      LocalDateTime localDateTime2 = localDateTime0.plusDays(3265);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.hourOfDay();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      localDateTime0.toDateTime(mutableDateTime0);
      LocalDateTime localDateTime3 = localDateTime_Property0.addToCopy((-190L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime4.getYear();
      localDateTime4.getYearOfCentury();
      LocalDateTime localDateTime5 = localDateTime0.plusYears(3265);
      localDateTime5.size();
      localDateTime5.getDayOfYear();
      localDateTime3.withFields(localDateTime1);
      try { 
        mutableDateTime0.toString("wLhiFFP)j$Z:dAJ9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(11, 11, 11, 11, 11);
      localDateTime0.withYearOfEra(11);
      DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(11);
      LocalDateTime localDateTime2 = localDateTime0.withFieldAdded(durationFieldType0, 11);
      LocalDateTime localDateTime3 = new LocalDateTime(11, 11, 11, 11, 11, 11);
      localDateTime2.plusMillis(11);
      localDateTime2.getHourOfDay();
      localDateTime1.equals(localDateTime3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      localDateTime0.plusMinutes(0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4000L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(0);
      LocalDateTime localDateTime2 = localDateTime1.minusHours(0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.weekyear();
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime1.size();
      localDateTime4.getMillisOfDay();
      // Undeclared exception!
      try { 
        localDateTime4.toString("AFsk3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      localDateTime1.compareTo((ReadablePartial) localDateTime0);
      DateTimeFieldType.hourOfDay();
      int int0 = Calendar.MAY;
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(1);
      LocalDateTime localDateTime3 = localDateTime2.withDayOfWeek(1);
      localDateTime0.withMonthOfYear(3);
      localDateTime3.plusDays((-1386));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(10125000);
      localDateTime1.getHourOfDay();
      LocalDateTime localDateTime2 = localDateTime1.minusDays((-27));
      localDateTime0.withFields(localDateTime2);
      localDateTime2.minusMonths((-27));
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = null;
      try {
        testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("The TimeZone id must not be null");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusHours(1);
      DateTimeFieldType.hourOfDay();
      int int0 = Calendar.MAY;
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1);
      localDateTime1.withDayOfWeek(1);
      Instant instant0 = null;
      try {
        instant0 = new Instant(localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.LocalDateTime
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2274), 3265, (-7));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      int int0 = Calendar.LONG_STANDALONE;
      localDateTime0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      localDateTime0.secondOfMinute();
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(11);
      Date date0 = localDateTime0.toDate(timeZone0);
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      mockGregorianCalendar0.getTime();
      LocalDateTime localDateTime3 = localDateTime2.withFields(localDateTime0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.hourOfDay();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      localDateTime0.toDateTime(mutableDateTime0);
      LocalDateTime localDateTime4 = localDateTime_Property0.addToCopy((-196L));
      localDateTime_Property0.equals(mockGregorianCalendar0);
      LocalDateTime localDateTime5 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime5.getYear();
      localDateTime5.getYearOfCentury();
      LocalDateTime localDateTime6 = localDateTime0.plusYears(3265);
      localDateTime6.size();
      localDateTime6.getDayOfYear();
      localDateTime5.getDayOfMonth();
      localDateTime4.withFields(localDateTime2);
      Locale locale0 = Locale.CHINA;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      localDateTime1.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("Field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Field must not be null\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2274), 3265, (-7));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      int int0 = Calendar.LONG_STANDALONE;
      localDateTime0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      localDateTime0.dayOfWeek();
      localDateTime0.withMillisOfDay(11);
      Date date0 = localDateTime0.toDate(timeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(date0);
      mockGregorianCalendar0.getTime();
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.hourOfDay();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      localDateTime0.toDateTime(mutableDateTime0);
      LocalDateTime localDateTime3 = localDateTime_Property0.addToCopy((-196L));
      localDateTime_Property0.equals(mockGregorianCalendar0);
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime4.getYear();
      localDateTime4.getYearOfCentury();
      LocalDateTime localDateTime5 = localDateTime2.withMonthOfYear(4);
      localDateTime5.size();
      localDateTime5.getDayOfYear();
      localDateTime3.withFields(localDateTime1);
      Locale locale0 = Locale.CHINA;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      localDateTime_Property0.getLocalDateTime();
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("Field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Field must not be null\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusMinutes((-22));
      localDateTime0.minusHours((-2147483640));
      localDateTime0.centuryOfEra();
      localDateTime0.era();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.secondOfMinute();
      LocalDateTime localDateTime1 = localDateTime0.withYear(1695);
      localDateTime1.minusWeeks(1695);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType1.getDurationType();
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayVariant(locale1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      testAbstractPartial_MockPartial0.isSupported(dateTimeFieldType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      localDateTime0.getHourOfDay();
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime0.monthOfYear();
      LocalDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded(durationFieldType0, 1380);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(392);
      DateTimeZone.getProvider();
      localDateTime0.toDateTime(dateTimeZone0);
      localDateTime0.centuryOfEra();
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2146826120);
      ConverterManager.getInstance();
      localDateTime1.millisOfSecond();
      TestDateMidnight_Basics testDateMidnight_Basics0 = null;
      try {
        testDateMidnight_Basics0 = new TestDateMidnight_Basics("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.withWeekyear((-2146826119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2146826119 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(4256L, (Chronology) null);
      Duration duration0 = new Duration(4256L, (-2352L));
      localDateTime0.plus((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3609, 11, 11, 11, 11);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(758);
      LocalDateTime localDateTime2 = localDateTime1.minusMonths(1386);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 758);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.year();
      LocalDateTime localDateTime4 = localDateTime_Property0.withMaximumValue();
      localDateTime_Property0.addWrapFieldToCopy(3609);
      localDateTime2.getEra();
      localDateTime_Property0.roundHalfCeilingCopy();
      // Undeclared exception!
      try { 
        localDateTime4.withFieldAdded(durationFieldType0, 1094);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292280087 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(11, 11, 11, 11, 11);
      localDateTime0.plusMillis(758);
      DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      localDateTime0.withYearOfCentury(11);
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 758);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.year();
      localDateTime_Property0.withMaximumValue();
      localDateTime_Property0.addWrapFieldToCopy(11);
      localDateTime_Property0.roundHalfCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone.forOffsetHours(11);
      LocalDateTime localDateTime0 = new LocalDateTime(11, 11, 11, 11, 11, 11);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.seconds();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      localDateTime0.isSupported(dateTimeFieldType1);
      localDateTime0.yearOfCentury();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeFieldType.dayOfYear();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.clockhourOfHalfday();
      mockNullZoneChronology0.secondOfMinute();
      mockNullZoneChronology0.seconds();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      localDateTime_Property0.getAsText();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      localDateTime0.toString("26481320", locale0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-178954955), 374, 4);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(86400000);
      // Undeclared exception!
      try { 
        localDateTime1.withSecondOfMinute((-178954955));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -178954955 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(0);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(localDateTime1, localDateTime1, periodType0);
      LocalDateTime localDateTime2 = localDateTime1.withPeriodAdded(period0, 1000);
      localDateTime2.dayOfWeek();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, (-344), (-2223), 0, 0, (-7), 0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -7 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(0);
      localDateTime1.hourOfDay();
      localDateTime1.centuryOfEra();
      localDateTime1.getYearOfEra();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1507L), (DateTimeZone) null);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      localDateTime0.withFieldAdded(durationFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth(1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = new DateTime(0L, (Chronology) mockNullZoneChronology0);
      mockNullZoneChronology0.halfdayOfDay();
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(1199);
      dateTime0.secondOfMinute();
      // Undeclared exception!
      try { 
        localDateTime1.withMinuteOfHour(1415);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1415 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINA;
      localDateTime0.millisOfSecond();
      timeZone0.getDisplayName(locale0);
      timeZone0.observesDaylightTime();
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-1366));
      localDateTime0.toDate(timeZone0);
      localDateTime0.yearOfCentury();
      localDateTime0.getMonthOfYear();
      localDateTime0.getMonthOfYear();
      localDateTime0.getMonthOfYear();
      localDateTime1.getMinuteOfHour();
      timeZone0.getDisplayName();
      localDateTime1.monthOfYear();
      TestInterval_Basics testInterval_Basics0 = null;
      try {
        testInterval_Basics0 = new TestInterval_Basics("\u683C\u6797\u5A01\u6CBB\u65F6\u95F4");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusYears((-1010));
      localDateTime0.minusSeconds((-2140793666));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusYears(1605);
      LocalDateTime localDateTime2 = localDateTime1.minusDays(0);
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute(1466);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1466 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1991L));
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-429));
      // Undeclared exception!
      try { 
        localDateTime1.withYearOfEra((-1767));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1767 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-945));
      // Undeclared exception!
      try { 
        localDateTime1.withEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.halfdays();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      mockNullZoneChronology0.centuryOfEra();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(21L);
      localDateTime0.plusDays(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(60000L);
      ConverterManager.getInstance();
      localDateTime1.getMillisOfSecond();
      localDateTime1.minusMonths(0);
      localDateTime1.getDayOfMonth();
      localDateTime1.weekyear();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-4021L), 0, (PeriodType) null);
      LocalDateTime localDateTime2 = localDateTime0.plus((ReadablePeriod) mutablePeriod0);
      localDateTime1.plusDays(1);
      localDateTime0.dayOfMonth();
      // Undeclared exception!
      try { 
        localDateTime2.withDate(1338, (-541), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -541 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTimeZone.getDefault();
      LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = LocalDateTime.parse("2002-06");
      localDateTime0.hourOfDay();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3051));
      DateTime dateTime0 = new DateTime(172L, dateTimeZone0);
      Locale locale0 = Locale.UK;
      Calendar calendar0 = dateTime0.toCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(13);
      // Undeclared exception!
      try { 
        localDateTime1.withTime(13, (-481), 2377, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -481 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      LocalDateTime localDateTime2 = localDateTime1.withEra(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.yearOfCentury();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundCeilingCopy();
      localDateTime3.toDateTime();
      LocalDateTime localDateTime4 = localDateTime3.withTime(0, 0, 0, 0);
      int int0 = Calendar.MILLISECOND;
      localDateTime4.plusMinutes(14);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-639L), (Chronology) null);
      localDateTime0.minusMonths(23);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      // Undeclared exception!
      try { 
        localDateTime0.withField(dateTimeFieldType0, (-1553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1553 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getMillisOfSecond();
      localDateTime0.withPeriodAdded((ReadablePeriod) null, (-2935));
      localDateTime0.toLocalDate();
      localDateTime0.weekOfWeekyear();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-2782));
      // Undeclared exception!
      try { 
        localDateTime1.withMinuteOfHour(120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 120 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("=+FsB2XEl0N<%]->D", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"=+FsB2XEl0N<%]->D\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getLocalMillis();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      Locale locale0 = Locale.TAIWAN;
      localDateTime_Property0.getMinimumValueOverall();
      localDateTime_Property0.roundHalfEvenCopy();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime.parse("", dateTimeFormatter0);
      Duration duration0 = Duration.millis((-86L));
      // Undeclared exception!
      try { 
        duration0.compareTo((ReadableDuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractDuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("]", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      localDateTime0.get(dateTimeFieldType0);
      localDateTime0.withYearOfEra(20);
      localDateTime0.getWeekyear();
      // Undeclared exception!
      try { 
        localDateTime0.withTime(2014, (-211), (-3420), (-3420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2014 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 0, (-375), (-712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -375 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(326565, 326565, 326565, 326565, 326565, 14, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 326565 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfSecond(2995);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2995 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime1.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime1.withDate(1, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2462));
      DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.withCenturyOfEra((-2462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2462 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear((-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -20 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-3194L));
      localDateTime0.getMinuteOfHour();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(59);
      localDateTime1.getMillisOfSecond();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundFloorCopy();
      localDateTime2.withYearOfCentury(59);
      localDateTime2.weekOfWeekyear();
      localDateTime2.getEra();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) null);
      localDateTime0.getDayOfWeek();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      localDateTime_Property0.roundFloorCopy();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, uTCDateTimeZone0);
      int int0 = (-1186);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis((-1186));
      int int1 = 0;
      LocalDateTime localDateTime2 = localDateTime1.plusYears(0);
      // Undeclared exception!
      try { 
        localDateTime2.withYearOfCentury((-1186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1186 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2279L, (DateTimeZone) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-5584), "og*");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      // Undeclared exception!
      try { 
        localDateTime0.withMonthOfYear((-5584));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5584 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testDateTimeZone_MockDateTimeZone0, testDateTimeZone_MockDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.TestDateTimeZone$MockDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l sXS");
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      Chronology chronology0 = localDateTime_Property0.getChronology();
      LocalDateTime localDateTime1 = null;
      try {
        localDateTime1 = new LocalDateTime("l sXS", chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"l sXS\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.plusWeeks(0);
      DateTimeUtils.setCurrentMillisSystem();
      localDateTime0.getCenturyOfEra();
      mockDate0.getTime();
      localDateTime0.getValue(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockDate0.setTime((-4304L));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      LocalDateTime localDateTime2 = localDateTime1.withEra(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.yearOfCentury();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundCeilingCopy();
      localDateTime3.toDateTime();
      localDateTime0.plusHours(0);
      localDateTime1.getHourOfDay();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.withMillisOfDay(65);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(1370);
      localDateTime1.getChronology();
      localDateTime0.toLocalTime();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(11, 11, 11, 11, 11);
      int int0 = 758;
      localDateTime0.withYearOfEra(11);
      DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      localDateTime0.withYearOfCentury(11);
      localDateTime0.withFieldAdded(durationFieldType0, 758);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      localDateTime_Property0.withMaximumValue();
      LocalDateTime localDateTime1 = null;
      try {
        localDateTime1 = new LocalDateTime(758, 1386, 1386, 1386, 1386, 758);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1386 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getRangeDurationType();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      dateTimeFieldType0.getField(mockNullZoneChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(50);
      LocalDateTime localDateTime2 = localDateTime1.plusDays((-2147483621));
      localDateTime0.isSupported(dateTimeFieldType0);
      LocalDateTime localDateTime3 = localDateTime0.plusMillis(0);
      localDateTime3.toString();
      localDateTime3.withWeekOfWeekyear(50);
      int int0 = PeriodType.MONTH_INDEX;
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      localDateTime0.minusWeeks(0);
      localDateTime_Property0.getMaximumValueOverall();
      localDateTime1.withMinuteOfHour(1);
      // Undeclared exception!
      try { 
        localDateTime2.withHourOfDay(1473);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1473 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.negated();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PeriodFormat.years.regex");
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration1);
      LocalDateTime localDateTime2 = localDateTime1.plusSeconds(0);
      localDateTime2.secondOfMinute();
      LocalDateTime localDateTime3 = localDateTime0.minusHours(4);
      localDateTime3.isSupported((DateTimeFieldType) null);
      localDateTime0.secondOfMinute();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockCalendar.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getYear();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ". =%6.JD'$hl");
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(2014);
      localDateTime1.year();
      // Undeclared exception!
      try { 
        localDateTime1.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears((-35));
      LocalDateTime localDateTime2 = localDateTime1.minusMillis((-854));
      localDateTime2.plusYears((-854));
      localDateTime0.weekOfWeekyear();
      LocalDateTime localDateTime3 = localDateTime2.plusDays((-35));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      localDateTime3.property(dateTimeFieldType0);
      localDateTime1.minusDays(65);
      localDateTime1.era();
      // Undeclared exception!
      try { 
        localDateTime3.withDayOfWeek(3344);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3344 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3609, 11, 11, 11, 11);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(758);
      LocalDateTime localDateTime2 = localDateTime1.minusMonths(1386);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime2.withYearOfCentury(11);
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 758);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.year();
      LocalDateTime localDateTime4 = localDateTime_Property0.withMaximumValue();
      localDateTime4.withDayOfMonth(11);
      localDateTime2.getEra();
      localDateTime_Property0.roundHalfCeilingCopy();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3681), "%KdC");
      // Undeclared exception!
      localDateTime2.toDate((TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 3743;
      // Undeclared exception!
      try { 
        localDateTime0.withTime(3743, 3743, 6, 3743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3743 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h-Zv");
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(2004);
      localDateTime1.era();
      int int0 = (-3681);
      localDateTime0.plusSeconds((-3681));
      localDateTime1.getEra();
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(2004);
      localDateTime2.compareTo((ReadablePartial) localDateTime1);
      localDateTime0.getDayOfYear();
      DateTimeUtils.setCurrentMillisFixed(2004);
      localDateTime2.toDate();
      localDateTime0.getDayOfWeek();
      localDateTime2.millisOfSecond();
      // Undeclared exception!
      try { 
        localDateTime2.withMillisOfDay((-1186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1186 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-5648L), (-5648L), (Chronology) null);
      Duration duration0 = Duration.ZERO;
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      mutablePeriod0.getSeconds();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) mutablePeriod0);
      Duration duration1 = duration0.plus((ReadableDuration) null);
      duration0.compareTo((ReadableDuration) duration1);
      LocalDate localDate0 = localDateTime1.toLocalDate();
      localDateTime0.getDayOfWeek();
      localDateTime0.getEra();
      localDateTime0.getSecondOfMinute();
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(21);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0);
      localDateTime1.equals(localDate0);
      Minutes minutes0 = period0.toStandardMinutes();
      Seconds seconds0 = duration1.toStandardSeconds();
      Days days0 = minutes0.toStandardDays();
      days0.toMutablePeriod();
      Seconds seconds1 = days0.toStandardSeconds();
      seconds0.plus(seconds1);
      Duration duration2 = period0.toStandardDuration();
      duration2.isEqual(duration0);
      LocalDateTime localDateTime3 = localDateTime0.minus((ReadableDuration) duration2);
      localDateTime3.getWeekyear();
      LocalDateTime localDateTime4 = localDateTime2.withPeriodAdded(period0, 0);
      localDateTime1.withLocalMillis(0);
      localDateTime4.centuryOfEra();
      localDateTime4.getWeekOfWeekyear();
      localDateTime4.millisOfSecond();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime(1423L, (DateTimeZone) uTCDateTimeZone0);
      localDateTime0.millisOfDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) mutablePeriod0);
      int int0 = (-1133);
      LocalDateTime localDateTime2 = localDateTime1.minusWeeks((-1133));
      int int1 = 0;
      localDateTime2.minusSeconds(0);
      DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        localDateTime1.withField((DateTimeFieldType) null, (-1133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(1423L, dateTimeZone0);
      localDateTime0.millisOfDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-14L));
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) mutablePeriod0);
      LocalDateTime localDateTime2 = localDateTime1.minusWeeks((-1133));
      localDateTime2.minusSeconds(1968526677);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      localDateTime1.withField(dateTimeFieldType0, (-1133));
      // Undeclared exception!
      try { 
        localDateTime1.withWeekOfWeekyear((-1133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1133 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 3);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(1);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.dayOfWeek();
      localDateTime0.yearOfCentury();
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(169);
      localDateTime_Property0.withMinimumValue();
      localDateTime0.dayOfWeek();
      localDateTime2.minusSeconds(12);
      localDateTime2.plusDays((-305));
      localDateTime_Property0.roundHalfFloorCopy();
      localDateTime0.plusMillis((-2147483643));
      localDateTime2.getYearOfEra();
      localDateTime1.withDayOfYear(3);
      // Undeclared exception!
      try { 
        localDateTime1.withEra(482);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 482 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = 12;
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(12);
      localDateTime1.minuteOfHour();
      LocalDateTime localDateTime2 = localDateTime0.plusMillis(12);
      localDateTime2.withHourOfDay(12);
      String string0 = "";
      // Undeclared exception!
      try { 
        LocalDateTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      testAbstractPartial_MockPartial0.isSupported(dateTimeFieldType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)127;
      byteArray0[2] = (byte)13;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime0.monthOfYear();
      LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.getField((-2147483497), chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2147483497
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-35));
      LocalDateTime localDateTime2 = localDateTime1.minusHours(0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.weekyear();
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfFloorCopy();
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      LocalDateTime localDateTime5 = localDateTime3.withFieldAdded(durationFieldType0, (-2249));
      LocalDateTime localDateTime6 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime1.size();
      localDateTime6.toString("' is not supported");
      localDateTime1.minusMinutes((-2249));
      localDateTime3.minusYears((-2592));
      localDateTime4.plusWeeks(208);
      // Undeclared exception!
      try { 
        localDateTime5.withSecondOfMinute((-2592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2592 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) null);
      localDateTime1.getMillisOfDay();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.seconds();
      localDateTime0.yearOfEra();
      localDateTime0.plusWeeks(26481320);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getCenturyOfEra();
      LocalDateTime localDateTime1 = localDateTime0.plusDays(1);
      localDateTime1.getYearOfEra();
      DateTimeFieldType.secondOfDay();
      LocalDateTime localDateTime2 = localDateTime1.withDate(1, 1, 1);
      LocalDateTime localDateTime3 = localDateTime2.plusDays(1);
      localDateTime0.withMillisOfDay(1);
      localDateTime1.yearOfEra();
      localDateTime1.hourOfDay();
      MockDate mockDate0 = new MockDate(9, 491, 1, 20, 2014);
      LocalDateTime localDateTime4 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime4.dayOfYear();
      try { 
        localDateTime3.toString("0?uO<4WJJQR3| -K8", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      int int0 = Calendar.AM_PM;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime1.get(dateTimeFieldType0);
      LocalDateTime localDateTime2 = localDateTime1.withDate(1, 1, 1);
      LocalDateTime localDateTime3 = localDateTime2.plusDays(1);
      localDateTime3.dayOfMonth();
      localDateTime1.hourOfDay();
      localDateTime2.plusMonths(1);
      try { 
        localDateTime3.toString("0?uO<4WJJQR3| -K8", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(11).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      LocalDateTime localDateTime1 = localDateTime0.plusHours(984);
      LocalDateTime localDateTime2 = localDateTime0.plusMinutes(11);
      Duration duration0 = Duration.ZERO;
      LocalDateTime localDateTime3 = localDateTime2.withDurationAdded(duration0, (-1683));
      localDateTime3.getFieldTypes();
      localDateTime2.plusHours((-1683));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.weeks();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      localDateTime2.property(dateTimeFieldType1);
      localDateTime3.getDayOfMonth();
      LocalDateTime localDateTime4 = localDateTime1.minusMinutes(0);
      LocalDateTime localDateTime5 = localDateTime0.minusDays(1);
      localDateTime5.get(dateTimeFieldType1);
      localDateTime3.withYear((-1683));
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      localDateTime4.isSupported(durationFieldType0);
      localDateTime0.toString();
      LocalDateTime.now();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2603).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      int int0 = (-1186);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-1186));
      LocalDateTime localDateTime2 = localDateTime1.minusYears(1000);
      localDateTime2.withYear((-56));
      localDateTime0.minusMillis((-56));
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(4256L);
      DateTime dateTime0 = localDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-1935));
      localDateTime1.year();
      localDateTime0.toDateTime(dateTime1);
      Duration duration0 = new Duration(4256L, (-2352L));
      LocalDateTime localDateTime2 = localDateTime0.withDayOfMonth(1);
      localDateTime2.getWeekOfWeekyear();
      Duration.standardMinutes(1392412881320L);
      LocalDateTime localDateTime3 = localDateTime0.plus((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        localDateTime3.withEra(1294);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1294 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2274), 3265, (-7));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      int int0 = Calendar.LONG_STANDALONE;
      localDateTime0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      localDateTime0.secondOfMinute();
      localDateTime0.year();
      localDateTime0.withMillisOfDay(11);
      Date date0 = localDateTime0.toDate(timeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(date0);
      mockGregorianCalendar0.getTime();
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.hourOfDay();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      localDateTime0.toDateTime(mutableDateTime0);
      LocalDateTime localDateTime3 = localDateTime_Property0.addToCopy((-236L));
      localDateTime_Property0.equals(mockGregorianCalendar0);
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfCeilingCopy();
      localDateTime4.getYear();
      localDateTime4.getYearOfCentury();
      LocalDateTime localDateTime5 = localDateTime0.plusYears(3265);
      localDateTime5.size();
      localDateTime5.getDayOfYear();
      localDateTime3.withFields(localDateTime1);
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("Field must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Field must not be null\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(3265);
      localDateTime0.getDayOfWeek();
      localDateTime1.getHourOfDay();
      LocalDateTime localDateTime2 = localDateTime1.minusDays(3265);
      LocalDateTime localDateTime3 = localDateTime2.minusMonths((-27));
      localDateTime2.getYearOfEra();
      localDateTime2.compareTo((ReadablePartial) localDateTime3);
      localDateTime1.getMonthOfYear();
      localDateTime3.minusDays(1000);
      // Undeclared exception!
      try { 
        localDateTime1.getValue(3265);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 3265
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }
}
