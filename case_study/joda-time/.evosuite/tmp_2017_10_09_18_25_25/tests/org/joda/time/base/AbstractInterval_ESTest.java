/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:22:17 GMT 2017
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractInterval_ESTest extends AbstractInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      mutableInterval0.setDurationAfterStart(96L);
      mutableInterval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      mutableInterval0.setDurationAfterStart(96L);
      DateTime dateTime0 = mutableInterval0.getStart();
      Interval interval0 = new Interval(dateTime0, dateTime0);
      boolean boolean0 = mutableInterval0.equals(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2636L, 2636L);
      MutableInterval mutableInterval1 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      LocalDate localDate0 = new LocalDate((-1737), (-10), (-757), lenientChronology0);
      MockDate mockDate0 = new MockDate();
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withFields(yearMonth0);
      Interval interval0 = localDate1.toInterval();
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval1 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.isAfter((ReadableInterval) interval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      mutableInterval0.setDurationAfterStart(96L);
      DateTime dateTime0 = mutableInterval0.getStart();
      Interval interval0 = new Interval(dateTime0, dateTime0);
      boolean boolean0 = mutableInterval0.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) islamicChronology0);
      Interval interval0 = yearMonth0.toInterval();
      Period period0 = Period.ZERO;
      Hours hours0 = period0.toStandardHours();
      Interval interval1 = interval0.withPeriodBeforeEnd(hours0);
      boolean boolean0 = interval1.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-927L));
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Interval interval0 = new Interval(hours0, (ReadableInstant) null);
      mutableInterval0.setEndMillis(0L);
      Interval interval1 = interval0.overlap(mutableInterval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-707L), (-707L));
      MutableInterval mutableInterval1 = new MutableInterval();
      boolean boolean0 = mutableInterval0.overlaps(mutableInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-927L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Interval interval0 = new Interval(hours0, (ReadableInstant) null);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      mutableInterval1.setEndMillis(0L);
      boolean boolean0 = mutableInterval1.contains((ReadableInterval) mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-923L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval1.setEndMillis((-252L));
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) mutableInterval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-927L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Interval interval0 = new Interval(hours0, (ReadableInstant) null);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      boolean boolean0 = mutableInterval1.contains((ReadableInterval) mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2613L, 2613L);
      String string0 = mutableInterval0.toString();
      assertEquals("1970-01-01T00:00:02.613Z/1970-01-01T00:00:02.613Z", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(8L);
      PeriodType periodType0 = PeriodType.yearDay();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-781L), (-781L));
      Period period0 = mutableInterval0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-927L));
      mutableInterval0.setEndMillis(0L);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withCenturyOfEra(0);
      Interval interval0 = localDate1.toInterval();
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      assertEquals((-61721568000000L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-17L), (-17L));
      DateTime dateTime0 = mutableInterval0.getStart();
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Interval interval1 = interval0.toInterval();
      assertEquals((-17L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.withYears(1169);
      Instant instant0 = new Instant();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = instant0.toDateTime((Chronology) gregorianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(period1, dateTime0);
      Interval interval0 = mutableInterval0.toInterval();
      long long0 = interval0.toDurationMillis();
      assertEquals(36890035200000L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = new Duration(8L);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      mutableInterval0.setStartMillis(8L);
      Interval interval0 = mutableInterval0.toInterval();
      Duration duration1 = interval0.toDuration();
      assertEquals(1392409281320L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      boolean boolean0 = interval0.isBeforeNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2613L, 2613L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      LocalDate localDate1 = localDate0.plusWeeks((-2495));
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime();
      boolean boolean0 = mutableInterval0.isBefore((ReadableInstant) dateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = Interval.parseWithOffset("1969-12-31T23:59:59.073Z/2014-02-14T20:21:21.320Z");
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Instant instant0 = dateTime0.toInstant();
      Interval interval0 = new Interval(dateTime0, instant0);
      MutableInterval mutableInterval0 = new MutableInterval(interval0);
      DateTime dateTime1 = mutableInterval0.getStart();
      assertNotSame(dateTime0, dateTime1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      DateTime dateTime0 = mutableInterval0.getEnd();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) buddhistChronology0);
      Period period0 = Period.weeks(1);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, period0);
      DateTime dateTime1 = mutableInterval0.getEnd();
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-17L), (-17L));
      DateTime dateTime0 = mutableInterval0.getStart();
      Interval interval0 = new Interval(dateTime0, dateTime0);
      DateTime dateTime1 = interval0.getEnd();
      assertTrue(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) gregorianChronology0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      boolean boolean0 = interval0.containsNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = new Duration(8L);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      boolean boolean0 = mutableInterval0.contains((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2636L, 2636L);
      // Undeclared exception!
      try { 
        mutableInterval0.isEqual((ReadableInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) islamicChronology0);
      Interval interval0 = yearMonth0.toInterval();
      boolean boolean0 = interval0.isAfter(1123L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-298L), (-298L));
      boolean boolean0 = mutableInterval0.isAfter((-298L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-245L), 2219, 3488);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) mockZone0);
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L), gJChronology0);
      boolean boolean0 = mutableInterval0.isBefore((long) 3488);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Period period0 = new Period(0L);
      Instant instant0 = new Instant();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = instant0.toDateTime((Chronology) gregorianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(period0, dateTime0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.isBefore(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-927L), (-927L));
      boolean boolean0 = mutableInterval0.contains((-252L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      long long0 = mutableInterval0.toDurationMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Instant instant0 = dateTime0.toInstant();
      Interval interval0 = new Interval(dateTime0, instant0);
      boolean boolean0 = interval0.isBeforeNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Interval interval0 = new Interval(2299L, 2299L);
      boolean boolean0 = interval0.containsNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-923L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
      
      mutableInterval1.setEndMillis((-252L));
      boolean boolean0 = mutableInterval1.equals(mutableInterval0);
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2636L, 2636L);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = mutableInterval0.equals(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-17L), (-17L));
      boolean boolean0 = mutableInterval0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = mutableInterval0.equals(mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Instant instant0 = dateTime0.toInstant();
      Interval interval0 = new Interval(dateTime0, instant0);
      MutableInterval mutableInterval0 = new MutableInterval(interval0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
      
      mutableInterval1.setDurationBeforeEnd(1392409281320L);
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = new Duration(8L);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval0.toInterval();
      Duration duration1 = interval0.toDuration();
      assertEquals(8L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2636L, 2636L);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Instant instant0 = dateTime0.toInstant();
      Interval interval0 = new Interval(dateTime0, instant0);
      MutableInterval mutableInterval0 = new MutableInterval(interval0);
      boolean boolean0 = interval0.isAfter((ReadableInterval) mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Duration duration0 = new Duration(8L);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = new Interval(2299L, 2299L);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-34L));
      boolean boolean0 = interval0.isAfter((ReadableInstant) mutableDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-17L), (-17L));
      boolean boolean0 = mutableInterval0.isBefore((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Instant instant0 = dateTime0.toInstant();
      Interval interval0 = new Interval(dateTime0, instant0);
      boolean boolean0 = interval0.isBefore((ReadableInstant) instant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-927L));
      boolean boolean0 = mutableInterval0.isBefore((ReadableInterval) mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Interval interval0 = new Interval((-1277L), 0L, buddhistChronology0);
      Interval interval1 = interval0.withEndMillis(1);
      boolean boolean0 = interval0.isEqual(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Interval interval0 = new Interval((-1277L), 0L, buddhistChronology0);
      boolean boolean0 = interval0.isEqual(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      DateTime dateTime0 = new DateTime((Object) null);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      boolean boolean0 = mutableInterval0.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Duration duration0 = new Duration(8L);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis(8L);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withStart((ReadableInstant) null);
      boolean boolean0 = interval0.overlaps(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-927L));
      boolean boolean0 = mutableInterval0.overlaps(mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-17L), (-17L));
      boolean boolean0 = mutableInterval0.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-923L));
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Duration duration0 = Duration.standardDays(845L);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(17).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      Interval interval0 = duration0.toIntervalTo(instant0);
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = new Duration(8L);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      boolean boolean0 = mutableInterval0.contains((ReadableInstant) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Period period0 = new Period(0L);
      Instant instant0 = new Instant();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = instant0.toDateTime((Chronology) gregorianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(period0, dateTime0);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.contains((ReadableInstant) instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStartMillis((-927L));
      boolean boolean0 = mutableInterval0.contains((-252L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Instant instant0 = dateTime0.toInstant();
      Interval interval0 = new Interval(dateTime0, instant0);
      boolean boolean0 = interval0.contains(366L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2613L, 2613L);
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((-1546L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      boolean boolean0 = mutableInterval0.isBefore((ReadableInstant) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-17L), (-17L));
      mutableInterval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2636L, 2636L);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = mutableInterval0.overlaps(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Instant instant0 = dateTime0.toInstant();
      Interval interval0 = new Interval(dateTime0, instant0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Interval interval0 = new Interval(2299L, 2299L);
      boolean boolean0 = interval0.isAfterNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2636L, 2636L);
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Interval interval0 = new Interval(2299L, 2299L);
      Duration duration0 = interval0.toDuration();
      assertEquals(0L, duration0.getMillis());
  }
}
