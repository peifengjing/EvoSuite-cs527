/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 05:16:13 GMT 2017
 */

package org.joda.time.chrono.gj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.chrono.gj.TestJulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestJulianChronology_ESTest extends TestJulianChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(24, 233, 24);
      int[] intArray0 = testJulianChronology0.isoFromFixed(1);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int[] intArray0 = testJulianChronology0.isoFromFixed((-3198L));
      assertArrayEquals(new int[] {(-9), 14, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int[] intArray0 = testJulianChronology0.gjFromFixed(788L);
      assertArrayEquals(new int[] {3, 3, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.millisPerYear();
      assertEquals(31557600000L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.millisPerMonth();
      assertEquals(2629800000L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      boolean boolean0 = testJulianChronology0.isLeapYear(1584);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      boolean boolean0 = testJulianChronology0.isLeapYear(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int int0 = testJulianChronology0.gjYearFromFixed(0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int int0 = testJulianChronology0.gjYearFromFixed((-3198L));
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromISO(1262, 365, 567);
      assertEquals(463694L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromISO((-952), 0, 0);
      assertEquals((-347718L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromGJ(2, 2, 550);
      assertEquals(944L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromGJ((-3614), (-3614), 1056);
      assertEquals((-1429519L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = null;
      try {
        testJulianChronology0 = new TestJulianChronology(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(24, 233, 24);
      // Undeclared exception!
      try { 
        testJulianChronology0.isoFromFixed((-1320451200000L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: -3615198358
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      DateTimeField dateTimeField0 = testJulianChronology0.year();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(2, 3, 2);
      int[] intArray0 = testJulianChronology0.isoFromFixed(2629800000L);
      assertArrayEquals(new int[] {7200001, 1, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(3, (-663), (-663));
      // Undeclared exception!
      try { 
        testJulianChronology0.fixedFromISO(0, 3, (-663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal weekyear: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      // Undeclared exception!
      try { 
        testJulianChronology0.gjYearFromFixed((-5108326578984308L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: -13985835945201
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      // Undeclared exception!
      try { 
        testJulianChronology0.fixedFromGJ(0, 3170, (-1514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-2419), 0, 0);
      // Undeclared exception!
      try { 
        testJulianChronology0.isLeapYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      DateTimeField dateTimeField0 = testJulianChronology0.monthOfYear();
      assertEquals(12, dateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      DateTimeField dateTimeField0 = testJulianChronology0.dayOfMonth();
      assertEquals(1, dateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      String string0 = testJulianChronology0.toString();
      assertEquals("TestJulianChronology", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(4558, 4558, 5850);
      // Undeclared exception!
      try { 
        testJulianChronology0.gjFromFixed(1115313015000L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: 3053560617
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      DateTimeField dateTimeField0 = testJulianChronology0.weekyear();
      assertEquals(100000000, dateTimeField0.getMaximumValue());
  }
}
