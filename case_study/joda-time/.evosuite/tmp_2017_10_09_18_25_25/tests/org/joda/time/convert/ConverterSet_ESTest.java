/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:16:48 GMT 2017
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.joda.time.MutablePeriod;
import org.joda.time.convert.CalendarConverter;
import org.joda.time.convert.Converter;
import org.joda.time.convert.ConverterSet;
import org.joda.time.convert.DateConverter;
import org.joda.time.convert.LongConverter;
import org.joda.time.convert.MockZeroNullIntegerConverter;
import org.joda.time.convert.NullConverter;
import org.joda.time.convert.ReadableDurationConverter;
import org.joda.time.convert.ReadablePartialConverter;
import org.joda.time.convert.ReadablePeriodConverter;
import org.joda.time.convert.StringConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConverterSet_ESTest extends ConverterSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      // Undeclared exception!
      try { 
        converterSet0.remove(29, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = (MockZeroNullIntegerConverter)MockZeroNullIntegerConverter.INSTANCE;
      assertNotNull(mockZeroNullIntegerConverter0);
      
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      assertNotNull(nullConverter0);
      
      converterArray0[1] = (Converter) nullConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ConverterSet converterSet1 = converterSet0.remove(converterArray0[1], converterArray0);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNotNull(converterSet1);
      
      ConverterSet converterSet2 = converterSet1.remove(mockZeroNullIntegerConverter0, converterArray0);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet0, converterSet2);
      assertSame(converterSet1, converterSet2);
      assertNotSame(converterSet1, converterSet0);
      assertSame(converterSet2, converterSet1);
      assertNotSame(converterSet2, converterSet0);
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertFalse(converterSet2.equals((Object)converterSet0));
      assertNotNull(converterSet2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter[] converterArray0 = new Converter[4];
      LongConverter longConverter0 = new LongConverter();
      assertNotNull(longConverter0);
      
      converterArray0[1] = (Converter) longConverter0;
      LongConverter longConverter1 = new LongConverter();
      assertFalse(longConverter1.equals((Object)longConverter0));
      assertNotNull(longConverter1);
      
      converterArray0[2] = (Converter) longConverter1;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ConverterSet converterSet1 = converterSet0.remove(longConverter0, converterArray0);
      assertNotSame(longConverter0, longConverter1);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertFalse(longConverter0.equals((Object)longConverter1));
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNotNull(converterSet1);
      
      ConverterSet converterSet2 = converterSet1.add(converterArray0[2], converterArray0);
      assertNotSame(longConverter0, longConverter1);
      assertNotSame(converterSet0, converterSet2);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet2);
      assertNotSame(converterSet1, converterSet0);
      assertNotSame(converterSet2, converterSet1);
      assertNotSame(converterSet2, converterSet0);
      assertFalse(longConverter0.equals((Object)longConverter1));
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertFalse(converterSet2.equals((Object)converterSet1));
      assertFalse(converterSet2.equals((Object)converterSet0));
      assertNotNull(converterSet2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      assertNotNull(nullConverter0);
      
      converterArray0[1] = (Converter) nullConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ConverterSet converterSet1 = converterSet0.remove(converterArray0[1], converterArray0);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNotNull(converterSet1);
      
      ConverterSet converterSet2 = converterSet1.add(converterArray0[1], converterArray0);
      assertNotSame(converterSet0, converterSet2);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertSame(converterSet1, converterSet2);
      assertNotSame(converterSet2, converterSet0);
      assertSame(converterSet2, converterSet1);
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertFalse(converterSet2.equals((Object)converterSet0));
      assertNotNull(converterSet2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      converterSet0.copyInto(converterArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      int int0 = converterSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter[] converterArray0 = new Converter[3];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      int int0 = converterSet0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      // Undeclared exception!
      try { 
        converterSet0.remove((Converter) null, converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = (MockZeroNullIntegerConverter)MockZeroNullIntegerConverter.INSTANCE;
      assertNotNull(mockZeroNullIntegerConverter0);
      
      // Undeclared exception!
      try { 
        converterSet0.remove(mockZeroNullIntegerConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      assertNotNull(converterSet0);
      
      // Undeclared exception!
      try { 
        converterSet0.remove((-32), (Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter[] converterArray0 = new Converter[6];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      // Undeclared exception!
      try { 
        converterSet0.add((Converter) null, converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter[] converterArray0 = new Converter[1];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      // Undeclared exception!
      try { 
        converterSet0.remove((-1376), converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1376
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-278L));
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.toMutablePeriod();
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter[] converterArray0 = new Converter[6];
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      assertNotNull(stringConverter0);
      
      converterArray0[5] = (Converter) stringConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      Class<String> class0 = String.class;
      Converter converter0 = converterSet0.select(class0);
      assertSame(converter0, stringConverter0);
      assertNotNull(converter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      // Undeclared exception!
      try { 
        converterSet0.remove(0, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Converter[] converterArray0 = new Converter[8];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      assertNotNull(readablePeriodConverter0);
      
      ConverterSet converterSet1 = converterSet0.remove(readablePeriodConverter0, (Converter[]) null);
      assertSame(converterSet0, converterSet1);
      assertSame(converterSet1, converterSet0);
      assertNotNull(converterSet1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Converter[] converterArray0 = new Converter[3];
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      assertNotNull(stringConverter0);
      
      converterArray0[0] = (Converter) stringConverter0;
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      assertNotNull(readablePartialConverter0);
      
      converterArray0[1] = (Converter) readablePartialConverter0;
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      assertNotNull(calendarConverter0);
      
      converterArray0[2] = (Converter) calendarConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      assertNotNull(readablePeriodConverter0);
      
      ConverterSet converterSet1 = converterSet0.add(readablePeriodConverter0, (Converter[]) null);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNotNull(converterSet1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      assertNotNull(readablePeriodConverter0);
      
      converterArray0[0] = (Converter) readablePeriodConverter0;
      ReadablePeriodConverter readablePeriodConverter1 = ReadablePeriodConverter.INSTANCE;
      assertNotSame(readablePeriodConverter1, readablePeriodConverter0);
      assertFalse(readablePeriodConverter1.equals((Object)readablePeriodConverter0));
      assertNotNull(readablePeriodConverter1);
      
      converterArray0[4] = (Converter) readablePeriodConverter1;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ConverterSet converterSet1 = converterSet0.add(converterArray0[4], (Converter[]) null);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNotNull(converterSet1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      assertNotNull(calendarConverter0);
      
      converterArray0[0] = (Converter) calendarConverter0;
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      assertNotNull(readableDurationConverter0);
      
      converterArray0[1] = (Converter) readableDurationConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ConverterSet converterSet1 = converterSet0.add(readableDurationConverter0, (Converter[]) null);
      assertSame(converterSet0, converterSet1);
      assertSame(converterSet1, converterSet0);
      assertNotNull(converterSet1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      NullConverter nullConverter0 = new NullConverter();
      assertNotNull(nullConverter0);
      
      // Undeclared exception!
      try { 
        converterSet0.add(nullConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Converter[] converterArray0 = new Converter[6];
      CalendarConverter calendarConverter0 = new CalendarConverter();
      assertNotNull(calendarConverter0);
      
      converterArray0[0] = (Converter) calendarConverter0;
      CalendarConverter calendarConverter1 = new CalendarConverter();
      assertFalse(calendarConverter1.equals((Object)calendarConverter0));
      assertNotNull(calendarConverter1);
      
      converterArray0[1] = (Converter) calendarConverter1;
      StringConverter stringConverter0 = new StringConverter();
      assertNotNull(stringConverter0);
      
      converterArray0[2] = (Converter) stringConverter0;
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      assertNotNull(readablePeriodConverter0);
      
      converterArray0[3] = (Converter) readablePeriodConverter0;
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      assertNotNull(readablePartialConverter0);
      
      converterArray0[4] = (Converter) readablePartialConverter0;
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      assertNotNull(dateConverter0);
      
      converterArray0[5] = (Converter) dateConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      assertNotNull(converterSet0);
      
      ConverterSet converterSet1 = converterSet0.remove(0, converterArray0);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNotNull(converterSet1);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Converter converter0 = converterSet0.select(class0);
      assertNotSame(converterSet0, converterSet1);
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertNull(converter0);
      
      Class<ConverterSet.Entry> class1 = ConverterSet.Entry.class;
      Converter converter1 = converterSet1.select(class1);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet1, converterSet0);
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNull(converter1);
      
      ConverterSet converterSet2 = converterSet1.remove(converterArray0[1], converterArray0);
      assertNotSame(converterSet2, converterSet1);
      assertNotSame(converterSet2, converterSet0);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet0, converterSet2);
      assertNotSame(converterSet1, converterSet0);
      assertNotSame(converterSet1, converterSet2);
      assertFalse(converterSet2.equals((Object)converterSet1));
      assertFalse(converterSet2.equals((Object)converterSet0));
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertNotNull(converterSet2);
      
      Class<Object> class2 = Object.class;
      Converter converter2 = converterSet0.select(class2);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet0, converterSet2);
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertFalse(converterSet0.equals((Object)converterSet2));
      assertNull(converter2);
      
      Class<MockHijrahDate> class3 = MockHijrahDate.class;
      Converter converter3 = converterSet1.select(class3);
      assertNotSame(converterSet0, converterSet1);
      assertNotSame(converterSet0, converterSet2);
      assertNotSame(converterSet1, converterSet0);
      assertNotSame(converterSet1, converterSet2);
      assertFalse(converterSet0.equals((Object)converterSet1));
      assertFalse(converterSet0.equals((Object)converterSet2));
      assertFalse(converterSet1.equals((Object)converterSet0));
      assertFalse(converterSet1.equals((Object)converterSet2));
      assertNull(converter3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Converter[] converterArray0 = new Converter[6];
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[0] = (Converter) calendarConverter0;
      CalendarConverter calendarConverter1 = new CalendarConverter();
      converterArray0[1] = (Converter) calendarConverter1;
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      converterArray0[2] = (Converter) stringConverter0;
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      converterArray0[3] = (Converter) readablePeriodConverter0;
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[4] = (Converter) readablePartialConverter0;
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      converterArray0[5] = (Converter) dateConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(0, converterArray0);
      ReadablePartialConverter readablePartialConverter1 = new ReadablePartialConverter();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      converterSet0.select(class0);
      ConverterSet converterSet2 = converterSet0.add(readablePartialConverter1, converterArray0);
      Class<ConverterSet.Entry> class1 = ConverterSet.Entry.class;
      converterSet1.select(class1);
      Converter converter0 = converterSet1.select((Class<?>) null);
      assertNotSame(converterSet0, converterSet2);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Converter[] converterArray0 = new Converter[6];
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[0] = (Converter) calendarConverter0;
      converterArray0[1] = (Converter) calendarConverter0;
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      converterArray0[2] = (Converter) stringConverter0;
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      converterArray0[3] = (Converter) readablePeriodConverter0;
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[4] = (Converter) readablePartialConverter0;
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      converterArray0[5] = (Converter) dateConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Class<ConverterSet.Entry> class0 = ConverterSet.Entry.class;
      converterSet0.select(class0);
      Converter converter0 = converterSet0.select(class0);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Converter[] converterArray0 = new Converter[6];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.select((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      ConverterSet.Entry converterSet_Entry0 = new ConverterSet.Entry(class0, readableDurationConverter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.copyInto((Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
