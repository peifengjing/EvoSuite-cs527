/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:53:50 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Weeks_ESTest extends Weeks_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.TWO.plus(10080);
      boolean boolean0 = weeks1.isLessThan(weeks0);
      assertFalse(boolean0);
      assertEquals(10082, weeks1.getWeeks());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = Weeks.weeks((-253));
      boolean boolean0 = weeks1.isGreaterThan(weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals((-253), weeks1.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      boolean boolean0 = weeks0.isGreaterThan(weeks0);
      assertEquals((-9), weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.millis((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      boolean boolean0 = weeks0.isGreaterThan((Weeks) null);
      assertFalse(boolean0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = new Instant((long) (-253));
      Instant instant1 = new Instant(0L);
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) instant1, (ReadableInstant) instant0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(7);
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(4233600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1068));
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals((-3628800), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.millis((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Minutes minutes1 = weeks0.ONE.toStandardMinutes();
      assertEquals(10080, minutes1.getMinutes());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      assertEquals((-1512), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(3644);
      Duration duration0 = weeks0.toStandardDuration();
      assertEquals(2203891200L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1068));
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      Duration duration1 = weeks0.toStandardDuration();
      assertEquals((-3628800000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration((-1L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Days days1 = weeks0.toStandardDays();
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      Days days0 = weeks0.THREE.toStandardDays();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(21, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = new Duration((-1L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.plus(weeks0);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = weeks0.TWO.plus(weeks0);
      assertEquals((-7), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      weeks0.negated();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      weeks0.negated();
      assertEquals((-9), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-292));
      Weeks weeks1 = weeks0.multipliedBy((-632));
      assertEquals((-292), weeks0.getWeeks());
      assertEquals(184544, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-1));
      Weeks weeks1 = weeks0.TWO.multipliedBy((-1));
      assertEquals((-2), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      Weeks weeks1 = Weeks.weeks((-292));
      Weeks weeks2 = weeks1.minus(weeks0);
      assertSame(weeks2, weeks1);
      assertEquals((-292), weeks2.getWeeks());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      Weeks weeks1 = weeks0.minus(0);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = weeks0.minus((-1023));
      assertEquals(1014, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = weeks0.minus(1);
      assertEquals((-10), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Weeks weeks0 = Weeks.weeksIn((ReadableInterval) null);
      int int0 = weeks0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-668L));
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      int int0 = weeks0.getWeeks();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardDays(800L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.dividedBy((-1469));
      boolean boolean0 = weeks1.isLessThan((Weeks) null);
      assertFalse(boolean0);
      assertEquals(114, weeks0.getWeeks());
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Weeks weeks1 = weeks0.MIN_VALUE.plus(3986);
      Weeks weeks2 = weeks1.dividedBy(3986);
      assertEquals((-2147479662), weeks1.getWeeks());
      assertEquals((-538755), weeks2.getWeeks());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = new DateTime((-4037L), (Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.MAX_VALUE.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 604800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-538755));
      // Undeclared exception!
      try { 
        weeks0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -538755 * 10080
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.MIN_VALUE.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 168
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = new Duration(2560L);
      Hours hours0 = duration0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = Weeks.standardWeeksIn(days0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = new Duration((-2333L), (-213L));
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.MAX_VALUE.plus(930);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 930
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.MIN_VALUE.multipliedBy((-652));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -652
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Weeks weeks1 = weeks0.MIN_VALUE.plus(3986);
      // Undeclared exception!
      try { 
        weeks0.MAX_VALUE.minus(weeks1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147479662
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.TWO.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Weeks", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      Weeks weeks1 = weeks0.plus(0);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.MAX_VALUE.minus((-102));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 102
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.TWO.plus(10080);
      boolean boolean0 = weeks0.isLessThan(weeks1);
      assertTrue(boolean0);
      assertEquals(10082, weeks1.getWeeks());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      boolean boolean0 = weeks0.isLessThan((Weeks) null);
      assertEquals((-9), weeks0.getWeeks());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = Duration.standardDays(800L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      boolean boolean0 = weeks0.isLessThan((Weeks) null);
      assertEquals(114, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      boolean boolean0 = weeks0.isLessThan(weeks0);
      assertEquals((-9), weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      Weeks weeks1 = Weeks.weeks(73488);
      boolean boolean0 = weeks1.isGreaterThan(weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(73488, weeks1.getWeeks());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(3582);
      boolean boolean0 = weeks0.isGreaterThan((Weeks) null);
      assertTrue(boolean0);
      assertEquals(3582, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      boolean boolean0 = weeks0.isGreaterThan((Weeks) null);
      assertEquals((-9), weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = Duration.standardDays(800L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.dividedBy(1);
      assertSame(weeks1, weeks0);
      assertEquals(114, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(73500);
      Weeks weeks1 = weeks0.dividedBy(73500);
      assertEquals(1, weeks1.getWeeks());
      assertEquals(73500, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Duration duration0 = Duration.standardDays(800L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.minus((Weeks) null);
      assertEquals(114, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(3582);
      Weeks weeks1 = weeks0.plus((Weeks) null);
      assertEquals(3582, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      Weeks weeks1 = Weeks.weeks(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        weeks0.MAX_VALUE.plus(weeks1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Weeks.parseWeeks("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Weeks weeks0 = Weeks.weeksIn((ReadableInterval) null);
      // Undeclared exception!
      try { 
        weeks0.MIN_VALUE.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 7
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L), mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksIn(mutableInterval0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) testAbstractPartial_MockPartial0, (ReadablePartial) testAbstractPartial_MockPartial0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(3);
      assertEquals(3, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(2);
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(1);
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      Hours hours1 = weeks0.toStandardHours();
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      String string0 = weeks0.TWO.toString();
      assertEquals("P2W", string0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Seconds seconds1 = weeks0.toStandardSeconds();
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Days days0 = weeks0.toStandardDays();
      assertEquals((-63), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      Weeks weeks1 = weeks0.THREE.negated();
      assertEquals(0, weeks0.getWeeks());
      assertEquals((-3), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      weeks0.getFieldType();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      Weeks weeks1 = weeks0.minus(weeks0);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(4356);
      int int0 = weeks0.getWeeks();
      assertEquals(4356, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) null);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      weeks0.getPeriodType();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1660L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals((-90720), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      weeks0.multipliedBy(10080);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Duration duration0 = Duration.millis(29000L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Duration duration1 = weeks0.toStandardDuration();
      assertEquals(0L, duration1.getStandardMinutes());
  }
}
