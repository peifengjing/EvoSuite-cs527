/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:49:57 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringWriter;
import java.time.temporal.TemporalAccessor;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestLocalDate_Basics;
import org.joda.time.TestYearMonthDay_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableDateTime_ESTest extends MutableDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.secondOfMinute();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("secondOfMinute", dateTimeField1.getName());
      
      DateTimeField dateTimeField2 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField2, dateTimeField1);
      assertSame(dateTimeField2, dateTimeField0);
      assertNotNull(dateTimeField2);
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField2.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertEquals("clockhourOfDay", dateTimeField2.getName());
      assertFalse(dateTimeField2.isSupported());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.minuteOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeField dateTimeField3 = chronology0.yearOfEra();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeField3, dateTimeField1);
      assertNotSame(dateTimeField3, dateTimeField2);
      assertNotSame(dateTimeField3, dateTimeField0);
      assertNotNull(dateTimeField3);
      assertFalse(dateTimeField3.equals((Object)dateTimeField1));
      assertFalse(dateTimeField3.equals((Object)dateTimeField2));
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertFalse(dateTimeField3.isSupported());
      assertFalse(dateTimeField3.isLenient());
      assertEquals("yearOfEra", dateTimeField3.getName());
      
      mutableDateTime0.add((-12219292800000L));
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      DurationField durationField0 = durationFieldType0.getField(mockNullZoneChronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime1.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.add(durationFieldType0, 0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.setChronology(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime2 = mutableDateTime0.copy();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals((-10826883518680L), mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setTime((ReadableInstant) mutableDateTime2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dateTimeField0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.add((long) 3);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281323L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      boolean boolean0 = durationFieldType0.isSupported(mockNullZoneChronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertFalse(boolean0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DurationField durationField0 = chronology0.days();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals("days", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(unsupportedDateTimeField0, dateTimeField0);
      assertNotNull(unsupportedDateTimeField0);
      assertFalse(unsupportedDateTimeField0.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("days", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("weekyear", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      
      mutableDateTime0.add((ReadableDuration) null, 0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281323L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DurationField durationField1 = chronology0.eras();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(durationField1, durationField0);
      assertNotNull(durationField1);
      assertFalse(durationField1.equals((Object)durationField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals("eras", durationField1.getName());
      assertEquals(0L, durationField1.getUnitMillis());
      assertTrue(durationField1.isPrecise());
      assertFalse(durationField1.isSupported());
      
      mutableDateTime0.add(durationFieldType0, 0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281323L, mutableDateTime0.getMillis());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.setChronology(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281323L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.addYears(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime("9", dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      boolean boolean0 = mutableDateTime_Property0.isLeap();
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883136000000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      boolean boolean1 = mutableDateTime_Property0.equals("9");
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(boolean1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(boolean1 == boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.addSeconds(1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883135999000L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.add((long) 5);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883135998995L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883135998995L), mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime2));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883136000000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      
      // Undeclared exception!
      try { 
        mutableDateTime1.setRounding(dateTimeField0, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.weekyear();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addHours(898);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1395642081320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setDate(3474L);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(22881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.era();
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(22881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      
      mutableDateTime0.setRounding(dateTimeField0, 0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(22881320L, mutableDateTime0.getMillis());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addYears(433);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(13664182881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.hourOfDay();
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(13664182881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property4 = mutableDateTime0.monthOfYear();
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property3);
      assertNotNull(mutableDateTime_Property4);
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property3));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(13664182881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Period period0 = new Period(0L);
      assertNotNull(period0);
      
      mutableDateTime0.add((ReadablePeriod) period0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(13664182881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDateTime((-2384), 5, 3, 3, (-1264), 4, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1264 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime("9", dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      boolean boolean0 = mutableDateTime_Property0.isLeap();
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883136000000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      boolean boolean1 = mutableDateTime_Property0.equals("9");
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(boolean1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(boolean1 == boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.addSeconds(1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883135999000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.add((long) 5);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883135998995L), mutableDateTime0.getMillis());
      assertEquals((-61883135998995L), mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime2));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883136000000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.millisOfSecond();
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime1.set((DateTimeFieldType) null, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime("9", dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      boolean boolean1 = mutableDateTime_Property0.isLeap();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883136000000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.set("9", locale0);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883135999991L), mutableDateTime0.getMillis());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals((-61883135999991L), mutableDateTime2.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      boolean boolean2 = mutableDateTime_Property0.equals("9");
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(boolean2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883135999991L), mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.addSeconds(1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883135998991L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime3 = mutableDateTime_Property0.add((long) 5);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertSame(mutableDateTime3, mutableDateTime2);
      assertSame(mutableDateTime3, mutableDateTime0);
      assertNotSame(mutableDateTime3, mutableDateTime1);
      assertNotNull(mutableDateTime3);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime3.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883135998986L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      assertEquals((-61883135998986L), mutableDateTime3.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime3);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime3));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime2));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883136000000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.dayOfWeek();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("dayOfWeek", dateTimeField1.getName());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      
      DateTimeField dateTimeField2 = mockNullZoneChronology0.dayOfYear();
      assertNotSame(dateTimeField2, dateTimeField1);
      assertNotSame(dateTimeField2, dateTimeField0);
      assertNotNull(dateTimeField2);
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertFalse(dateTimeField2.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("dayOfYear", dateTimeField2.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertFalse(dateTimeField2.isLenient());
      assertFalse(dateTimeField2.isSupported());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeField dateTimeField3 = mockNullZoneChronology0.weekOfWeekyear();
      assertNotSame(dateTimeField3, dateTimeField2);
      assertNotSame(dateTimeField3, dateTimeField0);
      assertNotSame(dateTimeField3, dateTimeField1);
      assertNotNull(dateTimeField3);
      assertFalse(dateTimeField3.equals((Object)dateTimeField2));
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertFalse(dateTimeField3.equals((Object)dateTimeField1));
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField3.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertFalse(dateTimeField3.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField3.getName());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuryOfEra' is not supported
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.weekyear();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.addHours(898);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1395642081320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property1.roundFloor();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1388361600000L, mutableDateTime0.getMillis());
      assertEquals(1388361600000L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime1.setDate(3474L);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.era();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      Chronology chronology0 = mockNullZoneChronology0.withZone(uTCDateTimeZone0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfDay(965);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      boolean boolean0 = durationFieldType0.isSupported(mockNullZoneChronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertFalse(boolean0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.dayOfWeek();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("dayOfWeek", dateTimeField1.getName());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      
      DateTimeField dateTimeField2 = chronology0.dayOfYear();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeField2, dateTimeField1);
      assertNotSame(dateTimeField2, dateTimeField0);
      assertNotNull(dateTimeField2);
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertFalse(dateTimeField2.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeField2.isLenient());
      assertEquals("dayOfYear", dateTimeField2.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertFalse(dateTimeField2.isSupported());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      System.setCurrentTimeMillis(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      assertNotNull(mutableDateTime0);
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.monthOfYear();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeField dateTimeField0 = StrictDateTimeField.getInstance((DateTimeField) null);
      assertNull(dateTimeField0);
      
      mutableDateTime0.setRounding((DateTimeField) null, (-24));
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
      assertNull(dateTimeField1);
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      
      Period period0 = new Period(0L);
      assertNotNull(period0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMillis(7200000);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      LocalTime localTime2 = localTime1.withLocalMillis(433);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotNull(localTime2);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      
      LocalTime localTime3 = localTime2.withMinuteOfHour(4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotNull(localTime3);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      
      DateTime dateTime0 = localTime3.toDateTimeToday();
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotNull(dateTime0);
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(1392336240433L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate((ReadableInstant) dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.millisOfSecond();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime1.minuteOfDay();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Period period0 = Period.years(4);
      assertNotNull(period0);
      
      int int0 = mutableDateTime1.getMillisOfSecond();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(320, int0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime1.add((ReadablePeriod) period0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1518639681320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      boolean boolean0 = instant0.equals(mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(boolean0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1518639681320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      boolean boolean1 = instant0.isAfterNow();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1518639681320L, mutableDateTime1.getMillis());
      assertEquals(1518639681320L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime1.addHours(0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1518639681320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime2.addMinutes(1973);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1518639681320L, mutableDateTime1.getMillis());
      assertEquals(1518758061320L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("m^z&W<F8T,");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"m^z&W<F8T,/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000010
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(140L, (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(140L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MockZone mockZone0 = new MockZone(140L, (-1542), 5);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      
      mutableDateTime0.setZone(mockZone0);
      assertEquals(140L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.addWeeks((-1542));
      assertEquals((-932601594860L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.setDate((ReadableInstant) null);
      assertEquals(1392336000140L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.addWeekyears(1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1423858881320L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.addDays(794);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1492460481320L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      
      Locale locale0 = new Locale("org.joda.time.format.DateTimeFormat", "org.joda.time.format.DateTimeFormat", "");
      assertNotNull(locale0);
      assertEquals("org.joda.time.format.datetimeformat_ORG.JODA.TIME.FORMAT.DATETIMEFORMAT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.format.datetimeformat", locale0.getLanguage());
      assertEquals("ORG.JODA.TIME.FORMAT.DATETIMEFORMAT", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals("org.joda.time.format.datetimeformat_ORG.JODA.TIME.FORMAT.DATETIMEFORMAT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.format.datetimeformat", locale0.getLanguage());
      assertEquals("ORG.JODA.TIME.FORMAT.DATETIMEFORMAT", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      // Undeclared exception!
      try { 
        MutableDateTime.parse("Xd{9sd~~Imx\"zDebY", dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1810L, dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(1810L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.add((-1586L));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(224L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.year();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(224L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.setTime((long) 0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      long long0 = dateTimeZone0.adjustOffset(1, false);
      assertEquals(1L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Period period0 = new Period(4, (-349L));
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      Hours hours0 = seconds0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Hours hours1 = minutes0.toStandardHours();
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(hours1);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      
      Weeks weeks0 = hours1.toStandardWeeks();
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(weeks0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      Duration duration0 = weeks0.toStandardDuration();
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(duration0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      
      Duration duration1 = new Duration(mutableDateTime0, mutableDateTime0);
      assertNotNull(duration1);
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration2 = duration1.plus((-3042L));
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(duration2);
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration3 = duration0.plus((ReadableDuration) duration2);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration0);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration1);
      assertNotNull(duration3);
      assertFalse(duration1.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertTrue(duration3.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration1));
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals((-3L), duration3.getStandardSeconds());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals((-3042L), duration3.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration4 = duration3.toDuration();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration4);
      assertNotSame(duration3, duration2);
      assertSame(duration3, duration4);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration0);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration1);
      assertNotSame(duration4, duration0);
      assertSame(duration4, duration3);
      assertNotNull(duration4);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertTrue(duration3.equals((Object)duration2));
      assertTrue(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals((-3L), duration3.getStandardSeconds());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals((-3042L), duration3.getMillis());
      assertEquals(0L, duration4.getStandardMinutes());
      assertEquals((-3042L), duration4.getMillis());
      assertEquals(0L, duration4.getStandardHours());
      assertEquals((-3L), duration4.getStandardSeconds());
      assertEquals(0L, duration4.getStandardDays());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.add((ReadableDuration) duration4);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration4);
      assertNotSame(duration3, duration2);
      assertSame(duration3, duration4);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration0);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration1);
      assertNotSame(duration4, duration0);
      assertSame(duration4, duration3);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration4));
      assertTrue(duration1.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration4));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertTrue(duration3.equals((Object)duration2));
      assertTrue(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-1232L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals((-3L), duration3.getStandardSeconds());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals((-3042L), duration3.getMillis());
      assertEquals(0L, duration4.getStandardMinutes());
      assertEquals((-3042L), duration4.getMillis());
      assertEquals(0L, duration4.getStandardHours());
      assertEquals((-3L), duration4.getStandardSeconds());
      assertEquals(0L, duration4.getStandardDays());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime2 = MutableDateTime.now(dateTimeZone0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      mutableDateTime2.set(dateTimeFieldType0, 2);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals((-62100185918680L), mutableDateTime2.getMillis());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime1.yearOfCentury();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-1232L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime2.addDays((-3666));
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-62416928318680L), mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(140L, (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(140L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.setDate((ReadableInstant) null);
      assertEquals(1392336000140L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime1.addWeekyears(1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1423858881320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime1.addDays(794);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1492460481320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime1.setDate(4, 4, 2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-62032966718680L), mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addMinutes((-2780));
      assertEquals(1392242481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime0.getMillisOfDay();
      assertEquals(79281320, int0);
      assertEquals(1392242481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addYears(0);
      assertEquals(1392242481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.era();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1392242481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      Duration duration1 = Duration.standardSeconds(2);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(2L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(2000L, duration1.getMillis());
      
      Duration duration2 = Duration.standardDays(3L);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(duration2);
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertEquals(259200000L, duration2.getMillis());
      assertEquals(72L, duration2.getStandardHours());
      assertEquals(259200L, duration2.getStandardSeconds());
      assertEquals(3L, duration2.getStandardDays());
      assertEquals(4320L, duration2.getStandardMinutes());
      
      Duration duration3 = duration0.minus((ReadableDuration) duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration3);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration2);
      assertNotNull(duration3);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration2));
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(259200000L, duration2.getMillis());
      assertEquals(72L, duration2.getStandardHours());
      assertEquals(259200L, duration2.getStandardSeconds());
      assertEquals(3L, duration2.getStandardDays());
      assertEquals(4320L, duration2.getStandardMinutes());
      assertEquals((-259200000L), duration3.getMillis());
      assertEquals((-72L), duration3.getStandardHours());
      assertEquals((-259200L), duration3.getStandardSeconds());
      assertEquals((-3L), duration3.getStandardDays());
      assertEquals((-4320L), duration3.getStandardMinutes());
      
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotNull(interval0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration3));
      assertEquals(1392242481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392242481320L, interval0.getEndMillis());
      assertEquals(1392242481320L, interval0.getStartMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration4 = duration0.withMillis(3011L);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration0, duration3);
      assertNotSame(duration4, duration0);
      assertNotSame(duration4, duration3);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration1);
      assertNotNull(duration4);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration4.equals((Object)duration0));
      assertFalse(duration4.equals((Object)duration3));
      assertFalse(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration1));
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(3L, duration4.getStandardSeconds());
      assertEquals(0L, duration4.getStandardDays());
      assertEquals(0L, duration4.getStandardMinutes());
      assertEquals(3011L, duration4.getMillis());
      assertEquals(0L, duration4.getStandardHours());
      
      Duration duration5 = duration0.plus((ReadableDuration) duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration5);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration5);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration4);
      assertNotSame(duration5, duration2);
      assertNotSame(duration5, duration1);
      assertNotSame(duration5, duration0);
      assertNotSame(duration5, duration3);
      assertNotSame(duration5, duration4);
      assertNotNull(duration5);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration4));
      assertFalse(duration5.equals((Object)duration1));
      assertFalse(duration5.equals((Object)duration0));
      assertFalse(duration5.equals((Object)duration3));
      assertTrue(duration5.equals((Object)duration2));
      assertFalse(duration5.equals((Object)duration4));
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(259200000L, duration2.getMillis());
      assertEquals(72L, duration2.getStandardHours());
      assertEquals(259200L, duration2.getStandardSeconds());
      assertEquals(3L, duration2.getStandardDays());
      assertEquals(4320L, duration2.getStandardMinutes());
      assertEquals(259200L, duration5.getStandardSeconds());
      assertEquals(3L, duration5.getStandardDays());
      assertEquals(4320L, duration5.getStandardMinutes());
      assertEquals(259200000L, duration5.getMillis());
      assertEquals(72L, duration5.getStandardHours());
      
      mutableDateTime0.add((ReadableDuration) duration4, (-2780));
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration5);
      assertNotSame(duration4, duration5);
      assertNotSame(duration4, duration0);
      assertNotSame(duration4, duration3);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration5));
      assertFalse(duration4.equals((Object)duration5));
      assertFalse(duration4.equals((Object)duration0));
      assertFalse(duration4.equals((Object)duration3));
      assertFalse(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration1));
      assertEquals(1392234110740L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(3L, duration4.getStandardSeconds());
      assertEquals(0L, duration4.getStandardDays());
      assertEquals(0L, duration4.getStandardMinutes());
      assertEquals(3011L, duration4.getMillis());
      assertEquals(0L, duration4.getStandardHours());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.add((ReadableDuration) duration0, (-2780));
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration5);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration5));
      assertEquals(1392234110740L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.yearOfCentury();
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertEquals(1392234110740L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      mutableDateTime0.set(dateTimeFieldType0, 2);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals((-62100361089260L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.secondOfDay();
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertEquals((-62100361089260L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setMillis((long) (-2780));
      assertEquals((-2780L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property4 = mutableDateTime0.minuteOfHour();
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property3);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property4);
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property3));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property1));
      assertEquals((-2780L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1810L, dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1810L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.add((-1586L));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(224L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.year();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(224L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.setTime((long) 0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      long long0 = dateTimeZone0.adjustOffset(1, false);
      assertEquals(1L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Period period0 = new Period(4, (-349L));
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      Period period1 = Period.seconds((-2396));
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Hours hours0 = seconds0.toStandardHours();
      assertNotSame(period0, period1);
      assertNotNull(hours0);
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertNotSame(period0, period1);
      assertNotNull(minutes0);
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      
      Hours hours1 = minutes0.toStandardHours();
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(hours1);
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotSame(period0, period1);
      assertNotNull(weeks0);
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      
      Weeks weeks1 = hours1.toStandardWeeks();
      assertSame(weeks1, weeks0);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(weeks1);
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      
      Duration duration0 = weeks1.toStandardDuration();
      assertSame(weeks1, weeks0);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(duration0);
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      
      Duration duration1 = new Duration(mutableDateTime0, mutableDateTime0);
      assertNotNull(duration1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(duration1.equals((Object)duration0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Duration duration2 = duration1.plus((-3042L));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(duration2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Duration duration3 = duration0.plus((ReadableDuration) duration2);
      assertSame(weeks1, weeks0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration1);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(duration3);
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(duration1.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals((-3042L), duration3.getMillis());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals((-3L), duration3.getStandardSeconds());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Duration duration4 = duration3.toDuration();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(weeks1, weeks0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration4);
      assertNotSame(duration3, duration0);
      assertSame(duration3, duration4);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration1);
      assertNotSame(duration4, duration0);
      assertSame(duration4, duration3);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration1);
      assertNotNull(duration4);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration1));
      assertTrue(duration2.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertTrue(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration0));
      assertFalse(duration4.equals((Object)duration1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals((-3042L), duration3.getMillis());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals((-3L), duration3.getStandardSeconds());
      assertEquals(0L, duration4.getStandardDays());
      assertEquals((-3042L), duration4.getMillis());
      assertEquals(0L, duration4.getStandardHours());
      assertEquals(0L, duration4.getStandardMinutes());
      assertEquals((-3L), duration4.getStandardSeconds());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.add((ReadableDuration) duration4);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(weeks1, weeks0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration4);
      assertNotSame(duration3, duration0);
      assertSame(duration3, duration4);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration1);
      assertNotSame(duration4, duration0);
      assertSame(duration4, duration3);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(period0.equals((Object)period1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration4));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration4));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration1));
      assertTrue(duration2.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration4));
      assertTrue(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertTrue(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration0));
      assertFalse(duration4.equals((Object)duration1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-1232L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours1.getHours());
      assertEquals(1, hours1.size());
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-3L), duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals((-3042L), duration2.getMillis());
      assertEquals((-3042L), duration3.getMillis());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals((-3L), duration3.getStandardSeconds());
      assertEquals(0L, duration4.getStandardDays());
      assertEquals((-3042L), duration4.getMillis());
      assertEquals(0L, duration4.getStandardHours());
      assertEquals(0L, duration4.getStandardMinutes());
      assertEquals((-3L), duration4.getStandardSeconds());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime2 = MutableDateTime.now(dateTimeZone0);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime2.set(dateTimeFieldType0, 2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals((-62100185918680L), mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime1.yearOfCentury();
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-1232L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.addMillis(0);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-1232L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      boolean boolean0 = durationFieldType0.isSupported((Chronology) null);
      assertTrue(boolean0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      assertNotNull(durationField0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(604800000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.add((DurationFieldType) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      
      boolean boolean0 = durationFieldType0.isSupported((Chronology) null);
      assertTrue(boolean0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      assertNotNull(durationField0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(604800000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("weeks", durationField0.getName());
      
      mutableDateTime0.add(durationFieldType0, 3);
      assertEquals(1814400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addMonths(0);
      assertEquals(1814400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
      assertEquals(1814400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1635L, dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      String string0 = dateTimeZone0.getShortName((long) 0);
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(1635L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.setMinuteOfHour(3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(181635L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.addHours(3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(10981635L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.setDateTime(2, 5, 2, 5, 2, 1, 4);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62093588278996L), mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      Date date0 = mutableDateTime0.toDate();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(date0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62093588278996L), mutableDateTime0.getMillis());
      assertEquals("Thu May 04 05:02:01 GMT 2", date0.toString());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(localDate0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62093588278996L), mutableDateTime0.getMillis());
      assertEquals("Thu May 04 05:02:01 GMT 2", date0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      // Undeclared exception!
      try { 
        localDate0.getField(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 3
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1635L, dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      String string0 = dateTimeZone0.getShortName((long) 0);
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(1635L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.setMinuteOfHour(3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(181635L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.addHours(3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1635L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(10981635L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime1.setSecondOfDay(7593750);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 7593750 for secondOfDay must be in the range [0,86399]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfMinute();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dateTimeField1);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setYear((-860));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1810L, dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1810L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.add((-1586L));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(224L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(224L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setTime((long) 0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      assertNotNull(duration0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Duration duration1 = duration0.plus((-3042L));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals((-3L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-3042L), duration1.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now(dateTimeZone0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.set(dateTimeFieldType0, 2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals((-62100185918680L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.add((ReadablePeriod) null, (-2007));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 1, 4, 4, 4, 4, 1);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62135322955999L), mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62135322955999L), mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime1.addMonths(1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertEquals(1394828481320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(3124).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.write(5);
      assertEquals("\u0005", stringWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2598);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2598, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("\u0005", stringWriter0.toString());
      assertEquals("\u0005", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertEquals(1394828481320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("\u0005", stringWriter0.toString());
      assertEquals("\u0005", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(2686);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2686, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      boolean boolean0 = mutableDateTime0.isBefore(mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(boolean0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertEquals(1394828481320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(2686, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2686, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((Integer) 1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(2686, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2686, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.dayOfWeek();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertEquals(1394828481320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime2 = MutableDateTime.parse("org/joda/time/tz/data", dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotNull(mutableDateTime2);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(2686, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:01", dateTimeZone0.toString());
      assertEquals("+02:01", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals((-7260000L), mutableDateTime2.getMillis());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2686, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        MutableDateTime.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setDate(0L);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setSecondOfDay(2);
      assertEquals(2000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Chronology chronology0 = mutableDateTime0.getChronology();
      assertNotNull(chronology0);
      assertEquals(2000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setMonthOfYear(4);
      assertEquals(7776002000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(7776002000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      long long0 = mutableDateTime_Property0.getDifferenceAsLong(mutableDateTime0);
      assertEquals(0L, long0);
      assertEquals(7776002000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setTime(2719L);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = mutableDateTime_Property0.getDifference(mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Chronology chronology1 = mutableDateTime0.getChronology();
      assertSame(chronology1, chronology0);
      assertNotNull(chronology1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)mutableDateTime_Property0.getField();
      assertNotNull(preciseDateTimeField0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertEquals(1439, preciseDateTimeField0.getMaximumValue());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(1440, preciseDateTimeField0.getRange());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals("minuteOfDay", preciseDateTimeField0.getName());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setWeekOfWeekyear(4);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1728002719L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1728002719L, mutableDateTime0.getMillis());
      assertEquals(1728002719L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.roundHalfEven();
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotNull(mutableDateTime2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1728000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1728000000L, mutableDateTime2.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Duration duration0 = new Duration((-12345L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals((-12345L), duration0.getMillis());
      
      Duration duration1 = duration0.plus((long) 2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals((-12345L), duration0.getMillis());
      assertEquals((-12343L), duration1.getMillis());
      assertEquals((-12L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      
      mutableDateTime2.add((ReadableDuration) duration1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime2.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals((-12345L), duration0.getMillis());
      assertEquals((-12343L), duration1.getMillis());
      assertEquals((-12L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 4, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)mutableDateTime_Property0.getDurationField();
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(preciseDurationField0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertEquals(60000L, preciseDurationField0.getUnitMillis());
      assertEquals("minutes", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      PeriodType.MINUTE_INDEX = 3;
      PeriodType.MILLI_INDEX = 1157;
      mutableDateTime1.add((ReadablePeriod) mutablePeriod0, 0);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime2);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime1.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime1.addMillis(5);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime2);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1727987662L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1727987662L, mutableDateTime1.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.setMillis(654L);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(654L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setMinuteOfDay(2);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(120654L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setTime(1327L);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals(1327L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime3 = mutableDateTime_Property0.add(0);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime3, mutableDateTime1);
      assertSame(mutableDateTime3, mutableDateTime0);
      assertSame(mutableDateTime3, mutableDateTime2);
      assertNotNull(mutableDateTime3);
      assertEquals(1327L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1327L, mutableDateTime3.getMillis());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime2.setTime(0, 3, 0, 3);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertSame(mutableDateTime2, mutableDateTime3);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(180003L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(180003L, mutableDateTime2.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.setSecondOfMinute(1);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals(181003L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = mutableDateTime0.getMillisOfDay();
      assertEquals(73281320, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addSeconds(0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfMinute();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.minuteOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.add((-12219292800000L));
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      DurationField durationField0 = durationFieldType0.getField(mockNullZoneChronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      
      mutableDateTime0.add(durationFieldType0, 0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DurationField durationField1 = mockNullZoneChronology0.years();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(durationField1, durationField0);
      assertNotNull(durationField1);
      assertFalse(durationField1.equals((Object)durationField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertTrue(durationField1.isPrecise());
      assertEquals(0L, durationField1.getUnitMillis());
      assertEquals("years", durationField1.getName());
      assertFalse(durationField1.isSupported());
      
      mutableDateTime0.setChronology(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate(1L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      assertNotNull(durationField0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(604800000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("weeks", durationField0.getName());
      
      mutableDateTime0.add(durationFieldType0, 3);
      assertEquals(1814400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)dateTimeFieldType0.getField((Chronology) null);
      assertNotNull(preciseDateTimeField0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertFalse(preciseDateTimeField0.isLenient());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals("millisOfSecond", preciseDateTimeField0.getName());
      assertEquals(1000, preciseDateTimeField0.getRange());
      assertEquals(1L, preciseDateTimeField0.getUnitMillis());
      assertEquals(999, preciseDateTimeField0.getMaximumValue());
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(preciseDateTimeField0, dateTimeFieldType0, (-4615));
      assertNotNull(offsetDateTimeField0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertFalse(preciseDateTimeField0.isLenient());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals("millisOfSecond", preciseDateTimeField0.getName());
      assertEquals(1000, preciseDateTimeField0.getRange());
      assertEquals(1L, preciseDateTimeField0.getUnitMillis());
      assertEquals(999, preciseDateTimeField0.getMaximumValue());
      assertEquals((-4615), offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-4615), offsetDateTimeField0.getMinimumValue());
      assertEquals((-3616), offsetDateTimeField0.getMaximumValue());
      
      mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0);
      assertEquals(1, mutableDateTime0.getRoundingMode());
      assertEquals(1814400000L, mutableDateTime0.getMillis());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertFalse(preciseDateTimeField0.isLenient());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals("millisOfSecond", preciseDateTimeField0.getName());
      assertEquals(1000, preciseDateTimeField0.getRange());
      assertEquals(1L, preciseDateTimeField0.getUnitMillis());
      assertEquals(999, preciseDateTimeField0.getMaximumValue());
      assertEquals((-4615), offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-4615), offsetDateTimeField0.getMinimumValue());
      assertEquals((-3616), offsetDateTimeField0.getMaximumValue());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addMonths(3);
      assertEquals(1, mutableDateTime0.getRoundingMode());
      assertEquals(9590400000L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(1, int0);
      assertEquals(1, mutableDateTime0.getRoundingMode());
      assertEquals(9590400000L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setDate(0L);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setSecondOfDay(0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Chronology chronology0 = mutableDateTime0.getChronology();
      assertNotNull(chronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setMonthOfYear(4);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(7776000000L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(7776000000L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      long long0 = mutableDateTime_Property0.getDifferenceAsLong(mutableDateTime0);
      assertEquals(0L, long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(7776000000L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setTime(2719L);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = mutableDateTime_Property0.getDifference(mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Chronology chronology1 = mutableDateTime0.getChronology();
      assertSame(chronology1, chronology0);
      assertNotNull(chronology1);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)mutableDateTime_Property0.getField();
      assertNotNull(preciseDateTimeField0);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1439, preciseDateTimeField0.getMaximumValue());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(1440, preciseDateTimeField0.getRange());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertEquals("minuteOfDay", preciseDateTimeField0.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setWeekOfWeekyear(4);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1728002719L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.roundHalfEven();
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(1728000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1728000000L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Duration duration0 = new Duration((-12345L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-12345L), duration0.getMillis());
      assertEquals((-12L), duration0.getStandardSeconds());
      
      Duration duration1 = duration0.plus((long) 2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-12345L), duration0.getMillis());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals((-12L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-12343L), duration1.getMillis());
      
      mutableDateTime2.add((ReadableDuration) duration1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime2.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-12345L), duration0.getMillis());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals((-12L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-12343L), duration1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 4, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)mutableDateTime_Property0.getDurationField();
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(preciseDurationField0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("minutes", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(60000L, preciseDurationField0.getUnitMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      PeriodType.MINUTE_INDEX = 3;
      PeriodType.MILLI_INDEX = 1157;
      mutableDateTime1.add((ReadablePeriod) mutablePeriod0, 0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime1.addMillis(5);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281325L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.setMillis(654L);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(654L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setMinuteOfDay(2);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(120654L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setTime(1327L);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1327L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime3 = mutableDateTime_Property0.add(0);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime3, mutableDateTime2);
      assertSame(mutableDateTime3, mutableDateTime0);
      assertNotSame(mutableDateTime3, mutableDateTime1);
      assertNotNull(mutableDateTime3);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime3.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1327L, mutableDateTime0.getMillis());
      assertEquals(1327L, mutableDateTime3.getMillis());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime3.addMonths((-860));
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime3, mutableDateTime2);
      assertSame(mutableDateTime3, mutableDateTime0);
      assertNotSame(mutableDateTime3, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime3.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2261692798673L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      assertEquals((-2261692798673L), mutableDateTime3.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.millisOfSecond();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      mutableDateTime1.setZone(uTCDateTimeZone0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.secondOfDay();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Period period0 = Period.years(4);
      assertNotNull(period0);
      
      int int0 = mutableDateTime1.getMillisOfSecond();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(320, int0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.add((ReadablePeriod) period0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1518639681320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      boolean boolean0 = instant0.equals(mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(boolean0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1518639681320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property1.set(1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property2);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281001L, mutableDateTime0.getMillis());
      assertEquals(1392409281001L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime2.addWeeks(0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property2);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281001L, mutableDateTime0.getMillis());
      assertEquals(1392409281001L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      boolean boolean1 = instant0.isAfterNow();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.secondOfDay();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281001L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime_Property1.set("\": ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\": \" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.setDate((ReadableInstant) mutableDateTime0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) 0);
      assertEquals(0, int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean1 = mutableDateTime0.isBefore(1440000L);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.property(dateTimeFieldType0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addHours((-669));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.secondOfDay();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Locale locale0 = new Locale("Fields invalid for add", "org/joda/time/tz/data", "F");
      assertNotNull(locale0);
      assertEquals("F", locale0.getVariant());
      assertEquals("fields invalid for add", locale0.getLanguage());
      assertEquals("ORG/JODA/TIME/TZ/DATA", locale0.getCountry());
      assertEquals("fields invalid for add_ORG/JODA/TIME/TZ/DATA_F", locale0.toString());
      
      int int1 = mutableDateTime_Property1.getMaximumTextLength(locale0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertEquals(5, int1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals("F", locale0.getVariant());
      assertEquals("fields invalid for add", locale0.getLanguage());
      assertEquals("ORG/JODA/TIME/TZ/DATA", locale0.getCountry());
      assertEquals("fields invalid for add_ORG/JODA/TIME/TZ/DATA_F", locale0.toString());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.millisOfSecond();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.millisOfSecond();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertTrue(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime2 = MutableDateTime.now();
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property4 = mutableDateTime0.yearOfCentury();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property3);
      assertNotNull(mutableDateTime_Property4);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property3));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      System.setCurrentTimeMillis((-1147L));
      Locale locale1 = Locale.GERMAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string0 = mutableDateTime_Property1.getAsText(locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property4);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property3);
      assertEquals("84081", string0);
      assertNotNull(string0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property4));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property3));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.addMillis(2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881322L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime3 = mutableDateTime_Property1.roundCeiling();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime3, mutableDateTime1);
      assertNotSame(mutableDateTime3, mutableDateTime2);
      assertSame(mutableDateTime3, mutableDateTime0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property4);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property3);
      assertNotNull(mutableDateTime3);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime3.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime3.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property4));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property3));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000882000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      assertEquals(1390000882000L, mutableDateTime3.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime4 = MutableDateTime.now();
      assertNotSame(mutableDateTime4, mutableDateTime3);
      assertNotSame(mutableDateTime4, mutableDateTime2);
      assertNotSame(mutableDateTime4, mutableDateTime0);
      assertNotSame(mutableDateTime4, mutableDateTime1);
      assertNotNull(mutableDateTime4);
      assertFalse(mutableDateTime4.equals((Object)mutableDateTime3));
      assertFalse(mutableDateTime4.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime4.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime4.equals((Object)mutableDateTime1));
      assertEquals((-1147L), mutableDateTime4.getMillis());
      assertEquals(0, mutableDateTime4.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(5, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(5, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(5, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      TestLocalDate_Basics testLocalDate_Basics0 = null;
      try {
        testLocalDate_Basics0 = new TestLocalDate_Basics("org.joda.time.chrono.JulianChronology");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) 0);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean1 = mutableDateTime0.isBefore(1440000L);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.property(dateTimeFieldType0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.addHours((-669));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.secondOfDay();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Locale locale0 = new Locale("Fields invalid for add", "org/joda/time/tz/data", "F");
      assertNotNull(locale0);
      assertEquals("ORG/JODA/TIME/TZ/DATA", locale0.getCountry());
      assertEquals("fields invalid for add", locale0.getLanguage());
      assertEquals("F", locale0.getVariant());
      assertEquals("fields invalid for add_ORG/JODA/TIME/TZ/DATA_F", locale0.toString());
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.millisOfSecond();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime2 = new MutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime2);
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.yearOfCentury();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Locale locale1 = Locale.GERMAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      
      String string0 = mutableDateTime_Property1.getAsText(locale1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property3);
      assertNotSame(locale1, locale0);
      assertEquals("84081", string0);
      assertNotNull(string0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property3));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881320L, mutableDateTime0.getMillis());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addMillis(2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000881322L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime3 = mutableDateTime_Property1.roundCeiling();
      assertSame(mutableDateTime3, mutableDateTime0);
      assertNotSame(mutableDateTime3, mutableDateTime2);
      assertNotSame(mutableDateTime3, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property3);
      assertNotNull(mutableDateTime3);
      assertFalse(mutableDateTime3.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime3.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property3));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      assertEquals(1390000882000L, mutableDateTime3.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1390000882000L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime4 = MutableDateTime.now();
      assertNotSame(mutableDateTime4, mutableDateTime3);
      assertNotSame(mutableDateTime4, mutableDateTime1);
      assertNotSame(mutableDateTime4, mutableDateTime0);
      assertNotSame(mutableDateTime4, mutableDateTime2);
      assertNotNull(mutableDateTime4);
      assertTrue(mutableDateTime4.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime4.equals((Object)mutableDateTime3));
      assertTrue(mutableDateTime4.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime4.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime4.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime4.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(5, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(5, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(5, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.set(dateTimeFieldType0, (-511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -511 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfMinute();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.minuteOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.add((-12219292800000L));
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      DurationField durationField0 = durationFieldType0.getField(mockNullZoneChronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime1.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.add(durationFieldType0, 0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setChronology(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.addYears((-776));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone((String) null);
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(5097600000L, (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5097600000L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5097600000L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5097600000L, mutableDateTime0.getMillis());
      assertEquals(5097600000L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.roundFloor();
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotNull(mutableDateTime2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5097600000L, mutableDateTime0.getMillis());
      assertEquals(5097600000L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.dayOfWeek();
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5097600000L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setDate(0L);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setSecondOfDay(0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Chronology chronology0 = mutableDateTime0.getChronology();
      assertNotNull(chronology0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setMonthOfYear(4);
      assertEquals(7776000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(7776000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      long long0 = mutableDateTime_Property0.getDifferenceAsLong(mutableDateTime0);
      assertEquals(0L, long0);
      assertEquals(7776000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setTime(2719L);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime_Property0.getDifference(mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Chronology chronology1 = mutableDateTime0.getChronology();
      assertSame(chronology1, chronology0);
      assertNotNull(chronology1);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)mutableDateTime_Property0.getField();
      assertNotNull(preciseDateTimeField0);
      assertEquals(7776002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertEquals(1439, preciseDateTimeField0.getMaximumValue());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals(1440, preciseDateTimeField0.getRange());
      assertEquals("minuteOfDay", preciseDateTimeField0.getName());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setWeekOfWeekyear(4);
      assertEquals(1728002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertEquals(1728002719L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1728002719L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.roundHalfEven();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotNull(mutableDateTime2);
      assertEquals(1728000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1728000000L, mutableDateTime2.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Duration duration0 = new Duration((-12345L));
      assertNotNull(duration0);
      assertEquals((-12345L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      
      Duration duration1 = duration0.plus((long) 2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertEquals((-12345L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-12343L), duration1.getMillis());
      assertEquals((-12L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      
      mutableDateTime2.add((ReadableDuration) duration1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime2.getMillis());
      assertEquals((-12345L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-12L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-12343L), duration1.getMillis());
      assertEquals((-12L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 4, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)mutableDateTime_Property0.getDurationField();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertNotNull(preciseDurationField0);
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals("minutes", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(60000L, preciseDurationField0.getUnitMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      PeriodType.MINUTE_INDEX = 3;
      PeriodType.MILLI_INDEX = 1157;
      mutableDateTime1.add((ReadablePeriod) mutablePeriod0, 0);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime1, mutableDateTime2);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(1727987657L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1727987657L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime1.addMillis(5);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime1, mutableDateTime2);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1727987662L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1727987662L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.setMillis(654L);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertEquals(654L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setMinuteOfDay(2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertEquals(120654L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setTime(1327L);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertEquals(1327L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime3 = mutableDateTime_Property0.add(0);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime3, mutableDateTime0);
      assertSame(mutableDateTime3, mutableDateTime1);
      assertSame(mutableDateTime3, mutableDateTime2);
      assertNotNull(mutableDateTime3);
      assertEquals(1327L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1327L, mutableDateTime3.getMillis());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime2.setTime(0, 0, 0, 3);
      assertSame(mutableDateTime0, mutableDateTime3);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime3);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertEquals(3L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(3L, mutableDateTime2.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.addSeconds((-2364));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392406917320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now(chronology0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392406917320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      String string0 = instant0.toString();
      assertEquals("2014-02-14T20:21:21.320Z", string0);
      assertNotNull(string0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Instant instant1 = instant0.minus((long) (-2364));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409283684L, instant1.getMillis());
      
      mutableDateTime0.setDayOfMonth(1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1391283717320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime1.addWeeks(5);
      assertNotSame(instant0, instant1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1395433281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setDayOfWeek(3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1391024517320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime1.hourOfDay();
      assertNotSame(instant0, instant1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1395433281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime1.setMillisOfSecond(1029);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1029 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("Illegal rounding mode: ");
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(140L, (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(140L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
      assertEquals(140L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Duration duration0 = Duration.standardHours(140L);
      assertNotNull(duration0);
      assertEquals(8400L, duration0.getStandardMinutes());
      assertEquals(504000L, duration0.getStandardSeconds());
      assertEquals(140L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(504000000L, duration0.getMillis());
      
      mutableDateTime0.add((ReadableDuration) duration0, (-505));
      assertEquals((-254519999860L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(8400L, duration0.getStandardMinutes());
      assertEquals(504000L, duration0.getStandardSeconds());
      assertEquals(140L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(504000000L, duration0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals((-254519999860L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(3);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-50745643199860L), mutableDateTime0.getMillis());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals((-50745643199860L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("t(QTtJ;W>4Z:R");
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((-5359L), (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals((-5359L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals((-5359L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(4);
      assertNotNull(dateTimeZone1);
      assertEquals("+04:00", dateTimeZone1.getID());
      assertEquals("+04:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      String string0 = mutableDateTime_Property0.getAsShortText(locale0);
      assertEquals("365", string0);
      assertNotNull(string0);
      assertEquals((-5359L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MockZone mockZone0 = new MockZone(2, 0, 0);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setWeekOfWeekyear(2695);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2695 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfMinute();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      assertFalse(dateTimeField1.isSupported());
      assertFalse(dateTimeField1.isLenient());
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.minuteOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.add((-12219292800000L));
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-10826883518680L), mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      DurationField durationField0 = durationFieldType0.getField(mockNullZoneChronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, (-5));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.setDate(0L);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.setSecondOfDay(0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Chronology chronology0 = mutableDateTime0.getChronology();
      assertNotNull(chronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setMonthOfYear((-276));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -276 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      assertNotNull(mutableDateTime0);
      assertEquals((-1L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals((-1L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-1L), mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.weekyearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      
      // Undeclared exception!
      try { 
        mutableDateTime1.setRounding(dateTimeField0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfMinute();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.clockhourOfDay();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      assertFalse(dateTimeField1.isSupported());
      
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dateTimeField1);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      assertFalse(dateTimeField1.isSupported());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfDay((-12));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("Illegal rounding mode: ");
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(140L, (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(140L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate(44, 2850, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2850 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      assertNotNull(durationField0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(604800000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("weeks", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      
      DurationField durationField1 = durationFieldType0.getField((Chronology) null);
      assertSame(durationField1, durationField0);
      assertNotNull(durationField1);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationField1.getName());
      assertTrue(durationField1.isSupported());
      assertEquals(604800000L, durationField1.getUnitMillis());
      assertTrue(durationField1.isPrecise());
      
      mutableDateTime0.add(durationFieldType0, 1527);
      assertEquals(923529600000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addMonths(3);
      assertEquals(931392000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
      assertEquals(931392000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      String string0 = mutableDateTime_Property0.getAsText();
      assertEquals("21", string0);
      assertNotNull(string0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      boolean boolean0 = mutableDateTime_Property0.equals(mockMinguoDate0);
      assertFalse(boolean0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime_Property0.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Chronology chronology0 = mutableDateTime_Property0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      long long0 = mutableDateTime_Property0.getMillis();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addDays(3506);
      assertEquals(1695327681320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addMinutes(0);
      assertEquals(1695327681320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Chronology chronology1 = mutableDateTime_Property0.getChronology();
      assertSame(chronology1, chronology0);
      assertNotNull(chronology1);
      assertEquals(1695327681320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setWeekyear((-4107));
      assertEquals((-191748742718680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setDate((long) 3506);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(73281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addMinutes(3506);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(283641320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.addSeconds(2686);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // seconds field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L, chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.year();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1L, mutableDateTime1.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime1.setTime(2000L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime("", (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeZone dateTimeZone0 = mockNullZoneChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(19L, (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(19L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setHourOfDay(400);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 400 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(61234, 0, 0, 61234, 0, 3, 0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 61234 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
      assertSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyears", durationFieldType1.getName());
      assertEquals("weekyears", durationFieldType1.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = new MutableDateTime(mutableDateTime0, (Chronology) null);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.minuteOfHour();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      boolean boolean0 = mutableDateTime1.isBefore(mutableDateTime0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(boolean0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      GregorianCalendar gregorianCalendar0 = mutableDateTime0.toGregorianCalendar();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(gregorianCalendar0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime1.setHourOfDay(2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392344481320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.centuryOfEra();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime2 = MutableDateTime.now();
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotNull(mutableDateTime2);
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.setMinuteOfHour(0);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392343221320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime2.setDate(2, 10, 9600000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 9600000 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Instant instant1 = instant0.minus(2783L);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      
      Instant instant2 = instant1.plus((ReadableDuration) null);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertSame(instant2, instant1);
      assertNotNull(instant2);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      
      Instant instant3 = instant2.withDurationAdded(2783L, 3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotNull(instant3);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      
      Instant instant4 = instant3.withMillis(2783L);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertNotNull(instant4);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      
      DateTime dateTime0 = instant4.toDateTime();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertNotNull(dateTime0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertEquals(2783L, dateTime0.getMillis());
      
      Instant instant5 = Instant.now();
      assertNotSame(instant5, instant0);
      assertNotSame(instant5, instant4);
      assertNotSame(instant5, instant2);
      assertNotSame(instant5, instant3);
      assertNotSame(instant5, instant1);
      assertNotNull(instant5);
      assertFalse(instant5.equals((Object)instant4));
      assertFalse(instant5.equals((Object)instant2));
      assertTrue(instant5.equals((Object)instant0));
      assertFalse(instant5.equals((Object)instant3));
      assertFalse(instant5.equals((Object)instant1));
      assertEquals(1392409281320L, instant5.getMillis());
      
      DateTimeZone dateTimeZone0 = instant4.getZone();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant5);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant5);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertNotNull(dateTimeZone0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant5));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant5));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = instant4.toMutableDateTime();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant5);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant5);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertNotNull(mutableDateTime0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant5));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant5));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2783L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeZone dateTimeZone1 = instant2.getZone();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant5);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant5);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant5));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant5));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2783L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addMillis((-860));
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant5);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant5);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant5));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant5));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1923L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.yearOfCentury();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant5);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant5);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant5));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant5));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1923L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant5);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant5);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property0, mutableDateTime_Property1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant5));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant5));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertFalse(mutableDateTime_Property0.equals((Object)mutableDateTime_Property1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1923L, mutableDateTime0.getMillis());
      assertEquals(1923L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime1.dayOfMonth();
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant4);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant5);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant5);
      assertNotSame(instant1, instant4);
      assertNotSame(instant2, instant4);
      assertNotSame(instant2, instant5);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant3);
      assertSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant5);
      assertNotSame(instant3, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant4);
      assertNotSame(instant4, instant5);
      assertNotSame(instant4, instant1);
      assertNotSame(instant4, instant0);
      assertNotSame(instant4, instant2);
      assertNotSame(instant4, instant3);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime_Property0, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property0, mutableDateTime_Property2);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant4));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant1));
      assertTrue(instant0.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant5));
      assertFalse(instant1.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant4));
      assertFalse(instant2.equals((Object)instant5));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant5));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant4));
      assertFalse(instant4.equals((Object)instant5));
      assertFalse(instant4.equals((Object)instant1));
      assertFalse(instant4.equals((Object)instant0));
      assertFalse(instant4.equals((Object)instant2));
      assertFalse(instant4.equals((Object)instant3));
      assertFalse(mutableDateTime_Property0.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409278537L, instant1.getMillis());
      assertEquals(1392409278537L, instant2.getMillis());
      assertEquals(1392409286886L, instant3.getMillis());
      assertEquals(2783L, instant4.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1923L, mutableDateTime0.getMillis());
      assertEquals(1923L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addMillis(326565);
      assertEquals(326565L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(4, int0);
      assertEquals(326565L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      assertNotNull(dateTime0);
      assertEquals(326565L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(326565L, dateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setRounding((DateTimeField) null, 13);
      assertEquals(326565L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(326565L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.weekOfWeekyear();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(326565L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.setWeekyear((-2038));
      assertEquals((-126480009600000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.addWeekyears((-511));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-142605792000000L), mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      mutableDateTime0.addWeeks(2);
      assertEquals((-142604582400000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfYear((-2038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2038 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.setWeekyear(3);
      assertEquals((-62072438400000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.addWeekyears((-511));
      assertEquals((-78197616000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.addWeeks(2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-78196406400000L), mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfDay((-715));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -715 for minuteOfDay must be in the range [0,1439]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(mockHijrahDate0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(119999L);
      assertNotNull(mutableDateTime0);
      assertEquals(119999L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfHour(551);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 551 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(0, 0, 2014, 2014, 2014, 2014, 0, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatter1.getPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1040));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1040), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1040), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(4, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-1040), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1040), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(4, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-1040), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.parse("2");
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals((-62104060800000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addSeconds(421);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-1040), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(4, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-1040), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(421000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.secondOfDay();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals((-62104060800000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.setMillisOfSecond(0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals((-62104060800000L), mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now(chronology0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(mutableDateTime_Property0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      String string0 = instant0.toString();
      assertEquals("2014-02-14T20:21:21.320Z", string0);
      assertNotNull(string0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Instant instant1 = instant0.minus((long) (-2384));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409283704L, instant1.getMillis());
      
      mutableDateTime0.setDayOfMonth(1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(1391286081320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime1.addMinutes(5);
      assertNotSame(instant0, instant1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409581320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime1.addWeeks(5);
      assertNotSame(instant0, instant1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1395433581320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime1.hourOfDay();
      assertNotSame(instant0, instant1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1395433581320L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime mutableDateTime2 = MutableDateTime.parse("2014-02-14T20:21:21.320Z");
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1013);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:01.013", dateTimeZone0.getID());
      assertEquals("+00:00:01.013", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusDays(18);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      Period period0 = Period.days(4);
      assertNotNull(period0);
      
      LocalDateTime localDateTime2 = localDateTime0.plus((ReadablePeriod) period0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotNull(localDateTime2);
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime0.size());
      
      Duration duration0 = Duration.standardDays(0L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Days days0 = minutes0.toStandardDays();
      assertNotNull(days0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      Weeks weeks0 = days0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      
      Minutes minutes1 = weeks0.toStandardMinutes();
      assertSame(minutes0, minutes1);
      assertSame(minutes1, minutes0);
      assertNotNull(minutes1);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      
      Duration duration1 = minutes1.toStandardDuration();
      assertNotSame(duration0, duration1);
      assertSame(minutes0, minutes1);
      assertSame(minutes1, minutes0);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      assertTrue(duration1.equals((Object)duration0));
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      
      LocalDateTime localDateTime3 = localDateTime2.withDurationAdded(duration1, 1226);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(duration0, duration1);
      assertSame(minutes0, minutes1);
      assertSame(minutes1, minutes0);
      assertNotSame(duration1, duration0);
      assertSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotNull(localDateTime3);
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertEquals(4, localDateTime2.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime4 = localDateTime2.plusWeeks(3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotNull(localDateTime4);
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime5 = localDateTime4.minusMillis((-2384));
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime5);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime5);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime5, localDateTime2);
      assertNotSame(localDateTime5, localDateTime0);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotNull(localDateTime5);
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime5.size());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime6 = localDateTime5.withMillisOfDay(1);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime6);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime5);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime6);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime5);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime5, localDateTime2);
      assertNotSame(localDateTime5, localDateTime6);
      assertNotSame(localDateTime5, localDateTime0);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime6, localDateTime5);
      assertNotSame(localDateTime6, localDateTime3);
      assertNotSame(localDateTime6, localDateTime4);
      assertNotSame(localDateTime6, localDateTime1);
      assertNotSame(localDateTime6, localDateTime2);
      assertNotSame(localDateTime6, localDateTime0);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime6);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotNull(localDateTime6);
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime5));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime5));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime6.equals((Object)localDateTime5));
      assertFalse(localDateTime6.equals((Object)localDateTime3));
      assertFalse(localDateTime6.equals((Object)localDateTime4));
      assertFalse(localDateTime6.equals((Object)localDateTime1));
      assertFalse(localDateTime6.equals((Object)localDateTime2));
      assertFalse(localDateTime6.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime5.size());
      assertEquals(4, localDateTime6.size());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime5);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime6);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime5);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime6);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime5);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime5, localDateTime2);
      assertNotSame(localDateTime5, localDateTime6);
      assertNotSame(localDateTime5, localDateTime0);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime6);
      assertNotSame(localDateTime0, localDateTime2);
      assertFalse(boolean0);
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime6));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime5));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime6));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime5));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertFalse(localDateTime5.equals((Object)localDateTime6));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime6));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime5.size());
      assertEquals("+00:00:01.013", dateTimeZone0.getID());
      assertEquals("+00:00:01.013", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      mutableDateTime0.setZone(dateTimeZone0);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime2));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(1391286081320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("+00:00:01.013", dateTimeZone0.getID());
      assertEquals("+00:00:01.013", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfDay((-2384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2384 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1241).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("We@+H!", dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.addYears(0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "We@+H!");
      assertNotNull(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("We@+H!", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(8, stringBuffer0.length());
      assertEquals("We@+H!2", stringBuffer0.toString());
      assertEquals("We@+H!2", stringBuffer1.toString());
      assertEquals(8, stringBuffer1.length());
      
      dateTimeFormatter0.printTo(stringBuffer0, (-2330L));
      assertSame(stringBuffer0, stringBuffer1);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(8, stringBuffer0.length());
      assertEquals("We@+H!2", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfMinute(1304);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1304 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setMillisOfSecond(479);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281479L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281479L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
      try { 
        MutableDateTime.parse(">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime("9", dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      boolean boolean0 = mutableDateTime_Property0.isLeap();
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883136000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set("9");
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883135999991L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-61883135999991L), mutableDateTime1.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      int int0 = dateTimeZone0.getStandardOffset(3);
      assertEquals(0, int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean1 = mutableDateTime_Property0.equals("9");
      assertSame(mutableDateTime0, mutableDateTime1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883135999991L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.addSeconds(1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883135998991L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.add((long) 5);
      assertSame(mutableDateTime0, mutableDateTime2);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime2, mutableDateTime0);
      assertSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-61883135998986L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61883135998986L), mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTimeISO();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      int int0 = mutableDateTime0.getMinuteOfDay();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertEquals(0, int0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.setWeekyear(23034375);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(726832499097600000L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime1.setDateTime(4, 23034375, 1, 17887500, 1, 10209375, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 17887500 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTimeISO();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDateTime((-4012), (-4012), (-4012), (-1977), 4447, 17, 4447);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1977 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, 4);
      assertNotNull(partial0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        MutableDateTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime("Interval composed of two durations: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Interval composed of two duratio...\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int0 = mutableDateTime0.getMonthOfYear();
      assertEquals(2, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.setMillisOfDay(2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000002L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int1 = mutableDateTime0.getMillisOfSecond();
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000002L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      mutableDateTime0.setWeekyear(1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimePrinter0).estimatePrintedLength();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertEquals(4, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatter2.getPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(uTCDateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertEquals(4, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(4, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      String string0 = mutableDateTime0.toString(dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime0.getMillis());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertEquals(4, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(4, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.yearOfEra();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.centuryOfEra();
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.weekOfWeekyear();
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime mutableDateTime1 = (MutableDateTime)mutableDateTime0.clone();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-62131622399998L), mutableDateTime1.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.setDate((ReadableInstant) null);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000002L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("L$l+7I1e61$xZz *h^");
      assertNull(dateTimeZone0);
      
      DateTimeZone.setNameProvider((NameProvider) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = null;
      try {
        testYearMonthDay_Basics0 = new TestYearMonthDay_Basics(",_5;I}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("Illegal rounding mode: ");
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(163L, (DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(163L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setDate((ReadableInstant) null);
      assertEquals(1392336000163L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      int int0 = mutableDateTime1.getSecondOfMinute();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(21, int0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.addWeekyears(0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime1.addDays(0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotNull(mutableDateTime_Property0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(1392336000163L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime1.secondOfDay();
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField");
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.dayOfYear();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NpZ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setTime(157, 3508, 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 157 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-3), (byte) (-11), (byte) (-80), (byte) (-1), (byte) (-1), (byte)2}, byteArray0);
      
      mutableDateTime0.add((ReadablePeriod) null);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addYears((byte)2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1455481281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setTime((-1444L));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1455494398556L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setWeekyear(4177);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(69649718398556L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.minuteOfDay();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(69649718398556L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.dayOfWeek();
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(69649718398556L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.minuteOfDay();
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertTrue(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(69649718398556L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property4 = mutableDateTime0.weekOfWeekyear();
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property4, mutableDateTime_Property3);
      assertNotNull(mutableDateTime_Property4);
      assertTrue(mutableDateTime_Property4.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property4.equals((Object)mutableDateTime_Property3));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(69649718398556L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(69649718398556L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = mutableDateTime0.getDayOfMonth();
      assertEquals(14, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.addMonths(1384);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5031836481320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5031836481320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int1 = mutableDateTime0.getDayOfWeek();
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5031836481320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      mutableDateTime0.setYear(688);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-40441693118680L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.centuryOfEra();
      assertNotSame(mutableDateTime_Property1, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property1);
      assertFalse(mutableDateTime_Property1.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-40441693118680L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.dayOfWeek();
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property1);
      assertNotSame(mutableDateTime_Property2, mutableDateTime_Property0);
      assertNotNull(mutableDateTime_Property2);
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property1));
      assertFalse(mutableDateTime_Property2.equals((Object)mutableDateTime_Property0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-40441693118680L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int2 = 1608;
      mutableDateTime0.addMonths(1608);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-36213104318680L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      MutableDateTime.Property mutableDateTime_Property3 = mutableDateTime0.secondOfMinute();
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property0);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property2);
      assertNotSame(mutableDateTime_Property3, mutableDateTime_Property1);
      assertNotNull(mutableDateTime_Property3);
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property0));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property2));
      assertFalse(mutableDateTime_Property3.equals((Object)mutableDateTime_Property1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-36213104318680L), mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Duration duration0 = new Duration((long) 1384);
      assertNotNull(duration0);
      assertEquals(1384L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      
      // Undeclared exception!
      try { 
        Duration.parse("5c<+d 6.0RxT:K;J;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5c<+d 6.0RxT:K;J;\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = 1;
      int int1 = (-2045);
      int int2 = 1557;
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(771, 771, 1, 771, (-2045), 771, 1557, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 771 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      
      mutableDateTime0.setZoneRetainFields(dateTimeZone0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281317L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.minuteOfHour();
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean0 = dateTimeFieldType0.isSupported(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertFalse(boolean0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.set(dateTimeFieldType0, (-3673));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // clockhourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      mutableDateTime0.addYears((-8));
      assertEquals((-252460800000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfWeek((-411));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -411 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      boolean boolean0 = durationFieldType0.isSupported((Chronology) null);
      assertTrue(boolean0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2);
      assertNotNull(preciseDurationField0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(2L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isPrecise());
      
      mutableDateTime0.add(durationFieldType0, 3);
      assertEquals(1814400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      mutableDateTime0.addMonths(5);
      assertEquals(14860800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
      assertEquals(14860800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = (MutableDateTime)mutableDateTime0.clone();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(14860800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(14860800000L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.millisOfDay();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime_Property0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(14860800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(14860800000L, mutableDateTime1.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        MutableDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime("9", dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      mutableDateTime_Property0.isLeap();
      MutableDateTime mutableDateTime1 = new MutableDateTime(5, 1, 5, 3, 5, 4, 1, dateTimeZone0);
      int int0 = Calendar.MARCH;
      mutableDateTime_Property0.equals("9");
      mutableDateTime0.addSeconds(1);
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.add((long) 5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      mutableDateTime2.isSupported(dateTimeFieldType0);
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime1);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.yearOfCentury();
      // Undeclared exception!
      try { 
        mutableDateTime2.setRounding(dateTimeField0, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime("9", dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      mutableDateTime_Property0.isLeap();
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      int int0 = Calendar.MARCH;
      mutableDateTime_Property0.equals("9");
      mutableDateTime0.addSeconds(1);
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.add((long) 5);
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime1);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.yearOfCentury();
      // Undeclared exception!
      try { 
        mutableDateTime2.setRounding(dateTimeField0, (-1473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: -1473
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(91L, (DateTimeZone) null);
      mutableDateTime0.toString();
      mutableDateTime0.getRoundingField();
      mutableDateTime0.setRounding((DateTimeField) null, 0);
      mutableDateTime0.setZoneRetainFields((DateTimeZone) null);
      mutableDateTime0.yearOfEra();
      mutableDateTime0.setRounding((DateTimeField) null);
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      mutableDateTime0.millisOfSecond();
      mutableDateTime1.centuryOfEra();
      mutableDateTime1.dayOfYear();
      mutableDateTime0.toMutableDateTimeISO();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1970-01-01T00:00:00.091Z");
      mutableDateTime0.era();
      mutableDateTime1.getHourOfDay();
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime1);
      mutableDateTime0.hourOfDay();
      // Undeclared exception!
      try { 
        MutableDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mutableDateTime0.isAfterNow();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mutableDateTime0.dayOfMonth();
      mutableDateTime0.setMillis((-379L));
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime0.weekOfWeekyear();
      mutableDateTime0.yearOfCentury();
      mutableDateTime0.setDate((ReadableInstant) null);
      SkipDateTimeField skipDateTimeField0 = null;
      try {
        skipDateTimeField0 = new SkipDateTimeField(mockNullZoneChronology0, (DateTimeField) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1635L, dateTimeZone0);
      dateTimeZone0.getShortName((long) 0);
      DateTimeZone.getProvider();
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
      mutableDateTime1.setMinuteOfHour(3);
      int int0 = (-24);
      mutableDateTime1.setMillis(0L);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDateTime(2, (-1), 2, 5, 4, (-24), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -24 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1810L, dateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      mutableDateTime1.add((-1586L));
      mutableDateTime1.year();
      mutableDateTime1.setTime((long) 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeZone0.adjustOffset(1, false);
      mutableDateTime0.property(dateTimeFieldType0);
      Period period0 = new Period(4, (-349L));
      Seconds seconds0 = period0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Hours hours1 = minutes0.toStandardHours();
      Weeks weeks0 = hours1.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = new Duration(mutableDateTime0, mutableDateTime0);
      Duration duration2 = duration1.plus((-3042L));
      Duration duration3 = duration0.plus((ReadableDuration) duration2);
      Duration duration4 = duration3.toDuration();
      mutableDateTime0.add((ReadableDuration) duration4);
      MutableDateTime mutableDateTime2 = MutableDateTime.now(dateTimeZone0);
      mutableDateTime2.set(dateTimeFieldType0, 2);
      mutableDateTime1.yearOfCentury();
      mutableDateTime1.setTime((ReadableInstant) mutableDateTime2);
      mutableDateTime2.centuryOfEra();
      mutableDateTime2.weekOfWeekyear();
      // Undeclared exception!
      try { 
        MutableDateTime.parse(" {Jd/.1z45");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \" {Jd/.1z45\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("Illegal rounding mode: ");
      MutableDateTime mutableDateTime0 = new MutableDateTime(140L, (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      mutableDateTime1.addWeekyears(1);
      mutableDateTime1.addDays(794);
      mutableDateTime0.minuteOfHour();
      DateTimeFieldType.yearOfEra();
      // Undeclared exception!
      try { 
        mutableDateTime1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("Illegal rounding mode: ");
      MutableDateTime mutableDateTime0 = new MutableDateTime(140L, (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
      MutableDateTime mutableDateTime1 = new MutableDateTime((long) 5);
      mutableDateTime1.addWeekyears(1);
      mutableDateTime1.addDays(794);
      mutableDateTime0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime1.dayOfWeek();
      assertEquals(100656000005L, mutableDateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addSeconds((-2384));
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableDateTime mutableDateTime1 = MutableDateTime.now(chronology0);
      mutableDateTime0.secondOfMinute();
      instant0.toString();
      instant0.minus((long) (-2384));
      mutableDateTime0.setDayOfMonth(1);
      mutableDateTime0.addMinutes(5);
      mutableDateTime1.addWeeks(5);
      mutableDateTime1.hourOfDay();
      MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
      mutableDateTime2.setMillis((ReadableInstant) instant0);
      mutableDateTime2.clone();
      mutableDateTime1.centuryOfEra();
      // Undeclared exception!
      try { 
        mutableDateTime1.setMillisOfSecond(1013);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1013 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(0, 7, 7, (-2310), 7, 4760, (-2310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2310 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      mutableDateTime0.setDate(0L);
      mutableDateTime0.setSecondOfDay(0);
      mutableDateTime0.getChronology();
      mutableDateTime0.setMonthOfYear(4);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      mutableDateTime_Property0.getDifferenceAsLong(mutableDateTime0);
      mutableDateTime0.setTime(2719L);
      mutableDateTime_Property0.getDifference(mutableDateTime0);
      mutableDateTime0.getChronology();
      mutableDateTime_Property0.getField();
      mutableDateTime0.setWeekOfWeekyear(4);
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      MutableDateTime mutableDateTime2 = mutableDateTime_Property0.roundHalfEven();
      Duration duration0 = new Duration((-12345L));
      Duration duration1 = duration0.plus((long) 2);
      mutableDateTime2.add((ReadableDuration) duration1);
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 4, periodType0);
      mutableDateTime_Property0.getDurationField();
      PeriodType.MINUTE_INDEX = 3;
      PeriodType.MILLI_INDEX = 1157;
      mutableDateTime1.add((ReadablePeriod) mutablePeriod0, 0);
      mutableDateTime1.addMillis(5);
      mutableDateTime0.setMillis(654L);
      mutableDateTime0.setMinuteOfDay(2);
      mutableDateTime0.setTime(1327L);
      mutableDateTime_Property0.add(0);
      assertEquals(1327L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      DateTimeZone.getNameProvider();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      mutableDateTime0.addHours(898);
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
      mutableDateTime1.setDate(3474L);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfDay();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      testBasePartial_MockPartial0.getChronology();
      mutableDateTime0.addHours(4);
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
      mutableDateTime1.setDate(3474L);
      mutableDateTime0.era();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfDay();
      mockNullZoneChronology0.weekyearOfCentury();
      int int0 = 487;
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: 487
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      mutableDateTime1.setZone(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime0.secondOfDay();
      Period period0 = Period.years(4);
      mutableDateTime1.getMillisOfSecond();
      mutableDateTime1.add((ReadablePeriod) period0);
      mutableDateTime_Property0.addWrapField(2);
      instant0.equals(mutableDateTime1);
      mutableDateTime_Property0.getRangeDurationField();
      mutableDateTime_Property1.toInterval();
      mutableDateTime_Property1.set(0);
      instant0.isAfterNow();
      mutableDateTime0.secondOfDay();
      mutableDateTime0.setHourOfDay(2);
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set("\": ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\": \" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.minuteOfHour();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      mutableDateTime1.setZone(dateTimeZone0);
      mutableDateTime0.secondOfDay();
      Period period0 = Period.years(4);
      mutableDateTime1.getMillisOfSecond();
      mutableDateTime1.add((ReadablePeriod) period0);
      mutableDateTime_Property0.addWrapField(2);
      instant0.equals(mutableDateTime1);
      mutableDateTime_Property0.set(0);
      instant0.isAfterNow();
      mutableDateTime0.secondOfDay();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set("\": ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\": \" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      DateTimeField dateTimeField0 = mockNullZoneChronology0.clockhourOfDay();
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dateTimeField0);
      mutableDateTime0.add((long) 3);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      durationFieldType0.isSupported(mockNullZoneChronology0);
      mutableDateTime0.add(durationFieldType0, 0);
      mutableDateTime0.setChronology(chronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.addYears(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      MockZone mockZone0 = new MockZone(2, 0, 0);
      mutableDateTime_Property0.roundHalfCeiling();
      mutableDateTime0.setZoneRetainFields(mockZone0);
      mutableDateTime0.setDayOfYear(5);
      mutableDateTime0.minuteOfHour();
      mutableDateTime0.monthOfYear();
      mutableDateTime0.getYearOfEra();
      mutableDateTime0.yearOfCentury();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}
