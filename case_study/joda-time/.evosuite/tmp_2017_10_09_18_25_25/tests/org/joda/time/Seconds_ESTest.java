/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:46:16 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MockPartial;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestDuration_Basics;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Seconds_ESTest extends Seconds_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Seconds seconds1 = seconds0.TWO.minus(seconds0);
      boolean boolean0 = seconds1.isLessThan(seconds0);
      assertEquals(2, seconds1.getSeconds());
      assertEquals(0, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      boolean boolean0 = seconds0.isLessThan((Seconds) null);
      assertEquals(0, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-222));
      Duration duration0 = Duration.standardDays(1032L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      boolean boolean0 = seconds0.isGreaterThan(seconds1);
      assertFalse(boolean0);
      assertEquals(89164800, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-3050));
      boolean boolean0 = seconds0.isGreaterThan((Seconds) null);
      assertFalse(boolean0);
      assertEquals((-3050), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3140L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertEquals(11304000, seconds0.getSeconds());
      assertEquals(18, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Weeks weeks1 = seconds0.MIN_VALUE.toStandardWeeks();
      assertEquals((-3550), weeks1.getWeeks());
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Duration duration1 = duration0.withMillis(724L);
      Seconds seconds0 = duration1.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.MAX_VALUE.toStandardMinutes();
      assertEquals(35791394, minutes0.getMinutes());
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardHours(724L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      assertEquals(2606400, seconds0.getSeconds());
      assertEquals(724, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Hours hours0 = seconds0.MIN_VALUE.toStandardHours();
      assertEquals((-596523), hours0.getHours());
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(23118750);
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(23118750000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Duration duration1 = duration0.withMillis(724L);
      Seconds seconds0 = duration1.toStandardSeconds();
      Duration duration2 = seconds0.toStandardDuration();
      assertEquals(0L, duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2759L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Duration duration1 = seconds0.toStandardDuration();
      assertEquals((-9932400L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3140L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      assertEquals(130, days0.getDays());
      assertEquals(11304000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(815L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.MIN_VALUE.toStandardDays();
      assertEquals((-24855), days0.getDays());
      assertEquals(815, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(1707L);
      Duration duration0 = testDuration_Basics_MockMutableDuration0.toDuration();
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Seconds seconds1 = seconds0.plus(seconds0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = Duration.standardHours(431L);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      Seconds seconds0 = duration2.toStandardSeconds();
      Seconds seconds1 = seconds0.plus(seconds0);
      assertEquals((-1551600), seconds0.getSeconds());
      assertEquals((-3103200), seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Duration duration1 = duration0.withMillis(724L);
      Seconds seconds0 = duration1.toStandardSeconds();
      Seconds seconds1 = seconds0.minus(4);
      Seconds seconds2 = seconds1.plus(4);
      assertEquals(0, seconds2.getSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Seconds seconds1 = seconds0.plus(147);
      assertEquals(147, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Duration duration1 = duration0.withMillis(724L);
      Seconds seconds0 = duration1.toStandardSeconds();
      seconds0.negated();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2759L));
      Seconds seconds0 = duration0.toStandardSeconds();
      seconds0.negated();
      assertEquals((-9932400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(802L);
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Seconds seconds1 = seconds0.multipliedBy((-12096000));
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Seconds seconds1 = seconds0.multipliedBy((-1281));
      assertEquals(60, seconds0.getSeconds());
      assertEquals((-76860), seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Seconds seconds1 = seconds0.minus(0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Duration duration1 = duration0.withMillis(724L);
      Seconds seconds0 = duration1.toStandardSeconds();
      int int0 = seconds0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Seconds seconds1 = seconds0.negated();
      seconds1.getSeconds();
      assertEquals(724, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Seconds seconds1 = seconds0.dividedBy((-1));
      assertEquals((-724), seconds1.getSeconds());
      assertEquals(724, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1784L));
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      // Undeclared exception!
      try { 
        seconds0.MAX_VALUE.plus(1627);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1627
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(815L);
      Seconds seconds0 = duration0.toStandardSeconds();
      // Undeclared exception!
      try { 
        seconds0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      // Undeclared exception!
      try { 
        seconds0.MIN_VALUE.multipliedBy((-442));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -442
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) null);
      // Undeclared exception!
      try { 
        seconds0.MIN_VALUE.minus(1968);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1968
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Seconds seconds0 = duration0.toStandardSeconds();
      // Undeclared exception!
      try { 
        seconds0.MIN_VALUE.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Seconds", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Seconds seconds0 = duration0.toStandardSeconds();
      Seconds seconds1 = seconds0.MIN_VALUE.plus(0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(Integer.MIN_VALUE, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(1);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Seconds seconds1 = seconds0.MAX_VALUE.minus(5785200);
      // Undeclared exception!
      try { 
        seconds0.MIN_VALUE.minus(seconds1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2141698447
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1144));
      seconds0.getFieldType();
      assertEquals((-1144), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-644));
      Days days0 = seconds0.toStandardDays();
      Seconds seconds1 = days0.toStandardSeconds();
      boolean boolean0 = seconds0.isLessThan(seconds1);
      assertEquals((-644), seconds0.getSeconds());
      assertEquals(0, seconds1.getSeconds());
      assertTrue(boolean0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Seconds seconds1 = seconds0.MIN_VALUE.plus(62);
      boolean boolean0 = seconds1.isLessThan((Seconds) null);
      assertEquals((-2147483586), seconds1.getSeconds());
      assertEquals(0, seconds0.getSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(69465561);
      boolean boolean0 = seconds0.isLessThan((Seconds) null);
      assertEquals(69465561, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-644));
      boolean boolean0 = seconds0.isLessThan(seconds0);
      assertFalse(boolean0);
      assertEquals((-644), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.millis(1589L);
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = duration0.toStandardSeconds();
      Seconds seconds1 = days0.toStandardSeconds();
      boolean boolean0 = seconds0.isGreaterThan(seconds1);
      assertTrue(boolean0);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = new Duration(1589L);
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      boolean boolean0 = seconds0.isGreaterThan((Seconds) null);
      assertFalse(boolean0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = new Duration(1589L);
      Seconds seconds0 = duration0.toStandardSeconds();
      boolean boolean0 = seconds0.isGreaterThan((Seconds) null);
      assertEquals(1, seconds0.getSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-222));
      boolean boolean0 = seconds0.isGreaterThan(seconds0);
      assertEquals((-222), seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Duration duration0 = Duration.millis(1589L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Seconds seconds1 = seconds0.dividedBy(1);
      assertEquals(1, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Seconds seconds0 = duration0.toStandardSeconds();
      Seconds seconds1 = seconds0.dividedBy((-878));
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) null);
      seconds0.TWO.minus((Seconds) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(69465600);
      seconds0.MAX_VALUE.plus((Seconds) null);
      assertEquals(69465600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(69465600);
      // Undeclared exception!
      try { 
        seconds0.MAX_VALUE.plus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 69465600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Seconds seconds0 = Seconds.parseSeconds((String) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Seconds.parseSeconds("huA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"huA\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPartial mockPartial0 = (MockPartial)MockPartial.EMPTY_INSTANCE;
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) mockPartial0, (ReadablePartial) mockPartial0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(3);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(2);
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-644));
      String string0 = seconds0.toString();
      assertEquals("PT-644S", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(724L);
      Seconds seconds0 = duration0.toStandardSeconds();
      int int0 = seconds0.getSeconds();
      assertEquals(724, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1144));
      Hours hours0 = seconds0.toStandardHours();
      assertEquals((-1144), seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1144));
      Seconds seconds1 = seconds0.minus(seconds0);
      assertEquals((-1144), seconds0.getSeconds());
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-644));
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertEquals((-10), minutes0.getMinutes());
      assertEquals((-644), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Instant instant0 = Instant.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-173));
      Seconds seconds1 = seconds0.multipliedBy((-173));
      assertEquals(29929, seconds1.getSeconds());
      assertEquals((-173), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1144));
      Weeks weeks0 = seconds0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Seconds seconds1 = hours0.toStandardSeconds();
      Seconds seconds2 = seconds0.minus(seconds1);
      assertEquals(0, weeks0.getWeeks());
      assertSame(seconds2, seconds0);
      assertEquals((-1144), seconds2.getSeconds());
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Duration duration0 = new Duration(1589L);
      Seconds seconds0 = duration0.toStandardSeconds();
      seconds0.ONE.getPeriodType();
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(0);
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      seconds0.ONE.isSupported(durationFieldType0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) null);
      Seconds seconds1 = Seconds.standardSecondsIn(seconds0);
      assertEquals(0, seconds1.getSeconds());
  }
}
