/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:18:58 GMT 2017
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasePeriod_ESTest extends BasePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 0, (PeriodType) null);
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        mutablePeriod0.add(durationFieldType0, 3252);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'eras'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod(23118750, 1686, 662, (-77), 0, 662, (-2434), 1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(2005);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      Duration duration0 = period1.toDurationTo((ReadableInstant) null);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(2005L, duration0.getStandardDays());
      assertEquals(48120L, duration0.getStandardHours());
      assertEquals(173232000L, duration0.getStandardSeconds());
      assertEquals(2887200L, duration0.getStandardMinutes());
      assertEquals(173232000000L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = Period.seconds(8);
      assertNotNull(period0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Duration duration0 = period0.toDurationTo(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(8000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(8L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(8);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      Duration duration0 = period1.toDurationTo((ReadableInstant) null);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals((-242L), duration0.getStandardDays());
      assertEquals((-20908800000L), duration0.getMillis());
      assertEquals((-348480L), duration0.getStandardMinutes());
      assertEquals((-5808L), duration0.getStandardHours());
      assertEquals((-20908800L), duration0.getStandardSeconds());
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = Period.weeks(2010);
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      assertEquals(337680L, duration0.getStandardHours());
      assertEquals(1215648000L, duration0.getStandardSeconds());
      assertEquals(1215648000000L, duration0.getMillis());
      assertEquals(14070L, duration0.getStandardDays());
      assertEquals(20260800L, duration0.getStandardMinutes());
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Period period0 = new Period((-3811), (-3424), (-3811), (-3424), 0, 0, (-3811), 8);
      assertNotNull(period0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = period0.toDurationFrom(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-2197811583L), duration0.getStandardMinutes());
      assertEquals((-1526258L), duration0.getStandardDays());
      assertEquals((-36630193L), duration0.getStandardHours());
      assertEquals((-131868695010L), duration0.getStandardSeconds());
      assertEquals((-131868695010992L), duration0.getMillis());
      assertNotNull(duration0);
      
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-2197811583L), duration0.getStandardMinutes());
      assertEquals((-1526258L), duration0.getStandardDays());
      assertEquals((-36630193L), duration0.getStandardHours());
      assertEquals((-131868695010L), duration0.getStandardSeconds());
      assertEquals((-131868695010992L), duration0.getMillis());
      assertEquals((-36630193), hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-2197811583L), duration0.getStandardMinutes());
      assertEquals((-1526258L), duration0.getStandardDays());
      assertEquals((-36630193L), duration0.getStandardHours());
      assertEquals((-131868695010L), duration0.getStandardSeconds());
      assertEquals((-131868695010992L), duration0.getMillis());
      assertEquals((-36630193), hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = period0.getValue(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = Period.months(4);
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Period period0 = new Period(0L);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.getValue((-965));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -965
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      assertNotNull(period0);
      
      Duration duration0 = Duration.millis(3039L);
      assertEquals(3L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3039L, duration0.getMillis());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, (PeriodType) null);
      assertEquals(3L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3039L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod(period0);
      assertEquals(3L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3039L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 0, (PeriodType) null);
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      mutablePeriod0.add(durationFieldType0, 3252);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.weeks(2010);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(2010, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals(2010, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      assertEquals(2010, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setMinutes(0);
      assertEquals(2010, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Days days0 = duration0.toStandardDays();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period(14, 14, 14, (-371), (-371), 768, (-371), 252, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try { 
        mutablePeriod0.add((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Period period0 = Period.days((-7));
      Minutes minutes0 = period0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = period0.withPeriodType(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Object) null, (Chronology) null);
      Period period0 = new Period(monthDay0, monthDay0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(lenientChronology0);
      LocalDate localDate0 = new LocalDate(1972L, (Chronology) strictChronology0);
      Period period0 = new Period(localDate0, localDate0);
      Days days0 = period0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1972L, 282L, periodType0, strictChronology0);
      MutablePeriod mutablePeriod1 = new MutablePeriod(1, 1, 2, 1, 1, 160, (-704), 1);
      // Undeclared exception!
      try { 
        mutablePeriod0.add((ReadablePeriod) mutablePeriod1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1355);
      Instant instant0 = new Instant(dateTime0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      Days days0 = period0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Period period0 = Period.minutes(2276);
      Instant instant0 = new Instant((long) 160);
      Weeks weeks0 = period0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
      mutablePeriod0.addMonths(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1L));
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      mutablePeriod0.setPeriod(880, 880, 880, 880, 880, 85, 6, 85);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (PeriodType) null);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      // Undeclared exception!
      try { 
        mutablePeriod0.add(durationFieldType0, (-7200000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Period period0 = Period.ZERO;
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(0L, 0L, iSOChronology0);
      Days days0 = period0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setMillis((-5124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'millis'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (PeriodType) null);
      mutablePeriod0.setMinutes(1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod();
      Hours hours0 = period0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setYears(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Period period0 = new Period((-3354), (-3354), (-417), (-3354), (-603), (-417), (-3354), (-3354));
      int int0 = period0.getValue(2);
      assertEquals((-417), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Period period0 = Period.minutes((-4408));
      Hours hours0 = period0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      mutablePeriod0.setValue(1, 770);
  }
}
