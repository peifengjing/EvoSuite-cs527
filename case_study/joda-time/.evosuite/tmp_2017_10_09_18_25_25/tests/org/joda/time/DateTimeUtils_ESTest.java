/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:43:47 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestDuration_Basics;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeUtils_ESTest extends DateTimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) mutableDateTime0, (ReadableInstant) null);
      assertSame(chronology0, mockNullZoneChronology0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset((-36L));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = (DateTimeUtils.SystemMillisProvider)DateTimeUtils.SYSTEM_MILLIS_PROVIDER;
      long long0 = dateTimeUtils_SystemMillisProvider0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider((-1587L));
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(1392409279733L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(1392409281320L);
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber(1392409281320L);
      assertEquals(2456703L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber((-210960691160670L));
      assertEquals((-1087L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay((-210960691160670L));
      assertEquals((-1087.1662114583887), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(1);
      Duration duration0 = testDuration_Basics_MockMutableDuration0.toDuration();
      Interval interval0 = duration0.toIntervalFrom(mutableDateTime0);
      Interval interval1 = interval0.withStartMillis(0);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval(interval1);
      assertEquals(1392409281321L, readableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((-1L), 0L, mockNullZoneChronology0);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval(mutableInterval0);
      assertSame(readableInterval0, mutableInterval0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTime dateTime0 = new DateTime((-1992L), (Chronology) mockNullZoneChronology0);
      Interval interval0 = new Interval(duration0, dateTime0);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval(interval0);
      assertEquals((-1992L), readableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = new Duration((-4176L));
      Hours hours0 = duration0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = DateTimeUtils.getPeriodType(periodType1);
      assertEquals("HoursNoHours", periodType2.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      mutableDateTime0.setMillis(0L);
      long long0 = DateTimeUtils.getInstantMillis(mutableDateTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-2249));
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals((-2249L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1746L);
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals(150854400000L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(1392409281320L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed((-1514L));
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals((-1514L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.getDateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-850L));
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals((-51000000L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getChronology((Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = DateTimeUtils.getChronology(mockNullZoneChronology0);
      assertSame(chronology0, mockNullZoneChronology0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      Chronology chronology0 = DateTimeUtils.getInstantChronology(mutableDateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      long long0 = DateTimeUtils.getInstantMillis(mutableDateTime0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Map<String, DateTimeZone> map0 = DateTimeUtils.getDefaultTimeZoneNames();
      DateTimeUtils.setDefaultTimeZoneNames(map0);
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      boolean boolean0 = DateTimeUtils.isContiguous(testAbstractPartial_MockPartial0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      boolean boolean0 = DateTimeUtils.isContiguous(mockPartial0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = DateTimeUtils.getDurationMillis((ReadableDuration) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = DateTimeUtils.getPeriodType((PeriodType) null);
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone((DateTimeZone) null);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1927L, (-1955), 0);
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone(mockZone0);
      assertSame(mockZone0, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertEquals(1392409281320L, readableInterval0.getStartMillis());
      assertNotNull(readableInterval0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(1);
      Duration duration0 = testDuration_Basics_MockMutableDuration0.toDuration();
      Interval interval0 = duration0.toIntervalFrom(mutableDateTime0);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval(interval0);
      assertEquals(1392409281321L, readableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getInstantChronology((ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(1);
      Duration duration0 = testDuration_Basics_MockMutableDuration0.toDuration();
      Interval interval0 = duration0.toIntervalFrom(mutableDateTime0);
      DateTimeUtils.getIntervalChronology((ReadableInterval) interval0);
      assertEquals(1392409281321L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider(0L);
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_OffsetMillisProvider0);
      assertEquals(1392409281320L, dateTimeUtils_OffsetMillisProvider0.getMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(0L);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(501L);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider(0L);
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = new DateTimeUtils.SystemMillisProvider();
      assertEquals(1392409281320L, dateTimeUtils_SystemMillisProvider0.getMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      DateFormatSymbols dateFormatSymbols0 = DateTimeUtils.getDateFormatSymbols(locale0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeUtils dateTimeUtils0 = new DateTimeUtils();
      assertEquals(1392409281320L, dateTimeUtils0.currentTimeMillis());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber((-210866760000000L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setDefaultTimeZoneNames((Map<String, DateTimeZone>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeUtils.toJulianDay(1393L);
      PeriodType.yearMonthDay();
      PeriodType.hours();
      PeriodType.WEEK_INDEX = 76;
      DateTimeUtils.getInstantMillis((ReadableInstant) null);
      DateTimeUtils.fromJulianDay(0.0);
      DateTimeUtils.getDefaultTimeZoneNames();
      double double0 = DateTimeUtils.toJulianDay((-210866760000000L));
      assertEquals(0.0, double0, 0.01);
      
      long long0 = DateTimeUtils.fromJulianDay(0.0);
      assertEquals((-210866760000000L), long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440587.5);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeUtils.setCurrentMillisSystem();
  }
}
