/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 01:52:44 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MockZone;
import org.joda.time.ReadableInstant;
import org.joda.time.TestDateTimeZone;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, 2390, (-23));
      long long0 = mockZone0.adjustOffset((-1979L), true);
      assertEquals(21021L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      int int0 = testDateTimeZone_MockDateTimeZone0.getOffsetFromLocal(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      int int0 = dateTimeZone0.getOffsetFromLocal((-2328L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, 2390, 2390);
      boolean boolean0 = mockZone0.isStandardOffset(2390);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.002,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      dateTimeZone0.UTC.previousTransition(0L);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      long long0 = uTCDateTimeZone0.previousTransition(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-711L), 1972, 1972);
      long long0 = mockZone0.UTC.previousTransition((-711L));
      assertEquals((-711L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("AST");
      String string0 = testDateTimeZone_MockDateTimeZone0.getShortName(365L);
      assertEquals("AST", string0);
      
      dateTimeZone0.nextTransition(0L);
      testDateTimeZone_MockDateTimeZone0.getStandardOffset(456L);
      dateTimeZone0.hashCode();
      long long0 = testDateTimeZone_MockDateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
      assertEquals(0L, long0);
      
      String string1 = testDateTimeZone_MockDateTimeZone0.getName(1L);
      assertEquals("AST", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      dateTimeZone0.UTC.nextTransition(1L);
      assertEquals("-23:00", dateTimeZone0.toString());
      assertEquals("-23:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      long long0 = uTCDateTimeZone0.nextTransition((-48135554));
      assertEquals((-48135554L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      boolean boolean0 = testDateTimeZone_MockDateTimeZone0.UTC.isFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockZone mockZone0 = new MockZone(9223372036854775807L, (-86399999), (-86399999));
      boolean boolean0 = mockZone0.isFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      int int0 = uTCDateTimeZone0.UTC.getStandardOffset(6L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-453L), 299, 0);
      int int0 = mockZone0.getStandardOffset(299);
      assertEquals(299, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockZone mockZone0 = new MockZone(9223372036854775807L, (-786), (-786));
      int int0 = mockZone0.getStandardOffset(0L);
      assertEquals((-786), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 43);
      String string0 = dateTimeZone0.UTC.getShortName(1303L);
      assertEquals("UTC", string0);
      assertEquals("+00:43", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      int int0 = testDateTimeZone_MockDateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(59);
      dateTimeZone0.UTC.getOffset((-1015L));
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      int int0 = dateTimeZone0.getOffset(2392390L);
      assertEquals(86399999, int0);
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockZone mockZone0 = new MockZone(760, (-823), (-823));
      int int0 = mockZone0.getOffset((-2671L));
      assertEquals((-823), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      String string0 = testDateTimeZone_MockDateTimeZone0.getName((-2116857L));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("J1)RdI)3zQ2=");
      String string0 = testDateTimeZone_MockDateTimeZone0.getID();
      assertEquals("J1)RdI)3zQ2=", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      boolean boolean0 = dateTimeZone0.UTC.equals(dateTimeZone0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-711L), 1972, 1972);
      boolean boolean0 = mockZone0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      long long0 = testDateTimeZone_MockDateTimeZone0.convertUTCToLocal(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("KpO=&7B");
      long long0 = testDateTimeZone_MockDateTimeZone0.UTC.convertUTCToLocal(10800000L);
      assertEquals(10800000L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 0, false, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-700L), 60000, 1215);
      long long0 = mockZone0.adjustOffset(0L, true);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      // Undeclared exception!
      try { 
        testDateTimeZone_MockDateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-64800000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -64800000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockZone mockZone0 = new MockZone(16L, 86399999, 86399999);
      long long0 = mockZone0.convertLocalToUTC(1409L, false);
      assertEquals((-86398590L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0, (-6), 2168);
      // Undeclared exception!
      try { 
        mockZone0.convertLocalToUTC(158L, true, 158L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): 1970-01-01T00:00:00.158 (MockZone)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      long long0 = uTCDateTimeZone0.convertLocalToUTC((long) (-951), false, (-746951748L));
      assertEquals((-951L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-951));
      long long0 = dateTimeZone0.convertUTCToLocal(867L);
      assertEquals((-84L), long0);
      assertEquals("-00:00:00.951", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(760);
      boolean boolean0 = dateTimeZone0.isStandardOffset(86400000L);
      assertTrue(boolean0);
      assertEquals("+00:00:00.760", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      String string0 = dateTimeZone0.getName((-1941L), (Locale) null);
      assertEquals("Coordinated Universal Time", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      Locale locale0 = Locale.ROOT;
      String string0 = testDateTimeZone_MockDateTimeZone0.getShortName(14L, locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockZone mockZone0 = new MockZone(9223372036854775807L, (-86399999), (-86399999));
      String string0 = mockZone0.UTC.getShortName((long) (-86399999), (Locale) null);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeZone.getAvailableIDs();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((-951));
      fixedDateTimeZone0.toTimeZone();
      MockZone mockZone0 = new MockZone((-951), (-951), (-132));
      mockZone0.getOffset((long) (-951));
      fixedDateTimeZone0.writeReplace();
      mockZone0.adjustOffset((-132951), true);
      fixedDateTimeZone0.getNameKey(66L);
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      boolean boolean1 = mockZone0.equals(mockJapaneseDate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), (-23));
      long long0 = dateTimeZone0.convertUTCToLocal((-15551999999L));
      assertEquals((-15636179999L), long0);
      assertEquals("-23:23", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("VST");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'VST' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("UTC");
      testDateTimeZone_MockDateTimeZone0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      String string0 = testDateTimeZone_MockDateTimeZone0.getID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, 2390, (-23));
      long long0 = mockZone0.adjustOffset((-23), false);
      assertEquals((-23L), long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-951), (-951), (-951));
      long long0 = mockZone0.adjustOffset(3, true);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-951), (-951), (-132));
      long long0 = mockZone0.adjustOffset((-951), false);
      assertEquals((-132951L), long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-951), (-951), (-132));
      mockZone0.transition = 530L;
      long long0 = mockZone0.adjustOffset((-132951), true);
      assertEquals((-132951L), long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(59);
      long long0 = dateTimeZone0.adjustOffset(59, true);
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertEquals(59L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      MockZone mockZone0 = new MockZone((-1941L), 0, 0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      boolean boolean0 = mockZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-2008L));
      assertEquals((-2008L), long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0, (-6), 2168);
      long long0 = mockZone0.convertLocalToUTC((long) (-6), false);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("][C\"j'p");
      MockZone mockZone0 = new MockZone((-97L), (-331), (-331));
      // Undeclared exception!
      try { 
        testDateTimeZone_MockDateTimeZone0.getMillisKeepLocal(mockZone0, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-2063L), 59, 59);
      long long0 = mockZone0.convertLocalToUTC((-2063L), true);
      assertEquals((-2122L), long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      long long0 = testDateTimeZone_MockDateTimeZone0.convertLocalToUTC(3600L, true);
      assertEquals(3600L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, (-2799), 35);
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      long long0 = testDateTimeZone_MockDateTimeZone0.getMillisKeepLocal(mockZone0, 246L);
      assertEquals(3045L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1941L), 0, 0);
      int int0 = mockZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-951), (-951), (-132));
      int int0 = mockZone0.getOffsetFromLocal(0);
      assertEquals((-132951), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-20094L), 2145455806, 2145455806);
      int int0 = mockZone0.getOffsetFromLocal((-20094L));
      assertEquals(2145455806, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3597769L, (-44236554), (-3899));
      int int0 = mockZone0.getOffsetFromLocal(3600L);
      assertEquals((-48135554), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, 2390, (-23));
      boolean boolean0 = mockZone0.isStandardOffset(2390);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, 2390, (-23));
      int int0 = mockZone0.getOffset((ReadableInstant) null);
      assertEquals((-20610), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 0, 23);
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      int int0 = mockZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(23000, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_INSTANT;
      Locale locale0 = dateTimeFormatter0.getLocale();
      String string0 = testDateTimeZone_MockDateTimeZone0.getName((long) (-132), locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = null;
      try {
        testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Id must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertEquals("+00:00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("-18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("MIT");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'MIT' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      timeZone0.setID("GMT+org/joda/time/tz/data");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+org/joda/time/tz/data\" is malformed at \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(2147390283);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2147390283
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-2146399606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -2146399606
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertEquals("+23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 719521);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 719521
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1008));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1008
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(60, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 60
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-561), 1759);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -561
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.convertLocalToUTC(3107L, true, (-1000L));
      assertEquals(3107L, long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00");
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, 2390, (-23));
      DateTimeZone.setDefault(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTimeZone.LazyInit dateTimeZone_LazyInit0 = new DateTimeZone.LazyInit();
      DateTimeZone.getProvider();
      DateTimeZone.getAvailableIDs();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      uTCDateTimeZone0.getStandardOffset(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone.forOffsetHoursMinutes(0, 54);
      MockZone mockZone0 = new MockZone((-132945L), 6, 7200000);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockZone0.getOffset(0L);
      uTCDateTimeZone0.toTimeZone();
      DateTimeZone.forID("-00:00:00.951");
      String string0 = dateTimeZone0.getNameKey(2393L);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = DateTimeZone.LazyInit.OFFSET_FORMATTER;
      org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        Instant.parse("org/joda/time/tz/data", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      String string0 = uTCDateTimeZone0.toString();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      LocalDateTime localDateTime0 = LocalDateTime.now();
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("-23:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      DateTimeZone.getDefault();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-10));
      assertEquals("-00:00:00.010", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      String string0 = testDateTimeZone_MockDateTimeZone0.getShortName((-2765L));
      assertEquals("", string0);
  }
}
