/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 16:26:59 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.TestDateTimeZone;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.YearMonth;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("L??G(U-#KZj$T");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 12, 12);
      LocalTime localTime0 = new LocalTime(1917L, (DateTimeZone) mockZone0);
      LocalTime localTime1 = localTime0.minusMillis(12);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (Chronology) null);
      LocalTime localTime1 = localTime0.minusSeconds(4);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, (-3528), (-3528));
      LocalTime localTime0 = LocalTime.now((DateTimeZone) mockZone0);
      LocalTime localTime1 = localTime0.minusMinutes((-364));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, (-1388), 50, 12, 58);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.minusHours(1089);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.plusMillis((-2513));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.plusSeconds((-1095));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2105376125, 2105376125, (-947), (-1095), 2105376125);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.plusMinutes((-947));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2105376125, 2105376125, (-947), (-1095), 2105376125);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.plusHours(55);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 12, 12);
      LocalTime localTime0 = new LocalTime(1917L, (DateTimeZone) mockZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(1000L, 1220L, periodType0);
      LocalTime localTime1 = localTime0.plus(period0);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2105376125, 2105376125, (-947), (-1095), 2105376125);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      LocalTime localTime1 = localTime0.MIDNIGHT.withFieldAdded(durationFieldType0, (-1095));
      assertNotSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, (-1388), 50, 12, 58);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.plusMillis(50);
      boolean boolean0 = localTime1.equals(localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("+ZV}zZ:/p{q?", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"+ZV}zZ:/p{q?\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1L);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      long long0 = localTime_Property0.getMillis();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("E$G5j3C7]");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)localTime_Property0.getField();
      assertEquals(24, preciseDateTimeField0.getRange());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((Object) null, uTCDateTimeZone0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.withMillisOfSecond(0);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime localTime1 = localTime0.withMillisOfDay(0);
      DateTimeUtils.setCurrentMillisFixed(4);
      DateTime dateTime0 = localTime1.toDateTimeToday();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalTime localTime0 = LocalTime.parse("1");
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = localTime0.MIDNIGHT.getSecondOfMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (Chronology) null);
      int int0 = localTime0.MIDNIGHT.getMillisOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      long long0 = localTime0.getLocalMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      long long0 = localTime0.getLocalMillis();
      assertEquals(46597020L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = localTime0.getHourOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(85305000L);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = localTime0.getField(3, (Chronology) mockNullZoneChronology0);
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      int int0 = localTime0.get(dateTimeFieldType0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute(833);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 833 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-976L));
      // Undeclared exception!
      try { 
        localTime0.withMinuteOfHour(4525);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4525 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime((-509L), dateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, (-2147483592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483592 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        localTime0.toString("The DateTimeFieldType must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        LocalTime.parse("R^C@sQd]NVNmx(Fxsi", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("Pacific/Guadalcanal", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalTime.parse("t5w?n 5?pTxz", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"t5w?n 5?pTxz\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(5608800000L, (Chronology) null);
      // Undeclared exception!
      try { 
        localTime0.getField(0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        LocalTime.fromMillisOfDay((-2738L), (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(testAbstractPartial_MockPartial0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(452L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(2059, 2059, 2059, 322, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(94, 94, (-2810), 94);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 94 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(9223372036854775806L);
      LocalTime localTime1 = localTime0.withPeriodAdded((ReadablePeriod) null, 103);
      assertSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = new Period(396, 1983, 1983, 36, 1440, 401, 396, 396);
      // Undeclared exception!
      try { 
        localTime0.withPeriodAdded(period0, (-1073741823));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -425201761908
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, (-1388), 50, 12, 58);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.plusMillis(50);
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (Chronology) null);
      LocalTime localTime1 = new LocalTime(0L);
      int int0 = localTime0.compareTo((ReadablePartial) localTime1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (Chronology) null);
      int int0 = localTime0.compareTo((ReadablePartial) localTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 12, 12);
      LocalTime localTime0 = new LocalTime(1917L, (DateTimeZone) mockZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, (-1388), 50, 12, 58);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = localTime0.get(dateTimeFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      int int0 = localTime0.getValue(2);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = localTime0.getValue(1);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("E$G5j3C7]");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      int int0 = localTime0.MIDNIGHT.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      String string0 = localTime0.MIDNIGHT.toString();
      assertEquals("00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2910), (-2910), (-850), (-850), (-2910), (-850));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      int int0 = localTime0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = localTime0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(1395, 1395, 65, 3, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1395 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 1, 1, 1);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy((-1195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy(4);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1314).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Locale locale0 = Locale.FRANCE;
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      String string0 = localTime0.toString((String) null, locale0);
      assertEquals("00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1314).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Locale locale0 = Locale.FRANCE;
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      try { 
        localTime0.toString("mK<c\"\"KX6", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1), (-1), (-1));
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("E$G5j3C7]");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime localTime1 = localTime0.minusMillis(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, (-1388), 50, 12, 58);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMillis((-696));
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("E$G5j3C7]");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime localTime1 = localTime0.minusSeconds(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      LocalTime localTime1 = localTime0.minusSeconds((-7200000));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMinutes(0);
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.minusHours(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1L);
      LocalTime localTime1 = localTime0.minusHours((-866));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.plusMillis(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("L??G(U-#KZj$T");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime localTime1 = localTime0.plusSeconds(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      LocalTime localTime1 = localTime0.plusSeconds(1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusMinutes(2435);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime localTime1 = localTime0.plusHours(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2105376125, 2105376125, (-947), (-1095), 2105376125);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.MIDNIGHT.plusHours((-947));
      assertNotSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.seconds((-742));
      LocalTime localTime1 = localTime0.withPeriodAdded(period0, 0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single((-1071));
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, (-1071));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(11, 1, 4);
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, (-3370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      LocalTime localTime1 = localTime0.withField(dateTimeFieldType0, 1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1314).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime localTime1 = localTime0.withFields(localTime0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("L??G(U-#KZj$T");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.compareTo((ReadablePartial) yearMonth0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (Chronology) null);
      LocalTime localTime1 = new LocalTime((Chronology) null);
      int int0 = localTime0.compareTo((ReadablePartial) localTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("L??G(U-#KZj$T");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime localTime1 = localTime0.withLocalMillis(0L);
      LocalTime localTime2 = localTime1.MIDNIGHT.plusMinutes(0);
      boolean boolean0 = localTime2.equals(localTime1);
      assertTrue(boolean0);
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime0.equals((Object)localTime2));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      boolean boolean0 = localTime0.equals(mockJapaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2105376125, 2105376125, (-947), (-1095), 2105376125);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      boolean boolean0 = localTime0.equals(localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      boolean boolean0 = localTime0.MIDNIGHT.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25 for halfdayOfDay must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      boolean boolean0 = localTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      String string0 = localTime0.MIDNIGHT.toString("M1");
      assertEquals("\uFFFD1", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, (-1388), 50, 12, 58);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      int int0 = localTime0.MIDNIGHT.get(dateTimeFieldType0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(85305000L);
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getValue(1658);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1658
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        localTime0.getField(9600000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 9600000
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      boolean boolean0 = localTime0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalTime localTime0 = LocalTime.now(chronology0);
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(5608800000L, (Chronology) null);
      LocalTime localTime1 = localTime0.withMinuteOfHour(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getField((-590), chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -590
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime localTime1 = localTime0.withSecondOfMinute(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-1617), (-1617), (-1617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1617 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Chronology) null);
      int int0 = localTime0.getMillisOfSecond();
      assertEquals(320, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2105376125, 2105376125, (-947), (-1095), 2105376125);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      int int0 = localTime0.getHourOfDay();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      String string0 = localTime0.MIDNIGHT.toString((String) null);
      assertEquals("00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond((-2147483597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483597 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(mockJapaneseDate0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = localTime0.getSecondOfMinute();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      LocalTime localTime1 = localTime0.minusMinutes(1000);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      int int0 = localTime0.MIDNIGHT.getMinuteOfHour();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Object) null, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-3228L));
      int int0 = localTime0.getMillisOfDay();
      assertEquals(86396772, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-2798), (-2798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2798 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (Chronology) null);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      LocalTime localTime1 = localTime0.minus(period0);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      LocalTime localTime1 = localTime0.withHourOfDay(1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(4, localTime0.size());
      assertEquals(1392336000007L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.addWrapFieldToCopy((-1414));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.hourOfDay();
      LocalTime.Property localTime_Property0 = new LocalTime.Property((LocalTime) null, dateTimeField0);
      LocalTime localTime0 = localTime_Property0.getLocalTime();
      assertNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("E$G5j3C7]");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.addCopy((long) (-1642));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.roundHalfCeilingCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(46597020L);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(7L);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.addCopy(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, (-1388), 50, 12, 58);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      Chronology chronology0 = localTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.withMaximumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("L??G(U-#KZj$T");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertNotSame(localTime1, localTime0);
  }
}
