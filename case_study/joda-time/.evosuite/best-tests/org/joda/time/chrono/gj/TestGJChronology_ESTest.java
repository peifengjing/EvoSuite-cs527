/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:57:07 GMT 2017
 */

package org.joda.time.chrono.gj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.gj.TestGJChronology;
import org.joda.time.chrono.gj.TestGregorianChronology;
import org.joda.time.chrono.gj.TestJulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestGJChronology_ESTest extends TestGJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 0, (-3621));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = testGregorianChronology0.gjYearFromFixed(0);
      assertEquals(0, int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField0 = testJulianChronology0.hours();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = testJulianChronology0.weekyearOfCentury();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("weekyearOfCentury", dateTimeField1.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      assertNotSame(dateTimeField1, dateTimeField0);
      
      long long0 = testJulianChronology0.lastWeekday((-3621), (-178954955), 0, (-1393));
      assertEquals((-65363298744L), long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.millisFromGJ(0, 1686, 1906);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(3600, 3600, 3600);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial0).size();
      long long0 = testGregorianChronology0.lastWeekday(3600, 2057, 1197, 1197);
      assertEquals(788706L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3600;
      intArray0[1] = 3600;
      intArray0[2] = 3600;
      intArray0[3] = 0;
      intArray0[4] = 3600;
      intArray0[5] = 3600;
      testGregorianChronology0.validate(readablePartial0, intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {3600, 3600, 3600, 0, 3600, 3600}, intArray0);
      
      DateTimeField dateTimeField0 = testGregorianChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      
      DurationField durationField0 = testGregorianChronology0.halfdays();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("halfdays", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      
      long long1 = testGregorianChronology0.millisFromGJ(3600, 0, 0);
      assertEquals((-9823593600000L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testGregorianChronology0.isoFromFixed((-9823593600000L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: -26896085751
         //
         verifyException("org.joda.time.chrono.gj.TestGregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.firstWeekday(887, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField0 = testJulianChronology0.hours();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertTrue(durationField0.isPrecise());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      
      boolean boolean0 = testJulianChronology0.isLeapYear((-4));
      assertFalse(boolean0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long0 = testJulianChronology0.getDateOnlyMillis((-4));
      assertEquals((-86400000L), long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long1 = testJulianChronology0.weekdayBefore(6L, 0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField1 = testJulianChronology0.months();
      assertNotNull(durationField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.era();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("era", dateTimeField0.getName());
      
      Chronology chronology0 = testJulianChronology0.withUTC();
      assertNotNull(chronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("TestJulianChronology", chronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      assertSame(chronology0, testJulianChronology0);
      
      int[] intArray0 = testJulianChronology0.gjFromFixed(2033L);
      assertNotNull(intArray0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      assertArrayEquals(new int[] {6, 7, 28}, intArray0);
      
      int int0 = testJulianChronology0.gjYearFromFixed((-749L));
      assertEquals((-3), int0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      
      DateTimeZone dateTimeZone0 = testJulianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      
      // Undeclared exception!
      try { 
        testJulianChronology0.withZone((DateTimeZone) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-1), (-1), (-3330));
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      
      DateTimeField dateTimeField1 = testJulianChronology0.monthOfYear();
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("monthOfYear", dateTimeField1.getName());
      assertEquals(1, dateTimeField1.getMinimumValue());
      assertFalse(dateTimeField1.isLenient());
      assertTrue(dateTimeField1.isSupported());
      assertEquals(12, dateTimeField1.getMaximumValue());
      
      long long0 = testJulianChronology0.firstWeekday((-1), (-1), 0, (-1170));
      assertEquals((-1569L), long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField2 = testJulianChronology0.monthOfYear();
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertNotNull(dateTimeField2);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("monthOfYear", dateTimeField2.getName());
      assertEquals(1, dateTimeField2.getMinimumValue());
      assertEquals(12, dateTimeField2.getMaximumValue());
      assertFalse(dateTimeField2.isLenient());
      assertTrue(dateTimeField2.isSupported());
      assertNotSame(dateTimeField2, dateTimeField1);
      
      DateTimeField dateTimeField3 = testJulianChronology0.year();
      assertNotNull(dateTimeField3);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals(100000000, dateTimeField3.getMaximumValue());
      assertEquals((-100000000), dateTimeField3.getMinimumValue());
      assertFalse(dateTimeField3.isLenient());
      assertTrue(dateTimeField3.isSupported());
      assertEquals("year", dateTimeField3.getName());
      
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.millisPerYear();
      assertEquals(31556952000L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long2 = testJulianChronology0.weekdayOnOrAfter(0L, 2786);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField4 = testGregorianChronology0.year();
      assertNotNull(dateTimeField4);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("year", dateTimeField4.getName());
      assertFalse(dateTimeField4.isLenient());
      assertEquals(100000000, dateTimeField4.getMaximumValue());
      assertTrue(dateTimeField4.isSupported());
      assertEquals((-100000000), dateTimeField4.getMinimumValue());
      
      DateTimeField dateTimeField5 = testJulianChronology0.dayOfYear();
      assertNotNull(dateTimeField5);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals(366, dateTimeField5.getMaximumValue());
      assertTrue(dateTimeField5.isSupported());
      assertFalse(dateTimeField5.isLenient());
      assertEquals(1, dateTimeField5.getMinimumValue());
      assertEquals("dayOfYear", dateTimeField5.getName());
      
      long long3 = testGregorianChronology0.nthWeekday(2786, (-1), 4773, (-1), (-3330));
      assertEquals(1759043L, long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = testJulianChronology0.gjYearFromMillis((-2479L));
      assertEquals((-11), int0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int int1 = testJulianChronology0.gjYearFromFixed(4691L);
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray0 = testJulianChronology0.gjFromMillis(3266L);
      assertNotNull(intArray0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      
      // Undeclared exception!
      try { 
        testJulianChronology0.fixedFromISO(0, 0, (-1811));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal weekyear: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.lastWeekday((-566), 0, (-566), (-566));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 1, 1);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.days();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.getTimeOnlyMillis(0);
      assertEquals(0L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField1 = testGregorianChronology0.minutes();
      assertNotNull(durationField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertTrue(durationField1.isPrecise());
      assertEquals(0L, durationField1.getUnitMillis());
      assertFalse(durationField1.isSupported());
      assertEquals("minutes", durationField1.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial0).size();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      testGregorianChronology0.validate(readablePartial0, intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {0, 1, 0, 1}, intArray0);
      
      long long1 = TestGJChronology.mod(0L, 6L);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      DateTimeZone dateTimeZone0 = testGregorianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      boolean boolean0 = testGregorianChronology0.isLeapYear(1);
      assertFalse(boolean0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = testGregorianChronology0.gjYearFromMillis(0L);
      assertEquals(0, int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray1 = testGregorianChronology0.isoFromMillis(0L);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), 52, 6}, intArray1);
      
      TestJulianChronology testJulianChronology0 = null;
      try {
        testJulianChronology0 = new TestJulianChronology(0, 0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-866), 0, 0);
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray0 = testJulianChronology0.isoFromFixed((-2868L));
      assertNotNull(intArray0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertArrayEquals(new int[] {(-8), 9, 2}, intArray0);
      
      DurationField durationField0 = testJulianChronology0.eras();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(durationField0.isSupported());
      assertEquals("eras", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      
      DateTimeField dateTimeField0 = testJulianChronology0.monthOfYear();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(12, dateTimeField0.getMaximumValue());
      assertFalse(dateTimeField0.isLenient());
      assertEquals(1, dateTimeField0.getMinimumValue());
      
      long long0 = testJulianChronology0.fixedFromMillis(0);
      assertEquals((-316340L), long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField1 = testJulianChronology0.days();
      assertNotNull(durationField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 2142, (-866));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField2 = testGregorianChronology0.millis();
      assertFalse(durationField2.equals((Object)durationField0));
      assertNotNull(durationField2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertTrue(durationField2.isPrecise());
      assertEquals(0L, durationField2.getUnitMillis());
      assertFalse(durationField2.isSupported());
      assertEquals("millis", durationField2.getName());
      assertNotSame(durationField2, durationField0);
      
      long long1 = testGregorianChronology0.getDateOnlyMillis(0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long2 = testGregorianChronology0.weekdayOnOrBefore(0L, 0);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long3 = testGregorianChronology0.weekdayBefore((-1994L), 0);
      assertEquals((-1995L), long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField1 = testJulianChronology0.millisOfSecond();
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isLenient());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("millisOfSecond", dateTimeField1.getName());
      
      int[] intArray1 = testGregorianChronology0.gjFromFixed(1709L);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5, 9, 5}, intArray1);
      
      String string0 = testJulianChronology0.toString();
      assertEquals("TestJulianChronology", string0);
      assertNotNull(string0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long4 = testJulianChronology0.millisFromISO((-866), 1964, (-3166));
      assertEquals(916358400000L, long4);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-992), (-992), (-992));
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.dayOfMonth();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals(31, dateTimeField0.getMaximumValue());
      
      int[] intArray0 = testJulianChronology0.isoFromFixed((-992));
      assertNotNull(intArray0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertArrayEquals(new int[] {(-3), 16, 2}, intArray0);
      
      long long0 = testJulianChronology0.weekdayAfter((-992), (-992));
      assertEquals((-985L), long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray1 = testJulianChronology0.gjFromFixed((-2318L));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-7), 8, 29}, intArray1);
      
      long long1 = testJulianChronology0.fixedFromISO((-2433), (-992), (-992));
      assertEquals((-896593L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField1 = testJulianChronology0.era();
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("era", dateTimeField1.getName());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      
      long long2 = testJulianChronology0.weekdayBefore((-4063L), 1969);
      assertEquals((-4065L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray2 = testJulianChronology0.isoFromMillis((-4063L));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-1078), 8, 2}, intArray2);
      
      DurationField durationField0 = testJulianChronology0.centuries();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals("centuries", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      
      boolean boolean0 = testJulianChronology0.isLeapYear(1969);
      assertFalse(boolean0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField2 = testJulianChronology0.yearOfCentury();
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertNotNull(dateTimeField2);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("yearOfCentury", dateTimeField2.getName());
      assertFalse(dateTimeField2.isSupported());
      assertFalse(dateTimeField2.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertNotSame(dateTimeField2, dateTimeField1);
      
      DateTimeField dateTimeField3 = testJulianChronology0.monthOfYear();
      assertNotNull(dateTimeField3);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("monthOfYear", dateTimeField3.getName());
      assertEquals(1, dateTimeField3.getMinimumValue());
      assertTrue(dateTimeField3.isSupported());
      assertEquals(12, dateTimeField3.getMaximumValue());
      assertFalse(dateTimeField3.isLenient());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial0).size();
      long long3 = testJulianChronology0.set(readablePartial0, (-2433));
      assertEquals((-2433L), long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long4 = testJulianChronology0.add(123456789L, (long) 1969, 0);
      assertEquals(123456789L, long4);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long5 = testJulianChronology0.fixedFromMillis(0L);
      assertEquals((-393691L), long5);
      assertFalse(long5 == long3);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long6 = testJulianChronology0.millisFromFixed((-393691L));
      assertEquals(0L, long6);
      assertFalse(long6 == long1);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertFalse(long6 == long0);
      assertFalse(long6 == long5);
      assertFalse(long6 == long3);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int int0 = testJulianChronology0.gjYearFromMillis((-985L));
      assertEquals((-1078), int0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.getDateTimeMillis((-4452), (-992), 1969, 1969, (-4452), 1969, 12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology((-1215), (-1215), (-1215));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.gjFromFixed(0L);
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {0, 12, 31}, intArray0);
      
      int int0 = testGregorianChronology0.gjYearFromMillis((-1215));
      assertEquals((-1321), int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.millisFromISO((-1215), 0, 0);
      assertEquals(3318019200000L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.millisFromGJ(1894, 1894, 0);
      assertEquals(106430544000000L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long2 = testGregorianChronology0.weekdayAfter((-2075L), (-1));
      assertEquals((-2073L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long3 = testGregorianChronology0.millisFromGJ(0, (-1317), 1941);
      assertEquals(38344752000000L, long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      
      long long4 = testGregorianChronology0.lastWeekday((-1215), 0, (-1215), 842);
      assertEquals((-36719L), long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField1 = testGregorianChronology0.centuryOfEra();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertEquals("centuryOfEra", dateTimeField1.getName());
      assertFalse(dateTimeField1.isSupported());
      assertNotSame(dateTimeField1, dateTimeField0);
      
      DateTimeField dateTimeField2 = testGregorianChronology0.weekyear();
      assertNotNull(dateTimeField2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField2.isLenient());
      assertEquals(100000000, dateTimeField2.getMaximumValue());
      assertTrue(dateTimeField2.isSupported());
      assertEquals("weekyear", dateTimeField2.getName());
      assertEquals((-100000000), dateTimeField2.getMinimumValue());
      
      DateTimeField dateTimeField3 = testGregorianChronology0.secondOfMinute();
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertFalse(dateTimeField3.equals((Object)dateTimeField1));
      assertNotNull(dateTimeField3);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField3.isSupported());
      assertEquals("secondOfMinute", dateTimeField3.getName());
      assertFalse(dateTimeField3.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertNotSame(dateTimeField3, dateTimeField0);
      assertNotSame(dateTimeField3, dateTimeField1);
      
      long long5 = testGregorianChronology0.fixedFromISO(0, 842, 842);
      assertEquals(6365L, long5);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeZone dateTimeZone0 = testGregorianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long6 = TestGJChronology.div((-1044L), 6365L);
      assertEquals((-1L), long6);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long3);
      assertFalse(long6 == long5);
      assertFalse(long6 == long1);
      
      TestJulianChronology testJulianChronology0 = null;
      try {
        testJulianChronology0 = new TestJulianChronology(0, 9, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.isoFromMillis(614L);
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {1970, 1, 4}, intArray0);
      
      long long0 = testGregorianChronology0.weekdayOnOrBefore((-2403L), (-6));
      assertEquals((-2407L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      
      long long1 = TestGJChronology.mod((-1L), 7L);
      assertEquals(6L, long1);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        TestGJChronology.mod((-1306L), (-2403L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -2403
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = TestGJChronology.mod(2878L, 2878L);
      assertEquals(0L, long0);
      
      long long1 = testGregorianChronology0.millisPerYear();
      assertEquals(31556952000L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      boolean boolean0 = testGregorianChronology0.isLeapYear((-1));
      assertFalse(boolean0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long2 = testGregorianChronology0.fixedFromISO((-1), 7, 7);
      assertEquals((-679L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long3 = testGregorianChronology0.millisFromGJ(2522, (-1), (-1));
      assertEquals(17414006400000L, long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long4 = testGregorianChronology0.millisPerYear();
      assertEquals(31556952000L, long4);
      assertTrue(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.getDateOnlyMillis((-3412L));
      assertEquals((-86400000L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.millisFromFixed((-945L));
      assertEquals((-62217331200000L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = testGregorianChronology0.gjYearFromFixed(86400000L);
      assertEquals(236556, int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeZone dateTimeZone0 = testGregorianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testGregorianChronology0.withZone((DateTimeZone) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.millisFromISO(0, 53, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal weekyear: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = TestGJChronology.div(0L, 1962L);
      assertEquals(0L, long0);
      
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(4, (-1), (-78));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.fixedFromISO((-1), (-1), 1462);
      assertEquals(727L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      boolean boolean0 = testJulianChronology0.isLeapYear(794);
      assertFalse(boolean0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(1515, 1515, 1515);
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals(100000000, dateTimeField0.getMaximumValue());
      assertEquals("year", dateTimeField0.getName());
      assertEquals((-100000000), dateTimeField0.getMinimumValue());
      assertTrue(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      
      long long0 = testJulianChronology0.getTimeOnlyMillis(1515);
      assertEquals(1515L, long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long1 = testJulianChronology0.weekdayOnOrBefore(1515L, 1515);
      assertEquals(1515L, long1);
      assertTrue(long1 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long2 = testJulianChronology0.millisFromGJ(1515, 1515, 1515);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeZone dateTimeZone0 = testJulianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.withZone((DateTimeZone) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long0 = TestGJChronology.amod(86400000L, 86400000L);
      assertEquals(86400000L, long0);
      
      int int0 = testJulianChronology0.gjYearFromFixed((-1867L));
      assertEquals((-6), int0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.firstWeekday(0, 2025, 2025, 2025);
      assertEquals(803180L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.fixedFromMillis(3600000L);
      assertEquals(719163L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.isoFromFixed(1129L);
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {4, 6, 2}, intArray0);
      
      long long2 = testGregorianChronology0.lastWeekday((-2143), 1996, (-2143), (-2143));
      assertEquals(660939L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(1133, 1133, 0);
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField0 = testJulianChronology0.seconds();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("seconds", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      
      DateTimeField dateTimeField0 = testJulianChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.fixedFromGJ(0, 3353, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-718), (-718), (-718));
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long0 = testJulianChronology0.millisPerYear();
      assertEquals(31557600000L, long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField0 = testJulianChronology0.days();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long1 = testJulianChronology0.fixedFromISO((-718), 0, (-718));
      assertEquals((-262966L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testJulianChronology0.isLeapYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 0, 0);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.weekdayNearest(1660L, 0);
      assertEquals(1659L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.years();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.fixedFromMillis(0L);
      assertEquals((-397L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      // Undeclared exception!
      try { 
        TestGJChronology.amod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.weekdayAfter((-1L), 0);
      assertEquals(0L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      
      long long1 = testGregorianChronology0.weekdayOnOrAfter((-296L), (-3686));
      assertEquals((-291L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField1 = testGregorianChronology0.dayOfYear();
      assertNotNull(dateTimeField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertTrue(dateTimeField1.isSupported());
      assertEquals(1, dateTimeField1.getMinimumValue());
      assertEquals("dayOfYear", dateTimeField1.getName());
      assertEquals(366, dateTimeField1.getMaximumValue());
      
      DateTimeField dateTimeField2 = testGregorianChronology0.minuteOfHour();
      assertFalse(dateTimeField2.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertEquals("minuteOfHour", dateTimeField2.getName());
      assertFalse(dateTimeField2.isLenient());
      assertFalse(dateTimeField2.isSupported());
      assertNotSame(dateTimeField2, dateTimeField0);
      
      DurationField durationField0 = testGregorianChronology0.weekyears();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long2 = testJulianChronology0.getTimeOnlyMillis((-291L));
      assertEquals(86399709L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long3 = testJulianChronology0.weekdayNearest(1L, (-3686));
      assertEquals(3L, long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      String string0 = testJulianChronology0.toString();
      assertEquals("TestJulianChronology", string0);
      assertNotNull(string0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      Chronology chronology0 = testJulianChronology0.withUTC();
      assertNotNull(chronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("TestJulianChronology", chronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      assertSame(chronology0, testJulianChronology0);
      
      DateTimeField dateTimeField3 = testJulianChronology0.yearOfEra();
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertFalse(dateTimeField3.equals((Object)dateTimeField2));
      assertNotNull(dateTimeField3);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField3.isLenient());
      assertEquals("yearOfEra", dateTimeField3.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertFalse(dateTimeField3.isSupported());
      assertSame(testJulianChronology0, chronology0);
      assertNotSame(dateTimeField3, dateTimeField0);
      assertNotSame(dateTimeField3, dateTimeField2);
      
      DurationField durationField1 = testJulianChronology0.minutes();
      assertNotNull(durationField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertTrue(durationField1.isPrecise());
      assertEquals(0L, durationField1.getUnitMillis());
      assertFalse(durationField1.isSupported());
      assertEquals("minutes", durationField1.getName());
      assertSame(testJulianChronology0, chronology0);
      
      DurationField durationField2 = testJulianChronology0.seconds();
      assertFalse(durationField2.equals((Object)durationField1));
      assertNotNull(durationField2);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("seconds", durationField2.getName());
      assertTrue(durationField2.isPrecise());
      assertFalse(durationField2.isSupported());
      assertEquals(0L, durationField2.getUnitMillis());
      assertSame(testJulianChronology0, chronology0);
      assertNotSame(durationField2, durationField1);
      
      // Undeclared exception!
      try { 
        TestGJChronology.amod((-1328L), (-1286L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -1286
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology((-140), (-1), (-1));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.hourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      
      long long0 = testGregorianChronology0.fixedFromISO(2554, 2554, 0);
      assertEquals(950334L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.weekdayBefore((-1L), (-3180));
      assertEquals((-2L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.isoFromFixed((-1074L));
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {(-2), 4, 4}, intArray0);
      
      int[] intArray1 = testGregorianChronology0.gjFromMillis((-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-141), 10, 29}, intArray1);
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField1 = testJulianChronology0.hourOfHalfday();
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("hourOfHalfday", dateTimeField1.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isLenient());
      assertFalse(dateTimeField1.isSupported());
      assertSame(dateTimeField1, dateTimeField0);
      
      DateTimeField dateTimeField2 = testJulianChronology0.weekyear();
      assertNotNull(dateTimeField2);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals(100000000, dateTimeField2.getMaximumValue());
      assertEquals((-100000000), dateTimeField2.getMinimumValue());
      assertEquals("weekyear", dateTimeField2.getName());
      assertTrue(dateTimeField2.isSupported());
      assertFalse(dateTimeField2.isLenient());
      
      long long2 = testGregorianChronology0.millisFromFixed(0L);
      assertEquals(4454956800000L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = testGregorianChronology0.gjYearFromMillis((-1));
      assertEquals((-141), int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray2 = testGregorianChronology0.gjFromFixed(1764L);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {5, 10, 30}, intArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.halfdays();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("halfdays", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      
      long long0 = testGregorianChronology0.weekdayNearest(0L, 0);
      assertEquals(0L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.fixedFromISO(345, (-1103), (-253));
      assertEquals(117669L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField1 = testGregorianChronology0.eras();
      assertFalse(durationField1.equals((Object)durationField0));
      assertNotNull(durationField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertTrue(durationField1.isPrecise());
      assertEquals("eras", durationField1.getName());
      assertFalse(durationField1.isSupported());
      assertEquals(0L, durationField1.getUnitMillis());
      assertNotSame(durationField1, durationField0);
      
      // Undeclared exception!
      try { 
        TestGJChronology.div((-567L), (-761L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -761
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 0, 0);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.monthOfYear();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(12, dateTimeField0.getMaximumValue());
      assertFalse(dateTimeField0.isLenient());
      assertEquals(1, dateTimeField0.getMinimumValue());
      
      long long0 = testGregorianChronology0.getTimeOnlyMillis(0);
      assertEquals(0L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.add(497L, 0L, 846);
      assertEquals(497L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      // Undeclared exception!
      try { 
        TestGJChronology.mod((-894L), (-894L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -894
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-859), 0, 0);
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long0 = testJulianChronology0.millisFromGJ(433, 0, 0);
      assertEquals(40740883200000L, long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.weekyearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      
      long long1 = testJulianChronology0.millisPerMonth();
      assertEquals(2629800000L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      
      boolean boolean0 = testJulianChronology0.isLeapYear((-361));
      assertTrue(boolean0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField1 = testJulianChronology0.dayOfMonth();
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertTrue(dateTimeField1.isSupported());
      assertEquals(1, dateTimeField1.getMinimumValue());
      assertEquals("dayOfMonth", dateTimeField1.getName());
      assertFalse(dateTimeField1.isLenient());
      assertEquals(31, dateTimeField1.getMaximumValue());
      
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testJulianChronology0.weekdayAfter((-361), (-361));
      assertEquals((-354L), long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.gjFromFixed(0L);
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {0, 12, 31}, intArray0);
      
      Chronology chronology0 = testJulianChronology0.withUTC();
      assertNotNull(chronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("TestJulianChronology", chronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      assertSame(chronology0, testJulianChronology0);
      
      int[] intArray1 = testGregorianChronology0.isoFromFixed(0L);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 52, 7}, intArray1);
      
      long long1 = testJulianChronology0.millisPerMonth();
      assertEquals(2629800000L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      
      boolean boolean1 = testGregorianChronology0.isLeapYear((-1124));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 0, 86400);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.fixedFromISO(0, 0, 1276);
      assertEquals(912L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.fixedFromGJ(86400, (-1871), (-1));
      assertEquals(31499333L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(1, 1, 0);
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField0 = testJulianChronology0.centuries();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("centuries", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      
      String string0 = testJulianChronology0.toString();
      assertEquals("TestJulianChronology", string0);
      assertNotNull(string0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      long long0 = testJulianChronology0.millisFromFixed(0L);
      assertEquals(172800000L, long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long1 = testJulianChronology0.getDateOnlyMillis(172800000L);
      assertEquals(172800000L, long1);
      assertTrue(long1 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray0 = testJulianChronology0.gjFromMillis(0L);
      assertNotNull(intArray0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertArrayEquals(new int[] {(-1), 12, 31}, intArray0);
      
      long long2 = testJulianChronology0.weekdayNearest(1L, 0);
      assertEquals(0L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      Chronology chronology0 = testJulianChronology0.withUTC();
      assertNotNull(chronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("TestJulianChronology", chronology0.toString());
      assertSame(testJulianChronology0, chronology0);
      assertSame(chronology0, testJulianChronology0);
      
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      // Undeclared exception!
      try { 
        TestGJChronology.div(3165L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long0 = TestGJChronology.div(373L, 258L);
      assertEquals(1L, long0);
      
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(86400000, (-1836), 0);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.fixedFromISO(0, 0, 86400000);
      assertEquals(86399636L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-1815), (-1815), (-1815));
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      
      // Undeclared exception!
      try { 
        TestGJChronology.amod(20L, (-1815));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -1815
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(3699, 3699, 2555);
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long0 = testJulianChronology0.weekdayBefore(5443L, (-507));
      assertEquals(5436L, long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.getTimeOnlyMillis(1L);
      assertEquals(1L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.isoFromFixed((-2879L));
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {(-7), 6, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology((-866), (-866), (-866));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals(53, dateTimeField0.getMaximumValue());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals(1, dateTimeField0.getMinimumValue());
      
      DateTimeField dateTimeField1 = testGregorianChronology0.secondOfMinute();
      assertNotNull(dateTimeField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("secondOfMinute", dateTimeField1.getName());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      
      long long0 = testGregorianChronology0.fixedFromGJ(0, 1, 0);
      assertEquals((-366L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField0 = testJulianChronology0.years();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField1 = testJulianChronology0.days();
      assertFalse(durationField1.equals((Object)durationField0));
      assertNotNull(durationField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertNotSame(durationField1, durationField0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(760, 760, 760);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals(100000000, dateTimeField0.getMaximumValue());
      assertTrue(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals((-100000000), dateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology((-3272), (-3272), (-3272));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.seconds();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.hourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      
      DurationField durationField1 = testGregorianChronology0.weekyears();
      assertNotNull(durationField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(53, dateTimeField0.getMaximumValue());
      assertEquals(1, dateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long0 = testJulianChronology0.weekdayNearest(86400000L, 1879048192);
      assertEquals(86399999L, long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      boolean boolean0 = testJulianChronology0.isLeapYear((-1280));
      assertFalse(boolean0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.minutes();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("minutes", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      
      int[] intArray0 = testGregorianChronology0.gjFromMillis((-1494));
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {1969, 12, 31}, intArray0);
      
      long long0 = testGregorianChronology0.weekdayAfter((-1494), 1789569706);
      assertEquals((-1490L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.lastWeekday((-1494), 2146014780, 1971, 1971);
      assertEquals(783815865137L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long2 = testGregorianChronology0.weekdayAfter(1789569706, 2147483646);
      assertEquals(1789569712L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long3 = testGregorianChronology0.fixedFromGJ((-1494), (-795), (-795));
      assertEquals((-571177L), long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeZone dateTimeZone0 = testGregorianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = 3897;
      long long4 = testGregorianChronology0.fixedFromISO(1789569706, 3897, 1789569706);
      assertEquals(655416509959L, long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(3897, (-2147374715), 3897);
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField0 = testJulianChronology0.era();
      assertNotNull(dateTimeField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertEquals("era", dateTimeField0.getName());
      
      int int1 = (-3411);
      long long5 = testJulianChronology0.millisFromISO(1789569706, (-3411), 1789569706);
      assertEquals(1303960216567345152L, long5);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField1 = testJulianChronology0.monthOfYear();
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("monthOfYear", dateTimeField1.getName());
      assertEquals(12, dateTimeField1.getMaximumValue());
      assertTrue(dateTimeField1.isSupported());
      assertEquals(1, dateTimeField1.getMinimumValue());
      assertFalse(dateTimeField1.isLenient());
      
      long long6 = testJulianChronology0.fixedFromGJ((-1), 2142394824, 932);
      assertEquals(23324302L, long6);
      assertFalse(long6 == long5);
      assertFalse(long6 == long1);
      assertFalse(long6 == long3);
      assertFalse(long6 == long0);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField2 = testGregorianChronology0.dayOfWeek();
      assertNotNull(dateTimeField2);
      assertEquals("dayOfWeek", dateTimeField2.getName());
      assertTrue(dateTimeField2.isSupported());
      assertFalse(dateTimeField2.isLenient());
      assertEquals(1, dateTimeField2.getMinimumValue());
      assertEquals(7, dateTimeField2.getMaximumValue());
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      // Undeclared exception!
      try { 
        TestGJChronology.mod(1789569706, (-1494));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -1494
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(2147424828, 388, 107);
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      
      long long0 = testGregorianChronology0.weekdayAfter(5L, 2147424828);
      assertEquals(10L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField1 = testGregorianChronology0.yearOfCentury();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField1.isSupported());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertEquals("yearOfCentury", dateTimeField1.getName());
      assertNotSame(dateTimeField1, dateTimeField0);
      
      long long1 = 5L;
      int[] intArray0 = testGregorianChronology0.gjFromFixed(5L);
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {1, 1, 5}, intArray0);
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int int0 = 2147417575;
      long long2 = testJulianChronology0.fixedFromISO(537, (-1), 2147417575);
      assertEquals(2147613344L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      long long3 = testJulianChronology0.millisPerMonth();
      assertEquals(2629800000L, long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray1 = testGregorianChronology0.gjFromFixed(109L);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 4, 19}, intArray1);
      
      DateTimeZone dateTimeZone0 = testGregorianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      // Undeclared exception!
      try { 
        testGregorianChronology0.withZone((DateTimeZone) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.fixedFromISO(0, 0, 0);
      assertEquals((-364L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = testGregorianChronology0.gjYearFromMillis(3L);
      assertEquals(1970, int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.nthWeekday(1970, 1970, 1970, 1970, 1970);
      assertEquals(795133L, long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long2 = testGregorianChronology0.weekdayOnOrAfter(3L, 3441);
      assertEquals(4L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.firstWeekday((-431), (-431), (-431), (-431));
      assertEquals((-171427L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.hours();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("hours", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      
      long long1 = testGregorianChronology0.weekdayBefore((-923L), 394);
      assertEquals((-929L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals(7, dateTimeField0.getMaximumValue());
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertTrue(dateTimeField0.isSupported());
      
      DateTimeField dateTimeField1 = testGregorianChronology0.era();
      assertNotNull(dateTimeField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("era", dateTimeField1.getName());
      assertFalse(dateTimeField1.isSupported());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      
      DateTimeField dateTimeField2 = testGregorianChronology0.weekyearOfCentury();
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertNotNull(dateTimeField2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField2.isLenient());
      assertFalse(dateTimeField2.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField2.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertNotSame(dateTimeField2, dateTimeField1);
      
      long long2 = testGregorianChronology0.getDateOnlyMillis(445L);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.gjFromMillis((-431));
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {1969, 12, 31}, intArray0);
      
      DateTimeField dateTimeField3 = testGregorianChronology0.dayOfMonth();
      assertNotNull(dateTimeField3);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals(31, dateTimeField3.getMaximumValue());
      assertTrue(dateTimeField3.isSupported());
      assertEquals(1, dateTimeField3.getMinimumValue());
      assertFalse(dateTimeField3.isLenient());
      assertEquals("dayOfMonth", dateTimeField3.getName());
      
      DurationField durationField1 = testGregorianChronology0.days();
      assertNotNull(durationField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      boolean boolean0 = testGregorianChronology0.isLeapYear((-431));
      assertFalse(boolean0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      boolean boolean1 = testGregorianChronology0.isLeapYear((-431));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int0 = testGregorianChronology0.gjYearFromFixed(394);
      assertEquals(2, int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField2 = testGregorianChronology0.weeks();
      assertFalse(durationField2.equals((Object)durationField1));
      assertNotNull(durationField2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(durationField2, durationField1);
      
      long long3 = testGregorianChronology0.getDateOnlyMillis((-923L));
      assertEquals((-86400000L), long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField4 = testGregorianChronology0.weekyear();
      assertNotNull(dateTimeField4);
      assertFalse(dateTimeField4.isLenient());
      assertTrue(dateTimeField4.isSupported());
      assertEquals(100000000, dateTimeField4.getMaximumValue());
      assertEquals("weekyear", dateTimeField4.getName());
      assertEquals((-100000000), dateTimeField4.getMinimumValue());
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      
      int int0 = 1404;
      boolean boolean0 = testGregorianChronology0.isLeapYear(1404);
      assertTrue(boolean0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.millisFromISO(1404, 0, (-3759));
      assertEquals((-18186076800000L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.weekdayNearest((-1L), (-2146646421));
      assertEquals((-3L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long2 = testGregorianChronology0.getDateOnlyMillis((-370L));
      assertEquals((-86400000L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.isoFromMillis((-370L));
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {1970, 1, 3}, intArray0);
      
      DurationField durationField0 = testGregorianChronology0.months();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField1 = testGregorianChronology0.secondOfDay();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertEquals("secondOfDay", dateTimeField1.getName());
      assertFalse(dateTimeField1.isLenient());
      assertNotSame(dateTimeField1, dateTimeField0);
      
      DateTimeField dateTimeField2 = testGregorianChronology0.secondOfMinute();
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertFalse(dateTimeField2.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertFalse(dateTimeField2.isLenient());
      assertEquals("secondOfMinute", dateTimeField2.getName());
      assertFalse(dateTimeField2.isSupported());
      assertNotSame(dateTimeField2, dateTimeField1);
      assertNotSame(dateTimeField2, dateTimeField0);
      
      long long3 = testGregorianChronology0.firstWeekday(2147483623, 2147483623, 2147483623, 2147483623);
      assertEquals(786678726608L, long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray1 = testGregorianChronology0.gjFromMillis(2147483623);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1970, 1, 25}, intArray1);
      
      int int1 = 3035;
      long long4 = testGregorianChronology0.lastWeekday((-3197), 3035, (-1643), 7);
      assertEquals(1057870L, long4);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long5 = testGregorianChronology0.nthWeekday(1404, 0, 0, (-1643), 0);
      assertEquals((-40824L), long5);
      assertFalse(long5 == long4);
      assertFalse(long5 == long2);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long6 = testGregorianChronology0.nthWeekday((-2141567714), 3035, 3035, 3035, 7);
      assertEquals((-2104871165L), long6);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertFalse(long6 == long1);
      assertFalse(long6 == long5);
      assertFalse(long6 == long0);
      assertFalse(long6 == long3);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField3 = testGregorianChronology0.dayOfYear();
      assertNotNull(dateTimeField3);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("dayOfYear", dateTimeField3.getName());
      assertEquals(366, dateTimeField3.getMaximumValue());
      assertFalse(dateTimeField3.isLenient());
      assertEquals(1, dateTimeField3.getMinimumValue());
      assertTrue(dateTimeField3.isSupported());
      
      // Undeclared exception!
      try { 
        TestGJChronology.amod(12345L, (-620L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -620
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long0 = testGregorianChronology0.fixedFromISO(0, 0, (-3986));
      assertEquals((-4350L), long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int[] intArray0 = testGregorianChronology0.gjFromFixed(0L);
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {0, 12, 31}, intArray0);
      
      long long1 = 0L;
      long long2 = testGregorianChronology0.weekdayNearest(0L, 60);
      assertEquals((-3L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.hourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      
      int int0 = testGregorianChronology0.gjYearFromMillis(6L);
      assertEquals(1970, int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long3 = TestGJChronology.amod(104767008L, 6L);
      assertEquals(6L, long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      
      long long4 = testGregorianChronology0.fixedFromGJ(0, 0, 0);
      assertEquals((-397L), long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long5 = testGregorianChronology0.millisPerYear();
      assertEquals(31556952000L, long5);
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeField dateTimeField1 = testGregorianChronology0.millisOfDay();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("millisOfDay", dateTimeField1.getName());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertNotSame(dateTimeField1, dateTimeField0);
      
      DateTimeField dateTimeField2 = testGregorianChronology0.yearOfCentury();
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      assertFalse(dateTimeField2.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField2);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField2.isSupported());
      assertEquals("yearOfCentury", dateTimeField2.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertFalse(dateTimeField2.isLenient());
      assertNotSame(dateTimeField2, dateTimeField1);
      assertNotSame(dateTimeField2, dateTimeField0);
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField3 = testJulianChronology0.minuteOfDay();
      assertFalse(dateTimeField3.equals((Object)dateTimeField2));
      assertFalse(dateTimeField3.equals((Object)dateTimeField1));
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField3);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField3.isLenient());
      assertFalse(dateTimeField3.isSupported());
      assertEquals("minuteOfDay", dateTimeField3.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertNotSame(dateTimeField3, dateTimeField2);
      assertNotSame(dateTimeField3, dateTimeField1);
      assertNotSame(dateTimeField3, dateTimeField0);
      
      DateTimeField dateTimeField4 = testGregorianChronology0.millisOfSecond();
      assertFalse(dateTimeField4.equals((Object)dateTimeField0));
      assertFalse(dateTimeField4.equals((Object)dateTimeField3));
      assertFalse(dateTimeField4.equals((Object)dateTimeField1));
      assertFalse(dateTimeField4.equals((Object)dateTimeField2));
      assertNotNull(dateTimeField4);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField4.isSupported());
      assertEquals("millisOfSecond", dateTimeField4.getName());
      assertFalse(dateTimeField4.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField4.toString());
      assertNotSame(dateTimeField4, dateTimeField0);
      assertNotSame(dateTimeField4, dateTimeField3);
      assertNotSame(dateTimeField4, dateTimeField1);
      assertNotSame(dateTimeField4, dateTimeField2);
      
      DateTimeField dateTimeField5 = testJulianChronology0.year();
      assertNotNull(dateTimeField5);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertFalse(dateTimeField5.isLenient());
      assertEquals((-100000000), dateTimeField5.getMinimumValue());
      assertEquals(100000000, dateTimeField5.getMaximumValue());
      assertEquals("year", dateTimeField5.getName());
      assertTrue(dateTimeField5.isSupported());
      
      DurationField durationField0 = testJulianChronology0.hours();
      assertNotNull(durationField0);
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DateTimeField dateTimeField6 = testJulianChronology0.weekyear();
      assertNotNull(dateTimeField6);
      assertFalse(dateTimeField6.isLenient());
      assertEquals(100000000, dateTimeField6.getMaximumValue());
      assertEquals((-100000000), dateTimeField6.getMinimumValue());
      assertEquals("weekyear", dateTimeField6.getName());
      assertTrue(dateTimeField6.isSupported());
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int[] intArray1 = testGregorianChronology0.isoFromFixed((-1L));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 52, 6}, intArray1);
      
      int int1 = 3307;
      ReadablePeriod readablePeriod0 = mock(ReadablePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(readablePeriod0).getValue(anyInt());
      doReturn(2141741713).when(readablePeriod0).size();
      // Undeclared exception!
      testJulianChronology0.add(readablePeriod0, (-397L), 1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(2042, (-2325), (-2325));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.millis();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("millis", durationField0.getName());
      
      long long0 = testGregorianChronology0.weekdayNearest(1L, 0);
      assertEquals(0L, long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long1 = testGregorianChronology0.millisFromGJ((-647), (-2325), (-647));
      assertEquals((-84711657600000L), long1);
      assertFalse(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DateTimeZone dateTimeZone0 = testGregorianChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField1 = testGregorianChronology0.weeks();
      assertNotNull(durationField1);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 0, (-3621));
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      int int1 = testGregorianChronology0.gjYearFromFixed(0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      assertNotNull(testJulianChronology0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      DurationField durationField0 = testJulianChronology0.hours();
      assertNotNull(durationField0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertFalse(durationField0.isSupported());
      
      DateTimeField dateTimeField0 = testGregorianChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = testJulianChronology0.weekyearOfCentury();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.isSupported());
      assertFalse(dateTimeField1.isLenient());
      assertEquals("weekyearOfCentury", dateTimeField1.getName());
      assertNotSame(dateTimeField1, dateTimeField0);
      
      long long0 = testJulianChronology0.lastWeekday((-3621), (-178954955), 0, (-1393));
      assertEquals((-65363298744L), long0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      int int2 = 0;
      long long1 = TestGJChronology.mod(94L, 1L);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      
      long long2 = testGregorianChronology0.weekdayOnOrBefore((-901L), 0);
      assertEquals((-903L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      long long3 = testJulianChronology0.fixedFromISO(2050, 0, 0);
      assertEquals(748398L, long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      String string0 = testJulianChronology0.toString();
      assertEquals("TestJulianChronology", string0);
      assertNotNull(string0);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
      
      // Undeclared exception!
      try { 
        TestGJChronology.div(0, (-178954955));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divisor must be positive: -178954955
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      assertNotNull(testGregorianChronology0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      DurationField durationField0 = testGregorianChronology0.seconds();
      assertNotNull(durationField0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertEquals("seconds", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      
      long long0 = 0L;
      int[] intArray0 = testGregorianChronology0.isoFromMillis(0L);
      assertNotNull(intArray0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      assertArrayEquals(new int[] {1970, 1, 4}, intArray0);
      
      long long1 = testGregorianChronology0.getTimeOnlyMillis(0L);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
      
      ReadablePeriod readablePeriod0 = mock(ReadablePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((DurationFieldType) null).when(readablePeriod0).getFieldType(anyInt());
      doReturn((-4)).when(readablePeriod0).getValue(anyInt());
      doReturn(1610612736).when(readablePeriod0).size();
      long long2 = 12053L;
      // Undeclared exception!
      try { 
        testGregorianChronology0.add(readablePeriod0, 12053L, 895);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 7;
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(7, 0, 0);
      testGregorianChronology0.millisFromISO(0, 0, 0);
      testGregorianChronology0.minutes();
      testGregorianChronology0.hourOfHalfday();
      testGregorianChronology0.fixedFromMillis(0L);
      testGregorianChronology0.eras();
      testGregorianChronology0.gjFromMillis(7);
      testGregorianChronology0.gjYearFromMillis((-2038L));
      testGregorianChronology0.isoFromFixed(2160L);
      testGregorianChronology0.weekdayOnOrBefore(7, 7);
      testGregorianChronology0.isLeapYear(0);
      testGregorianChronology0.fixedFromMillis(48L);
      testGregorianChronology0.isoFromMillis(0L);
      testGregorianChronology0.isoFromMillis(86400000L);
      testGregorianChronology0.weekdayNearest(0L, 0);
      testGregorianChronology0.dayOfWeek();
      testGregorianChronology0.gjYearFromFixed(7);
      testGregorianChronology0.withUTC();
      // Undeclared exception!
      try { 
        TestGJChronology.mod(86400000L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.chrono.gj.TestGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial0).size();
      testGregorianChronology0.gjFromMillis(1L);
      testGregorianChronology0.millisFromISO(0, (-61), 0);
      testGregorianChronology0.get(readablePartial0, 2048L);
      TestGJChronology.amod(1440L, 1441L);
      testGregorianChronology0.secondOfMinute();
      testGregorianChronology0.firstWeekday(30, (-3586), 0, 1);
      testGregorianChronology0.gjFromMillis((-1052L));
      testGregorianChronology0.millisFromGJ(30, 0, 1);
      testGregorianChronology0.millisPerMonth();
      DateTimeField dateTimeField0 = testGregorianChronology0.dayOfMonth();
      assertEquals(1, dateTimeField0.getMinimumValue());
  }
}
