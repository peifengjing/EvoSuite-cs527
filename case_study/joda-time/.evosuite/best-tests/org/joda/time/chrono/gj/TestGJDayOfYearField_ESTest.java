/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:54:20 GMT 2017
 */

package org.joda.time.chrono.gj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.YearMonth;
import org.joda.time.chrono.gj.TestGJChronology;
import org.joda.time.chrono.gj.TestGJDayOfYearField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestGJDayOfYearField_ESTest extends TestGJDayOfYearField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestGJDayOfYearField testGJDayOfYearField0 = new TestGJDayOfYearField((TestGJChronology) null);
      // Undeclared exception!
      try { 
        testGJDayOfYearField0.getMaximumValue(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJDayOfYearField", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TestGJDayOfYearField testGJDayOfYearField0 = new TestGJDayOfYearField((TestGJChronology) null);
      long long0 = testGJDayOfYearField0.add(2629746000L, 2299);
      assertEquals(201263346000L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TestGJDayOfYearField testGJDayOfYearField0 = new TestGJDayOfYearField((TestGJChronology) null);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      int[] intArray0 = new int[4];
      testGJDayOfYearField0.addWrapPartial(yearMonth0, 0, intArray0, 1);
      assertEquals(1, testGJDayOfYearField0.getMinimumValue());
      assertEquals(366, testGJDayOfYearField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TestGJDayOfYearField testGJDayOfYearField0 = new TestGJDayOfYearField((TestGJChronology) null);
      // Undeclared exception!
      try { 
        testGJDayOfYearField0.set(0L, (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJDayOfYearField", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TestGJDayOfYearField testGJDayOfYearField0 = new TestGJDayOfYearField((TestGJChronology) null);
      // Undeclared exception!
      try { 
        testGJDayOfYearField0.remainder(2629746000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJDayOfYearField", e);
      }
  }
}
