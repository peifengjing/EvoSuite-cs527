/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 17:06:56 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.MockZone;
import org.joda.time.MutablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicGJChronology_ESTest extends BasicGJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getYearDifference(5097600000L, 15778476000L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getYearDifference(15271875, 5097600000L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getDaysInMonthMaxForSet(5097600000L, 28);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate localDate1 = localDate0.plusMonths(1);
      localDate1.withDayOfMonth(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      yearMonth0.minusMonths(3044);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1248), 1, 19, 1, 19);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.plusMonths(1);
      localDate1.withDayOfMonth(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      julianChronology0.getDayOfMonth(2109, 2109);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.isLeapDay((-1465L));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.setYear(873L, 1375);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3713L, (-7), 3428);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) mockZone0, 1);
      gregorianChronology0.getTotalMillisByYearMonth((-7), 1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getTotalMillisByYearMonth(1155, 6);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getMonthOfYear((-60L), (-224));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      JulianChronology julianChronology0 = new JulianChronology(islamicChronology0, islamicChronology0, 1);
      julianChronology0.getDaysInYearMonth(1, 1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(2024, (-2982));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2983
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        julianChronology0.getDaysInMonthMax((-1319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1320
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1248), 1, (-1248));
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.plusMonths(1);
      localDate1.withDayOfMonth(1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDate localDate0 = new LocalDate(15552000000L);
      gregorianChronology0.set(localDate0, (-60L));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.setYear(128849018880000L, 15271875);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate localDate1 = localDate0.plusMonths(1);
      localDate1.withWeekyear((-856));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1248), (-1248), (-1248), (-1248), 1);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      localDate0.withCenturyOfEra(3600);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getYearDifference(128849018879995L, (-1352L));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getYearDifference(128849018880000L, 128849018880000L);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getYearDifference(9223372036854775806L, 185542587187199984L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getYearDifference(31083597720000L, 0L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getDaysInMonthMaxForSet(183L, (-25));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Duration duration0 = Duration.standardHours((-3879L));
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.isLeapDay(21859200000L);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-20L));
      YearMonth yearMonth1 = yearMonth0.minusMonths(3044);
      yearMonth1.minusMonths(2037);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      yearMonth0.minusMonths(2013);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1L));
      yearMonth0.minusMonths(2037);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(656, (-1425), 6);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      yearMonth0.plusMonths(31);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.isLeapDay(128849018880000L);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1248), (-1248), (-1248), (-1248), 1);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.plusMonths(1);
      LocalDate localDate2 = localDate1.withDayOfMonth(1);
      int[] intArray0 = localDate2.getValues();
      assertArrayEquals(new int[] {(-1356), 7, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1248), 1, 1, 1, 1);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.plusMonths(1);
      LocalDate localDate2 = localDate1.withDayOfMonth(1);
      assertSame(localDate2, localDate1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1248), 1, 1, 1, 1);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.withDayOfMonth(1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(3089);
      YearMonth yearMonth2 = yearMonth1.minusMonths(1);
      assertEquals(9, yearMonth1.getMonthOfYear());
      assertEquals(1756, yearMonth1.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(8, yearMonth2.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-20L));
      YearMonth yearMonth1 = yearMonth0.minusMonths(3044);
      Interval interval0 = yearMonth1.toInterval();
      assertEquals(4, yearMonth1.getMonthOfYear());
      assertEquals((-8005046400000L), interval0.getEndMillis());
      assertEquals(1716, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      int int0 = julianChronology0.getDaysInMonthMax(11);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      JulianChronology julianChronology0 = new JulianChronology(buddhistChronology0, buddhistChronology0, 1);
      // Undeclared exception!
      try { 
        julianChronology0.getDaysInYearMonth(20250000, 20250000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20249999
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }
}
