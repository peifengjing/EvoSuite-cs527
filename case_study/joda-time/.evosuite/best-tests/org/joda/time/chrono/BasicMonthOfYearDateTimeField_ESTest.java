/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:06:05 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.MockPartial;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicMonthOfYearDateTimeField_ESTest extends BasicMonthOfYearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 2140876006);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = basicMonthOfYearDateTimeField0.getLeapAmount(1175378400000L);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-337));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-337), (-337));
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((-1814400000L));
      assertNotNull(monthDay0);
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(11, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 5, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(2147483646, 2147483646);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, object0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = gJMonthOfYearDateTimeField0.add(91L, 2147483646);
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(5479175674368000091L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicMonthOfYearDateTimeField0.add(2158L, (-3L));
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-7775997842L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 23034375);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicMonthOfYearDateTimeField0.set(0L, 4);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 2140876006);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicMonthOfYearDateTimeField0.set((long) 7, 4);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-337));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.roundFloor(678L);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicMonthOfYearDateTimeField0.roundFloor((-1L));
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-1900800000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.remainder(0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJMonthOfYearDateTimeField0.remainder(1);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1900800001L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.addWrapField((long) 0, 0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = basicMonthOfYearDateTimeField0.add((long) 0, (long) 0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add(432000000L, (-2239L));
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertEquals((-5435251200000L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      assertNotNull(mockPartial0);
      
      Chronology chronology0 = mockPartial0.getChronology();
      assertNotNull(chronology0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 0);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(chronology0, integer0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = gJMonthOfYearDateTimeField0.add((long) 0, 0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.set(0L, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, (-804));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.set((-9223372036854775808L), 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(iSOChronology0, iSOChronology0, (IslamicChronology.LeapYearPatternType) null);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.getDifferenceAsLong(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) null, 1, intArray0, (-1420));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = null;
      try {
        basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField((BasicChronology) null, 802);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(18, 1900);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 10);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(1814400001L);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 2140876006);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(10000000L);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(18, 1900);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 10);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = basicMonthOfYearDateTimeField0.set((-42212620800000L), 10);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42189724800000L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(21772800000L, 1L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      MonthDay monthDay0 = new MonthDay((-3101L));
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 0, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-202));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      
      long long0 = basicMonthOfYearDateTimeField0.add((-1047L), (-202));
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals((-531360001047L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      
      long long0 = basicMonthOfYearDateTimeField0.add(1900802342L, (-1));
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals((-777597658L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.add(0L, 1);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      assertEquals(2592000000L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.roundFloor(6292099939305600001L);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      assertEquals(6292099937404800000L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 23034375);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = basicMonthOfYearDateTimeField0.get(31449600000L);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(18, 1900);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 10);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = basicMonthOfYearDateTimeField0.getLeapAmount(1L);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(18, 1900);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 10);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap((-1863L));
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, IslamicChronology.AH);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJMonthOfYearDateTimeField0.addWrapField(0L, (-2695));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(21772800000L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 23034375);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(2592000000L, (-2147483639));
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(1L, 21772800000L);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-8L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.getDifferenceAsLong(2592000000L, 6292099939305602107L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2591999999
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 23034375);
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(23034375, 635L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, (-859), intArray0, (-859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay monthDay1 = monthDay0.minusDays((-2306));
      assertEquals(6, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      MonthDay monthDay0 = new MonthDay(350L, (Chronology) copticChronology0);
      int[] intArray0 = basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 1, (int[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      long long0 = gJMonthOfYearDateTimeField0.add(345600000L, 2592000004L);
      assertEquals(6292099948118400000L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add(1L, 15308640144L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 15308640144
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 1152);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add(1555201152L, (-1783036798848L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -1783036798848
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add(323L, (-7775999999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -7775999999
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      long long0 = gJMonthOfYearDateTimeField0.add(2107L, 2592000000L);
      assertEquals(6292099939305602107L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-9));
      Partial partial0 = new Partial(copticChronology0);
      int[] intArray0 = basicMonthOfYearDateTimeField0.add((ReadablePartial) partial0, 31, (int[]) null, (-9));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      long long0 = gJMonthOfYearDateTimeField0.add(48L, (-2267));
      assertEquals((-5961686399952L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Object object0 = new Object();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1, (-1046));
      IslamicChronology islamicChronology0 = new IslamicChronology(buddhistChronology0, object0, islamicChronology_LeapYearPatternType0);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      YearMonth yearMonth0 = new YearMonth((-292269337L), (Chronology) buddhistChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int[] intArray1 = gJMonthOfYearDateTimeField0.add((ReadablePartial) yearMonth0, 45, intArray0, 1);
      assertArrayEquals(new int[] {1, 12}, intArray1);
      assertEquals(12, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1246);
      long long0 = basicMonthOfYearDateTimeField0.addWrapField((long) 1, (-2615));
      assertEquals((-5183999999L), long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      int int0 = gJMonthOfYearDateTimeField0.getMaximumValue();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      boolean boolean0 = gJMonthOfYearDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      int int0 = gJMonthOfYearDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 23034375);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 623);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.remainder(9223372036854775773L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }
}
