/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:24:54 GMT 2017
 */

package org.joda.time.chrono.gj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.LocalDate;
import org.joda.time.chrono.gj.TestGregorianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestGregorianChronology_ESTest extends TestGregorianChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int[] intArray0 = testGregorianChronology0.isoFromFixed((-485L));
      assertArrayEquals(new int[] {(-1), 35, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int[] intArray0 = testGregorianChronology0.isoFromFixed(1L);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      // Undeclared exception!
      try { 
        testGregorianChronology0.getDateTimeMillis((-929), 3, (-528), 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      long long0 = testGregorianChronology0.millisPerMonth();
      assertEquals(2629746000L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 0, 0);
      boolean boolean0 = testGregorianChronology0.isLeapYear(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 292272992, (-1253));
      int int0 = testGregorianChronology0.gjYearFromFixed(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int int0 = testGregorianChronology0.gjYearFromFixed((-1712L));
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      long long0 = testGregorianChronology0.fixedFromISO(1, 1, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      long long0 = testGregorianChronology0.fixedFromISO(0, (-3308), 0);
      assertEquals((-23520L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      long long0 = testGregorianChronology0.fixedFromGJ(2153, 2779, 3562);
      assertEquals(874522L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      long long0 = testGregorianChronology0.fixedFromGJ(0, 1, (-1610612735));
      assertEquals((-1610613101L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      // Undeclared exception!
      try { 
        testGregorianChronology0.isoFromFixed(1175378400000L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: 3218076758
         //
         verifyException("org.joda.time.chrono.gj.TestGregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      // Undeclared exception!
      try { 
        testGregorianChronology0.gjYearFromFixed(1175378399995L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: 3218076758
         //
         verifyException("org.joda.time.chrono.gj.TestGregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      LocalDate localDate0 = LocalDate.now();
      long long0 = testGregorianChronology0.set(localDate0, 0);
      assertEquals(1392336000000L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int[] intArray0 = testGregorianChronology0.isoFromFixed(86400000L);
      assertArrayEquals(new int[] {236556, 10, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      // Undeclared exception!
      try { 
        testGregorianChronology0.gjFromFixed((-68190940800000L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: -186700454629
         //
         verifyException("org.joda.time.chrono.gj.TestGregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int int0 = testGregorianChronology0.gjYearFromFixed(1461L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int[] intArray0 = testGregorianChronology0.gjFromFixed(0L);
      assertArrayEquals(new int[] {0, 12, 31}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(0, 0, 0);
      boolean boolean0 = testGregorianChronology0.isLeapYear(300);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(2782, 2782, 1401);
      long long0 = testGregorianChronology0.fixedFromISO(1401, 1401, 1401);
      assertEquals(522537L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int[] intArray0 = testGregorianChronology0.gjFromFixed(36524L);
      assertArrayEquals(new int[] {100, 12, 31}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology(2788, 50, 50);
      assertEquals("TestGregorianChronology", testGregorianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      String string0 = testGregorianChronology0.toString();
      assertEquals("TestGregorianChronology", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      int[] intArray0 = testGregorianChronology0.isoFromMillis(268);
      assertArrayEquals(new int[] {1970, 1, 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestGregorianChronology testGregorianChronology0 = new TestGregorianChronology();
      long long0 = testGregorianChronology0.millisPerYear();
      assertEquals(31556952000L, long0);
  }
}
