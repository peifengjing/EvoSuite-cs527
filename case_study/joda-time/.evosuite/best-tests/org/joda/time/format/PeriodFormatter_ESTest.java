/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:30:17 GMT 2017
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.MockZone;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatter_ESTest extends PeriodFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-5));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(50400000L, 50400000L, buddhistChronology0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "4o- BbQR\"^*%/%");
      periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0);
      assertEquals("4o- BbQR\"^*%/%", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, (PeriodType) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("1fhcIO&)_xl#F>wW");
      Duration duration0 = Duration.standardMinutes(0L);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      periodFormatter0.printTo((Writer) mockFileWriter0, (ReadablePeriod) weeks0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0);
      Locale locale0 = Locale.GERMAN;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertNotSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("i_L=V|U<+OL:)u");
      Locale locale0 = Locale.KOREA;
      Period period0 = Period.millis((-274));
      Seconds seconds0 = period0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      String string0 = periodFormatter0.print(seconds0);
      assertEquals("i_L=V|U<+OL:)u", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Y0|Efh[]Zf0";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Y0|Efh[]Zf0", "Y0|Efh[]Zf0", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator1);
      Period period0 = new Period();
      String string0 = periodFormatter0.print(period0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, (Locale) null, periodType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5272L, (Chronology) gregorianChronology0);
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "XxL", (-894));
      assertEquals(893, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "weekOfWeekyear", 266);
      assertEquals((-267), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      PeriodPrinter periodPrinter0 = periodFormatter0.getPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, (Locale) null, periodType0);
      PeriodParser periodParser0 = periodFormatter0.getParser();
      assertSame(periodParser0, periodFormatterBuilder_Literal0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodType periodType0 = periodFormatter0.getParseType();
      assertNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      Locale locale0 = Locale.US;
      PeriodType periodType0 = PeriodType.minutes();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0, locale0, periodType0);
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType1);
      PeriodType periodType2 = periodFormatter1.getParseType();
      assertEquals("MinutesNoMinutes", periodType2.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased((PeriodFormatter) null);
      Locale locale0 = Locale.FRANCE;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, locale0, periodType0);
      Locale locale1 = periodFormatter0.getLocale();
      assertSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Period period0 = Period.months((-1574));
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) period0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0, locale0, periodType0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.field.SkipUndoDateTimeField");
      Period period0 = new Period(3L, 3L, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.ITALY;
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, locale0, periodType0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Yn@-P=vpFpvKgf2");
      Period period0 = Period.ZERO;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = new Locale("Types array must not contain null: index ", "Types array must not contain null: index ");
      PeriodType periodType0 = PeriodType.months();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Period period0 = Period.weeks((-5));
      try { 
        periodFormatter0.printTo((Writer) pipedWriter0, (ReadablePeriod) period0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.print((ReadablePeriod) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("W;G.c]UFJsv*<_[S 9");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.print((ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1969), 1074, 1074, false, 1074, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.ROOT;
      Duration duration0 = Duration.standardMinutes(0L);
      Days days0 = duration0.toStandardDays();
      locale0.getDisplayLanguage();
      Seconds seconds0 = days0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      PeriodType periodType0 = weeks0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("Parsing not supported");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = new PeriodFormatterBuilder.Literal((String) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Y0|Efh[]Zf0";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Y0|Efh[]Zf0", "Y0|Efh[]Zf0", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator1);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("Y0|Efh[]Zf0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Y0|Efh[]Zf0\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("!m,3z:4Cd4+w");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("!m,3z:4Cd4+w");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Y0EfV[]Z0";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Y0EfV[]Z0", "Y0EfV[]Z0", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("Y0EfV[]Z0");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      Locale locale0 = Locale.GERMAN;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(2613L, 2613L);
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto(mutablePeriod0, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Europe/Paris");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto((ReadWritablePeriod) null, "Europe/Paris", 1876);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("~v;");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("~v;");
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.JAPANESE;
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, locale0, periodType0);
      PeriodPrinter periodPrinter0 = periodFormatter0.getPrinter();
      assertSame(periodPrinter0, periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Locale locale0 = periodFormatter0.getLocale();
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("_T$Q~x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"_T$Q~x\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Period period0 = periodFormatter0.parsePeriod("");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("~v");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0);
      Duration duration0 = Duration.millis((-1064L));
      Period period0 = duration0.toPeriod();
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((StringBuffer) null, (ReadablePeriod) period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Locale locale0 = Locale.UK;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      periodFormatter1.withLocale((Locale) null);
      assertNotSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.UK;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, (PeriodParser) null, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertSame(periodFormatter0, periodFormatter1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("W;G.c]UFJsv*<_[S 9");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      boolean boolean0 = periodFormatter0.isParser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("~v;");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, (PeriodParser) null);
      boolean boolean0 = periodFormatter0.isParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      boolean boolean0 = periodFormatter0.isPrinter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5=z(7";
      stringArray0[1] = "5=z(7";
      stringArray0[2] = "5=z(7";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("5=z(7", "5=z(7", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Separator0);
      boolean boolean0 = periodFormatter0.isPrinter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.UK;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, (PeriodParser) null, locale0, periodType0);
      PeriodParser periodParser0 = periodFormatter0.getParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("r:,.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      PeriodType periodType0 = PeriodType.seconds();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      MockZone mockZone0 = new MockZone(0L, 1829, 55);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) mockZone0, 6);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto(mutablePeriod0, "", 55);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.UK;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, (PeriodParser) null, locale0, periodType0);
      PeriodType periodType1 = periodFormatter0.getParseType();
      assertEquals("YearWeekDay", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ITALY;
      PeriodType periodType0 = PeriodType.weeks();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.TestMonthDay_Basics");
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) mockFileWriter0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Europe/Paris");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.CHINESE;
      PeriodType periodType0 = PeriodType.weeks();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, locale0, periodType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(5279L, 5279L, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.print(mutablePeriod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      Locale locale0 = Locale.US;
      PeriodType periodType0 = PeriodType.minutes();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0, locale0, periodType0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      PeriodFormatter periodFormatter1 = new PeriodFormatter(periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0);
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertNotSame(periodFormatter2, periodFormatter1);
  }
}
