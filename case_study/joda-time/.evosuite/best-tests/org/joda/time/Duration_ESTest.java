/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:58:42 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.Seconds;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Duration_ESTest extends Duration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      Duration duration1 = duration0.multipliedBy((-288L));
      assertEquals(7166361600L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardHours(335L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, (-1663));
      assertEquals((-2004372000L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Duration duration1 = duration0.withMillis(86399999);
      assertEquals(86399L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(86400000L);
      Duration duration1 = duration0.withMillis(86400000L);
      assertEquals(86400000L, duration0.getStandardSeconds());
      assertEquals(86400000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded((-1213L), 10125000);
      Duration duration2 = duration1.withDurationAdded((ReadableDuration) duration0, 44);
      assertEquals((-12281625000L), duration2.getMillis());
      assertSame(duration2, duration1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-268L));
      Duration duration1 = duration0.withDurationAdded(3600000L, 60000);
      assertEquals(215983920000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2937L));
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals((-253756800L), duration0.getStandardSeconds());
      assertEquals((-253756800), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = new Duration(1764L, 1764L);
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      Duration duration1 = duration0.dividedBy((-288L));
      Minutes minutes0 = duration1.toStandardMinutes();
      assertEquals(1440, minutes0.getMinutes());
      assertEquals((-414720L), duration0.getStandardMinutes());
      assertEquals((-24883200000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Days days0 = duration0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardHours(335L);
      Days days0 = duration0.toStandardDays();
      assertEquals(13, days0.getDays());
      assertEquals(1206000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      Days days0 = duration0.toStandardDays();
      assertEquals((-288L), duration0.getStandardDays());
      assertEquals((-24883200000L), duration0.getMillis());
      assertEquals((-288), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3011L));
      Duration duration1 = duration0.toDuration();
      assertEquals((-10839600000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-3011L));
      Duration duration1 = duration0.toDuration();
      assertEquals((-3011L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-2140600687));
      assertEquals((-2140600687L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.standardDays(31449600000L);
      Duration duration1 = duration0.plus((ReadableDuration) duration0);
      assertEquals(5434490880000000L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.plus((ReadableDuration) duration0);
      assertEquals((-172800000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.dividedBy((-1L));
      Duration duration2 = duration1.plus(3540L);
      assertEquals(86403540L, duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Duration duration1 = duration0.plus(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.plus((-1L));
      assertEquals((-86400001L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      assertEquals(0L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.parse("PT-24883200S");
      assertEquals((-288L), duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1100);
      Duration duration1 = duration0.negated();
      assertEquals((-3960000000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Duration duration1 = duration0.negated();
      assertEquals(0L, duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.negated();
      assertEquals(86400000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.dividedBy((-1L));
      Duration duration2 = duration1.multipliedBy(1L);
      assertSame(duration2, duration1);
      assertEquals(86400000L, duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1100);
      Duration duration1 = duration0.minus((ReadableDuration) null);
      assertEquals(3960000000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1326L);
      Duration duration1 = duration0.withMillis(618L);
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      assertEquals((-114566399L), duration2.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2028L);
      Duration duration1 = duration0.minus(1920L);
      assertEquals(121678L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1696), (-1342), (-1342), 0);
      Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) null);
      Duration duration1 = duration0.minus((-388L));
      assertEquals((-6187461612L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      Duration duration1 = duration0.ZERO.minus((-288L));
      assertEquals((-24883200000L), duration0.getMillis());
      assertEquals(288L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.millis((-9223372036854775808L));
      assertEquals((-153722867280912L), duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardHours(335L);
      long long0 = duration0.getStandardSeconds();
      assertEquals(1206000000L, duration0.getMillis());
      assertEquals(1206000L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      long long0 = duration0.getStandardMinutes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.standardDays(31449600000L);
      long long0 = duration0.getStandardMinutes();
      assertEquals(45287424000000L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(300L);
      Duration duration1 = duration0.ZERO.multipliedBy(300L);
      duration1.getStandardHours();
      assertEquals(18000000L, duration0.getMillis());
      assertEquals(5L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1696), (-1342), (-1342), 0);
      Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) null);
      long long0 = duration0.getStandardHours();
      assertEquals((-1718L), long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      long long0 = duration0.getStandardDays();
      assertEquals((-86400000L), duration0.getMillis());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      Duration duration1 = duration0.dividedBy((-288L), roundingMode0);
      assertEquals(86400000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(86400000L);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Duration duration1 = duration0.dividedBy((-2000L), roundingMode0);
      assertEquals((-2592000L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Duration duration1 = duration0.dividedBy(1652L, roundingMode0);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Duration duration1 = duration0.dividedBy(1556L);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.dividedBy((-1L));
      long long0 = duration1.getStandardDays();
      assertEquals(86400000L, duration1.getMillis());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Duration duration0 = Duration.standardDays(31449600000L);
      // Undeclared exception!
      try { 
        duration0.withDurationAdded((ReadableDuration) duration0, 322);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 2717245440000000000 * 322
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1115313015000L);
      // Undeclared exception!
      try { 
        duration0.withDurationAdded(1115313015000L, 17887500);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1115313015000 * 17887500
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Duration duration0 = Duration.standardDays(31449600000L);
      // Undeclared exception!
      try { 
        duration0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2717245440000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = Duration.standardDays(10000000000L);
      // Undeclared exception!
      try { 
        duration0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 14400000000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-7166361596425L));
      // Undeclared exception!
      try { 
        duration0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -119439359940
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardSeconds((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardMinutes(10000000000000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 10000000000000000 * 60000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardHours((-12219292800000L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -12219292800000 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardDays((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Duration duration0 = Duration.millis(9999999996L);
      // Undeclared exception!
      try { 
        duration0.multipliedBy(9999999996L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9999999996 * 9999999996
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(86400000L);
      // Undeclared exception!
      try { 
        duration0.minus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.millis((-2417L));
      // Undeclared exception!
      try { 
        duration0.ZERO.dividedBy(250L, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Duration duration0 = null;
      try {
        duration0 = new Duration(mockHijrahDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No duration converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded((-1213L), 10125000);
      long long0 = duration1.getStandardSeconds();
      assertEquals((-12281625L), long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      long long0 = duration0.getStandardSeconds();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = new Duration(duration0);
      assertEquals(0L, duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Duration duration0 = new Duration((-409L));
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-3011L));
      long long0 = duration0.getStandardDays();
      assertEquals((-3011L), duration0.getStandardSeconds());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-3011L));
      long long0 = duration0.getStandardMinutes();
      assertEquals((-3011000L), duration0.getMillis());
      assertEquals((-50L), long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(300L);
      long long0 = duration0.getStandardHours();
      assertEquals(18000000L, duration0.getMillis());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-268L));
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      Duration duration1 = duration0.dividedBy(1L, roundingMode0);
      assertSame(duration1, duration0);
      assertEquals((-16080000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        duration0.dividedBy((-1254L), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.dividedBy(1L);
      assertSame(duration1, duration0);
      assertEquals((-86400000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1000L);
      // Undeclared exception!
      try { 
        duration0.dividedBy(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      Duration duration1 = duration0.multipliedBy(1);
      assertEquals((-24883200000L), duration1.getMillis());
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Duration duration1 = duration0.minus((ReadableDuration) duration0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Duration duration0 = new Duration((-147L), (-147L));
      Duration duration1 = duration0.plus((ReadableDuration) null);
      assertEquals(0L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(300L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(18000000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1100);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, 1100);
      assertEquals(3960000000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded(86400000L, 0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1000L);
      Hours hours0 = duration0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Duration duration1 = days0.toStandardDuration();
      Duration duration2 = duration1.withMillis(0L);
      assertSame(duration2, duration1);
      assertEquals(60000L, duration0.getStandardSeconds());
      assertEquals(16, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Duration duration1 = duration0.withDurationAdded(0L, 1000);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      assertEquals(0L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Duration duration1 = duration0.minus(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals((-414720L), duration0.getStandardMinutes());
      assertEquals((-414720), minutes0.getMinutes());
      assertEquals((-24883200000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Duration duration1 = duration0.withMillis((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration0.minus((ReadableDuration) duration1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-24883200000L));
      // Undeclared exception!
      try { 
        duration0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -24883200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Duration duration0 = Duration.standardDays(31449600000L);
      Duration duration1 = duration0.toDuration();
      assertEquals(45287424000000L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Duration duration0 = null;
      try {
        duration0 = new Duration((-9223372036854775804L), 43200000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 43200000 - -9223372036854775804
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Duration duration0 = Duration.parse("PT86400S");
      assertEquals(24L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-288L));
      Hours hours0 = duration0.toStandardHours();
      assertEquals((-6912), hours0.getHours());
      assertEquals((-24883200000L), duration0.getMillis());
      assertEquals((-6912L), duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1000L);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(60000, seconds0.getSeconds());
      assertEquals(60000L, duration0.getStandardSeconds());
  }
}
