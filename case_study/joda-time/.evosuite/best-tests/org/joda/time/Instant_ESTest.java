/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:11:34 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadableDuration;
import org.joda.time.Weeks;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Instant_ESTest extends Instant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis(797L);
      assertEquals(797L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withMillis(0L);
      Instant instant2 = instant1.withDurationAdded((ReadableDuration) null, 0);
      assertEquals(0L, instant2.getMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis((-13L));
      Instant instant2 = instant1.withDurationAdded(0L, 0);
      assertEquals((-13L), instant2.getMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis(0L);
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTimeISO();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = new Instant((-2916L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals((-2916L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = new Instant((-1921L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals((-1921L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = new Instant(1626L);
      Instant instant1 = instant0.toInstant();
      assertEquals(1626L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = new Instant((-1921L));
      Instant instant1 = instant0.toInstant();
      assertEquals((-1921L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = new Instant(1626L);
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(1626L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = new Instant(10000000000000000L);
      Duration duration0 = Duration.millis(10000000000000000L);
      Duration duration1 = duration0.plus(10000000000000000L);
      Instant instant1 = instant0.minus((ReadableDuration) duration1);
      Instant instant2 = instant1.plus((ReadableDuration) duration0);
      assertEquals(0L, instant2.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = new Instant((-490L));
      Duration duration0 = Duration.standardHours((-490L));
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertEquals((-1764000490L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = new Instant(1322L);
      Instant instant1 = instant0.plus((-1305L));
      assertEquals(17L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.plus((-3196L));
      assertEquals((-3196L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = Instant.parse("1970-01-01T00:00:00.000Z");
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = Instant.parse("2014-02-14T20:21:21.320Z");
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      Instant instant0 = Instant.now();
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis((-67L));
      Instant instant0 = Instant.now();
      assertEquals((-67L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis(0L);
      Instant instant2 = instant1.minus((ReadableDuration) null);
      assertEquals(0L, instant2.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = new Instant(461L);
      Instant instant1 = instant0.minus(461L);
      assertEquals(0L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Instant instant0 = new Instant(1626L);
      Instant instant1 = instant0.minus((long) 7593750);
      assertEquals((-7592124L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Instant instant0 = Instant.now();
      long long0 = instant0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = new Instant((-2599L));
      long long0 = instant0.getMillis();
      assertEquals((-2599L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardDays((-238080000L));
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, (-155));
      // Undeclared exception!
      try { 
        instant0.withDurationAdded((ReadableDuration) duration1, (-155));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 3167797248000000000 * -155
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
      try { 
        instant0.withDurationAdded(1392409282974L, (-86399999));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1392409282974 * -86399999
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(mockNullZoneChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        Instant.parse("gM", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"gM\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("Qx}<Hm[3LM_0vDP3@~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Qx}<Hm[3LM_0vDP3@~\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        instant0.minus((-9223372036854775799L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1392409281320 + 9223372036854775799
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      Instant instant0 = null;
      try {
        instant0 = new Instant(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.ZERO;
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 2145258276);
      assertEquals(1392409281320L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withDurationAdded(2887L, 1);
      assertEquals(1392409284207L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis((-13L));
      DateTime dateTime0 = instant1.toDateTime();
      assertEquals((-13L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      long long0 = instant0.getMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(mockNullZoneChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        Instant.parse("gM", dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Instant instant0 = Instant.parse("3");
      Weeks weeks0 = Weeks.ZERO;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals((-62072524800000L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.withDurationAdded((long) 1, 0);
      assertEquals(0L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.withMillis(0L);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.minus((ReadableDuration) null);
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.minus((-13L));
      assertEquals(1392409281333L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.toInstant();
      assertEquals(0L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Instant instant0 = Instant.parse("3");
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals((-62072524800000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.plus(0L);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.plus((ReadableDuration) null);
      assertSame(instant1, instant0);
  }
}
