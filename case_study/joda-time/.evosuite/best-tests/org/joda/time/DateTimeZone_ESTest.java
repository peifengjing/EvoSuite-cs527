/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 15:39:29 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MockZone;
import org.joda.time.ReadableInstant;
import org.joda.time.TestDateTimeZone;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(861L, false);
      assertEquals(861L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("AET");
      int int0 = testDateTimeZone_MockDateTimeZone0.getOffsetFromLocal(0L);
      assertEquals(0, int0);
      assertEquals("AET", testDateTimeZone_MockDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1160L, 15271875, 15271875);
      boolean boolean0 = mockZone0.isStandardOffset(15271875);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-17), (-59));
      assertEquals("-17:59", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertEquals("+23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 1564);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1564
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, (-17));
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      boolean boolean0 = testDateTimeZone_MockDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("-00:17", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1860));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("-00:00:01.860", dateTimeZone0.toString());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:01.860,offset=-1860,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      String string0 = uTCDateTimeZone0.toString();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      long long0 = uTCDateTimeZone0.previousTransition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1059L, 769, (-1271));
      mockZone0.UTC.previousTransition(355L);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      long long0 = dateTimeZone0.nextTransition(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockZone mockZone0 = new MockZone(168L, (-3026), (-3026));
      mockZone0.UTC.nextTransition(1105L);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-2982L), 0, 10);
      mockZone0.UTC.nextTransition((-446L));
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-563L), 2332, (-659));
      mockZone0.UTC.isFixed();
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-563L), 2332, (-659));
      mockZone0.isFixed();
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      int int0 = uTCDateTimeZone0.getStandardOffset(1435L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1059L, 769, (-1271));
      mockZone0.getStandardOffset(1059L);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-9));
      int int0 = dateTimeZone0.getStandardOffset(10800000L);
      assertEquals("-00:00:00.009", dateTimeZone0.toString());
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      String string0 = testDateTimeZone_MockDateTimeZone0.getShortName((long) 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1096, 1096, 1096);
      mockZone0.getOffset((ReadableInstant) null);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      uTCDateTimeZone0.getOffset((long) 0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2154);
      int int0 = dateTimeZone0.getOffset((-1986846L));
      assertEquals(2154, int0);
      assertEquals("+00:00:02.154", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1096, (-2562), (-2562));
      mockZone0.getOffset((long) (-2564562));
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      testDateTimeZone_MockDateTimeZone0.getNameKey(0);
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      Locale locale0 = Locale.TAIWAN;
      String string0 = testDateTimeZone_MockDateTimeZone0.getName(3181L, locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      String string0 = testDateTimeZone_MockDateTimeZone0.getName(50L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      String string0 = testDateTimeZone_MockDateTimeZone0.getID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = uTCDateTimeZone0.UTC.equals(uTCDateTimeZone0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      MockZone mockZone0 = new MockZone(163L, 0, 0);
      mockZone0.equals(uTCDateTimeZone0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("AET");
      long long0 = testDateTimeZone_MockDateTimeZone0.UTC.convertUTCToLocal(0);
      assertEquals(0L, long0);
      assertEquals("AET", testDateTimeZone_MockDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      long long0 = testDateTimeZone_MockDateTimeZone0.convertUTCToLocal((-245L));
      assertEquals((-245L), long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1042, 1042, 1042);
      long long0 = mockZone0.convertLocalToUTC((long) 1042, true, (long) 1042);
      assertEquals(0L, long0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockZone mockZone0 = new MockZone(467L, 2341, 2147413901);
      long long0 = mockZone0.UTC.adjustOffset(0L, false);
      assertEquals(0L, long0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2501);
      dateTimeZone0.UTC.isStandardOffset(2501);
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone dateTimeZone1 = uTCProvider0.getZone("");
      dateTimeZone1.UTC.convertLocalToUTC(1704L, true, 10800000L);
      dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 0L);
      dateTimeZone0.previousTransition((-201L));
      // Undeclared exception!
      try { 
        DateTimeZone.forID("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'org/joda/time/tz/data' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockZone mockZone0 = new MockZone(10800000L, 2147483645, 2147483645);
      long long0 = mockZone0.convertLocalToUTC(10800000L, true);
      assertEquals((-2136683645L), long0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3040L, 58, (-578));
      // Undeclared exception!
      try { 
        mockZone0.convertLocalToUTC(9223372036854775807L, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1703L, 1022, 1022);
      long long0 = mockZone0.convertLocalToUTC(5491L, false);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(4469L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2154);
      long long0 = dateTimeZone0.convertLocalToUTC(1643L, false, 2296L);
      assertEquals((-511L), long0);
      assertEquals("+00:00:02.154", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1059L, 769, (-1271));
      mockZone0.transition = 10800000L;
      long long0 = mockZone0.convertUTCToLocal(3199L);
      assertEquals(3968L, long0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Locale locale0 = Locale.FRENCH;
      String string0 = uTCDateTimeZone0.getName(0L, locale0);
      assertEquals("Temps universel coordonn\u00E9", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("W$CH?bm");
      String string0 = testDateTimeZone_MockDateTimeZone0.getName((-3332L), (Locale) null);
      assertEquals("W$CH?bm", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      String string0 = uTCDateTimeZone0.getShortName(0L, (Locale) null);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone.getProvider();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2154);
      dateTimeZone0.convertLocalToUTC(1643L, false, 2296L);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      MockZone mockZone0 = new MockZone((-511L), (-1989), (-1989));
      mockZone0.adjustOffset((-1990989L), false);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      mockZone0.nextTransition(2296L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockZone0.getName((long) (-1989));
      DateTimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      uTCDateTimeZone0.getShortName(15551999489L, locale0);
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("C}7p)WkoKWbS[s,'");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '+00:00:02.154' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), (-23));
      assertEquals("-23:23", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-122), 2147413900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -122
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("ZOR");
      testDateTimeZone_MockDateTimeZone0.hashCode();
      assertEquals("ZOR", testDateTimeZone_MockDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1059L, 769, (-1271));
      String string0 = mockZone0.getID();
      assertEquals("MockZone", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(2154);
      MockZone mockZone0 = new MockZone((long) integer0, (-1989), (-1989));
      long long0 = mockZone0.adjustOffset((-1986846L), false);
      assertEquals((-1986846L), long0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(2154);
      MockZone mockZone0 = new MockZone((long) integer0, (-1989), (-1989));
      long long0 = mockZone0.adjustOffset((long) integer0, false);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals((-1986846L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockZone mockZone0 = new MockZone(467L, 2341, 2147413901);
      long long0 = mockZone0.adjustOffset(6219L, true);
      assertEquals(6219L, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockZone mockZone0 = new MockZone(9L, 0, 2121);
      long long0 = mockZone0.adjustOffset(9223372036854775807L, false);
      assertEquals(9223372036854775807L, long0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1096, 1096, 1096);
      long long0 = mockZone0.adjustOffset(1096, false);
      assertEquals(1096L, long0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1085, (-2562), (-2562));
      long long0 = mockZone0.adjustOffset((-2562), true);
      assertEquals(2559438L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-563L), 2332, (-659));
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) mockZone0);
      boolean boolean0 = mockZone0.UTC.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1103, (-2562), (-2562));
      // Undeclared exception!
      try { 
        mockZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-2452L), 0, (-1964));
      // Undeclared exception!
      try { 
        mockZone0.convertLocalToUTC(9223372036854775807L, false, (long) (-1964));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(19);
      dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 2225L);
      assertEquals("+19:00", dateTimeZone0.getID());
      assertEquals("+19:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3040L, 58, (-578));
      // Undeclared exception!
      try { 
        mockZone0.convertLocalToUTC((-9223372036854775784L), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-16T16:47:04.216 (MockZone)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1096, (-2562), (-2562));
      long long0 = mockZone0.convertLocalToUTC((long) (-2562), true);
      assertEquals(0L, long0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("L/N&3Hq5~_q?,");
      Instant instant0 = new Instant();
      testDateTimeZone_MockDateTimeZone0.getOffset((ReadableInstant) instant0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      testDateTimeZone_MockDateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone0, 1000L);
      testDateTimeZone_MockDateTimeZone0.getStandardOffset(1000L);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("L/N&3Hq5~_q?,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'L/N&3Hq5~_q?,' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockZone mockZone0 = new MockZone(9223372036854775807L, (-42), (-2145376204));
      // Undeclared exception!
      try { 
        mockZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-9223372036854197869L), 3577, 3577);
      int int0 = mockZone0.getOffsetFromLocal((-9223372036854197869L));
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(3580577, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone(";c~9.I&*-@:>D");
      int int0 = testDateTimeZone_MockDateTimeZone0.getOffsetFromLocal((-1905L));
      assertEquals(";c~9.I&*-@:>D", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1103, 1103, 1103);
      int int0 = mockZone0.getOffsetFromLocal(61L);
      assertEquals(1103, int0);
      assertEquals("MockZone", mockZone0.getID());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-918L), 45, (-1440515019));
      mockZone0.winterOffset = (-1440515019);
      int int0 = mockZone0.getOffsetFromLocal((-918L));
      assertEquals(1153477437, int0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1042, 1042, 1042);
      int int0 = mockZone0.getOffsetFromLocal(1042);
      assertEquals(1042, int0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1153477353L), 2147483646, 2147483646);
      int int0 = mockZone0.getOffsetFromLocal((-1153477353L));
      assertEquals(2147483646, int0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3040L, 58, (-578));
      int int0 = mockZone0.getOffsetFromLocal(3040L);
      assertEquals((-577942), int0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1160L, 15271875, (-75837680));
      boolean boolean0 = mockZone0.isStandardOffset(3979L);
      assertFalse(boolean0);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1096, (-2562), (-2562));
      mockZone0.getOffset((ReadableInstant) null);
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      Locale locale0 = Locale.KOREAN;
      String string0 = testDateTimeZone_MockDateTimeZone0.getShortName((-2393L), locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = null;
      try {
        testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Id must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(25650000);
      assertEquals("+07:07:30", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      String string0 = dateTimeZone0.UTC.getNameKey(0);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("AGT");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'AGT' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      long long0 = dateTimeZone0.convertUTCToLocal((-796L));
      assertEquals((-796L), long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2147483645
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-1440515019));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -1440515019
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(4, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Positive hours must not have negative minutes: -17
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-18548323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -18548323
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(3577, 3577);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 3577
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-/t?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-/t?\" is malformed at \"/t?\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer(2154);
      MockZone mockZone0 = new MockZone((long) integer0, (-1989), (-1989));
      DateTimeZone.setDefault(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone.LazyInit dateTimeZone_LazyInit0 = new DateTimeZone.LazyInit();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("t&xxj8}GX}}a^$_c");
      DateTimeFormatter dateTimeFormatter0 = DateTimeZone.LazyInit.OFFSET_FORMATTER;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(testDateTimeZone_MockDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDateTime("t&xxj8}GX}}a^$_c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"t&xxj8}GX}}a^$_c\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      String string0 = testDateTimeZone_MockDateTimeZone0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+02:15");
      assertEquals("+02:15", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("org/joda/time/tz/data");
      TimeZone timeZone0 = testDateTimeZone_MockDateTimeZone0.toTimeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-1234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1234
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 59);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      localDateTime0.getYear();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      dateTimeZone0.isStandardOffset(2095L);
      // Undeclared exception!
      try { 
        localDateTime0.getValue(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 59
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      testDateTimeZone_MockDateTimeZone0.writeReplace();
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3040L, 58, (-578));
      String string0 = mockZone0.getShortName(3040L);
      assertEquals("MockZone", string0);
  }
}
