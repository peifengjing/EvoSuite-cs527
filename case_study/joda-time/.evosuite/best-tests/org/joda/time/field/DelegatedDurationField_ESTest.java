/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:26:55 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.TestBaseDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatedDurationField_ESTest extends DelegatedDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getValue(0L, 0L);
      delegatedDurationField0.getDifferenceAsLong((-2149L), (-2149L));
      delegatedDurationField0.getValue((-2149L));
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getValueAsLong(1855L);
      delegatedDurationField0.toString();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getValue(0L);
      delegatedDurationField0.subtract(0L, 0L);
      delegatedDurationField0.toString();
      delegatedDurationField0.getType();
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifferenceAsLong(9223372036854775807L, (-2149));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775807 - -2149
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0, durationFieldType0);
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getValueAsLong(0L, 0L);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifference((-3255L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 9223372036854772553
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("q@gT\"KxE6E-~YduVrnl", "q@gT\"KxE6E-~YduVrnl", "zf (A~C64/M_", "q@gT\"KxE6E-~YduVrnl").when(durationFieldType0).getName();
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 3190);
      testPreciseDateTimeField_MockCountingDurationField0.toString();
      testPreciseDateTimeField_MockCountingDurationField0.getMillis(1709);
      testPreciseDateTimeField_MockCountingDurationField0.unit = 3190;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDateTimeField_MockCountingDurationField0);
      testPreciseDateTimeField_MockCountingDurationField0.toString();
      testPreciseDateTimeField_MockCountingDurationField0.getDifferenceAsLong(3190, 1059L);
      testPreciseDateTimeField_MockCountingDurationField0.compareTo((DurationField) delegatedDurationField0);
      testPreciseDateTimeField_MockCountingDurationField0.getValue((-426L), (long) 3190);
      delegatedDurationField0.hashCode();
      delegatedDurationField0.getUnitMillis();
      delegatedDurationField0.getDifferenceAsLong(0L, (-1L));
      delegatedDurationField0.getValue((long) 0, 3190L);
      delegatedDurationField0.getName();
      delegatedDurationField0.getMillis((long) 3190);
      delegatedDurationField0.compareTo((DurationField) testPreciseDateTimeField_MockCountingDurationField0);
      testPreciseDateTimeField_MockCountingDurationField0.compareTo((DurationField) delegatedDurationField0);
      delegatedDurationField0.getDifference(1705L, 1705L);
      delegatedDurationField0.add(3190L, 3190);
      delegatedDurationField0.isPrecise();
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      testPreciseDateTimeField_MockCountingDurationField0.getValueAsLong((long) 1709);
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType1);
      testPreciseDateTimeField_MockCountingDurationField0.compareTo((DurationField) testPreciseDurationDateTimeField_MockZeroDurationField0);
      delegatedDurationField0.equals(delegatedDurationField0);
      DurationField durationField0 = delegatedDurationField0.getWrappedField();
      // Undeclared exception!
      try { 
        durationField0.getMillis(489L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(durationFieldType0).getName();
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 3190);
      testPreciseDateTimeField_MockCountingDurationField0.getMillis(1709);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDateTimeField_MockCountingDurationField0);
      testPreciseDateTimeField_MockCountingDurationField0.getDifferenceAsLong(3190, 1059L);
      testPreciseDateTimeField_MockCountingDurationField0.compareTo((DurationField) delegatedDurationField0);
      delegatedDurationField0.getUnitMillis();
      delegatedDurationField0.getDifferenceAsLong(0L, 1059L);
      delegatedDurationField0.getValue((long) 0, 3190L);
      delegatedDurationField0.subtract(0L, 0);
      delegatedDurationField0.getName();
      delegatedDurationField0.getMillis((long) 3190);
      delegatedDurationField0.compareTo((DurationField) testPreciseDateTimeField_MockCountingDurationField0);
      testPreciseDateTimeField_MockCountingDurationField0.compareTo((DurationField) delegatedDurationField0);
      delegatedDurationField0.getDifference(1730L, 1000L);
      delegatedDurationField0.add(3190L, 3190);
      delegatedDurationField0.isPrecise();
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      testPreciseDateTimeField_MockCountingDurationField0.getValueAsLong((long) 1709);
      delegatedDurationField0.equals(delegatedDurationField0);
      DurationField durationField0 = delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getMillis(30L);
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getWrappedField();
      // Undeclared exception!
      try { 
        durationField0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDurationDateTimeField.MockImpreciseDurationField testPreciseDurationDateTimeField_MockImpreciseDurationField0 = new TestPreciseDurationDateTimeField.MockImpreciseDurationField(durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("BAP").when(durationFieldType1).getName();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(testPreciseDurationDateTimeField_MockImpreciseDurationField0, durationFieldType1, 85);
      testPreciseDurationDateTimeField_MockImpreciseDurationField0.subtract((long) 85, (long) 85);
      DurationFieldType durationFieldType2 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("BAP", "30", "$<Q|G").when(durationFieldType2).getName();
      scaledDurationField0.toString();
      scaledDurationField0.add((long) 85, (-3706));
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(scaledDurationField0, durationFieldType2);
      decoratedDurationField0.getValue((-1L), (long) (-3346));
      testPreciseDurationDateTimeField_MockImpreciseDurationField0.subtract(0L, (-3346));
      decoratedDurationField0.toString();
      DurationFieldType durationFieldType3 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("", "30", "").when(durationFieldType3).getName();
      doReturn("30", "BAP").when(durationFieldType3).toString();
      scaledDurationField0.getDifferenceAsLong(0L, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(decoratedDurationField0, durationFieldType3);
      delegatedDurationField0.getDifference(0L, (-2434L));
      delegatedDurationField0.getValueAsLong((long) 85, (long) 85);
      delegatedDurationField0.getWrappedField();
      decoratedDurationField0.toString();
      delegatedDurationField0.getMillis(0);
      delegatedDurationField0.getName();
      delegatedDurationField0.toString();
      delegatedDurationField0.getMillis(91L, 0L);
      delegatedDurationField0.getName();
      delegatedDurationField0.toString();
      delegatedDurationField0.getMillis(0, 0L);
      String string0 = delegatedDurationField0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0, durationFieldType0);
      delegatedDurationField0.getMillis((-699L));
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 9223372036854775807
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, (-855));
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationFieldType1).getName();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDateTimeField_MockCountingDurationField0, durationFieldType1);
      delegatedDurationField0.getMillis((long) (-855), 61L);
      delegatedDurationField0.add((long) (-855), 0L);
      delegatedDurationField0.getName();
      // Undeclared exception!
      try { 
        delegatedDurationField0.compareTo((DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 229);
      testPreciseDateTimeField_MockCountingDurationField0.getValue((long) 229);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationFieldType1).toString();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDateTimeField_MockCountingDurationField0, durationFieldType1);
      delegatedDurationField0.toString();
      DurationFieldType durationFieldType2 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestBaseDateTimeField.MockCountingDurationField testBaseDateTimeField_MockCountingDurationField0 = new TestBaseDateTimeField.MockCountingDurationField(durationFieldType2);
      TestBaseDateTimeField.MockCountingDurationField.difference_long = 3681;
      delegatedDurationField0.getValueAsLong(0L, (long) 229);
      boolean boolean0 = delegatedDurationField0.equals(testBaseDateTimeField_MockCountingDurationField0);
      assertFalse(boolean0);
      
      delegatedDurationField0.getValue(1245L, 0L);
      delegatedDurationField0.getDifference((-586L), (-3113L));
      delegatedDurationField0.isPrecise();
      delegatedDurationField0.getMillis(0L, 0L);
      DurationFieldType durationFieldType3 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDurationDateTimeField.MockCountingDurationField testPreciseDurationDateTimeField_MockCountingDurationField0 = new TestPreciseDurationDateTimeField.MockCountingDurationField(durationFieldType3);
      delegatedDurationField0.compareTo((DurationField) testPreciseDurationDateTimeField_MockCountingDurationField0);
      String string0 = delegatedDurationField0.toString();
      assertEquals("DurationField[null]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getValueAsLong((-1972L), (-1068L));
      delegatedDurationField0.getValueAsLong((-837L));
      delegatedDurationField0.getMillis((-44), (-1L));
      DurationFieldType durationFieldType0 = delegatedDurationField0.getType();
      assertEquals("millis", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getValue(0L);
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      long long0 = delegatedDurationField0.getMillis((-813L));
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      delegatedDurationField0.add((-813L), 0);
      testPreciseDurationDateTimeField_MockZeroDurationField0.getMillis(0L);
      boolean boolean0 = delegatedDurationField0.equals(testPreciseDurationDateTimeField_MockZeroDurationField0);
      assertFalse(boolean0);
      
      delegatedDurationField0.isPrecise();
      delegatedDurationField0.compareTo((DurationField) millisDurationField0);
      long long1 = delegatedDurationField0.add((-813L), 0);
      assertTrue(long1 == long0);
      
      delegatedDurationField0.getMillis(0L);
      int int0 = delegatedDurationField0.getValue((-813L), (long) 0);
      assertEquals((-813), int0);
      
      String string0 = delegatedDurationField0.toString();
      assertEquals("DurationField[millis]", string0);
      
      delegatedDurationField0.getType();
      long long2 = delegatedDurationField0.getMillis((-59L), 0L);
      assertEquals((-59L), long2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestBaseDateTimeField.MockCountingDurationField testBaseDateTimeField_MockCountingDurationField0 = new TestBaseDateTimeField.MockCountingDurationField(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testBaseDateTimeField_MockCountingDurationField0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType1, 529L);
      delegatedDurationField0.compareTo((DurationField) preciseDurationField0);
      testBaseDateTimeField_MockCountingDurationField0.subtract(3509L, 3509L);
      delegatedDurationField0.getMillis(1);
      delegatedDurationField0.getValue(2575L, 300L);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(2575L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.add(254L, 419L);
      DurationField durationField0 = delegatedDurationField0.getWrappedField();
      assertEquals(1L, durationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getMillis((-1000));
      delegatedDurationField0.getValueAsLong((-837L));
      delegatedDurationField0.getMillis(0, (-1L));
      delegatedDurationField0.toString();
      DurationFieldType durationFieldType0 = delegatedDurationField0.getType();
      assertEquals("millis", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.toString();
      delegatedDurationField0.toString();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.toString();
      delegatedDurationField0.getValueAsLong(1L, 569L);
      delegatedDurationField0.getType();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getType();
      delegatedDurationField0.toString();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.toString();
      boolean boolean0 = delegatedDurationField0.isSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.getValue(809L);
      assertEquals(809, int0);
      
      long long0 = delegatedDurationField0.getValueAsLong((long) 809);
      long long1 = delegatedDurationField0.getMillis(809, (long) 809);
      assertTrue(long1 == long0);
      assertEquals(809L, long1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0, (DurationFieldType) null);
      delegatedDurationField0.getValue(1740L, (-1L));
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getUnitMillis();
      long long0 = delegatedDurationField0.getMillis((-59L));
      assertEquals((-59L), long0);
      
      boolean boolean0 = delegatedDurationField0.equals((Object) null);
      assertFalse(boolean0);
      
      delegatedDurationField0.isPrecise();
      delegatedDurationField0.isPrecise();
      int int0 = delegatedDurationField0.getValue(2606L, (long) 1740);
      assertEquals(2606, int0);
      
      delegatedDurationField0.add((-1L), (-458));
      delegatedDurationField0.getType();
      long long1 = delegatedDurationField0.add((long) 2606, (-1));
      assertEquals(2605L, long1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getValue(1102L, 1102L);
      DurationField durationField0 = delegatedDurationField0.getWrappedField();
      boolean boolean0 = delegatedDurationField0.isSupported();
      delegatedDurationField0.getType();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.compareTo(durationField0);
      delegatedDurationField0.toString();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.toString();
      delegatedDurationField0.getType();
      boolean boolean1 = delegatedDurationField0.isSupported();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getDifferenceAsLong(208L, 0);
      delegatedDurationField0.getMillis(0, (long) 0);
      DurationFieldType durationFieldType0 = delegatedDurationField0.getType();
      assertEquals("millis", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.add((long) 0, 0);
      long long1 = delegatedDurationField0.getValueAsLong((-837L));
      assertEquals((-837L), long1);
      
      long long2 = delegatedDurationField0.getMillis(0, (-1L));
      assertTrue(long2 == long0);
      assertEquals(0L, long2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDurationField delegatedDurationField0 = null;
      try {
        delegatedDurationField0 = new DelegatedDurationField((DurationField) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDurationDateTimeField_MockZeroDurationField0, durationFieldType1);
      delegatedDurationField0.getMillis(933L);
      delegatedDurationField0.equals(testPreciseDurationDateTimeField_MockZeroDurationField0);
      delegatedDurationField0.getMillis((-18));
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong(955L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDateTimeField.MockZeroDurationField testPreciseDateTimeField_MockZeroDurationField0 = new TestPreciseDateTimeField.MockZeroDurationField(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDateTimeField_MockZeroDurationField0);
      delegatedDurationField0.subtract(0L, 19);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(1116L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestBaseDateTimeField.MockCountingDurationField testBaseDateTimeField_MockCountingDurationField0 = new TestBaseDateTimeField.MockCountingDurationField(durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testBaseDateTimeField_MockCountingDurationField0, durationFieldType1);
      boolean boolean0 = delegatedDurationField0.isPrecise();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationFieldType0).getName();
      doReturn((String) null).when(durationFieldType0).toString();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-211L));
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0);
      preciseDurationField0.toString();
      delegatedDurationField0.add((-211L), 1);
      delegatedDurationField0.getUnitMillis();
      preciseDurationField0.getValue(125L);
      preciseDurationField0.getMillis((-3056L));
      preciseDurationField0.getValueAsLong(0L);
      preciseDurationField0.getMillis((long) 1);
      long long0 = delegatedDurationField0.getMillis((-211L), (-180L));
      assertEquals(44521L, long0);
      
      delegatedDurationField0.compareTo((DurationField) preciseDurationField0);
      preciseDurationField0.subtract((-422L), 0L);
      delegatedDurationField0.isPrecise();
      delegatedDurationField0.getValueAsLong((long) 0);
      int int0 = delegatedDurationField0.getDifference(3268L, 1);
      assertEquals((-15), int0);
      
      long long1 = delegatedDurationField0.subtract(2150L, (-155));
      assertEquals((-30555L), long1);
      
      delegatedDurationField0.add(0L, 0L);
      boolean boolean0 = delegatedDurationField0.equals("X!E8&2]");
      assertFalse(boolean0);
      
      delegatedDurationField0.getType();
      delegatedDurationField0.isPrecise();
      long long2 = delegatedDurationField0.getMillis((-72L));
      assertEquals(15192L, long2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getValueAsLong((-837L));
      assertEquals((-837L), long0);
      
      long long1 = delegatedDurationField0.getMillis(1L, 681L);
      assertEquals(1L, long1);
      
      delegatedDurationField0.compareTo((DurationField) millisDurationField0);
      long long2 = delegatedDurationField0.getMillis(0, (-1L));
      assertEquals(0L, long2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getDifference(9223372036854775807L, 9223372036854775807L);
      long long0 = delegatedDurationField0.getValueAsLong((-837L));
      assertEquals((-837L), long0);
      
      millisDurationField0.getValue(2796L, 9223372036854775807L);
      long long1 = delegatedDurationField0.getMillis(0, (-1L));
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getDifferenceAsLong(0L, 0L);
      millisDurationField0.getValue(0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getMillis(0L);
      long long0 = delegatedDurationField0.getValueAsLong((-832L));
      assertEquals((-832L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(testPreciseDurationDateTimeField_MockZeroDurationField0, durationFieldType1);
      DurationFieldType durationFieldType2 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(decoratedDurationField0, durationFieldType2);
      long long0 = delegatedDurationField0.getUnitMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getValueAsLong((-75L), (-2590L));
      delegatedDurationField0.getValueAsLong(0L, 0L);
      delegatedDurationField0.getValue(0L);
      delegatedDurationField0.getDifferenceAsLong((-604800000L), (-604800000L));
      delegatedDurationField0.compareTo((DurationField) millisDurationField0);
      delegatedDurationField0.getValue((-75L));
      delegatedDurationField0.getDifference(120L, 0L);
      delegatedDurationField0.add((-1512L), 120);
      delegatedDurationField0.getDifferenceAsLong((-75L), 1146L);
      delegatedDurationField0.hashCode();
      delegatedDurationField0.add(0L, 0L);
      delegatedDurationField0.getName();
      delegatedDurationField0.getMillis(120, 0L);
      delegatedDurationField0.getMillis(120);
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getType();
      delegatedDurationField0.hashCode();
      delegatedDurationField0.getValue(0L);
      delegatedDurationField0.hashCode();
      DurationField durationField0 = delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getValueAsLong((-75L), (long) 0);
      delegatedDurationField0.compareTo(durationField0);
      delegatedDurationField0.getUnitMillis();
      delegatedDurationField0.getDifference(0L, (-2180L));
      boolean boolean0 = delegatedDurationField0.isPrecise();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.getValueAsLong((long) 0);
      long long0 = delegatedDurationField0.getMillis(0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(durationFieldType0).getName();
      TestPreciseDurationDateTimeField.MockCountingDurationField testPreciseDurationDateTimeField_MockCountingDurationField0 = new TestPreciseDurationDateTimeField.MockCountingDurationField(durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(durationFieldType1).toString();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDurationDateTimeField_MockCountingDurationField0, durationFieldType1);
      delegatedDurationField0.isSupported();
      DurationFieldType durationFieldType2 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType2, 1006);
      delegatedDurationField0.toString();
      TestPreciseDateTimeField.MockCountingDurationField.add_long = (-4572);
      TestPreciseDateTimeField.MockCountingDurationField.difference_long = 1006;
      delegatedDurationField0.equals(testPreciseDateTimeField_MockCountingDurationField0);
      delegatedDurationField0.toString();
      DurationField durationField0 = delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getWrappedField();
      TestPreciseDurationDateTimeField.MockCountingDurationField.difference_long = (-245);
      delegatedDurationField0.toString();
      DurationFieldType durationFieldType3 = delegatedDurationField0.getType();
      delegatedDurationField0.toString();
      delegatedDurationField0.equals(durationField0);
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getWrappedField();
      delegatedDurationField0.getMillis(1006);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(delegatedDurationField0, durationFieldType3, (-2007));
      scaledDurationField0.subtract((long) 1006, (-2007));
      delegatedDurationField0.equals(scaledDurationField0);
      delegatedDurationField0.getType();
      delegatedDurationField0.isSupported();
      delegatedDurationField0.toString();
      delegatedDurationField0.isSupported();
      DurationField durationField1 = delegatedDurationField0.getWrappedField();
      assertNull(durationField1.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DelegatedDurationField delegatedDurationField0 = null;
      try {
        delegatedDurationField0 = new DelegatedDurationField((DurationField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.hashCode();
      delegatedDurationField0.getValueAsLong(0L, 0L);
      long long0 = delegatedDurationField0.getDifferenceAsLong(0L, 30L);
      assertEquals((-30L), long0);
      
      delegatedDurationField0.getName();
      int int0 = TestBaseDateTimeField.MockCountingDurationField.difference_long;
      long long1 = delegatedDurationField0.add((-30L), (-2752));
      assertEquals((-2782L), long1);
      
      int int1 = delegatedDurationField0.getDifference((-2782L), 30L);
      assertEquals((-2812), int1);
      
      long long2 = delegatedDurationField0.add(0L, (-1L));
      assertEquals((-1L), long2);
      
      int int2 = delegatedDurationField0.getValue((long) 0, (long) (-2812));
      assertEquals(0, int2);
      
      long long3 = delegatedDurationField0.getValueAsLong((long) (-2752));
      long long4 = delegatedDurationField0.getMillis((long) (-2752));
      assertTrue(long4 == long3);
      
      delegatedDurationField0.getMillis((long) 0, 0L);
      delegatedDurationField0.getUnitMillis();
      int int3 = delegatedDurationField0.getValue((-1L));
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationFieldType0).getName();
      doReturn((String) null).when(durationFieldType0).toString();
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 3190);
      testPreciseDateTimeField_MockCountingDurationField0.getMillis(1709);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(testPreciseDateTimeField_MockCountingDurationField0);
      testPreciseDateTimeField_MockCountingDurationField0.toString();
      testPreciseDateTimeField_MockCountingDurationField0.getDifferenceAsLong(3190, 1059L);
      delegatedDurationField0.getName();
      delegatedDurationField0.getMillis((long) 3190);
      delegatedDurationField0.compareTo((DurationField) testPreciseDateTimeField_MockCountingDurationField0);
      testPreciseDateTimeField_MockCountingDurationField0.compareTo((DurationField) delegatedDurationField0);
      delegatedDurationField0.getDifference(1730L, (-426L));
      DelegatedDurationField delegatedDurationField1 = new DelegatedDurationField(delegatedDurationField0);
      delegatedDurationField1.isPrecise();
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      testPreciseDateTimeField_MockCountingDurationField0.getValueAsLong((long) 1709);
      boolean boolean0 = delegatedDurationField0.equals(delegatedDurationField1);
      delegatedDurationField0.getMillis(30L);
      boolean boolean1 = delegatedDurationField0.isSupported();
      assertFalse(boolean1 == boolean0);
  }
}
