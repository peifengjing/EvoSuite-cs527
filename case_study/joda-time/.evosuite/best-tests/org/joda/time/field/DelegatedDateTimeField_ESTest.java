/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:30:28 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.ReadablePartial;
import org.joda.time.field.DelegatedDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatedDateTimeField_ESTest extends DelegatedDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(3046L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(intArray0).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(12).when(dateTimeField0).getMaximumValue();
      doReturn((-1414)).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn((-120L)).when(dateTimeField0).set(anyLong() , anyInt());
      doReturn((-120L)).when(dateTimeField0).set(anyLong() , anyString());
      doReturn(3046L).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("w;Iz").when(dateTimeFieldType0).getName();
      doReturn("w;Iz").when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      delegatedDateTimeField0.set(3046L, "w;Iz", locale0);
      delegatedDateTimeField0.setExtended(21600000L, 987);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("w;Iz").when(dateTimeFieldType1).getName();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType1);
      delegatedDateTimeField2.toString();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField2.getMaximumValue(readablePartial0);
      delegatedDateTimeField2.getMaximumValue();
      delegatedDateTimeField0.set((long) 12, "DateTimeField[w;Iz]");
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[6];
      intArray1[0] = 12;
      intArray1[1] = 987;
      intArray1[2] = 987;
      intArray1[3] = 987;
      intArray1[4] = 12;
      intArray1[5] = 12;
      delegatedDateTimeField2.set(readablePartial1, 12, intArray1, (-596));
      delegatedDateTimeField2.add((long) (-596), (long) (-596));
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.addWrapField(readablePartial2, 0, intArray1, (-567));
      delegatedDateTimeField1.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 973;
      intArray0[1] = (-1);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(durationField0, durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(973).when(dateTimeField0).getMaximumValue();
      doReturn(973).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(0L, (long)(-1)).when(dateTimeField0).roundCeiling(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("XD--4]H=pc/").when(dateTimeFieldType1).getName();
      doReturn("XD--4]H=pc/").when(dateTimeFieldType1).toString();
      delegatedDateTimeField0.getMaximumValue();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.getMaximumValue(readablePartial0);
      delegatedDateTimeField0.getLeapDurationField();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      delegatedDateTimeField2.getLeapDurationField();
      delegatedDateTimeField2.getWrappedField();
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[5];
      intArray1[0] = (-1226);
      intArray1[1] = 973;
      intArray1[2] = 973;
      intArray1[3] = 973;
      intArray1[4] = 973;
      delegatedDateTimeField1.roundCeiling(0L);
      delegatedDateTimeField0.add(readablePartial1, 973, intArray1, (-824));
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.add(readablePartial2, 93, intArray1, 973);
      ReadablePartial readablePartial3 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.add(readablePartial3, (-1226), intArray1, 973);
      delegatedDateTimeField1.roundCeiling(973);
      delegatedDateTimeField1.getWrappedField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      doReturn((String) null, (String) null).when(dateTimeFieldType0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(1).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyString());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField1, (DateTimeFieldType) null);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, (DateTimeFieldType) null);
      delegatedDateTimeField2.getMaximumValue(0L);
      delegatedDateTimeField2.get(1);
      int[] intArray1 = new int[0];
      delegatedDateTimeField0.getDurationField();
      delegatedDateTimeField1.add((ReadablePartial) null, 0, intArray1, 2070);
      delegatedDateTimeField2.toString();
      delegatedDateTimeField0.set(0L, "org.joda.time.field.DelegatedDateTimeField");
      delegatedDateTimeField0.add((-1L), 31449600000L);
      delegatedDateTimeField0.add(713L, 164);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("E ").when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1650L)).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn(3260L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn("").when(dateTimeField0).getAsShortText(anyLong());
      doReturn("").when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn("The field must not be null", "", "The field must not be null").when(dateTimeField0).getAsText(anyLong());
      doReturn("").when(dateTimeField0).getAsText(anyLong() , any(java.util.Locale.class));
      doReturn(3260L, 3260L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn((-3009)).when(dateTimeField0).getMaximumValue();
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn((long)(-3009)).when(dateTimeField0).roundFloor(anyLong());
      doReturn(1029L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(3260L).when(dateTimeField0).roundHalfEven(anyLong());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType2).getName();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType2);
      delegatedDateTimeField0.getDifferenceAsLong((-2760L), (-2760L));
      delegatedDateTimeField2.getDifferenceAsLong(3260L, 3260L);
      delegatedDateTimeField2.roundFloor((-1L));
      delegatedDateTimeField2.getAsShortText(463L);
      delegatedDateTimeField1.getMaximumValue();
      delegatedDateTimeField2.getAsText(1L);
      delegatedDateTimeField1.add((long) (-3009), (-3009));
      Locale locale0 = Locale.JAPAN;
      delegatedDateTimeField2.getAsText((-3009), locale0);
      delegatedDateTimeField1.getAsText((long) (-3009), locale0);
      delegatedDateTimeField0.getAsText(1L);
      delegatedDateTimeField1.roundHalfEven((-2760L));
      delegatedDateTimeField0.getName();
      delegatedDateTimeField2.roundHalfCeiling(259200000L);
      delegatedDateTimeField2.toString();
      delegatedDateTimeField0.getAsText(0L);
      delegatedDateTimeField2.add((-1L), (long) (-3009));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3370;
      intArray0[1] = (-1487);
      intArray0[2] = (-2674);
      intArray0[3] = 979;
      intArray0[4] = 0;
      intArray0[5] = 1425;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("FB2jK,4[M").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ITALIAN;
      delegatedDateTimeField1.getAsShortText(readablePartial0, locale0);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      delegatedDateTimeField2.remainder((-51L));
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[7];
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray0[1] = (-3727);
      intArray1[5] = (-1);
      intArray1[6] = (-1);
      delegatedDateTimeField2.set(readablePartial1, (-1), intArray1, 2252);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 19;
      intArray0[1] = 35;
      intArray0[2] = (-350);
      intArray0[3] = 834;
      intArray0[4] = 50;
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(24, (-1161)).when(dateTimeField0).get(anyLong());
      doReturn("").when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn(834).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(537).when(dateTimeField0).getMaximumShortTextLength(any(java.util.Locale.class));
      doReturn((-350)).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn((-1)).when(dateTimeField0).getMaximumValue();
      doReturn(356).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(50).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-350)).when(dateTimeField0).remainder(anyLong());
      doReturn(5288L, (long)14, 0L).when(dateTimeField0).roundHalfFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType0).getName();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      delegatedDateTimeField2.getMinimumValue();
      delegatedDateTimeField1.getMaximumTextLength((Locale) null);
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) null);
      int[] intArray1 = new int[0];
      delegatedDateTimeField1.getMaximumValue();
      delegatedDateTimeField2.addWrapPartial((ReadablePartial) null, (-335), intArray1, (-2794));
      delegatedDateTimeField1.get((-335));
      delegatedDateTimeField2.isSupported();
      delegatedDateTimeField0.remainder(1207L);
      delegatedDateTimeField0.toString();
      delegatedDateTimeField2.roundHalfFloor(60L);
      delegatedDateTimeField2.roundHalfFloor((-335));
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayVariant((Locale) null);
      delegatedDateTimeField0.getAsText((ReadablePartial) null, 48, locale0);
      delegatedDateTimeField0.getDifference(0L, (-335));
      delegatedDateTimeField1.addWrapField(0L, 48);
      delegatedDateTimeField1.get((-350L));
      delegatedDateTimeField2.getMaximumShortTextLength((Locale) null);
      delegatedDateTimeField0.roundHalfFloor((-869L));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn((-5478)).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(false).when(dateTimeField0).isLeap(anyLong());
      doReturn((long)(-5478)).when(dateTimeField0).remainder(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyString());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("The field must not be null").when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      Locale locale0 = Locale.UK;
      delegatedDateTimeField0.getAsText((ReadablePartial) null, locale0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      delegatedDateTimeField2.getRangeDurationField();
      delegatedDateTimeField2.isLeap((-527L));
      delegatedDateTimeField0.remainder((-527L));
      delegatedDateTimeField1.getMaximumValue(1L);
      delegatedDateTimeField0.set(1023L, (String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeFieldType0).toString();
      int[] intArray0 = new int[6];
      intArray0[0] = 3563;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1678;
      intArray0[5] = 0;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-2522L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, (DateTimeFieldType) null);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, (DateTimeFieldType) null);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      delegatedDateTimeField2.set(readablePartial0, 0, intArray1, ">qaEetv+", locale0);
      delegatedDateTimeField0.set((ReadablePartial) null, 0, intArray1, 0);
      delegatedDateTimeField1.getDifferenceAsLong(0L, 0);
      delegatedDateTimeField0.roundHalfCeiling(0L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn("org.joda.time.chrono.BasicYearDateTimeField").when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn(true).when(dateTimeField0).isLeap(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("|").when(dateTimeFieldType0).getName();
      doReturn("TP@gNe8C3k+/G5*-").when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType1);
      delegatedDateTimeField2.isLeap((-1587L));
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.GERMAN;
      delegatedDateTimeField0.getAsShortText(readablePartial0, (-3712), locale0);
      delegatedDateTimeField2.getWrappedField();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 67;
      intArray0[1] = 157;
      intArray0[2] = 157;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(67).when(dateTimeField0).get(anyLong());
      doReturn("").when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn(157).when(dateTimeField0).getMaximumValue();
      doReturn(false).when(dateTimeField0).isLenient();
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("v3").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField2.get((-1L));
      Locale locale0 = Locale.forLanguageTag("j:X");
      delegatedDateTimeField2.getAsText(readablePartial0, locale0);
      delegatedDateTimeField2.isLenient();
      delegatedDateTimeField1.getMaximumValue();
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[7];
      intArray1[0] = 157;
      intArray1[1] = 0;
      intArray1[2] = 157;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 157;
      intArray1[6] = 67;
      delegatedDateTimeField0.set(readablePartial1, 0, intArray1, (String) null, locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(anyInt() , any(java.util.Locale.class));
      doReturn((String) null).when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isLeap(anyLong());
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(1394L).when(dateTimeField0).roundFloor(anyLong());
      doReturn("").when(dateTimeField0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField1, dateTimeFieldType2);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      delegatedDateTimeField2.getAsShortText(0, locale0);
      delegatedDateTimeField1.roundFloor(4670L);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale1 = Locale.US;
      delegatedDateTimeField1.getAsText(readablePartial0, locale1);
      delegatedDateTimeField2.isLeap(2120L);
      delegatedDateTimeField2.getDurationField();
      delegatedDateTimeField0.getWrappedField();
      delegatedDateTimeField0.isSupported();
      Locale locale2 = Locale.GERMANY;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("").when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn("").when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("", "{-;I+DWhAV-yPp", "O]US&`qqObe:");
      delegatedDateTimeField2.getAsText(readablePartial1, 0, locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      delegatedDateTimeField2.addWrapField(readablePartial0, 0, intArray0, 0);
      Locale locale1 = new Locale("w&ql@");
      delegatedDateTimeField2.getAsText(0, locale1);
      delegatedDateTimeField2.set((-1249L), 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1285);
      intArray0[2] = 1549;
      intArray0[3] = 1267;
      intArray0[4] = (-2290);
      intArray0[5] = 0;
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn((String) null).when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn("yearOfCentury").when(dateTimeField0).getAsShortText(anyLong() , any(java.util.Locale.class));
      doReturn(2312L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(1267).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(1549).when(dateTimeField0).getMaximumShortTextLength(any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isLenient();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "").when(durationField1).toString();
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.getLeapAmount((-1L));
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      delegatedDateTimeField2.isSupported();
      delegatedDateTimeField2.getRangeDurationField();
      delegatedDateTimeField2.getLeapDurationField();
      delegatedDateTimeField2.isLenient();
      Locale locale0 = Locale.FRANCE;
      locale0.getScript();
      delegatedDateTimeField0.getAsShortText((-1L), locale0);
      Locale locale1 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      delegatedDateTimeField1.getMaximumShortTextLength(locale1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.set(readablePartial0, (-205), (int[]) null, "", locale1);
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.getAsShortText(readablePartial1, 0, locale0);
      delegatedDateTimeField0.getDifferenceAsLong(1059L, 1549);
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField1.getMinimumValue(readablePartial2);
      delegatedDateTimeField1.addWrapPartial((ReadablePartial) null, 1549, (int[]) null, (-205));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-375);
      intArray0[2] = (-1554);
      intArray0[3] = 862;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-416);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("").when(dateTimeField0).getAsShortText(anyInt() , any(java.util.Locale.class));
      doReturn((-416)).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn((-1554)).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((-3750)).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn((-281)).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      doReturn(false).when(dateTimeField0).isLenient();
      doReturn(3322L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((long)(-416)).when(dateTimeField0).set(anyLong() , anyInt());
      doReturn(0L, (long)0).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.getAsShortText(16, (Locale) null);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[6];
      intArray1[0] = 16;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = 16;
      delegatedDateTimeField0.addWrapPartial(readablePartial0, 1, intArray1, 1);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      Locale locale0 = Locale.PRC;
      delegatedDateTimeField2.set(4864L, "", locale0);
      locale0.hasExtensions();
      delegatedDateTimeField2.isLenient();
      delegatedDateTimeField2.getDifference(0L, (-1L));
      delegatedDateTimeField1.getDurationField();
      delegatedDateTimeField2.getLeapAmount(0L);
      delegatedDateTimeField2.roundHalfCeiling((-1554));
      delegatedDateTimeField1.getMinimumValue((long) (-1554));
      delegatedDateTimeField0.set(1059L, (-416));
      delegatedDateTimeField2.set(0L, "", locale0);
      delegatedDateTimeField2.getMaximumTextLength((Locale) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-5965);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2530);
      intArray0[4] = (-1442);
      intArray0[3] = (-1406);
      intArray0[6] = 607;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(4429L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((String) null).when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn(2150).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn((-5965)).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(29000L, (long)(-1406)).when(dateTimeField0).roundHalfFloor(anyLong());
      doReturn((String) null).when(dateTimeField0).toString();
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      delegatedDateTimeField2.getMinimumValue(readablePartial0, intArray1);
      delegatedDateTimeField0.roundHalfFloor((-1L));
      delegatedDateTimeField2.roundHalfFloor(0);
      delegatedDateTimeField0.getMinimumValue();
      delegatedDateTimeField0.getLeapAmount((-5965));
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ITALIAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode2);
      delegatedDateTimeField0.getWrappedField();
      delegatedDateTimeField0.addWrapField((long) 1, (-3262));
      delegatedDateTimeField1.getAsText(0, locale0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2774);
      intArray0[1] = 694;
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("=").when(dateTimeField0).getAsShortText(anyInt() , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn((-2774)).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(2077).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn(694).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isLenient();
      doReturn((-1365L)).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-246L)).when(dateTimeField0).set(anyLong() , anyInt());
      doReturn((long)(-2774), 2520L).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.getAsShortText(16, (Locale) null);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[6];
      intArray1[0] = 16;
      intArray1[1] = 2077;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = 16;
      delegatedDateTimeField0.addWrapPartial(readablePartial0, 1, intArray1, 2077);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      Locale locale0 = Locale.PRC;
      delegatedDateTimeField2.set(4864L, "", locale0);
      locale0.hasExtensions();
      delegatedDateTimeField2.isLenient();
      delegatedDateTimeField2.getDifference((-2774L), (-1L));
      delegatedDateTimeField1.getDurationField();
      delegatedDateTimeField2.getLeapAmount(0L);
      delegatedDateTimeField2.roundHalfCeiling((-2774));
      delegatedDateTimeField1.getMinimumValue((long) (-2774));
      delegatedDateTimeField0.set(1059L, 0);
      delegatedDateTimeField2.set(0L, "", locale0);
      delegatedDateTimeField2.getMaximumTextLength((Locale) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(91L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((String) null).when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn((-622)).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      delegatedDateTimeField1.isSupported();
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField3 = new DelegatedDateTimeField(delegatedDateTimeField2, durationField1, dateTimeFieldType2);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1012);
      intArray0[3] = 0;
      intArray0[4] = (-663);
      intArray0[5] = (-1087);
      intArray0[6] = 0;
      delegatedDateTimeField3.getMaximumValue(readablePartial0, intArray0);
      delegatedDateTimeField3.addWrapField(0L, 0);
      Locale locale0 = new Locale("org.joda.time.field.DelegatdDateTimeFeld");
      delegatedDateTimeField1.getAsText((-86), locale0);
      delegatedDateTimeField0.roundHalfCeiling((-802L));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn("F").when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn("F").when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn(0, 60000).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn(60000).when(dateTimeField0).getMinimumValue();
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn((long)60000).when(dateTimeField0).set(anyLong() , anyString());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("!}xuX&N01h|5e/").when(dateTimeFieldType2).getName();
      delegatedDateTimeField1.getDifference(0L, (-1L));
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.parallelStream();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField1.getAsText(readablePartial0, 0, locale0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      delegatedDateTimeField1.getAsText(0, locale0);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      delegatedDateTimeField2.toString();
      delegatedDateTimeField2.getMinimumValue();
      delegatedDateTimeField0.set((long) 0, "r$Sp|!3");
      delegatedDateTimeField0.getDifference((-805L), 0L);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeField0).getAsText(anyLong() , any(java.util.Locale.class));
      doReturn(1217).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(3397L).when(dateTimeField0).remainder(anyLong());
      doReturn((long)1217).when(dateTimeField0).roundCeiling(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("", "ZonedChronology[", "").when(durationField1).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0);
      delegatedDateTimeField0.roundCeiling((-1L));
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("n%UbvSR|q'5T=\"").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      delegatedDateTimeField0.remainder((-1L));
      delegatedDateTimeField1.getLeapDurationField();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      delegatedDateTimeField2.getRangeDurationField();
      delegatedDateTimeField2.getDifference(2195L, 2195L);
      Locale locale0 = Locale.US;
      delegatedDateTimeField1.getAsText(1217L, locale0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2399);
      int[] intArray1 = new int[0];
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(intArray1).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(durationField0).when(dateTimeField0).getRangeDurationField();
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isLenient();
      doReturn((-2770L)).when(dateTimeField0).roundHalfEven(anyLong());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.isLenient();
      int[] intArray2 = new int[0];
      delegatedDateTimeField0.addWrapPartial(readablePartial0, (-345), intArray2, 706);
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray3 = new int[8];
      intArray3[0] = (-345);
      intArray3[1] = (-345);
      intArray3[2] = 706;
      intArray3[3] = 706;
      intArray3[4] = 706;
      intArray3[5] = 706;
      intArray3[6] = 706;
      intArray3[7] = 706;
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.add(readablePartial2, (-2428), intArray2, (-345));
      delegatedDateTimeField0.getRangeDurationField();
      delegatedDateTimeField0.roundHalfEven(706);
      delegatedDateTimeField0.getMaximumValue((-249L));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-934);
      intArray0[1] = 1728;
      intArray0[2] = (-5404);
      intArray0[3] = (-2404);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("").when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn("").when(dateTimeField0).getAsShortText(anyLong() , any(java.util.Locale.class));
      doReturn((long)1728).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(60000).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn((-2404)).when(dateTimeField0).getMaximumShortTextLength(any(java.util.Locale.class));
      doReturn((-5404)).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(false).when(dateTimeField0).isLenient();
      doReturn(false).when(dateTimeField0).isSupported();
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(durationField1).toString();
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.getLeapAmount((-1L));
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      delegatedDateTimeField2.isSupported();
      delegatedDateTimeField2.getRangeDurationField();
      delegatedDateTimeField2.getLeapDurationField();
      delegatedDateTimeField2.isLenient();
      Locale locale0 = Locale.FRANCE;
      locale0.getScript();
      delegatedDateTimeField0.getAsShortText((-1L), locale0);
      Locale locale1 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      delegatedDateTimeField1.getMaximumShortTextLength(locale1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.set(readablePartial0, (-205), (int[]) null, "", locale1);
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.getAsShortText(readablePartial1, 0, locale0);
      delegatedDateTimeField0.getDifferenceAsLong(1059L, (-2404));
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField1.getMinimumValue(readablePartial2);
      delegatedDateTimeField1.addWrapPartial((ReadablePartial) null, (-2404), (int[]) null, (-205));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(dateTimeFieldType0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn("L~8r", (String) null).when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn((-3701)).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class));
      doReturn((-607)).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(false).when(dateTimeField0).isLeap(anyLong());
      doReturn((long)(-3701)).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, (DateTimeFieldType) null);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, (DateTimeFieldType) null);
      delegatedDateTimeField2.getMaximumValue(1309L);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      delegatedDateTimeField1.isLeap(0);
      intArray0[0] = 0;
      intArray0[1] = 0;
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("eT3u+l\">ofMx!GZtNl");
      delegatedDateTimeField0.getAsShortText(readablePartial1, locale0);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      delegatedDateTimeField2.getMinimumValue(readablePartial0, intArray0);
      Locale locale1 = Locale.CANADA;
      locale1.getUnicodeLocaleAttributes();
      delegatedDateTimeField1.set((long) (-607), "", locale1);
      delegatedDateTimeField0.getType();
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField1.getMinimumValue(readablePartial2);
      ReadablePartial readablePartial3 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField1.getMaximumValue(readablePartial3);
      ReadablePartial readablePartial4 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField1.getAsShortText(readablePartial4, locale1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-2267);
      intArray0[3] = (-1885);
      intArray0[4] = 0;
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("").when(dateTimeField0).getAsShortText(anyInt() , any(java.util.Locale.class));
      doReturn((-2267)).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(10).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((-2267)).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isLenient();
      doReturn((-1979L)).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((long)10).when(dateTimeField0).set(anyLong() , anyInt());
      doReturn((-4L), (long)(-2267)).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.getAsShortText(16, (Locale) null);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[6];
      intArray1[0] = 16;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = 16;
      delegatedDateTimeField0.addWrapPartial(readablePartial0, 1, intArray1, 1);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      Locale locale0 = Locale.PRC;
      delegatedDateTimeField2.set(4864L, "", locale0);
      locale0.hasExtensions();
      delegatedDateTimeField2.isLenient();
      delegatedDateTimeField2.getDifference((-4L), (-1L));
      delegatedDateTimeField1.getDurationField();
      delegatedDateTimeField2.getLeapAmount(0L);
      delegatedDateTimeField2.roundHalfCeiling(10);
      delegatedDateTimeField1.getMinimumValue((long) 10);
      delegatedDateTimeField0.set(1059L, (-2267));
      delegatedDateTimeField2.set(0L, "", locale0);
      delegatedDateTimeField2.getMaximumTextLength((Locale) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeFieldType0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn((-1952)).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn((long)(-1952), 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DateTimeFieldType) null);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField1.roundHalfCeiling((-1952));
      delegatedDateTimeField1.getLeapAmount((-6959L));
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField1, (DateTimeFieldType) null);
      delegatedDateTimeField2.roundHalfCeiling((-6959L));
      delegatedDateTimeField2.getDurationField();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("hNg+i)3=B", (-1952L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1952.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dateTimeField0).isLeap(anyLong());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("0rN`,gB@K").when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType1).getName();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      delegatedDateTimeField2.isLeap(0L);
      delegatedDateTimeField2.getName();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1404L)).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(492).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn((-99)).when(dateTimeField0).getMinimumValue();
      doReturn(1L).when(dateTimeField0).roundHalfCeiling(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      delegatedDateTimeField1.getMinimumValue();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-99);
      intArray0[1] = (-99);
      intArray0[2] = (-99);
      intArray0[3] = (-99);
      intArray0[4] = (-1161);
      delegatedDateTimeField2.getMaximumValue(readablePartial0, intArray0);
      delegatedDateTimeField2.addWrapField((-207L), 0);
      delegatedDateTimeField0.roundHalfCeiling((-207L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(5160L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(1082).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn(1082, 1082).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(5160L).when(dateTimeField0).roundHalfCeiling(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("ReadablePartial objects must have matching field types").when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      delegatedDateTimeField1.getMaximumValue(0L);
      delegatedDateTimeField1.getDifferenceAsLong((-647L), (-647L));
      delegatedDateTimeField0.getMaximumValue((-647L));
      delegatedDateTimeField0.roundHalfCeiling(20000L);
      Locale locale0 = Locale.JAPANESE;
      delegatedDateTimeField1.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn("CRQ|Hh(tHTly`P?").when(dateTimeField0).getAsText(anyLong() , any(java.util.Locale.class));
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType2);
      Locale locale0 = new Locale("", "");
      delegatedDateTimeField2.getAsText(1936L, locale0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeFieldType0).toString();
      int[] intArray0 = new int[0];
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(411L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(13737600000L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, (DateTimeFieldType) null);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, (DateTimeFieldType) null);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      Locale locale0 = Locale.JAPANESE;
      delegatedDateTimeField2.set(readablePartial0, 0, intArray1, ">qaEetv+", locale0);
      delegatedDateTimeField0.set((ReadablePartial) null, 0, intArray1, 0);
      delegatedDateTimeField1.getDifferenceAsLong(0L, 0);
      delegatedDateTimeField0.roundHalfCeiling(0L);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn("Subtracting time zone offset caused overflow").when(dateTimeField0).getAsShortText(anyLong() , any(java.util.Locale.class));
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(1958).when(dateTimeField0).getMinimumValue();
      doReturn(0L).when(dateTimeField0).roundCeiling(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      intArray0[0] = (-460);
      intArray0[1] = 93;
      intArray0[2] = (-934);
      delegatedDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      Locale locale0 = Locale.KOREAN;
      delegatedDateTimeField0.getAsShortText((-1164L), locale0);
      delegatedDateTimeField1.getLeapDurationField();
      delegatedDateTimeField0.getMinimumValue();
      delegatedDateTimeField0.roundCeiling(1958);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(23).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn((-1396)).when(dateTimeField0).getMinimumValue();
      doReturn(1754L).when(dateTimeField0).roundHalfCeiling(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      delegatedDateTimeField1.getMinimumValue();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-1396);
      intArray0[1] = (-1396);
      intArray0[2] = (-1396);
      intArray0[3] = (-1396);
      intArray0[4] = (-1161);
      delegatedDateTimeField2.getMaximumValue(readablePartial0, intArray0);
      delegatedDateTimeField2.addWrapField((-207L), 0);
      delegatedDateTimeField0.roundHalfCeiling((-207L));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn((int[]) null).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn((DurationField) null).when(dateTimeField0).getRangeDurationField();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, (DurationField) null, dateTimeFieldType1);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField2.add(readablePartial0, 0, (int[]) null, 0);
      delegatedDateTimeField1.getRangeDurationField();
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField2.addWrapField(readablePartial1, 0, (int[]) null, 0);
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField0.getMinimumValue(readablePartial2, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsText(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn((int[]) null).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      intArray0[0] = 35;
      intArray0[1] = 35;
      intArray0[2] = 492;
      intArray0[3] = 35;
      intArray0[4] = 35;
      intArray0[5] = 35;
      intArray0[6] = 35;
      intArray0[7] = 35;
      intArray0[8] = 35;
      Locale locale0 = Locale.CHINA;
      delegatedDateTimeField1.set(readablePartial0, 35, intArray0, "", locale0);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, (DateTimeFieldType) null);
      delegatedDateTimeField2.getMinimumValue();
      delegatedDateTimeField0.getAsText((long) 0);
      delegatedDateTimeField1.getType();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-1852);
      intArray0[1] = 0;
      intArray0[2] = (-4137);
      intArray0[3] = 0;
      intArray0[4] = 1000;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      delegatedDateTimeField0.add((long) (-4137), (-2600L));
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType2);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField2.getRangeDurationField();
      delegatedDateTimeField2.set(readablePartial0, 2070, (int[]) null, 465);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsText(anyLong() , any(java.util.Locale.class));
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      delegatedDateTimeField2.getAsText(1L, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 1468;
      delegatedDateTimeField2.add(readablePartial0, 0, intArray0, 1468);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn((String) null).when(dateTimeField0).getAsShortText(anyInt() , any(java.util.Locale.class));
      doReturn((String) null).when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      doReturn(0L, 0L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      
      String string0 = delegatedDateTimeField0.getAsShortText(1420, locale1);
      assertNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      
      long long0 = delegatedDateTimeField1.set((long) 1420, 0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertEquals(0L, long0);
      assertNull(delegatedDateTimeField1.getName());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1420;
      int int0 = delegatedDateTimeField1.getMaximumValue(readablePartial0, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 1420}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertEquals(0, int0);
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      int int1 = delegatedDateTimeField2.getMinimumValue();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertTrue(int1 == int0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0, int1);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = Locale.lookupTag(linkedList0, list0);
      assertNull(string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string2 = delegatedDateTimeField0.getAsText(1420, locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNull(string2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int2 = delegatedDateTimeField0.getMaximumValue((long) 0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(0, int2);
      
      long long1 = delegatedDateTimeField1.add((long) 1420, (long) 1420);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertTrue(long1 == long0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long1);
      assertNull(delegatedDateTimeField1.getName());
      
      long long2 = delegatedDateTimeField2.roundCeiling(0L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long2);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      long long3 = delegatedDateTimeField1.roundCeiling(0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      assertTrue(long3 == long2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long3);
      assertNull(delegatedDateTimeField1.getName());
      
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(anyLong());
      doReturn((String) null).when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMinimumValue();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      String string0 = delegatedDateTimeField0.getAsText((ReadablePartial) null, 2765, locale0);
      assertNull(string0);
      assertNull(delegatedDateTimeField0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(dateTimeFieldType1).getName();
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      String string1 = delegatedDateTimeField2.getAsShortText((long) 2765);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(string1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      int int0 = delegatedDateTimeField2.getMinimumValue();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(0, int0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      String string2 = delegatedDateTimeField2.toString();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(string2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("DateTimeField[null]", string2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      String string3 = delegatedDateTimeField1.toString();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals("DateTimeField[null]", string3);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      String string4 = delegatedDateTimeField1.toString();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals("DateTimeField[null]", string4);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(false).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DurationField durationField0 = delegatedDateTimeField0.getDurationField();
      assertNull(durationField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).getName();
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      boolean boolean0 = delegatedDateTimeField2.isSupported();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertFalse(boolean0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      DateTimeField dateTimeField1 = delegatedDateTimeField2.getWrappedField();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(dateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(dateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(dateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, dateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertSame(delegatedDateTimeField1, dateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, dateTimeField1);
      assertNotSame(dateTimeField1, delegatedDateTimeField2);
      assertSame(dateTimeField1, delegatedDateTimeField1);
      assertNotSame(dateTimeField1, delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      assertNull(dateTimeField1.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DateTimeFieldType) null);
      assertNotNull(delegatedDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, (DateTimeFieldType) null);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      
      DurationField durationField1 = delegatedDateTimeField2.getLeapDurationField();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNull(durationField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("ReadablePartial objects must have matching field types", "ReadablePartial objects must have matching field types", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("readablepartial objects must have matching field types", locale0.getLanguage());
      assertEquals("readablepartial objects must have matching field types_READABLEPARTIAL OBJECTS MUST HAVE MATCHING FIELD TYPES", locale0.toString());
      assertEquals("READABLEPARTIAL OBJECTS MUST HAVE MATCHING FIELD TYPES", locale0.getCountry());
      
      String string0 = delegatedDateTimeField2.getAsShortText(readablePartial0, 0, locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("readablepartial objects must have matching field types", locale0.getLanguage());
      assertEquals("readablepartial objects must have matching field types_READABLEPARTIAL OBJECTS MUST HAVE MATCHING FIELD TYPES", locale0.toString());
      assertEquals("READABLEPARTIAL OBJECTS MUST HAVE MATCHING FIELD TYPES", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int[] intArray1 = delegatedDateTimeField2.addWrapPartial(readablePartial0, 0, intArray0, 59);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNull(intArray1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).getName();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      String string0 = delegatedDateTimeField2.getName();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      int int0 = delegatedDateTimeField2.getLeapAmount(0L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(0, int0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(0).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, (DateTimeFieldType) null);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, (DateTimeFieldType) null);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      
      int int0 = delegatedDateTimeField2.getMaximumValue(1309L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(0, int0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("eT3u+l\">ofMx!GZtNl");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("et3u+l\">ofmx!gztnl", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("et3u+l\">ofmx!gztnl", locale0.toString());
      
      String string0 = delegatedDateTimeField0.getAsShortText(readablePartial1, locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals("", locale0.getCountry());
      assertEquals("et3u+l\">ofmx!gztnl", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("et3u+l\">ofmx!gztnl", locale0.toString());
      
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int1 = delegatedDateTimeField2.getMinimumValue(readablePartial0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(0, int1);
      
      Locale locale1 = Locale.CANADA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      long long0 = delegatedDateTimeField1.set((long) 0, "", locale1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(locale1, locale0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      
      DateTimeFieldType dateTimeFieldType0 = delegatedDateTimeField0.getType();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNull(dateTimeFieldType0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = delegatedDateTimeField1.getMinimumValue(readablePartial2);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, (DateTimeFieldType) null);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = delegatedDateTimeField2.getAsShortText(readablePartial0, locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeField dateTimeField1 = delegatedDateTimeField2.getWrappedField();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(dateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(dateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotNull(dateTimeField1);
      assertNotSame(delegatedDateTimeField0, dateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertSame(delegatedDateTimeField1, dateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, dateTimeField1);
      assertSame(dateTimeField1, delegatedDateTimeField1);
      assertNotSame(dateTimeField1, delegatedDateTimeField0);
      assertNotSame(dateTimeField1, delegatedDateTimeField2);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      assertNull(dateTimeField1.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      doReturn(0L).when(dateTimeField0).roundFloor(anyLong());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, (DurationField) null, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long0 = delegatedDateTimeField2.roundFloor(0L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertEquals(0L, long0);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0L).when(dateTimeField0).roundCeiling(anyLong());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).getName();
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long0 = delegatedDateTimeField2.addWrapField(4156L, 1855);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertEquals(0L, long0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long1 = delegatedDateTimeField2.roundCeiling(0L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertTrue(long1 == long0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertEquals(0L, long1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      String string0 = delegatedDateTimeField2.toString();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertEquals("DateTimeField[null]", string0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn(0L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = delegatedDateTimeField2.getMaximumTextLength(locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(0, int0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      long long0 = delegatedDateTimeField0.remainder((-9223372036854775808L));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(0L, long0);
      assertNull(delegatedDateTimeField0.getName());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale1 = new Locale("", "", "");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      
      String string0 = locale0.getDisplayScript(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      
      String string1 = delegatedDateTimeField0.getAsText(152, locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(locale0, locale1);
      assertNull(delegatedDateTimeField0.getName());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      long long1 = delegatedDateTimeField0.getDifferenceAsLong(104767008L, 0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertTrue(long1 == long0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(0L, long1);
      assertNull(delegatedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, (DurationField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = (-253);
      int int0 = delegatedDateTimeField2.getMinimumValue(readablePartial0, intArray0);
      assertArrayEquals(new int[] {(-253)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(0, int0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      doReturn((int[]) null).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      doReturn((String) null).when(dateTimeField0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      int[] intArray1 = delegatedDateTimeField0.set(readablePartial0, 0, intArray0, "cQP'~1C)|_z J]", locale0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNull(intArray1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      int int0 = delegatedDateTimeField0.getMinimumValue(0L);
      assertEquals(0, int0);
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField1 = delegatedDateTimeField0.getWrappedField();
      assertNotNull(dateTimeField1);
      assertSame(dateTimeField1, dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, (DurationField) null, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = delegatedDateTimeField2.addWrapField(readablePartial0, 0, (int[]) null, 1764);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(intArray0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = delegatedDateTimeField2.getAsText(readablePartial0, 0, locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      doReturn((int[]) null).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = delegatedDateTimeField2.set(readablePartial0, 2070, (int[]) null, 465);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(intArray0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(anyInt() , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      String string0 = delegatedDateTimeField0.getAsShortText(1715, locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      long long0 = delegatedDateTimeField1.set((-999L), 0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertEquals(0L, long0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      DateTimeField dateTimeField1 = delegatedDateTimeField2.getWrappedField();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(dateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(dateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotNull(dateTimeField1);
      assertNotSame(delegatedDateTimeField0, dateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertSame(delegatedDateTimeField1, dateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, dateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertSame(dateTimeField1, delegatedDateTimeField1);
      assertNotSame(dateTimeField1, delegatedDateTimeField0);
      assertNotSame(dateTimeField1, delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      assertNull(dateTimeField1.getName());
      
      int int0 = delegatedDateTimeField1.getMaximumValue((-767L));
      assertFalse(delegatedDateTimeField0.equals((Object)dateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, dateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertSame(delegatedDateTimeField1, dateTimeField1);
      assertEquals(0, int0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(anyLong() , any(java.util.Locale.class));
      doReturn((String) null).when(dateTimeField0).getAsText(anyLong());
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, (DateTimeFieldType) null);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int0 = delegatedDateTimeField0.getMaximumValue(readablePartial0, (int[]) null);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals(0, int0);
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, (DateTimeFieldType) null);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      String string0 = delegatedDateTimeField2.getAsShortText((-393L), locale0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      String string1 = delegatedDateTimeField2.getAsText((-2042L));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNull(string1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsShortText(anyLong() , any(java.util.Locale.class));
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      String string0 = delegatedDateTimeField1.getAsShortText(1000L, (Locale) null);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, (DurationField) null, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long0 = delegatedDateTimeField2.remainder(1682L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertEquals(0L, long0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2005;
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(123L).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn(2005).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(2005).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(0L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn("", "").when(dateTimeField0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int0 = delegatedDateTimeField0.getMinimumValue(readablePartial0);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals(2005, int0);
      assertNull(delegatedDateTimeField0.getName());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType2);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long0 = delegatedDateTimeField2.add((-2873L), 1868);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(123L, long0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      DateTimeField dateTimeField1 = delegatedDateTimeField0.getWrappedField();
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNotNull(dateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertSame(dateTimeField1, dateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = delegatedDateTimeField2.add(readablePartial1, 2005, intArray1, 2005);
      assertArrayEquals(new int[] {2005}, intArray2);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      DateTimeField dateTimeField2 = delegatedDateTimeField0.getWrappedField();
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNotNull(dateTimeField2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(dateTimeField2, dateTimeField0);
      assertSame(dateTimeField2, dateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 2005;
      intArray3[1] = 2005;
      intArray3[2] = 2005;
      intArray3[3] = 2005;
      intArray3[4] = 2005;
      intArray3[5] = 1868;
      int int1 = delegatedDateTimeField0.getMinimumValue(readablePartial2, intArray3);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertArrayEquals(new int[] {2005, 2005, 2005, 2005, 2005, 1868}, intArray3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertTrue(int1 == int0);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals(2005, int1);
      assertNull(delegatedDateTimeField0.getName());
      
      long long1 = delegatedDateTimeField0.roundCeiling(1868);
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(long1 == long0);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals(0L, long1);
      assertNull(delegatedDateTimeField0.getName());
      
      String string0 = delegatedDateTimeField0.toString();
      assertArrayEquals(new int[] {2005}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNotNull(string0);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals("DateTimeField[null]", string0);
      assertNull(delegatedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-934);
      intArray0[1] = 1728;
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("C*oNG>Nx!sUoFp57uQm", "*5-NB", "C*oNG>Nx!sUoFp57uQm").when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("").when(dateTimeField0).getAsShortText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn("").when(dateTimeField0).getAsShortText(anyLong() , any(java.util.Locale.class));
      doReturn((long)1728).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(60000).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumShortTextLength(any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMinimumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(false).when(dateTimeField0).isLenient();
      doReturn(false).when(dateTimeField0).isSupported();
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyString() , any(java.util.Locale.class));
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(durationField1).toString();
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = delegatedDateTimeField0.getLeapAmount((-1L));
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertEquals(60000, int0);
      assertNull(delegatedDateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      boolean boolean0 = delegatedDateTimeField2.isSupported();
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertFalse(boolean0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      DurationField durationField2 = delegatedDateTimeField2.getRangeDurationField();
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(durationField2.equals((Object)durationField0));
      assertNotNull(durationField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertSame(durationField2, durationField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      DurationField durationField3 = delegatedDateTimeField2.getLeapDurationField();
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(durationField3.equals((Object)durationField1));
      assertFalse(durationField3.equals((Object)durationField2));
      assertNotNull(durationField3);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertSame(durationField3, durationField0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      boolean boolean1 = delegatedDateTimeField2.isLenient();
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertFalse(boolean1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      String string1 = delegatedDateTimeField0.getAsShortText((-1L), locale0);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNotNull(string1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals("", string1);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNull(delegatedDateTimeField0.getName());
      
      Locale locale1 = Locale.CHINA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(list0);
      assertNotSame(locale0, locale1);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      int int1 = delegatedDateTimeField1.getMaximumShortTextLength(locale1);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(int1 == int0);
      assertNotSame(locale1, locale0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0, int1);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = delegatedDateTimeField0.set(readablePartial0, (-205), (int[]) null, "", locale1);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertNotSame(locale1, locale0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertSame(intArray1, intArray0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertNull(delegatedDateTimeField0.getName());
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      String string2 = delegatedDateTimeField0.getAsShortText(readablePartial1, 0, locale0);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(intArray0, intArray1);
      assertNotSame(locale0, locale1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals("", string2);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNull(delegatedDateTimeField0.getName());
      
      long long0 = delegatedDateTimeField0.getDifferenceAsLong(1059L, 0);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertSame(intArray0, intArray1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertEquals(1728L, long0);
      assertNull(delegatedDateTimeField0.getName());
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = delegatedDateTimeField1.getMinimumValue(readablePartial2);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertSame(intArray0, intArray1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0, int2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      int[] intArray2 = delegatedDateTimeField1.addWrapPartial((ReadablePartial) null, 0, (int[]) null, (-205));
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-934), 1728, 0, 0}, intArray2);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotNull(intArray2);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 2307;
      intArray0[3] = 60000;
      intArray0[4] = (-1632);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("", "DateTimeField[", "").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("DateTimeField[").when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn("DateTimeField[").when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(0).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn((-741L)).when(dateTimeField0).roundFloor(anyLong());
      doReturn((-741L)).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((long)60000).when(dateTimeField0).set(anyLong() , anyInt());
      doReturn(1290L).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("DateTimeField[", "DateTimeField[").when(dateTimeFieldType0).getName();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertNotNull(delegatedDateTimeField0);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long0 = delegatedDateTimeField2.roundFloor((-2958L));
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals((-741L), long0);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long1 = delegatedDateTimeField1.roundHalfCeiling((-741L));
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertTrue(long1 == long0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals((-741L), long1);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale0 = Locale.lookup(linkedList0, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = delegatedDateTimeField2.getAsText(readablePartial0, (Locale) null);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("DateTimeField[", string0);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      long long2 = delegatedDateTimeField0.set((-741L), (-3705));
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(60000L, long2);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      
      String string1 = delegatedDateTimeField0.toString();
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotNull(string1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals("DateTimeField[DateTimeField[]", string1);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      
      String string2 = delegatedDateTimeField0.getName();
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotNull(string2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals("DateTimeField[", string2);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      
      long long3 = delegatedDateTimeField1.set((-71L), "DateTimeField[", (Locale) null);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(1290L, long3);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DurationField durationField2 = delegatedDateTimeField2.getDurationField();
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(durationField2.equals((Object)durationField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
      
      int int0 = delegatedDateTimeField0.getMaximumTextLength((Locale) null);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(0, int0);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      
      String string3 = delegatedDateTimeField0.getAsText(14, (Locale) null);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals("DateTimeField[", string3);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 14;
      intArray1[3] = 14;
      int[] intArray2 = delegatedDateTimeField2.add(readablePartial1, (-3705), intArray1, 14);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 2307, 60000, (-1632)}, intArray2);
      assertArrayEquals(new int[] {0, 0, 14, 14}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(intArray2);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("DateTimeField[", delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      assertNull(delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn((long)(-3009)).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn("").when(dateTimeField0).getAsShortText(anyLong());
      doReturn("").when(dateTimeField0).getAsText(anyInt() , any(java.util.Locale.class));
      doReturn("The field must not be null", "", "2A").when(dateTimeField0).getAsText(anyLong());
      doReturn("").when(dateTimeField0).getAsText(anyLong() , any(java.util.Locale.class));
      doReturn(3260L, 3260L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn((-3009)).when(dateTimeField0).getMaximumValue();
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn((long)(-3009)).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(3260L).when(dateTimeField0).roundHalfEven(anyLong());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      assertEquals("", delegatedDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("The field must not be null").when(dateTimeFieldType1).getName();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("The field must not be null").when(dateTimeFieldType2).getName();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType2);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(delegatedDateTimeField2);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      
      long long0 = delegatedDateTimeField0.getDifferenceAsLong((-2760L), (-2760L));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(3260L, long0);
      assertEquals("", delegatedDateTimeField0.getName());
      
      long long1 = delegatedDateTimeField2.getDifferenceAsLong(104767008L, 104767008L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertTrue(long1 == long0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(3260L, long1);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      
      long long2 = delegatedDateTimeField2.roundFloor((-1L));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals((-3009L), long2);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      
      String string0 = delegatedDateTimeField2.getAsShortText(463L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(string0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("", string0);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      
      int int0 = delegatedDateTimeField1.getMaximumValue();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals((-3009), int0);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      
      String string1 = delegatedDateTimeField2.getAsText(1L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("The field must not be null", string1);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      
      long long3 = delegatedDateTimeField1.add((long) (-3009), (-3009));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long3);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string2 = delegatedDateTimeField2.getAsText((-3009), locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(string2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("", string2);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string3 = delegatedDateTimeField1.getAsText(104767008L, locale0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotNull(string3);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals("", string3);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string4 = delegatedDateTimeField0.getAsText(1L);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotNull(string4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals("", string4);
      assertEquals("", delegatedDateTimeField0.getName());
      
      long long4 = delegatedDateTimeField1.roundHalfEven((-2760L));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(long4 == long2);
      assertTrue(long4 == long0);
      assertTrue(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(3260L, long4);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      
      String string5 = delegatedDateTimeField0.getName();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals("", string5);
      assertEquals("", delegatedDateTimeField0.getName());
      
      long long5 = delegatedDateTimeField2.roundHalfCeiling(259200000L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals(0L, long5);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      
      String string6 = delegatedDateTimeField1.toString();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals("DateTimeField[The field must not be null]", string6);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      
      String string7 = delegatedDateTimeField2.toString();
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertNotNull(string7);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals("DateTimeField[The field must not be null]", string7);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
      
      String string8 = delegatedDateTimeField0.getAsText(0L);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals("2A", string8);
      assertEquals("", delegatedDateTimeField0.getName());
      
      long long6 = delegatedDateTimeField2.add((-1L), (long) (-3009));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(long6 == long5);
      assertTrue(long6 == long2);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      assertFalse(long6 == long1);
      assertFalse(long6 == long3);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertEquals((-3009L), long6);
      assertEquals("", delegatedDateTimeField0.getName());
      assertEquals("The field must not be null", delegatedDateTimeField1.getName());
      assertEquals("The field must not be null", delegatedDateTimeField2.getName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-3714);
      intArray0[3] = 9;
      intArray0[4] = 2801;
      intArray0[5] = 2010;
      intArray0[6] = (-674);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).add(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn((long)2010).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(2003).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(9).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(durationField0).when(dateTimeField0).getRangeDurationField();
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isLenient();
      doReturn(0L, 1845L).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn((long)(-3714)).when(dateTimeField0).set(anyLong() , anyString());
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertNotNull(delegatedDateTimeField0);
      assertNull(delegatedDateTimeField0.getName());
      
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField1, dateTimeFieldType1);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField1);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertNotNull(delegatedDateTimeField2);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = delegatedDateTimeField0.isLenient();
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertTrue(boolean0);
      assertNull(delegatedDateTimeField0.getName());
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = delegatedDateTimeField0.addWrapPartial(readablePartial0, (-345), intArray1, 706);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      
      long long0 = delegatedDateTimeField2.roundHalfEven((-2022L));
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long0);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-345);
      intArray3[1] = (-345);
      intArray3[2] = 706;
      intArray3[3] = 706;
      intArray3[4] = 706;
      intArray3[5] = 706;
      intArray3[6] = 706;
      intArray3[7] = 706;
      int int0 = delegatedDateTimeField1.getMaximumValue(readablePartial1, intArray3);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertArrayEquals(new int[] {(-345), (-345), 706, 706, 706, 706, 706, 706}, intArray3);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(2003, int0);
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray4 = delegatedDateTimeField0.add(readablePartial2, (-2428), intArray1, (-345));
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray4);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotNull(intArray4);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray4);
      assertNotSame(intArray4, intArray1);
      assertSame(intArray4, intArray2);
      assertSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      
      long long1 = delegatedDateTimeField2.addWrapField(1L, 93);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long1 == long0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(2010L, long1);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      long long2 = delegatedDateTimeField2.add(0L, 1L);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long2);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      long long3 = delegatedDateTimeField2.set(0L, (String) null);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField2.equals((Object)delegatedDateTimeField0));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField0));
      assertFalse(delegatedDateTimeField1.equals((Object)delegatedDateTimeField2));
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField2, delegatedDateTimeField0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField0);
      assertNotSame(delegatedDateTimeField1, delegatedDateTimeField2);
      assertEquals(0L, long3);
      assertNull(delegatedDateTimeField2.getName());
      assertNull(delegatedDateTimeField0.getName());
      assertNull(delegatedDateTimeField1.getName());
      
      DurationField durationField2 = delegatedDateTimeField0.getRangeDurationField();
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(durationField2.equals((Object)durationField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotNull(durationField2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray4);
      assertSame(durationField2, durationField0);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertNull(delegatedDateTimeField0.getName());
      
      long long4 = delegatedDateTimeField0.roundHalfEven(706);
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(1845L, long4);
      assertNull(delegatedDateTimeField0.getName());
      
      int int1 = delegatedDateTimeField0.getMaximumValue((-249L));
      assertArrayEquals(new int[] {0, 1, (-3714), 9, 2801, 2010, (-674)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField1));
      assertFalse(delegatedDateTimeField0.equals((Object)delegatedDateTimeField2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray4);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField1);
      assertNotSame(delegatedDateTimeField0, delegatedDateTimeField2);
      assertEquals(9, int1);
      assertNull(delegatedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2005;
      intArray0[3] = 0;
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(1503L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(intArray0).when(dateTimeField0).addWrapPartial(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(2005, 0).when(dateTimeField0).get(anyLong());
      doReturn("lArQ-ca;Bd0_").when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , anyInt() , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumShortTextLength(any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMaximumTextLength(any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0, 2005).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(false).when(dateTimeField0).isSupported();
      doReturn((-1L)).when(dateTimeField0).remainder(anyLong());
      doReturn(0L, (long)0, 951L).when(dateTimeField0).roundHalfFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("lArQ-ca;Bd0_").when(dateTimeFieldType0).getName();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("lArQ-ca;Bd0_").when(dateTimeFieldType1).toString();
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, dateTimeFieldType1);
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1);
      delegatedDateTimeField2.getMinimumValue();
      delegatedDateTimeField1.getMaximumTextLength((Locale) null);
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) null);
      int[] intArray1 = new int[0];
      delegatedDateTimeField1.getMaximumValue();
      delegatedDateTimeField2.addWrapPartial((ReadablePartial) null, (-505), intArray1, (-2794));
      delegatedDateTimeField1.get((-505));
      delegatedDateTimeField2.isSupported();
      delegatedDateTimeField0.remainder(1207L);
      delegatedDateTimeField0.toString();
      long long0 = delegatedDateTimeField2.roundHalfFloor((-1L));
      delegatedDateTimeField2.roundHalfFloor((-505));
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayVariant((Locale) null);
      delegatedDateTimeField0.getAsText((ReadablePartial) null, 48, locale0);
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) null);
      delegatedDateTimeField0.getDifference(0L, (-505));
      delegatedDateTimeField1.addWrapField(0L, 48);
      delegatedDateTimeField1.get((-1L));
      delegatedDateTimeField2.getMaximumShortTextLength((Locale) null);
      long long1 = delegatedDateTimeField0.roundHalfFloor((-869L));
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[0];
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(3046L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(12).when(dateTimeField0).getMaximumValue();
      doReturn((-1414)).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(intArray0).when(dateTimeField0).set(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn((-120L)).when(dateTimeField0).set(anyLong() , anyInt());
      doReturn((-120L)).when(dateTimeField0).set(anyLong() , anyString());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("w;Iz").when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      long long0 = delegatedDateTimeField0.setExtended(21600000L, 987);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("w;Iz").when(dateTimeFieldType1).getName();
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, durationField0, dateTimeFieldType1);
      delegatedDateTimeField2.toString();
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      delegatedDateTimeField2.getMaximumValue(readablePartial0);
      delegatedDateTimeField2.getMaximumValue();
      delegatedDateTimeField0.set((long) 12, "DateTimeField[w;Iz]");
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[6];
      intArray1[0] = 12;
      intArray1[1] = 987;
      intArray1[2] = 987;
      intArray1[3] = 987;
      intArray1[4] = 12;
      intArray1[5] = 12;
      delegatedDateTimeField2.set(readablePartial1, 12, intArray1, (-596));
      long long1 = delegatedDateTimeField2.add((long) (-596), (long) (-596));
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1830);
      intArray0[1] = (-1092);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1377;
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn("The field must not be null").when(dateTimeField0).getAsShortText(anyInt() , any(java.util.Locale.class));
      doReturn("The field must not be null").when(dateTimeField0).getAsShortText(anyLong());
      doReturn(0).when(dateTimeField0).getMaximumShortTextLength(any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isSupported();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType1);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType2);
      Locale locale0 = Locale.JAPANESE;
      delegatedDateTimeField2.getAsShortText(3600000L);
      delegatedDateTimeField2.getMaximumShortTextLength(locale0);
      delegatedDateTimeField2.isSupported();
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getDisplayName();
      delegatedDateTimeField2.getAsShortText((-2312), locale1);
      delegatedDateTimeField2.getMinimumValue((long) (-2312));
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-3545);
      intArray1[3] = (-2312);
      int[] intArray2 = delegatedDateTimeField0.addWrapField(readablePartial0, 0, intArray1, 849);
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeField0).getAsText(any(org.joda.time.ReadablePartial.class) , any(java.util.Locale.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(false).when(dateTimeField0).isLeap(anyLong());
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyString());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(durationField0).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DelegatedDateTimeField delegatedDateTimeField1 = new DelegatedDateTimeField(delegatedDateTimeField0);
      Locale locale0 = Locale.UK;
      delegatedDateTimeField0.getAsText((ReadablePartial) null, locale0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DelegatedDateTimeField delegatedDateTimeField2 = new DelegatedDateTimeField(delegatedDateTimeField1, dateTimeFieldType1);
      delegatedDateTimeField2.getRangeDurationField();
      delegatedDateTimeField2.isLeap((-527L));
      delegatedDateTimeField0.remainder((-527L));
      delegatedDateTimeField1.getMaximumValue(1L);
      long long0 = delegatedDateTimeField0.set(1023L, (String) null);
      assertEquals(0L, long0);
  }
}
