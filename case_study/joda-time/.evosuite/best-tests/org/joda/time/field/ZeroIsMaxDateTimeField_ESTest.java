/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:32:48 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.ReadablePartial;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZeroIsMaxDateTimeField_ESTest extends ZeroIsMaxDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2437L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(intArray0).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn((DurationField) null, (DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)724).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray1);
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      
      DurationField durationField1 = zeroIsMaxDateTimeField0.getDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNull(durationField1);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long4 == long2);
      assertTrue(long4 == long1);
      assertTrue(long4 == long3);
      assertTrue(long4 == long0);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray2 = zeroIsMaxDateTimeField0.addWrapField(readablePartial2, 19, intArray1, 1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      int int3 = zeroIsMaxDateTimeField0.getDifference(1560L, 0L);
      assertEquals(0, int3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      long long5 = zeroIsMaxDateTimeField0.add((long) 1, 1274L);
      assertEquals(2437L, long5);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long4);
      assertFalse(long5 == long2);
      
      long long6 = zeroIsMaxDateTimeField0.roundFloor(1560L);
      assertEquals(724L, long6);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long6 == long1);
      assertFalse(long6 == long0);
      assertFalse(long6 == long2);
      assertFalse(long6 == long5);
      assertFalse(long6 == long3);
      assertFalse(long6 == long4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-2122)).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn((long)(-2122)).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn((-706L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(">y+D;T6c]ezw", "S[6yMmJ=").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(string0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-676L), 57120L);
      assertEquals((-706L), long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long1 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.add((long) 1, 22);
      assertEquals((-2122L), long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.addWrapField(0L, 33);
      assertEquals((-2122L), long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long4 == long0);
      assertTrue(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(0L, 2024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2024 for >y+D;T6c]ezw must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-2122)).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn(20000L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn((-706L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-2122)).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(">y+D;T6c]ezw", "S[6yMmJ=").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(string0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-676L), 57120L);
      assertEquals((-706L), long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertFalse(long1 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      long long2 = zeroIsMaxDateTimeField0.roundFloor((-2122));
      assertEquals((-2122L), long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertFalse(long3 == long2);
      assertTrue(long3 == long0);
      assertFalse(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.add((long) 1, 22);
      assertEquals((-2122L), long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      
      long long5 = zeroIsMaxDateTimeField0.addWrapField(0L, 33);
      assertEquals(20000L, long5);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("S[6yMmJ=", zeroIsMaxDateTimeField0.getName());
      assertFalse(long5 == long2);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long4);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(0L, 2024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2024 for >y+D;T6c]ezw must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-1)).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn((long)(-1)).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(1L).when(dateTimeField0).roundHalfFloor(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long3 == long2);
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long4 == long0);
      assertTrue(long4 == long1);
      assertTrue(long4 == long3);
      assertTrue(long4 == long2);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      long long5 = zeroIsMaxDateTimeField0.roundHalfFloor(573L);
      assertEquals(1L, long5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(long5 == long2);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long6 = zeroIsMaxDateTimeField0.add(1541L, 0);
      assertEquals((-1L), long6);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(long6 == long5);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertFalse(long6 == long3);
      assertFalse(long6 == long1);
      assertFalse(long6 == long0);
      
      long long7 = zeroIsMaxDateTimeField0.add(3380L, (-4786L));
      assertEquals((-1L), long7);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(long7 == long5);
      assertFalse(long7 == long2);
      assertFalse(long7 == long4);
      assertTrue(long7 == long6);
      assertFalse(long7 == long0);
      assertFalse(long7 == long1);
      assertFalse(long7 == long3);
      
      long long8 = zeroIsMaxDateTimeField0.roundCeiling(0L);
      assertEquals((-1L), long8);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long8 == long6);
      assertFalse(long8 == long0);
      assertFalse(long8 == long1);
      assertFalse(long8 == long5);
      assertFalse(long8 == long4);
      assertTrue(long8 == long7);
      assertFalse(long8 == long2);
      assertFalse(long8 == long3);
      
      int int3 = zeroIsMaxDateTimeField0.getMinimumValue(0L);
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn((-639L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn((-3778)).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-666L)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.roundCeiling((-639L));
      assertEquals((-666L), long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-641L), 57120L);
      assertEquals((-639L), long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertTrue(long3 == long0);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int5 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial1);
      assertEquals((-3777), int5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(83L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, (-1), 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-1428L)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("", "vdG*u.|").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      assertTrue(long3 == long2);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long4 == long0);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertTrue(long4 == long2);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long5 = zeroIsMaxDateTimeField0.add(3380L, (-4786L));
      assertEquals(83L, long5);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      
      int int3 = zeroIsMaxDateTimeField0.get(0L);
      assertEquals(0, int3);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      long long6 = zeroIsMaxDateTimeField0.roundCeiling(0L);
      assertEquals((-1428L), long6);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long6 == long2);
      assertFalse(long6 == long1);
      assertFalse(long6 == long3);
      assertFalse(long6 == long5);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(0L);
      assertEquals(1, int4);
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((-1218L), (-577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -577 for  must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(dateTimeField0).get(anyLong());
      doReturn(15).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn((long)(-2122)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("uv", "uv", (String) null).when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("uv", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      String string0 = zeroIsMaxDateTimeField0.toString();
      assertEquals("DateTimeField[null]", string0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(string0);
      
      String string1 = zeroIsMaxDateTimeField0.getAsText((long) 0);
      assertEquals("1", string1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string2 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-641L), 57120L);
      assertEquals((-2122L), long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(long1 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      
      int int5 = zeroIsMaxDateTimeField0.getDifference((-1813L), 1);
      assertEquals(15, int5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(0L, 2024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2024 for uv must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((-1)).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-226L)).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfEven(3777L);
      assertEquals((-226L), long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      long long4 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long4 == long1);
      assertTrue(long4 == long0);
      assertFalse(long4 == long3);
      assertTrue(long4 == long2);
      
      long long5 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long5);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long5 == long0);
      assertTrue(long5 == long2);
      assertFalse(long5 == long3);
      assertTrue(long5 == long4);
      assertTrue(long5 == long1);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getDifference(37230040L, (-1132L));
      assertEquals((-1), int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-226L)).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfEven(3777L);
      assertEquals((-226L), long3);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      
      long long4 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long4);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long4 == long2);
      assertTrue(long4 == long0);
      assertFalse(long4 == long3);
      assertTrue(long4 == long1);
      
      long long5 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long5);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long5 == long1);
      assertTrue(long5 == long4);
      assertFalse(long5 == long3);
      assertTrue(long5 == long2);
      assertTrue(long5 == long0);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getDifference(37230040L, (-1132L));
      assertEquals(0, int2);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 295;
      intArray0[1] = (-252);
      intArray0[2] = 1;
      intArray0[3] = 1971;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn((-1720L)).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L, 0L, (long)1971).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      long long0 = zeroIsMaxDateTimeField0.remainder(0L);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = zeroIsMaxDateTimeField0.addWrapField(readablePartial1, 0, intArray1, 0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray1);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long1 == long0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNull(durationField0);
      
      long long2 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      
      long long4 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long4 == long3);
      assertTrue(long4 == long0);
      assertTrue(long4 == long1);
      assertTrue(long4 == long2);
      
      long long5 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long5 == long1);
      assertTrue(long5 == long3);
      assertTrue(long5 == long0);
      assertTrue(long5 == long4);
      assertTrue(long5 == long2);
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial2);
      assertEquals(1, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long6 = zeroIsMaxDateTimeField0.roundHalfCeiling(0);
      assertEquals(1971L, long6);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long6 == long3);
      assertFalse(long6 == long5);
      assertFalse(long6 == long4);
      assertFalse(long6 == long0);
      assertFalse(long6 == long2);
      assertFalse(long6 == long1);
      
      long long7 = zeroIsMaxDateTimeField0.roundFloor(0L);
      assertEquals((-1720L), long7);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1971, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long7 == long0);
      assertFalse(long7 == long5);
      assertFalse(long7 == long1);
      assertFalse(long7 == long3);
      assertFalse(long7 == long6);
      assertFalse(long7 == long4);
      assertFalse(long7 == long2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4674;
      intArray0[1] = 4250;
      intArray0[2] = (-3215);
      intArray0[3] = 2005;
      intArray0[4] = (-1000);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 24;
      intArray0[8] = (-820);
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L, 0L, (long)(-1)).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray2 = zeroIsMaxDateTimeField0.addWrapField(readablePartial1, 0, intArray1, 0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray2);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray1);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial2);
      assertEquals(1, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long5 = zeroIsMaxDateTimeField0.roundHalfCeiling(0);
      assertEquals((-1L), long5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long3);
      assertFalse(long5 == long1);
      
      long long6 = zeroIsMaxDateTimeField0.roundFloor(0L);
      assertEquals(0L, long6);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4674, 4250, (-3215), 2005, (-1000), (-1), (-1), 24, (-820)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long6 == long3);
      assertTrue(long6 == long4);
      assertTrue(long6 == long2);
      assertTrue(long6 == long0);
      assertFalse(long6 == long5);
      assertTrue(long6 == long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 295;
      intArray0[1] = (-252);
      intArray0[2] = 1;
      intArray0[3] = 1951;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)1).when(dateTimeField0).remainder(anyLong());
      doReturn((-1720L)).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      long long0 = zeroIsMaxDateTimeField0.remainder(0L);
      assertEquals(1L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = zeroIsMaxDateTimeField0.addWrapField(readablePartial1, 0, intArray1, 0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray1);
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long1 == long0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNull(durationField0);
      
      long long2 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long4 == long1);
      assertFalse(long4 == long0);
      assertTrue(long4 == long3);
      assertTrue(long4 == long2);
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial2);
      assertEquals(1, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      long long5 = zeroIsMaxDateTimeField0.roundHalfCeiling(0);
      assertEquals(0L, long5);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(long5 == long2);
      assertTrue(long5 == long1);
      assertTrue(long5 == long4);
      assertFalse(long5 == long0);
      assertTrue(long5 == long3);
      
      long long6 = zeroIsMaxDateTimeField0.roundFloor(0L);
      assertEquals((-1720L), long6);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertArrayEquals(new int[] {295, (-252), 1, 1951, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(long6 == long1);
      assertFalse(long6 == long2);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      assertFalse(long6 == long3);
      assertFalse(long6 == long5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(6000L).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn((-706L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      
      String string0 = locale0.getUnicodeLocaleType("40");
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(string0);
      
      String string1 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(string1);
      
      long long1 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-641L), 57120L);
      assertEquals((-706L), long1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long1 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int4);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long2);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.add((long) 1, 22);
      assertEquals(6000L, long3);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(83L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((-1)).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, (-1)).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-1428L)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("", "vdG*u.|").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertTrue(long4 == long2);
      assertTrue(long4 == long0);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      long long5 = zeroIsMaxDateTimeField0.add(3380L, (-4786L));
      assertEquals(83L, long5);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long5 == long4);
      assertFalse(long5 == long2);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertFalse(long5 == long1);
      
      int int3 = zeroIsMaxDateTimeField0.get(0L);
      assertEquals((-1), int3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      long long6 = zeroIsMaxDateTimeField0.roundCeiling(0L);
      assertEquals((-1428L), long6);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long6 == long0);
      assertFalse(long6 == long1);
      assertFalse(long6 == long3);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertFalse(long6 == long5);
      
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(0L);
      assertEquals(1, int4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((-1218L), (-577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -577 for  must be in the range [1,0]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(dateTimeField0).get(anyLong());
      doReturn((-3272L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn((-2122)).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("jE", "jE").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsShortText((-241), locale0);
      assertEquals("-241", string0);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(string0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = zeroIsMaxDateTimeField0.getAsShortText((-3684L));
      assertEquals("1", string1);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = zeroIsMaxDateTimeField0.getAsText(177L, locale1);
      assertEquals("1", string2);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-641L), 57120L);
      assertEquals((-3272L), long1);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(long1 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int4 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial1, intArray0);
      assertEquals((-2121), int4);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      int int5 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int5);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long2);
      assertEquals("jE", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(0L, 2024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2024 for jE must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 5).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-226L), 0);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long1 == long0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertEquals("", string0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string0);
      
      String string1 = zeroIsMaxDateTimeField0.getAsText(0L, locale0);
      assertEquals("1", string1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertSame(locale0, locale1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long3 == long2);
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long4 == long1);
      assertTrue(long4 == long3);
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn(91L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isLeap(anyLong());
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-641L), 57120L);
      assertEquals(91L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long1 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      boolean boolean0 = zeroIsMaxDateTimeField0.isLeap(926L);
      assertTrue(boolean0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int5 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1, intArray0);
      assertEquals(1, int5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int6 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial2);
      assertEquals(1, int6);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn((-639L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(89L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("kPR", "kPR").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertNotNull(string0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.roundCeiling((-639L));
      assertEquals(89L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertFalse(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-641L), 57120L);
      assertEquals((-639L), long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int4 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertEquals(1, int4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {(-2122), (-2122), 0, 1, 1}, intArray0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("kPR", zeroIsMaxDateTimeField0.getName());
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertTrue(long3 == long0);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(0L, 2024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2024 for kPR must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-226L)).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn((-1)).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long3 == long2);
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(0L);
      assertEquals((-1), int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int3 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      long long5 = zeroIsMaxDateTimeField0.add((-333L), (-1714L));
      assertEquals((-226L), long5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(1).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-1064L)).when(dateTimeField0).roundHalfFloor(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long3 == long1);
      assertTrue(long3 == long2);
      assertTrue(long3 == long0);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long4 == long2);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertTrue(long4 == long0);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("zh-CN", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(string0);
      
      String string1 = zeroIsMaxDateTimeField0.getAsShortText((long) 1, locale0);
      assertEquals("1", string1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long5 = zeroIsMaxDateTimeField0.roundHalfFloor((-1854L));
      assertEquals((-1064L), long5);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(1);
      assertEquals(0, int2);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = zeroIsMaxDateTimeField0.get((-1813L));
      assertEquals(1, int3);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      assertEquals(0L, long0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      assertEquals("1", string0);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string0);
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.roundHalfEven(0L);
      assertEquals(0L, long1);
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.add(713L, (-4337));
      assertEquals(0L, long0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      assertTrue(long3 == long2);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long4 == long3);
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      assertTrue(long4 == long1);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long5 = zeroIsMaxDateTimeField0.roundFloor(1);
      assertEquals(0L, long5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long5 == long1);
      assertTrue(long5 == long4);
      assertTrue(long5 == long0);
      assertTrue(long5 == long2);
      assertTrue(long5 == long3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(long4 == long0);
      assertTrue(long4 == long3);
      assertTrue(long4 == long2);
      assertTrue(long4 == long1);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = zeroIsMaxDateTimeField0.getMinimumValue();
      assertEquals(1, int3);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long3 == long2);
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.set((-1132L), 1);
      assertEquals(0L, long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long4 == long3);
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      assertTrue(long4 == long1);
      
      int int2 = zeroIsMaxDateTimeField0.getLeapAmount(0L);
      assertEquals(0, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int3 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      long long5 = zeroIsMaxDateTimeField0.add((-333L), (-1714L));
      assertEquals(0L, long5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long5 == long0);
      assertTrue(long5 == long2);
      assertTrue(long5 == long1);
      assertTrue(long5 == long4);
      assertTrue(long5 == long3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn(0L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfFloor(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayName(locale1);
      assertEquals("\u82F1\u6587", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      
      String string1 = zeroIsMaxDateTimeField0.getAsShortText(readablePartial0, 0, locale0);
      assertEquals("0", string1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(3899L);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-59L), 1);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 1);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long1 == long0);
      
      int int2 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      long long2 = zeroIsMaxDateTimeField0.remainder(2731L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.roundCeiling(3516L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      
      long long4 = zeroIsMaxDateTimeField0.roundHalfFloor(0L);
      assertEquals(0L, long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.remainder(909L);
      assertEquals(0L, long0);
      assertNull(zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dateTimeField1).isSupported();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField1 = null;
      try {
        zeroIsMaxDateTimeField1 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must be supported
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-20)).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn((long)(-20)).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-20)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-16L)).when(dateTimeField0).roundHalfFloor(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("", "vdG*u.|").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, int0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, int1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int1 == int0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      assertEquals(0L, long0);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNull(durationField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long1);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long1 == long0);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      assertEquals(0L, long2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      assertEquals(0L, long3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      long long4 = zeroIsMaxDateTimeField0.roundHalfFloor(573L);
      assertEquals((-16L), long4);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      
      int int2 = zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      assertEquals(1, int2);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      long long5 = zeroIsMaxDateTimeField0.add(1538L, 0);
      assertEquals((-20L), long5);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(long5 == long3);
      assertFalse(long5 == long4);
      
      long long6 = zeroIsMaxDateTimeField0.add(3380L, (-4786L));
      assertEquals((-20L), long6);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long6 == long2);
      assertFalse(long6 == long3);
      assertTrue(long6 == long5);
      assertFalse(long6 == long1);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      
      long long7 = zeroIsMaxDateTimeField0.roundCeiling(0L);
      assertEquals((-20L), long7);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(long7 == long2);
      assertFalse(long7 == long3);
      assertFalse(long7 == long4);
      assertFalse(long7 == long0);
      assertTrue(long7 == long6);
      assertFalse(long7 == long1);
      assertTrue(long7 == long5);
      
      int int3 = zeroIsMaxDateTimeField0.getMinimumValue(0L);
      assertEquals(1, int3);
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("vdG*u.|", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((-1218L), (-577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -577 for  must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = (-226L);
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2437L).when(dateTimeField0).add(anyLong() , anyLong());
      doReturn((int[]) null).when(dateTimeField0).addWrapField(any(org.joda.time.ReadablePartial.class) , anyInt() , any(int[].class) , anyInt());
      doReturn(0L, 0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0).when(dateTimeField0).getDifference(anyLong() , anyLong());
      doReturn((DurationField) null, (DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class) , any(int[].class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)724).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      zeroIsMaxDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      zeroIsMaxDateTimeField0.addWrapField((-1L), 0);
      zeroIsMaxDateTimeField0.getDurationField();
      zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      zeroIsMaxDateTimeField0.roundHalfCeiling(1274L);
      zeroIsMaxDateTimeField0.roundHalfCeiling(499L);
      zeroIsMaxDateTimeField0.getDurationField();
      zeroIsMaxDateTimeField0.set((-1132L), 1);
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1);
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      zeroIsMaxDateTimeField0.addWrapField(readablePartial2, 19, intArray0, 1);
      zeroIsMaxDateTimeField0.getDifference(1560L, 0L);
      zeroIsMaxDateTimeField0.add((long) 1, 1274L);
      int int0 = 1300;
      zeroIsMaxDateTimeField0.roundFloor(1560L);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(2437L, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for  is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-2122)).when(dateTimeField0).add(anyLong() , anyInt());
      doReturn(0L).when(dateTimeField0).addWrapField(anyLong() , anyInt());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn((-706L)).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(any(org.joda.time.ReadablePartial.class));
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-2122)).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(">y+D;T6c]ezw", "S[6yMmJ=").when(dateTimeFieldType0).getName();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMaximumValue();
      zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      zeroIsMaxDateTimeField0.getLeapAmount(1);
      zeroIsMaxDateTimeField0.get((-1813L));
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      Locale locale0 = Locale.CHINESE;
      zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      zeroIsMaxDateTimeField0.getDifferenceAsLong((-676L), 57120L);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      zeroIsMaxDateTimeField0.roundFloor((-2122));
      zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      zeroIsMaxDateTimeField0.roundHalfEven(0L);
      zeroIsMaxDateTimeField0.add((long) 1, 22);
      zeroIsMaxDateTimeField0.addWrapField(0L, 33);
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      zeroIsMaxDateTimeField0.getMaximumValue(readablePartial1);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(0L, 2024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2024 for >y+D;T6c]ezw must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn(91L).when(dateTimeField0).getDifferenceAsLong(anyLong() , anyLong());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(false).when(dateTimeField0).isLeap(anyLong());
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-2122)).when(dateTimeField0).remainder(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMaximumValue();
      zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      zeroIsMaxDateTimeField0.getLeapAmount(1);
      zeroIsMaxDateTimeField0.get((-1813L));
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      Locale locale0 = Locale.CHINESE;
      zeroIsMaxDateTimeField0.getAsText(177L, locale0);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      long long0 = zeroIsMaxDateTimeField0.getDifferenceAsLong((-641L), 57120L);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = (-2122);
      intArray0[1] = (-2122);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      zeroIsMaxDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      zeroIsMaxDateTimeField0.roundHalfEven(0L);
      zeroIsMaxDateTimeField0.isLeap(926L);
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      zeroIsMaxDateTimeField0.getMinimumValue(readablePartial1, intArray0);
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      zeroIsMaxDateTimeField0.getMinimumValue(readablePartial2);
      long long1 = zeroIsMaxDateTimeField0.remainder(0L);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2512;
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2512).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }
}
