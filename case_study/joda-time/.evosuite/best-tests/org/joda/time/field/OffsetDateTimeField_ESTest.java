/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:21:13 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.ReadablePartial;
import org.joda.time.field.OffsetDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OffsetDateTimeField_ESTest extends OffsetDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn((-3930), (-2539)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isLenient();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L, 0L).when(dateTimeField0).roundFloor(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 3492);
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertEquals(953, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      boolean boolean0 = offsetDateTimeField0.isLenient();
      assertTrue(boolean0);
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertEquals(953, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      
      long long0 = offsetDateTimeField0.roundFloor(2175L);
      assertEquals(0L, long0);
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertEquals(953, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = Locale.lookupTag(linkedList0, set0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(string0);
      
      DurationField durationField1 = offsetDateTimeField0.getLeapDurationField();
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertEquals(953, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(durationField1);
      assertSame(durationField1, durationField0);
      
      long long1 = offsetDateTimeField0.roundFloor((-4097));
      assertEquals(0L, long1);
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertEquals(953, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertTrue(long1 == long0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(3492, int0);
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertEquals(953, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(durationField0).add(anyLong() , anyInt());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(175, 0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(12).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(12).when(dateTimeField0).getMaximumValue();
      doReturn(12, (-1542)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(424L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 23, 23, 23);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 23);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      long long0 = offsetDateTimeField1.addWrapField((long) 23, 23);
      assertEquals(424L, long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      intArray0[0] = (-1542);
      intArray0[1] = 23;
      intArray0[2] = 23;
      int int0 = offsetDateTimeField1.getMinimumValue(readablePartial0, intArray0);
      assertEquals((-1496), int0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertArrayEquals(new int[] {(-1542), 23, 23}, intArray0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, 23);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(69, offsetDateTimeField2.getMaximumValue());
      assertEquals((-1473), offsetDateTimeField2.getMinimumValue());
      assertEquals(23, offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(offsetDateTimeField2, (-591));
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(69, offsetDateTimeField2.getMaximumValue());
      assertEquals((-1473), offsetDateTimeField2.getMinimumValue());
      assertEquals(23, offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals((-591), offsetDateTimeField3.getOffset());
      assertEquals((-522), offsetDateTimeField3.getMaximumValue());
      assertEquals((-2064), offsetDateTimeField3.getMinimumValue());
      assertNull(offsetDateTimeField3.getName());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      
      int int1 = offsetDateTimeField1.getLeapAmount((-591));
      assertEquals(12, int1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField3));
      assertFalse(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField3);
      
      int int2 = offsetDateTimeField3.getOffset();
      assertEquals((-591), int2);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(69, offsetDateTimeField2.getMaximumValue());
      assertEquals((-1473), offsetDateTimeField2.getMinimumValue());
      assertEquals(23, offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals((-591), offsetDateTimeField3.getOffset());
      assertEquals((-522), offsetDateTimeField3.getMaximumValue());
      assertEquals((-2064), offsetDateTimeField3.getMinimumValue());
      assertNull(offsetDateTimeField3.getName());
      assertTrue(offsetDateTimeField3.isSupported());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      
      int int3 = offsetDateTimeField0.getMaximumValue((-66L));
      assertEquals(23, int3);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      offsetDateTimeField2.add(61L, 12);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(1057L).when(durationField0).add(anyLong() , anyLong());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn((-2555), 40).when(dateTimeField0).getMaximumValue();
      doReturn((-1643), (-2555)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE, (-2555)).when(dateTimeField1).getMaximumValue();
      doReturn(Integer.MIN_VALUE).when(dateTimeField1).getMinimumValue();
      doReturn(true).when(dateTimeField1).isSupported();
      doReturn((long)40).when(dateTimeField1).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField1, dateTimeFieldType1, 1277, (-1883), 1277);
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 8);
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumValue((-1690L));
      assertEquals((-1270), int0);
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.set(0L, (-1552));
      assertEquals(40L, long0);
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      int int1 = offsetDateTimeField1.getMaximumValue();
      assertEquals((-1270), int1);
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int2 = offsetDateTimeField0.getMaximumValue();
      assertEquals((-1278), int2);
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType2, (-1883));
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      int int3 = offsetDateTimeField2.getMinimumValue();
      assertEquals((-3758), int3);
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 8);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      
      OffsetDateTimeField offsetDateTimeField4 = new OffsetDateTimeField(offsetDateTimeField3, 8);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals("", offsetDateTimeField4.getName());
      assertNotNull(offsetDateTimeField4);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      
      DateTimeFieldType dateTimeFieldType3 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField5 = new OffsetDateTimeField(offsetDateTimeField4, dateTimeFieldType3, 1658, 1658, 8);
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertNull(offsetDateTimeField5.getName());
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals("", offsetDateTimeField4.getName());
      assertNotNull(offsetDateTimeField5);
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      
      int int4 = offsetDateTimeField5.getOffset();
      assertEquals(1658, int4);
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertNull(offsetDateTimeField5.getName());
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals("", offsetDateTimeField4.getName());
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertNotSame(offsetDateTimeField5, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      
      long long1 = offsetDateTimeField4.add((long) (-3758), (long) 40);
      assertEquals(1057L, long1);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals("", offsetDateTimeField4.getName());
      assertFalse(long1 == long0);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      
      String string0 = offsetDateTimeField4.toString();
      assertEquals("DateTimeField[]", string0);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals("", offsetDateTimeField4.getName());
      assertNotNull(string0);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2360).when(dateTimeField0).get(anyLong());
      doReturn((-3252), 2360).when(dateTimeField0).getMaximumValue();
      doReturn((-3252)).when(dateTimeField0).getMinimumValue();
      doReturn(false).when(dateTimeField0).isLenient();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn((-498L), 0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2007, 0, 0);
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.addWrapField(0L, 0);
      assertEquals((-498L), long0);
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      
      boolean boolean0 = offsetDateTimeField0.isLenient();
      assertFalse(boolean0);
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      long long1 = offsetDateTimeField0.remainder(2007);
      assertEquals(0L, long1);
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertFalse(long1 == long0);
      
      long long2 = offsetDateTimeField0.set((-377L), 0);
      assertEquals(0L, long2);
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(4367, int0);
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      
      int int1 = offsetDateTimeField0.getOffset();
      assertEquals(2007, int1);
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertFalse(int1 == int0);
      
      OffsetDateTimeField offsetDateTimeField1 = null;
      try {
        offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-1643)).when(durationField0).add(anyLong() , anyLong());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn((-2555), 40).when(dateTimeField0).getMaximumValue();
      doReturn((-1643), (-2555)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE, (-2555)).when(dateTimeField1).getMaximumValue();
      doReturn(Integer.MIN_VALUE).when(dateTimeField1).getMinimumValue();
      doReturn(true).when(dateTimeField1).isSupported();
      doReturn((long)40).when(dateTimeField1).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField1, dateTimeFieldType1, 1277, (-1883), 1277);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 8);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumValue((-1690L));
      assertEquals((-1270), int0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.set(0L, (-1552));
      assertEquals(40L, long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      int int1 = offsetDateTimeField1.getMaximumValue();
      assertEquals((-1270), int1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int2 = offsetDateTimeField0.getMaximumValue();
      assertEquals((-1278), int2);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType2, (-1883));
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      int int3 = offsetDateTimeField2.getMinimumValue();
      assertEquals((-3758), int3);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 8);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      
      OffsetDateTimeField offsetDateTimeField4 = new OffsetDateTimeField(offsetDateTimeField3, 8);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals("", offsetDateTimeField4.getName());
      assertNotNull(offsetDateTimeField4);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      
      DateTimeFieldType dateTimeFieldType3 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField5 = new OffsetDateTimeField(offsetDateTimeField4, dateTimeFieldType3, 1658, 1658, 8);
      assertNull(offsetDateTimeField5.getName());
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertTrue(offsetDateTimeField5.isSupported());
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals("", offsetDateTimeField4.getName());
      assertNotNull(offsetDateTimeField5);
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      
      int int4 = offsetDateTimeField5.getOffset();
      assertEquals(1658, int4);
      assertNull(offsetDateTimeField5.getName());
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertTrue(offsetDateTimeField5.isSupported());
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals("", offsetDateTimeField4.getName());
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertNotSame(offsetDateTimeField5, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      
      long long1 = offsetDateTimeField4.add((long) (-3758), (long) 40);
      assertEquals((-1643L), long1);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals("", offsetDateTimeField4.getName());
      assertFalse(long1 == long0);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      
      String string0 = offsetDateTimeField4.toString();
      assertEquals("DateTimeField[]", string0);
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals("", offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals("", offsetDateTimeField4.getName());
      assertNotNull(string0);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      
      OffsetDateTimeField offsetDateTimeField6 = null;
      try {
        offsetDateTimeField6 = new OffsetDateTimeField(offsetDateTimeField5, (DateTimeFieldType) null, 1009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((long)40).when(durationField0).add(anyLong() , anyLong());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3125)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn((-2555), 40).when(dateTimeField0).getMaximumValue();
      doReturn((-1643), (-2555)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("org.joda.time.field.OffsetDateTimeField", (String) null).when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE, (-2555)).when(dateTimeField1).getMaximumValue();
      doReturn(Integer.MIN_VALUE).when(dateTimeField1).getMinimumValue();
      doReturn(true).when(dateTimeField1).isSupported();
      doReturn((long)40).when(dateTimeField1).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField1, dateTimeFieldType1, 1277, (-1883), 1277);
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 8);
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumValue((-1690L));
      assertEquals((-1270), int0);
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.set(0L, (-1552));
      assertEquals(40L, long0);
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      int int1 = offsetDateTimeField1.getMaximumValue();
      assertEquals((-1270), int1);
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int2 = offsetDateTimeField0.getMaximumValue();
      assertEquals((-1278), int2);
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType2, (-1883));
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      int int3 = offsetDateTimeField2.getMinimumValue();
      assertEquals((-3758), int3);
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 8);
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      
      OffsetDateTimeField offsetDateTimeField4 = new OffsetDateTimeField(offsetDateTimeField3, 8);
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertNotNull(offsetDateTimeField4);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      
      DateTimeFieldType dateTimeFieldType3 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField5 = new OffsetDateTimeField(offsetDateTimeField4, dateTimeFieldType3, 1658, 1658, 8);
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertNull(offsetDateTimeField5.getName());
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertNotNull(offsetDateTimeField5);
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      
      int int4 = offsetDateTimeField5.getOffset();
      assertEquals(1658, int4);
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertNull(offsetDateTimeField5.getName());
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField5, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField4.add((long) (-3758), (long) 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3109 for org.joda.time.field.OffsetDateTimeField must be in the range [-2539,56]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3544)).when(dateTimeField0).get(anyLong());
      doReturn((-3544)).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn((-3544), 2001).when(dateTimeField0).getMaximumValue();
      doReturn(2244, (-1240)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(2080L, 0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(".43jV7T)WQ@|kH", ".43jV7T)WQ@|kH").when(dateTimeFieldType0).getName();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2002);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, (-760));
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int0 = offsetDateTimeField1.getMaximumTextLength(locale0);
      assertEquals(4, int0);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int1 = offsetDateTimeField1.getMaximumShortTextLength((Locale) null);
      assertEquals(4, int1);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, (-760), (-760), 2002);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      String string0 = offsetDateTimeField2.getAsShortText((long) 2002);
      assertEquals("-3062", string0);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(string0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      long long0 = offsetDateTimeField1.roundHalfEven(165L);
      assertEquals(2080L, long0);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      
      int int2 = offsetDateTimeField2.getMaximumValue(165L);
      assertEquals(2002, int2);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int3 = offsetDateTimeField0.getLeapAmount((-2107L));
      assertEquals((-3544), int3);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      
      int int4 = offsetDateTimeField0.getMaximumValue();
      assertEquals(4003, int4);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      
      int[] intArray0 = new int[3];
      long long1 = offsetDateTimeField0.roundHalfEven(2080L);
      assertEquals(0L, long1);
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals(".43jV7T)WQ@|kH", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(long1 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField1.set((long) (-760), (-886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -886 for .43jV7T)WQ@|kH must be in the range [2,3243]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(1301, 1301).when(dateTimeField0).getMaximumValue();
      doReturn(1301, 1301).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3804)).when(dateTimeField1).get(anyLong());
      doReturn(Integer.MIN_VALUE, 3791).when(dateTimeField1).getMaximumValue();
      doReturn(Integer.MIN_VALUE).when(dateTimeField1).getMinimumValue();
      doReturn(true).when(dateTimeField1).isSupported();
      doReturn((long)3791).when(dateTimeField1).roundCeiling(anyLong());
      doReturn((long)3791).when(dateTimeField1).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField1, dateTimeFieldType1, 1301, (-1883), 1301);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 1301);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1301, offsetDateTimeField1.getOffset());
      assertEquals((-582), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(6393, offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumValue((-1690L));
      assertEquals(6393, int0);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1301, offsetDateTimeField1.getOffset());
      assertEquals((-582), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(6393, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int1 = offsetDateTimeField1.getMaximumValue();
      assertEquals(6393, int1);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1301, offsetDateTimeField1.getOffset());
      assertEquals((-582), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(6393, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int2 = offsetDateTimeField0.getMaximumValue();
      assertEquals(5092, int2);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      long long0 = offsetDateTimeField0.roundCeiling((-1L));
      assertEquals(3791L, long0);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType2, (-1883));
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1301, offsetDateTimeField1.getOffset());
      assertEquals((-582), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(6393, offsetDateTimeField1.getMaximumValue());
      assertEquals(4510, offsetDateTimeField2.getMaximumValue());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals((-2465), offsetDateTimeField2.getMinimumValue());
      assertNull(offsetDateTimeField2.getName());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1301);
      assertEquals(2602, offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(2602, offsetDateTimeField3.getMaximumValue());
      assertEquals(1301, offsetDateTimeField3.getOffset());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      
      OffsetDateTimeField offsetDateTimeField4 = new OffsetDateTimeField(offsetDateTimeField3, 1301);
      assertEquals(2602, offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(2602, offsetDateTimeField3.getMaximumValue());
      assertEquals(1301, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField4.getName());
      assertEquals(3903, offsetDateTimeField4.getMaximumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals(1301, offsetDateTimeField4.getOffset());
      assertEquals(3903, offsetDateTimeField4.getMinimumValue());
      assertNotNull(offsetDateTimeField4);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      
      DateTimeFieldType dateTimeFieldType3 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField5 = new OffsetDateTimeField(offsetDateTimeField4, dateTimeFieldType3, 1658, 1658, 1301);
      assertEquals(2602, offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(2602, offsetDateTimeField3.getMaximumValue());
      assertEquals(1301, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField4.getName());
      assertEquals(3903, offsetDateTimeField4.getMaximumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertEquals(1301, offsetDateTimeField4.getOffset());
      assertEquals(3903, offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertEquals(5561, offsetDateTimeField5.getMinimumValue());
      assertNull(offsetDateTimeField5.getName());
      assertEquals(1301, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertNotNull(offsetDateTimeField5);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      
      long long1 = offsetDateTimeField1.addWrapField(0L, (-1150));
      assertEquals(3791L, long1);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(5092, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1301, offsetDateTimeField1.getOffset());
      assertEquals((-582), offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(6393, offsetDateTimeField1.getMaximumValue());
      assertTrue(long1 == long0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField4));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField4);
      
      OffsetDateTimeField offsetDateTimeField6 = null;
      try {
        offsetDateTimeField6 = new OffsetDateTimeField(offsetDateTimeField5, (DateTimeFieldType) null, 1009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(3691, (-2477)).when(dateTimeField0).getMaximumValue();
      doReturn((-2477), 3691).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-1L)).when(dateTimeField0).roundHalfFloor(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 36);
      assertEquals((-2441), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3727, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(36, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor(350L);
      assertEquals((-1L), long0);
      assertEquals((-2441), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(3727, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(36, offsetDateTimeField0.getOffset());
      
      OffsetDateTimeField offsetDateTimeField1 = null;
      try {
        offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, (DateTimeFieldType) null, 36, 36, 36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2002).when(dateTimeField0).getMaximumValue();
      doReturn((-2622)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-61L)).when(dateTimeField0).roundHalfCeiling(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2237, 1, 2);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(2237, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 4659);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(2237, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(4659, offsetDateTimeField1.getOffset());
      assertEquals(4661, offsetDateTimeField1.getMaximumValue());
      assertEquals(4660, offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      long long0 = offsetDateTimeField1.roundHalfCeiling(1059L);
      assertEquals((-61L), long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(2237, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(4659, offsetDateTimeField1.getOffset());
      assertEquals(4661, offsetDateTimeField1.getMaximumValue());
      assertEquals(4660, offsetDateTimeField1.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3544)).when(dateTimeField0).get(anyLong());
      doReturn((-3544), 2001).when(dateTimeField0).getMaximumValue();
      doReturn(2244, (-1240)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn(2080L).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2002);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, (-760));
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumShortTextLength((Locale) null);
      assertEquals(4, int0);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, (-760), (-760), 2002);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      String string0 = offsetDateTimeField2.getAsShortText((long) 2002);
      assertEquals("-3062", string0);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertNotNull(string0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      long long0 = offsetDateTimeField1.roundHalfEven(165L);
      assertEquals(2080L, long0);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      
      int int1 = offsetDateTimeField2.getMaximumValue(165L);
      assertEquals(2002, int1);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      long long1 = offsetDateTimeField1.set((long) (-760), 2219);
      assertEquals(0L, long1);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(long1 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      
      long long2 = offsetDateTimeField0.remainder((-2043L));
      assertEquals(0L, long2);
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn((-388)).when(dateTimeField0).getMaximumValue();
      doReturn((-388), 7200000).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2007, (-3), 0);
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(7202007, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((-710L), 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3544)).when(dateTimeField0).get(anyLong());
      doReturn((-3544), 2001).when(dateTimeField0).getMaximumValue();
      doReturn(2241, (-1240)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-1867L)).when(dateTimeField0).roundFloor(anyLong());
      doReturn(2080L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("", "^?d]s").when(dateTimeFieldType0).getName();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2002);
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, (-760));
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumShortTextLength((Locale) null);
      assertEquals(4, int0);
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, (-760), (-760), 2002);
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      String string0 = offsetDateTimeField2.getAsShortText((long) 2002);
      assertEquals("-3062", string0);
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertNotNull(string0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      long long0 = offsetDateTimeField2.roundFloor((-3544));
      assertEquals((-1867L), long0);
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      long long1 = offsetDateTimeField1.roundHalfEven(165L);
      assertEquals(2080L, long1);
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(long1 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      
      int int1 = offsetDateTimeField2.getMaximumValue(165L);
      assertEquals(2002, int1);
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        offsetDateTimeField1.set((long) (-760), (-886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -886 for  must be in the range [2,3243]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfFloor(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 642, 4790, 1180);
      assertEquals(642, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(4790, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(642, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor(4790);
      assertEquals(0L, long0);
      assertEquals(642, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(4790, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(642, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-17), Integer.MAX_VALUE).when(dateTimeField0).get(anyLong());
      doReturn((-1315)).when(dateTimeField0).getMaximumValue();
      doReturn(Integer.MAX_VALUE).when(dateTimeField0).getMinimumValue();
      doReturn(true, true).when(dateTimeField0).isLeap(anyLong());
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2070, 2070, (-1552));
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      boolean boolean0 = offsetDateTimeField0.isLeap((-1552));
      assertTrue(boolean0);
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      
      boolean boolean1 = offsetDateTimeField0.isLeap(0L);
      assertTrue(boolean1);
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertTrue(boolean1 == boolean0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, (-1552));
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(518, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1552), offsetDateTimeField1.getOffset());
      assertEquals((-3104), offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      String string0 = Locale.lookupTag(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(string0);
      
      String string1 = offsetDateTimeField1.getAsText(2404, locale0);
      assertEquals("2404", string1);
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(518, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1552), offsetDateTimeField1.getOffset());
      assertEquals((-3104), offsetDateTimeField1.getMaximumValue());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(string1);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = offsetDateTimeField0.getMinimumValue();
      assertEquals(2070, int0);
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      String string2 = offsetDateTimeField1.getAsShortText((-1977L));
      assertEquals("501", string2);
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(518, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1552), offsetDateTimeField1.getOffset());
      assertEquals((-3104), offsetDateTimeField1.getMaximumValue());
      assertNotNull(string2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, (-1552));
      assertEquals(2070, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1552), offsetDateTimeField0.getMaximumValue());
      assertEquals(2070, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(518, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1552), offsetDateTimeField1.getOffset());
      assertEquals((-3104), offsetDateTimeField1.getMaximumValue());
      assertEquals((-1034), offsetDateTimeField2.getMinimumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-4656), offsetDateTimeField2.getMaximumValue());
      assertEquals((-1552), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      // Undeclared exception!
      try { 
        offsetDateTimeField1.addWrapField((long) 2070, (-1552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-31), 40).when(dateTimeField0).getMaximumValue();
      doReturn(40, 0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)40).when(dateTimeField0).remainder(anyLong());
      doReturn((long)40).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, Integer.MIN_VALUE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals((-2147483608), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2147483608), offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType1, (-1), (-1), (-2834));
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals((-2147483608), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2147483608), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1), offsetDateTimeField1.getMinimumValue());
      assertEquals((-2147483609), offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, 14);
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals((-2147483608), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2147483608), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1), offsetDateTimeField1.getMinimumValue());
      assertEquals((-2147483609), offsetDateTimeField1.getMaximumValue());
      assertEquals(13, offsetDateTimeField2.getMinimumValue());
      assertEquals((-2147483595), offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(14, offsetDateTimeField2.getOffset());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      long long0 = offsetDateTimeField2.remainder((-2313L));
      assertEquals(40L, long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals((-2147483608), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2147483608), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1), offsetDateTimeField1.getMinimumValue());
      assertEquals((-2147483609), offsetDateTimeField1.getMaximumValue());
      assertEquals(13, offsetDateTimeField2.getMinimumValue());
      assertEquals((-2147483595), offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(14, offsetDateTimeField2.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      long long1 = offsetDateTimeField1.roundHalfEven((-2313L));
      assertEquals(40L, long1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals((-2147483608), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2147483608), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1), offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1), offsetDateTimeField1.getMinimumValue());
      assertEquals((-2147483609), offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(long1 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0, 0).when(dateTimeField0).getMinimumValue();
      doReturn(dateTimeFieldType2).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 1, 1, Integer.MAX_VALUE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, 1);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(3, offsetDateTimeField2.getMinimumValue());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertEquals(3, offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      long long0 = offsetDateTimeField2.roundHalfCeiling(26050L);
      assertEquals(0L, long0);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(3, offsetDateTimeField2.getMinimumValue());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertEquals(3, offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3252), 4968).when(dateTimeField0).getMaximumValue();
      doReturn((-3252)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-4401L)).when(dateTimeField0).remainder(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2007, 0, 0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertEquals(6975, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = offsetDateTimeField0.getMinimumValue();
      assertEquals(0, int0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertEquals(6975, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      
      long long0 = offsetDateTimeField0.remainder(2007);
      assertEquals((-4401L), long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertEquals(6975, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      
      OffsetDateTimeField offsetDateTimeField1 = null;
      try {
        offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3544)).when(dateTimeField0).get(anyLong());
      doReturn((-3544), 2001).when(dateTimeField0).getMaximumValue();
      doReturn(2241, (-1240)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(31L).when(dateTimeField0).roundFloor(anyLong());
      doReturn(2080L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("", "^?d]s").when(dateTimeFieldType0).getName();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2002);
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, (-760));
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumShortTextLength((Locale) null);
      assertEquals(4, int0);
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, (-760), (-760), 2002);
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      String string0 = offsetDateTimeField2.getAsShortText((long) 2002);
      assertEquals("-3062", string0);
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertNotNull(string0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      long long0 = offsetDateTimeField2.roundFloor((-3544));
      assertEquals(31L, long0);
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      long long1 = offsetDateTimeField1.roundHalfEven(165L);
      assertEquals(2080L, long1);
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(long1 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      
      int int1 = offsetDateTimeField2.getMaximumValue(165L);
      assertEquals(2002, int1);
      assertEquals(4003, offsetDateTimeField0.getMaximumValue());
      assertEquals(762, offsetDateTimeField0.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField0.getName());
      assertEquals(2002, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3243, offsetDateTimeField1.getMaximumValue());
      assertEquals(2, offsetDateTimeField1.getMinimumValue());
      assertEquals("^?d]s", offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-760), offsetDateTimeField1.getOffset());
      assertEquals(2002, offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-758), offsetDateTimeField2.getMinimumValue());
      assertEquals((-760), offsetDateTimeField2.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        offsetDateTimeField1.set((long) (-760), (-886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -886 for  must be in the range [2,3243]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(12).when(dateTimeField0).getMaximumValue();
      doReturn(12, 0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeFieldType0).getName();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 27, 27, 27);
      assertEquals(27, offsetDateTimeField0.getMaximumValue());
      assertEquals(27, offsetDateTimeField0.getOffset());
      assertEquals(27, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 27);
      assertEquals(27, offsetDateTimeField0.getMaximumValue());
      assertEquals(27, offsetDateTimeField0.getOffset());
      assertEquals(27, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(54, offsetDateTimeField1.getMinimumValue());
      assertEquals(27, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(54, offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, 27);
      assertEquals(27, offsetDateTimeField0.getMaximumValue());
      assertEquals(27, offsetDateTimeField0.getOffset());
      assertEquals(27, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(54, offsetDateTimeField1.getMinimumValue());
      assertEquals(27, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(54, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(81, offsetDateTimeField2.getMinimumValue());
      assertEquals(27, offsetDateTimeField2.getOffset());
      assertEquals(81, offsetDateTimeField2.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(offsetDateTimeField2, (-591));
      assertEquals(27, offsetDateTimeField0.getMaximumValue());
      assertEquals(27, offsetDateTimeField0.getOffset());
      assertEquals(27, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(54, offsetDateTimeField1.getMinimumValue());
      assertEquals(27, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(54, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(81, offsetDateTimeField2.getMinimumValue());
      assertEquals(27, offsetDateTimeField2.getOffset());
      assertEquals(81, offsetDateTimeField2.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-510), offsetDateTimeField3.getMinimumValue());
      assertEquals((-591), offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals((-510), offsetDateTimeField3.getMaximumValue());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      
      int int0 = offsetDateTimeField1.getLeapAmount((-591));
      assertEquals(0, int0);
      assertEquals(27, offsetDateTimeField0.getMaximumValue());
      assertEquals(27, offsetDateTimeField0.getOffset());
      assertEquals(27, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(54, offsetDateTimeField1.getMinimumValue());
      assertEquals(27, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(54, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField3));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField3);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField1.set(2080L, 2010);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2010 for null must be in the range [54,54]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0, 0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundCeiling(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType1, (-2015), 0, (-2015));
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-2015), offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(0, offsetDateTimeField1.getMinimumValue());
      assertEquals((-2015), offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, 1);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-2015), offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(0, offsetDateTimeField1.getMinimumValue());
      assertEquals((-2015), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(1, offsetDateTimeField2.getMinimumValue());
      assertEquals((-2014), offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      long long0 = offsetDateTimeField2.roundCeiling(1);
      assertEquals(0L, long0);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-2015), offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(0, offsetDateTimeField1.getMinimumValue());
      assertEquals((-2015), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(1, offsetDateTimeField2.getMinimumValue());
      assertEquals((-2014), offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-2557), (-2557)).when(dateTimeField0).getMaximumValue();
      doReturn((-5123), 997).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isLeap(anyLong());
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 997);
      assertEquals((-1560), offsetDateTimeField0.getMaximumValue());
      assertEquals(997, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1994, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 997);
      assertEquals((-1560), offsetDateTimeField0.getMaximumValue());
      assertEquals(997, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1994, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(997, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-563), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2991, offsetDateTimeField1.getMinimumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      boolean boolean0 = offsetDateTimeField1.isLeap(904L);
      assertTrue(boolean0);
      assertEquals((-1560), offsetDateTimeField0.getMaximumValue());
      assertEquals(997, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1994, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(997, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-563), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(2991, offsetDateTimeField1.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getOffset();
      assertEquals(997, int0);
      assertEquals((-1560), offsetDateTimeField0.getMaximumValue());
      assertEquals(997, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1994, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn((-1276), (-1276)).when(dateTimeField0).getMinimumValue();
      doReturn(dateTimeFieldType2).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)1).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((long)1).when(dateTimeField0).roundHalfFloor(anyLong());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor(0);
      assertEquals(1L, long0);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 1, 1, Integer.MAX_VALUE);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, 1);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(3, offsetDateTimeField2.getMaximumValue());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(2, offsetDateTimeField2.getMinimumValue());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      int int0 = offsetDateTimeField1.getMaximumValue(0L);
      assertEquals(2, int0);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      long long1 = offsetDateTimeField2.roundHalfCeiling(26063L);
      assertEquals(1L, long1);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(3, offsetDateTimeField2.getMaximumValue());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(2, offsetDateTimeField2.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertTrue(long1 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      int int1 = offsetDateTimeField0.get((-1L));
      assertEquals(1, int1);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      
      int int2 = offsetDateTimeField0.getOffset();
      assertEquals(1, int2);
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2001, 2001).when(dateTimeField0).getMaximumValue();
      doReturn(2001, 709).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-58));
      assertEquals(651, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-58), offsetDateTimeField0.getOffset());
      assertEquals(1943, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfEven((-2210L));
      assertEquals(0L, long0);
      assertEquals(651, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-58), offsetDateTimeField0.getOffset());
      assertEquals(1943, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField((DateTimeField) null, dateTimeFieldType0, (-1824), (-1824), 1528);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE).when(dateTimeField0).get(anyLong());
      doReturn((-3252), 2360).when(dateTimeField0).getMaximumValue();
      doReturn((-3252)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-3252)).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2007, 0, 0);
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.addWrapField(0L, 0);
      assertEquals((-3252L), long0);
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = offsetDateTimeField0.getOffset();
      assertEquals(2007, int0);
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2007, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(4367, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(175).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(12).when(dateTimeField0).getLeapAmount(anyLong());
      doReturn(12).when(dateTimeField0).getMaximumValue();
      doReturn(12, (-1542)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(424L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 23, 23, 23);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 23);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      long long0 = offsetDateTimeField1.addWrapField((long) 23, 23);
      assertEquals(424L, long0);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      intArray0[0] = (-1542);
      intArray0[1] = 23;
      intArray0[2] = 23;
      int int0 = offsetDateTimeField1.getMinimumValue(readablePartial0, intArray0);
      assertEquals((-1496), int0);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertArrayEquals(new int[] {(-1542), 23, 23}, intArray0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, 23);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(69, offsetDateTimeField2.getMaximumValue());
      assertEquals(23, offsetDateTimeField2.getOffset());
      assertEquals((-1473), offsetDateTimeField2.getMinimumValue());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(offsetDateTimeField2, (-591));
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(69, offsetDateTimeField2.getMaximumValue());
      assertEquals(23, offsetDateTimeField2.getOffset());
      assertEquals((-1473), offsetDateTimeField2.getMinimumValue());
      assertEquals((-522), offsetDateTimeField3.getMaximumValue());
      assertEquals((-2064), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-591), offsetDateTimeField3.getOffset());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      
      int int1 = offsetDateTimeField1.getLeapAmount((-591));
      assertEquals(12, int1);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField3));
      assertFalse(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField3);
      
      int int2 = offsetDateTimeField3.getOffset();
      assertEquals((-591), int2);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(23, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1496), offsetDateTimeField1.getMinimumValue());
      assertEquals(46, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(69, offsetDateTimeField2.getMaximumValue());
      assertEquals(23, offsetDateTimeField2.getOffset());
      assertEquals((-1473), offsetDateTimeField2.getMinimumValue());
      assertEquals((-522), offsetDateTimeField3.getMaximumValue());
      assertEquals((-2064), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-591), offsetDateTimeField3.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      
      int int3 = offsetDateTimeField0.getMaximumValue((-66L));
      assertEquals(23, int3);
      assertEquals(23, offsetDateTimeField0.getOffset());
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1519), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField2.add(61L, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(durationField0).add(anyLong() , anyLong());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn((-2555), 40).when(dateTimeField0).getMaximumValue();
      doReturn((-1643), (-2555)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE, (-2555)).when(dateTimeField1).getMaximumValue();
      doReturn(Integer.MIN_VALUE).when(dateTimeField1).getMinimumValue();
      doReturn(true).when(dateTimeField1).isSupported();
      doReturn((long)40).when(dateTimeField1).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField1, dateTimeFieldType1, 1277, (-1883), 1277);
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 8);
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumValue((-1690L));
      assertEquals((-1270), int0);
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.set(0L, (-1552));
      assertEquals(40L, long0);
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      int int1 = offsetDateTimeField1.getMaximumValue();
      assertEquals((-1270), int1);
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int2 = offsetDateTimeField0.getMaximumValue();
      assertEquals((-1278), int2);
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType2, (-1883));
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      int int3 = offsetDateTimeField2.getMinimumValue();
      assertEquals((-3758), int3);
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertEquals(1277, offsetDateTimeField0.getOffset());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-1278), offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-1270), offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3153), offsetDateTimeField2.getMaximumValue());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 8);
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      
      OffsetDateTimeField offsetDateTimeField4 = new OffsetDateTimeField(offsetDateTimeField3, 8);
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertNotNull(offsetDateTimeField4);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      
      DateTimeFieldType dateTimeFieldType3 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField5 = new OffsetDateTimeField(offsetDateTimeField4, dateTimeFieldType3, 1658, 1658, 8);
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertNull(offsetDateTimeField5.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertNotNull(offsetDateTimeField5);
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      
      int int4 = offsetDateTimeField5.getOffset();
      assertEquals(1658, int4);
      assertEquals(8, offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertNull(offsetDateTimeField5.getName());
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField5, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField5, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      
      long long1 = offsetDateTimeField4.add((long) (-3758), (long) 40);
      assertEquals(0L, long1);
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertFalse(long1 == long0);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      
      String string0 = offsetDateTimeField4.toString();
      assertEquals("DateTimeField[null]", string0);
      assertEquals((-2547), offsetDateTimeField3.getMinimumValue());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertNull(offsetDateTimeField3.getName());
      assertEquals(48, offsetDateTimeField3.getMaximumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertEquals((-2539), offsetDateTimeField4.getMinimumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals(56, offsetDateTimeField4.getMaximumValue());
      assertNotNull(string0);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField5));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField3, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField4);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField3, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField5);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField3);
      assertNotSame(offsetDateTimeField4, offsetDateTimeField2);
      
      int int5 = 1009;
      OffsetDateTimeField offsetDateTimeField6 = null;
      try {
        offsetDateTimeField6 = new OffsetDateTimeField(offsetDateTimeField5, (DateTimeFieldType) null, 1009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-851);
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField((DateTimeField) null, (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3098), (-1875)).when(dateTimeField0).getMaximumValue();
      doReturn((-3098), Integer.MAX_VALUE).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE, (-807)).when(dateTimeField1).getMaximumValue();
      doReturn(Integer.MIN_VALUE).when(dateTimeField1).getMinimumValue();
      doReturn(true).when(dateTimeField1).isSupported();
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField1, dateTimeFieldType1, 1301, (-1883), 1301);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(494, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 8);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(494, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(502, offsetDateTimeField1.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumValue((-1690L));
      assertEquals(502, int0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(494, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(502, offsetDateTimeField1.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int1 = offsetDateTimeField1.getMaximumValue();
      assertEquals(502, int1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(494, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(502, offsetDateTimeField1.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(int1 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int2 = offsetDateTimeField0.getMaximumValue();
      assertEquals(494, int2);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(494, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType2, (-1883));
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(494, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(502, offsetDateTimeField1.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertEquals((-1381), offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      int int3 = offsetDateTimeField2.getMinimumValue();
      assertEquals((-3758), int3);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1301, offsetDateTimeField0.getOffset());
      assertEquals(494, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1883), offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1875), offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(502, offsetDateTimeField1.getMaximumValue());
      assertEquals(8, offsetDateTimeField1.getOffset());
      assertEquals((-1883), offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-3758), offsetDateTimeField2.getMinimumValue());
      assertEquals((-1381), offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField3 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 8);
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-1867), offsetDateTimeField3.getMaximumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals((-2147483641), offsetDateTimeField3.getMinimumValue());
      assertNotNull(offsetDateTimeField3);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      
      OffsetDateTimeField offsetDateTimeField4 = new OffsetDateTimeField(offsetDateTimeField3, 8);
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-1867), offsetDateTimeField3.getMaximumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals((-2147483641), offsetDateTimeField3.getMinimumValue());
      assertEquals((-1859), offsetDateTimeField4.getMaximumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals((-2147483633), offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertNotNull(offsetDateTimeField4);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      
      DateTimeFieldType dateTimeFieldType3 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField5 = new OffsetDateTimeField(offsetDateTimeField4, dateTimeFieldType3, 1658, 1658, 8);
      assertNull(offsetDateTimeField3.getName());
      assertEquals((-1867), offsetDateTimeField3.getMaximumValue());
      assertEquals(8, offsetDateTimeField3.getOffset());
      assertTrue(offsetDateTimeField3.isSupported());
      assertEquals((-2147483641), offsetDateTimeField3.getMinimumValue());
      assertEquals((-1859), offsetDateTimeField4.getMaximumValue());
      assertEquals(8, offsetDateTimeField4.getOffset());
      assertEquals((-2147483633), offsetDateTimeField4.getMinimumValue());
      assertTrue(offsetDateTimeField4.isSupported());
      assertNull(offsetDateTimeField4.getName());
      assertEquals(1658, offsetDateTimeField5.getMinimumValue());
      assertTrue(offsetDateTimeField5.isSupported());
      assertNull(offsetDateTimeField5.getName());
      assertEquals((-201), offsetDateTimeField5.getMaximumValue());
      assertEquals(1658, offsetDateTimeField5.getOffset());
      assertNotNull(offsetDateTimeField5);
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField4));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField3.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField4.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField3));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField5.equals((Object)offsetDateTimeField4));
      
      int int4 = 1009;
      OffsetDateTimeField offsetDateTimeField6 = null;
      try {
        offsetDateTimeField6 = new OffsetDateTimeField(offsetDateTimeField5, (DateTimeFieldType) null, 1009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getLeapDurationField();
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0, 0).when(dateTimeField0).getMinimumValue();
      doReturn(false).when(dateTimeField0).isLenient();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundFloor(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = 3492;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 3492);
      assertEquals(3492, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      boolean boolean0 = offsetDateTimeField0.isLenient();
      assertFalse(boolean0);
      assertEquals(3492, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType1, (-1723), (-1723), 322);
      assertEquals(3492, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1769, offsetDateTimeField1.getMinimumValue());
      assertEquals(322, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1723), offsetDateTimeField1.getOffset());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      int int1 = (-4097);
      DurationField durationField0 = offsetDateTimeField1.getLeapDurationField();
      assertEquals(3492, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1769, offsetDateTimeField1.getMinimumValue());
      assertEquals(322, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1723), offsetDateTimeField1.getOffset());
      assertNull(durationField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundFloor(2175L);
      assertEquals(0L, long0);
      assertEquals(3492, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, (-4097));
      assertEquals(3492, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1769, offsetDateTimeField1.getMinimumValue());
      assertEquals(322, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1723), offsetDateTimeField1.getOffset());
      assertEquals((-2328), offsetDateTimeField2.getMinimumValue());
      assertEquals((-3775), offsetDateTimeField2.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-4097), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = Locale.lookupTag(linkedList0, set0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNull(string0);
      
      String string1 = offsetDateTimeField2.getAsText((-4097), locale0);
      assertEquals("-4097", string1);
      assertEquals(3492, offsetDateTimeField0.getMinimumValue());
      assertEquals(3492, offsetDateTimeField0.getOffset());
      assertEquals(3492, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1769, offsetDateTimeField1.getMinimumValue());
      assertEquals(322, offsetDateTimeField1.getMaximumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-1723), offsetDateTimeField1.getOffset());
      assertEquals((-2328), offsetDateTimeField2.getMinimumValue());
      assertEquals((-3775), offsetDateTimeField2.getMaximumValue());
      assertNull(offsetDateTimeField2.getName());
      assertEquals((-4097), offsetDateTimeField2.getOffset());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField2.addWrapField((long) 3492, 3492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn(0).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = Integer.MIN_VALUE;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertEquals("\u4E2D\u6587", string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      int int1 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(11, int1);
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMinimumValue());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(int1 == int0);
      assertSame(locale0, locale1);
      
      int int2 = 999;
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 999);
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-2147482649), offsetDateTimeField1.getMaximumValue());
      assertEquals(999, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-2147482649), offsetDateTimeField1.getMinimumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int3 = 2255;
      String string1 = offsetDateTimeField1.getAsText((long) 999);
      assertEquals("-2147482649", string1);
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-2147482649), offsetDateTimeField1.getMaximumValue());
      assertEquals(999, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-2147482649), offsetDateTimeField1.getMinimumValue());
      assertNotNull(string1);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      
      int int4 = (-694);
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, Integer.MIN_VALUE, 2255, (-694));
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getOffset());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMaximumValue());
      assertNull(offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMinimumValue());
      assertNull(offsetDateTimeField1.getName());
      assertEquals((-2147482649), offsetDateTimeField1.getMaximumValue());
      assertEquals(999, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals((-2147482649), offsetDateTimeField1.getMinimumValue());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(2255, offsetDateTimeField2.getMinimumValue());
      assertEquals((-694), offsetDateTimeField2.getMaximumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      // Undeclared exception!
      try { 
        offsetDateTimeField2.add((long) Integer.MIN_VALUE, 3012);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).getMaximumValue();
      doReturn((-1276), (-1276)).when(dateTimeField0).getMinimumValue();
      doReturn(dateTimeFieldType2).when(dateTimeField0).getType();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)1).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((long)1).when(dateTimeField0).roundHalfFloor(anyLong());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor(0);
      assertEquals(1L, long0);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 1, 1, Integer.MAX_VALUE);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertNotNull(offsetDateTimeField1);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, 1);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(2, offsetDateTimeField2.getMinimumValue());
      assertEquals(3, offsetDateTimeField2.getMaximumValue());
      assertNotNull(offsetDateTimeField2);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      
      int int0 = offsetDateTimeField1.getMaximumValue(0L);
      assertEquals(2, int0);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      
      long long1 = offsetDateTimeField2.roundHalfCeiling(1L);
      assertEquals(1L, long1);
      assertNull(offsetDateTimeField0.getName());
      assertEquals((-1275), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(2, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNull(offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMinimumValue());
      assertTrue(offsetDateTimeField2.isSupported());
      assertEquals(1, offsetDateTimeField2.getOffset());
      assertNull(offsetDateTimeField2.getName());
      assertEquals(2, offsetDateTimeField2.getMinimumValue());
      assertEquals(3, offsetDateTimeField2.getMaximumValue());
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField2));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField2.equals((Object)offsetDateTimeField0));
      assertTrue(long1 == long0);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField2);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField2, offsetDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn((-277)).when(dateTimeField0).getMaximumValue();
      doReturn(3600, 3600).when(dateTimeField0).getMinimumValue();
      doReturn(false).when(dateTimeField0).isLeap(anyLong());
      doReturn(true).when(dateTimeField0).isSupported();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = 2070;
      int int1 = (-1552);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2070, 2070, (-1552));
      offsetDateTimeField0.isLeap((-1552));
      long long0 = 0L;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getDifferenceAsLong((-1L), (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).get(anyLong());
      doReturn((-3252), 2360).when(dateTimeField0).getMaximumValue();
      doReturn((-3252)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2007, 0, 0);
      offsetDateTimeField0.addWrapField(0L, 0);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      offsetDateTimeField0.remainder(2007);
      offsetDateTimeField0.getOffset();
      OffsetDateTimeField offsetDateTimeField1 = null;
      try {
        offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-3544), 0).when(dateTimeField0).get(anyLong());
      doReturn((-3544), 2001).when(dateTimeField0).getMaximumValue();
      doReturn(2244, (-1240)).when(dateTimeField0).getMinimumValue();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((-1659L)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(2080L).when(dateTimeField0).roundHalfEven(anyLong());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("NJ8Vev8t}F#\"FXn^", "gWmL.l% ,xx*>v<n").when(dateTimeFieldType0).getName();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2002);
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, (-760));
      offsetDateTimeField1.getMaximumShortTextLength((Locale) null);
      offsetDateTimeField1.get(667L);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField2 = new OffsetDateTimeField(offsetDateTimeField1, dateTimeFieldType1, (-760), (-760), 2002);
      offsetDateTimeField2.getAsShortText((long) 2002);
      offsetDateTimeField1.roundHalfEven(165L);
      offsetDateTimeField2.getMaximumValue(165L);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      offsetDateTimeField1.roundCeiling((-760));
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        offsetDateTimeField1.set((long) (-760), (-886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -886 for NJ8Vev8t}F#\"FXn^ must be in the range [2,3243]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
