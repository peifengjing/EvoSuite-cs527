/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:17:36 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MillisDurationField_ESTest extends MillisDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getValueAsLong(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getValueAsLong(15778476000L, (-2491L));
      assertEquals(15778476000L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getValueAsLong(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getValueAsLong(2857L);
      assertEquals(2857L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getValue(0L, 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getValue(123456789L, 10800007L);
      assertEquals(123456789, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getValue(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getValue((-2808L));
      assertEquals((-2808), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(109L, 29L);
      assertEquals(109L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(2213L);
      assertEquals(2213L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis((-651), 10800007L);
      assertEquals((-651L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis((-1345));
      assertEquals((-1345L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getDifferenceAsLong(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getDifferenceAsLong(123456789L, 0L);
      assertEquals(123456789L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getDifference(1L, 1L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getDifference((-5044L), (-4588L));
      assertEquals((-456), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.add(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.add(26607895200000L, 0L);
      assertEquals(26607895200000L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.add((long) 0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.add((-1L), 20503125);
      assertEquals(20503124L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      // Undeclared exception!
      try { 
        millisDurationField0.getValue(2629746000L, 3669L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2629746000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      // Undeclared exception!
      try { 
        millisDurationField0.getValue(21260793600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 21260793600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      // Undeclared exception!
      try { 
        millisDurationField0.getDifference((-12219292800000L), 21260793600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -33480086400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      // Undeclared exception!
      try { 
        millisDurationField0.compareTo((DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.MillisDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getUnitMillis();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      boolean boolean0 = millisDurationField0.equals(millisDurationField0);
      assertTrue(boolean0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertTrue(millisDurationField0.isSupported());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 28);
      int int0 = millisDurationField0.compareTo((DurationField) scaledDurationField0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.compareTo((DurationField) millisDurationField0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      TestPreciseDateTimeField.MockImpreciseDurationField testPreciseDateTimeField_MockImpreciseDurationField0 = new TestPreciseDateTimeField.MockImpreciseDurationField(durationFieldType0);
      int int0 = millisDurationField0.compareTo((DurationField) testPreciseDateTimeField_MockImpreciseDurationField0);
      assertEquals(1, int0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      String string0 = millisDurationField0.getName();
      assertEquals("millis", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(3179);
      assertEquals(3179L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis(1, 1438L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getMillis((-1081L), (-1081L));
      assertEquals((-1081L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getDifferenceAsLong((-3185L), 2452L);
      assertEquals((-5637L), long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.add((-1L), (-1L));
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      boolean boolean0 = millisDurationField0.isPrecise();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.add(0L, (-3185));
      assertEquals((-3185L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getValueAsLong((-2605L));
      assertEquals((-2605L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.hashCode();
      assertEquals(1L, millisDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      boolean boolean0 = millisDurationField0.isSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getValue((long) (-2808), 1680000L);
      assertEquals((-2808), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getValue(60L);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      String string0 = millisDurationField0.toString();
      assertEquals("DurationField[millis]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = millisDurationField0.getDifference(2253L, 0L);
      assertEquals(2253, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = millisDurationField0.getValueAsLong((-2605L), (-2605L));
      assertEquals((-2605L), long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = millisDurationField0.getType();
      TestPreciseDurationDateTimeField.MockCountingDurationField testPreciseDurationDateTimeField_MockCountingDurationField0 = new TestPreciseDurationDateTimeField.MockCountingDurationField(durationFieldType0);
      boolean boolean0 = millisDurationField0.equals(testPreciseDurationDateTimeField_MockCountingDurationField0);
      assertFalse(boolean0);
  }
}
