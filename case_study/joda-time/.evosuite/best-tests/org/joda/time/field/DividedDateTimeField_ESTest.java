/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:36:44 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.TestBaseDateTimeField;
import org.joda.time.field.TestOffsetDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DividedDateTimeField_ESTest extends DividedDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 2);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, dividedDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.set((long) (-3715), 2);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, dividedDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(245L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(gJChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, gJChronology0);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(lenientDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 4);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 3);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.set(8252640000L, 1);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals((-129291357000L), long0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotNull(gJChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, gJChronology0);
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotNull(lenientDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 4);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 3);
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.roundFloor(1L);
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertNotNull(testBaseDateTimeField_MockBaseDateTimeField0);
      
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      assertEquals(0, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(59, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testBaseDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertNotNull(testBaseDateTimeField_MockStandardBaseDateTimeField0);
      
      DurationField durationField0 = testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      assertEquals(0, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(59, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testBaseDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, durationField0, dateTimeFieldType0, 46);
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertEquals(0, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(59, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testBaseDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(46, dividedDateTimeField0.getDivisor());
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.roundFloor(0L);
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertEquals(0, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(59, testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testBaseDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(46, dividedDateTimeField0.getDivisor());
      assertEquals(960L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 92);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.roundFloor(2);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-915148800000L), long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2158);
      assertEquals("+00:00:02.158", dateTimeZone0.toString());
      assertEquals("+00:00:02.158", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:02.158", dateTimeZone0.toString());
      assertEquals("+00:00:02.158", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals("+00:00:02.158", dateTimeZone0.toString());
      assertEquals("+00:00:02.158", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2158);
      assertEquals("+00:00:02.158", dateTimeZone0.toString());
      assertEquals("+00:00:02.158", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2157, remainderDateTimeField0.getMaximumValue());
      assertEquals(2158, remainderDateTimeField0.getDivisor());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("+00:00:02.158", dateTimeZone0.toString());
      assertEquals("+00:00:02.158", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2157, remainderDateTimeField0.getMaximumValue());
      assertEquals(2158, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(135440, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-135435), dividedDateTimeField0.getMinimumValue());
      assertEquals(2158, dividedDateTimeField0.getDivisor());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals("+00:00:02.158", dateTimeZone0.toString());
      assertEquals("+00:00:02.158", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2157, remainderDateTimeField0.getMaximumValue());
      assertEquals(2158, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(135440, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-135435), dividedDateTimeField0.getMinimumValue());
      assertEquals(2158, dividedDateTimeField0.getDivisor());
      assertEquals((-135435), int0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(gJChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, gJChronology0);
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(lenientDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 4);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 3);
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals(19, int0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertNotNull(testPreciseDateTimeField_MockPreciseDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, 454, 29, (-2));
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(454, offsetDateTimeField0.getOffset());
      assertEquals((-2), offsetDateTimeField0.getMaximumValue());
      assertEquals(454, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 29);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(29L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 292279536);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(454, offsetDateTimeField0.getOffset());
      assertEquals((-2), offsetDateTimeField0.getMaximumValue());
      assertEquals(454, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("seconds", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(29L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(292279536, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(292279535, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(454, offsetDateTimeField0.getOffset());
      assertEquals((-2), offsetDateTimeField0.getMaximumValue());
      assertEquals(454, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("seconds", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(29L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(292279536, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(292279535, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-1), dividedDateTimeField0.getMaximumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(292279536, dividedDateTimeField0.getDivisor());
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(454, offsetDateTimeField0.getOffset());
      assertEquals((-2), offsetDateTimeField0.getMaximumValue());
      assertEquals(454, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("seconds", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(29L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(292279536, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(292279535, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-1), dividedDateTimeField0.getMaximumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(292279536, dividedDateTimeField0.getDivisor());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(gJChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, gJChronology0);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(lenientDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 4);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 3);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.getDifferenceAsLong(2348L, (-5265L));
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(2L, long0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(gJChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, gJChronology0);
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(lenientDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 4);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 3);
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.getDifferenceAsLong(0L, 3600001L);
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals((-1200L), long0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(delegatedDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 3566);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(3566, dividedDateTimeField0.getDivisor());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.getDifference(112532112000001L, 1);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(3566, dividedDateTimeField0.getDivisor());
      assertEquals(1, int0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(63);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.063", dateTimeZone0.toString());
      assertEquals("+00:00:00.063", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.063", dateTimeZone0.toString());
      assertEquals("+00:00:00.063", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.063", dateTimeZone0.toString());
      assertEquals("+00:00:00.063", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(gJChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, gJChronology0);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.063", dateTimeZone0.toString());
      assertEquals("+00:00:00.063", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(lenientDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 4);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 3);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.063", dateTimeZone0.toString());
      assertEquals("+00:00:00.063", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.063", dateTimeZone0.toString());
      assertEquals("+00:00:00.063", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.getDifference((-101340L), 1L);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.063", dateTimeZone0.toString());
      assertEquals("+00:00:00.063", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-33), int0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      assertEquals(0, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isSupported());
      assertEquals(60L, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getName());
      assertFalse(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isLenient());
      assertNotNull(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0, 92);
      assertEquals(0, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isSupported());
      assertEquals(60L, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getName());
      assertFalse(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(0, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isSupported());
      assertEquals(60L, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getName());
      assertFalse(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.get(1);
      assertEquals(0, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isSupported());
      assertEquals(60L, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getUnitMillis());
      assertEquals(59, testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getName());
      assertFalse(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(gJChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, gJChronology0);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(lenientDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 4);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 3);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.addWrapField(0L, 0);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
      assertEquals("+00:00:00.031", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertEquals("days", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertEquals(4L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", remainderDateTimeField0.getName());
      assertEquals(3, remainderDateTimeField0.getDivisor());
      assertEquals(2, remainderDateTimeField0.getMaximumValue());
      assertEquals(3, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0L, long0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 1757);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1757, remainderDateTimeField0.getDivisor());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1756, remainderDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(remainderDateTimeField0);
      
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertNotNull(testOffsetDateTimeField_MockStandardDateTimeField0);
      
      DurationField durationField0 = testOffsetDateTimeField_MockStandardDateTimeField0.getDurationField();
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertNotNull(durationField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1757, remainderDateTimeField0.getDivisor());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1756, remainderDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1757, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(49174, dividedDateTimeField0.getMaximumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.addWrapField((long) 1, 5);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1757, remainderDateTimeField0.getDivisor());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1756, remainderDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1757, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(49174, dividedDateTimeField0.getMaximumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(8786L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 1757);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1757, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(1756, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(remainderDateTimeField0);
      
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertNotNull(testOffsetDateTimeField_MockStandardDateTimeField0);
      
      DurationField durationField0 = testOffsetDateTimeField_MockStandardDateTimeField0.getDurationField();
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertNotNull(durationField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1757, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(1756, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(49174, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1757, dividedDateTimeField0.getDivisor());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.addWrapField((-258L), 2);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1757, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(1756, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(49174, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1757, dividedDateTimeField0.getDivisor());
      assertEquals((-86397219L), long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 44);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(44, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(43, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(44, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(43, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(44, dividedDateTimeField0.getDivisor());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.add((long) 0, (long) 0);
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(44, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(43, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(44, dividedDateTimeField0.getDivisor());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(delegatedDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 3566);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(3566, dividedDateTimeField0.getDivisor());
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.add((long) 1, (long) 1);
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(3566, dividedDateTimeField0.getDivisor());
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(112532112000001L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 92);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.add((-1L), (-1));
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals((-2903212800001L), long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertNotNull(testBaseDateTimeField_MockBaseDateTimeField0);
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0);
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertNotNull(strictDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(strictDateTimeField0, (DurationField) null, dateTimeFieldType0, 623191204);
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(623191203, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(623191204, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(remainderDateTimeField0, dateTimeFieldType0, 2);
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(623191203, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(623191204, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(2, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals("secondOfDay", remainderDateTimeField1.getName());
      assertEquals(1, remainderDateTimeField1.getMaximumValue());
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertNotNull(remainderDateTimeField1);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField1, dateTimeFieldType0);
      assertFalse(testBaseDateTimeField_MockBaseDateTimeField0.isLenient());
      assertTrue(testBaseDateTimeField_MockBaseDateTimeField0.isSupported());
      assertEquals("secondOfMinute", testBaseDateTimeField_MockBaseDateTimeField0.getName());
      assertEquals(59, testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue());
      assertEquals(0, testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(623191203, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(623191204, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(2, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals("secondOfDay", remainderDateTimeField1.getName());
      assertEquals(1, remainderDateTimeField1.getMaximumValue());
      assertEquals(311595601, dividedDateTimeField0.getMaximumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertNotNull(dividedDateTimeField0);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField(229L, (-1694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623187819 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertNotNull(testPreciseDateTimeField_MockPreciseDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, 454, 29, (-2));
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(454, offsetDateTimeField0.getOffset());
      assertEquals((-2), offsetDateTimeField0.getMaximumValue());
      assertEquals(454, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 29);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(29L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertNotNull(testPreciseDateTimeField_MockCountingDurationField0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 292279536);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(454, offsetDateTimeField0.getOffset());
      assertEquals((-2), offsetDateTimeField0.getMaximumValue());
      assertEquals(454, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals("seconds", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(29L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(292279536, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(292279535, remainderDateTimeField0.getMaximumValue());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockPreciseDateTimeField0.getName());
      assertEquals(60L, testPreciseDateTimeField_MockPreciseDateTimeField0.getUnitMillis());
      assertEquals(60, testPreciseDateTimeField_MockPreciseDateTimeField0.getRange());
      assertTrue(testPreciseDateTimeField_MockPreciseDateTimeField0.isSupported());
      assertEquals(0, testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue());
      assertEquals(59, testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue());
      assertFalse(testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(454, offsetDateTimeField0.getOffset());
      assertEquals((-2), offsetDateTimeField0.getMaximumValue());
      assertEquals(454, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals("seconds", testPreciseDateTimeField_MockCountingDurationField0.getName());
      assertEquals(29L, testPreciseDateTimeField_MockCountingDurationField0.getUnitMillis());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockCountingDurationField0.isSupported());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(292279536, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertEquals(292279535, remainderDateTimeField0.getMaximumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-1), dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(292279536, dividedDateTimeField0.getDivisor());
      assertNotNull(dividedDateTimeField0);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add((-1979L), (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 457 for secondOfDay must be in the range [454,-2]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(delegatedDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 3566);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", delegatedDateTimeField0.getName());
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(3566, dividedDateTimeField0.getDivisor());
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add((long) 1, 31449600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 112149273600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 92);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add(160L, 25734375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1927402826 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertEquals("months", unsupportedDurationField0.getName());
      assertNotNull(unsupportedDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, unsupportedDurationField0, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertNotNull(testOffsetDateTimeField_MockStandardDateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      TestPreciseDateTimeField.MockZeroDurationField testPreciseDateTimeField_MockZeroDurationField0 = new TestPreciseDateTimeField.MockZeroDurationField(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(0L, testPreciseDateTimeField_MockZeroDurationField0.getUnitMillis());
      assertEquals("hours", testPreciseDateTimeField_MockZeroDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockZeroDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockZeroDurationField0.isSupported());
      assertNotNull(testPreciseDateTimeField_MockZeroDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testOffsetDateTimeField_MockStandardDateTimeField0, testPreciseDateTimeField_MockZeroDurationField0, dateTimeFieldType0, 2465);
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(0L, testPreciseDateTimeField_MockZeroDurationField0.getUnitMillis());
      assertEquals("hours", testPreciseDateTimeField_MockZeroDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockZeroDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockZeroDurationField0.isSupported());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("year", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2465, dividedDateTimeField0.getDivisor());
      assertNotNull(dividedDateTimeField0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getOffset());
      assertEquals(62, testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", testOffsetDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testOffsetDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals(3, testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(0L, testPreciseDateTimeField_MockZeroDurationField0.getUnitMillis());
      assertEquals("hours", testPreciseDateTimeField_MockZeroDurationField0.getName());
      assertTrue(testPreciseDateTimeField_MockZeroDurationField0.isPrecise());
      assertTrue(testPreciseDateTimeField_MockZeroDurationField0.isSupported());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("year", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2465, dividedDateTimeField0.getDivisor());
      assertEquals(2465, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2464, remainderDateTimeField0.getMaximumValue());
      assertEquals("year", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField1 = null;
      try {
        dividedDateTimeField1 = new DividedDateTimeField(remainderDateTimeField0, testPreciseDateTimeField_MockZeroDurationField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertNotNull(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 20);
      assertFalse(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isLenient());
      assertTrue(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported());
      assertEquals(60L, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis());
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getName());
      assertEquals(59, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(19, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(20, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((DateTimeField) null, dateTimeFieldType0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      assertEquals(60, testPreciseDateTimeField_MockStandardDateTimeField0.getRange());
      assertEquals(60L, testPreciseDateTimeField_MockStandardDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDateTimeField_MockStandardDateTimeField0.isLenient());
      assertEquals(59, testPreciseDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testPreciseDateTimeField_MockStandardDateTimeField0.isSupported());
      assertNotNull(testPreciseDateTimeField_MockStandardDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(60, testPreciseDateTimeField_MockStandardDateTimeField0.getRange());
      assertEquals(60L, testPreciseDateTimeField_MockStandardDateTimeField0.getUnitMillis());
      assertFalse(testPreciseDateTimeField_MockStandardDateTimeField0.isLenient());
      assertEquals(59, testPreciseDateTimeField_MockStandardDateTimeField0.getMaximumValue());
      assertEquals(0, testPreciseDateTimeField_MockStandardDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", testPreciseDateTimeField_MockStandardDateTimeField0.getName());
      assertTrue(testPreciseDateTimeField_MockStandardDateTimeField0.isSupported());
      assertEquals("yearOfEra", delegatedDateTimeField0.getName());
      assertNotNull(delegatedDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 92);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.get(1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(91, remainderDateTimeField0.getMaximumValue());
      assertEquals(92, remainderDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertEquals("halfdayOfDay", dividedDateTimeField0.getName());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals(27, int0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 1331);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, testPreciseDurationDateTimeField_MockZeroDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add(2296L, 1331);
      assertEquals(55905065395202296L, long0);
      assertEquals(219593, dividedDateTimeField0.getMaximumValue());
      assertEquals((-219586), dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(iSOChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.halfdays();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1469);
      long long0 = dividedDateTimeField0.remainder(0L);
      assertEquals(0L, long0);
      assertEquals(1469, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 3566);
      long long0 = dividedDateTimeField0.set((long) 0, 0);
      assertEquals(0L, long0);
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0, 92);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(0, int0);
      assertEquals(92, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 1689);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, int0);
      assertEquals(1689, dividedDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0, 92);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.remainder((-2183L));
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(3337L, long0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(92, dividedDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 454);
      int int0 = dividedDateTimeField0.get((-3009L));
      assertEquals((-1), int0);
      assertEquals(454, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 3566);
      dividedDateTimeField0.getRangeDurationField();
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 3566);
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      assertNull(durationField0);
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
      assertEquals(3566, dividedDateTimeField0.getDivisor());
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, 454, 29, (-2));
      TestPreciseDateTimeField.MockCountingDurationField testPreciseDateTimeField_MockCountingDurationField0 = new TestPreciseDateTimeField.MockCountingDurationField(durationFieldType0, 29);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0, 292279536);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, testPreciseDateTimeField_MockCountingDurationField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set(1323L, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2 for secondOfDay must be in the range [0,-1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, 454, 29, (-2));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 1161);
      assertEquals(1161, dividedDateTimeField0.getDivisor());
      assertEquals((-1), dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 3566);
      int int0 = dividedDateTimeField0.getDifference(1, 3566);
      assertEquals(81962, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, int0);
      assertEquals(3566, dividedDateTimeField0.getDivisor());
      assertEquals((-81960), dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 1689);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(1689, 1689);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(0L, long0);
      assertEquals(1689, dividedDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 1689);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField((long) 1689, 1689);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 999999);
      int int0 = dividedDateTimeField0.getDivisor();
      assertEquals(999999, int0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 999999);
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)dividedDateTimeField0.getDurationField();
      assertEquals(999999, dividedDateTimeField0.getDivisor());
      assertEquals(999999, scaledDurationField0.getScalar());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertNotNull(scaledDurationField0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 92);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.remainder((-2190L));
      assertEquals((-3176832), dividedDateTimeField0.getMinimumValue());
      assertEquals(3176951, dividedDateTimeField0.getMaximumValue());
      assertEquals((-2190L), long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 999999);
      long long0 = dividedDateTimeField0.add((long) 999999, (-109L));
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals((-108998891001L), long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DurationField durationField0 = testPreciseDateTimeField_MockStandardDateTimeField0.getRangeDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1128);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundFloor(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 1689);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 0, 0);
      assertEquals(1689, dividedDateTimeField0.getDivisor());
      assertEquals(0L, long0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }
}
