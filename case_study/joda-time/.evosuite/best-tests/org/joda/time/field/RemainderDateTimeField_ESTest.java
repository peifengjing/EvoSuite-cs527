/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:00:00 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.ReadablePartial;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemainderDateTimeField_ESTest extends RemainderDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2, 1646).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)1646).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn((long)2).when(dateTimeField0).set(anyLong() , anyInt());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2440);
      intArray0[4] = 2;
      intArray0[5] = 2;
      int int0 = remainderDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, (-2440), 2, 2}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(2325).when(readablePartial1).get(any(org.joda.time.DateTimeFieldType.class));
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = remainderDateTimeField0.getAsShortText(readablePartial1, locale0);
      assertEquals("2325", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(string0);
      
      long long0 = remainderDateTimeField0.addWrapField(0L, (-1385));
      assertEquals(2L, long0);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      int int1 = remainderDateTimeField0.get(0L);
      assertEquals(0, int1);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(int1 == int0);
      
      long long1 = remainderDateTimeField0.roundHalfEven(0L);
      assertEquals(1646L, long1);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1425), (-1425), 0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1425)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn((long)(-1425)).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn((-1388L), 0L).when(dateTimeField0).set(anyLong() , anyInt());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals((-1425L), long0);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      DurationField durationField3 = remainderDateTimeField0.getDurationField();
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(durationField3);
      assertSame(durationField3, durationField0);
      assertSame(durationField3, durationField2);
      assertFalse(durationField3.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(string0);
      
      long long1 = remainderDateTimeField0.addWrapField(25L, (-1425));
      assertEquals((-1388L), long1);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertFalse(long1 == long0);
      
      String string1 = remainderDateTimeField0.getAsText(3508, locale0);
      assertEquals("3508", string1);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      long long2 = remainderDateTimeField0.roundHalfEven(1);
      assertEquals((-1425L), long2);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      
      int int1 = remainderDateTimeField0.getDivisor();
      assertEquals(2, int1);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertFalse(int1 == int0);
      
      long long3 = remainderDateTimeField0.set(42474480000L, 1);
      assertEquals((-1388L), long3);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "(uL").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1425), (-1425)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1425)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn((long)(-1425)).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn(664L).when(dateTimeField0).set(anyLong() , anyInt());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals((-1425L), long0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      DurationField durationField3 = remainderDateTimeField0.getDurationField();
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertNotNull(durationField3);
      assertSame(durationField3, durationField2);
      assertSame(durationField3, durationField0);
      assertFalse(durationField3.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("(uL");
      assertEquals("", locale0.getCountry());
      assertEquals("(ul", locale0.getISO3Language());
      assertEquals("(ul", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("(ul", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("(ul", locale0.getISO3Language());
      assertEquals("(ul", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("(ul", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      long long1 = remainderDateTimeField0.addWrapField(25L, (-1425));
      assertEquals(664L, long1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertFalse(long1 == long0);
      
      String string0 = remainderDateTimeField0.getAsText(3508, locale0);
      assertEquals("3508", string0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("(ul", locale0.getISO3Language());
      assertEquals("(ul", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("(ul", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string0);
      
      long long2 = remainderDateTimeField0.roundHalfEven(1);
      assertEquals((-1425L), long2);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      int int1 = remainderDateTimeField0.getMaximumValue();
      assertEquals(1, int1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("5i0WVzgfH=fu$<m^").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-881), (-881), 0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundHalfCeiling(0L);
      assertEquals(0L, long0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      String string0 = remainderDateTimeField0.getAsText((long) (-881));
      assertEquals("1", string0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(string0);
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      long long1 = remainderDateTimeField0.roundHalfEven((-4721L));
      assertEquals(0L, long1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(long1 == long0);
      
      int int1 = remainderDateTimeField0.get(0L);
      assertEquals(1, int1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(int1 == int0);
      
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertNull(remainderDateTimeField1.getName());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      // Undeclared exception!
      try { 
        remainderDateTimeField1.getAsShortText((long) 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "Q").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(1863L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(1863L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-6146L)).when(dateTimeField0).roundHalfFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals(1863L, long0);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      long long1 = remainderDateTimeField0.roundHalfFloor(1);
      assertEquals((-6146L), long1);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertFalse(long1 == long0);
      
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      long long2 = remainderDateTimeField1.roundHalfCeiling(1);
      assertEquals(1863L, long2);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 70).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1425)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn((long)(-1425)).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn((-604800000L)).when(dateTimeField0).set(anyLong() , anyInt());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals((-1425L), long0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      DurationField durationField3 = remainderDateTimeField0.getDurationField();
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNotNull(durationField3);
      assertSame(durationField3, durationField0);
      assertSame(durationField3, durationField2);
      assertFalse(durationField3.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      long long1 = remainderDateTimeField0.addWrapField(25L, (-1425));
      assertEquals((-604800000L), long1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertFalse(long1 == long0);
      
      String string0 = remainderDateTimeField0.getAsText(3508, locale0);
      assertEquals("3508", string0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(string0);
      
      long long2 = remainderDateTimeField0.roundHalfEven(1);
      assertEquals((-1425L), long2);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1425)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn((long)(-1425)).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals((-1425L), long0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      DurationField durationField3 = remainderDateTimeField0.getDurationField();
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(durationField3);
      assertSame(durationField3, durationField0);
      assertSame(durationField3, durationField2);
      assertFalse(durationField3.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      long long1 = remainderDateTimeField0.addWrapField(25L, (-1425));
      assertEquals(0L, long1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertFalse(long1 == long0);
      
      String string0 = remainderDateTimeField0.getAsText(3508, locale0);
      assertEquals("3508", string0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string0);
      
      long long2 = remainderDateTimeField0.roundHalfEven(1);
      assertEquals((-1425L), long2);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1281)).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1281)).when(dateTimeField0).remainder(anyLong());
      doReturn((long)(-1281)).when(dateTimeField0).roundFloor(anyLong());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 779);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeFieldType0).when(dividedDateTimeField0).getType();
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField2 = new RemainderDateTimeField(remainderDateTimeField1, dateTimeFieldType1, 117);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(116, remainderDateTimeField2.getMaximumValue());
      assertEquals(117, remainderDateTimeField2.getDivisor());
      assertTrue(remainderDateTimeField2.isSupported());
      assertEquals(0, remainderDateTimeField2.getMinimumValue());
      assertNull(remainderDateTimeField2.getName());
      assertNotNull(remainderDateTimeField2);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField1));
      
      long long0 = remainderDateTimeField1.remainder(2271L);
      assertEquals((-1281L), long0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      long long1 = remainderDateTimeField2.roundFloor(1155L);
      assertEquals((-1281L), long1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(116, remainderDateTimeField2.getMaximumValue());
      assertEquals(117, remainderDateTimeField2.getDivisor());
      assertTrue(remainderDateTimeField2.isSupported());
      assertEquals(0, remainderDateTimeField2.getMinimumValue());
      assertNull(remainderDateTimeField2.getName());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertNotSame(remainderDateTimeField2, remainderDateTimeField0);
      assertNotSame(remainderDateTimeField2, remainderDateTimeField1);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField1));
      assertTrue(long1 == long0);
      
      // Undeclared exception!
      try { 
        remainderDateTimeField1.get(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "Q").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(1863L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn((-6146L)).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-6146L)).when(dateTimeField0).roundHalfFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals(1863L, long0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      long long1 = remainderDateTimeField0.roundHalfFloor(1);
      assertEquals((-6146L), long1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertFalse(long1 == long0);
      
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      long long2 = remainderDateTimeField1.roundHalfCeiling(1);
      assertEquals((-6146L), long2);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeFieldType0).getName();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2441);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2441, remainderDateTimeField0.getDivisor());
      assertEquals(2440, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      // Undeclared exception!
      try { 
        remainderDateTimeField0.set((-4721L), (-4696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4696 for null must be in the range [0,2440]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "J[[\"~7g+!<%PXo", "-I").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1425)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1425)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals((-1425L), long0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      DurationField durationField3 = remainderDateTimeField0.getDurationField();
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(durationField3);
      assertSame(durationField3, durationField0);
      assertSame(durationField3, durationField2);
      assertFalse(durationField3.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      int int1 = remainderDateTimeField1.getMaximumValue();
      assertEquals((-1), int1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(int1 == int0);
      
      long long1 = remainderDateTimeField1.roundFloor(0L);
      assertEquals(0L, long1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        remainderDateTimeField1.getAsShortText((long) 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1527)).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).remainder(anyLong());
      doReturn(0L).when(dateTimeField0).roundFloor(anyLong());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 779);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeFieldType0).when(dividedDateTimeField0).getType();
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField2 = new RemainderDateTimeField(remainderDateTimeField1, dateTimeFieldType1, 117);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(116, remainderDateTimeField2.getMaximumValue());
      assertNull(remainderDateTimeField2.getName());
      assertTrue(remainderDateTimeField2.isSupported());
      assertEquals(0, remainderDateTimeField2.getMinimumValue());
      assertEquals(117, remainderDateTimeField2.getDivisor());
      assertNotNull(remainderDateTimeField2);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField0));
      
      long long0 = remainderDateTimeField1.remainder(43200000L);
      assertEquals(0L, long0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      int int0 = remainderDateTimeField1.getDivisor();
      assertEquals(0, int0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int int1 = remainderDateTimeField1.getMaximumValue(readablePartial0);
      assertEquals((-1), int1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(int1 == int0);
      
      long long1 = remainderDateTimeField2.roundFloor(1155L);
      assertEquals(0L, long1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertNull(remainderDateTimeField1.getName());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(116, remainderDateTimeField2.getMaximumValue());
      assertNull(remainderDateTimeField2.getName());
      assertTrue(remainderDateTimeField2.isSupported());
      assertEquals(0, remainderDateTimeField2.getMinimumValue());
      assertEquals(117, remainderDateTimeField2.getDivisor());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertNotSame(remainderDateTimeField2, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField2, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField0));
      assertTrue(long1 == long0);
      
      // Undeclared exception!
      try { 
        remainderDateTimeField1.get(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1425)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(1843L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(1843L).when(dateTimeField0).roundHalfFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals(1843L, long0);
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      long long1 = remainderDateTimeField0.roundHalfFloor(1);
      assertEquals(1843L, long1);
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertTrue(long1 == long0);
      
      String string0 = remainderDateTimeField0.getAsShortText((long) 2);
      assertEquals("1", string0);
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(779).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)779).when(dateTimeField0).remainder(anyLong());
      doReturn(3600000L).when(dateTimeField0).roundFloor(anyLong());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 779);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeFieldType0).when(dividedDateTimeField0).getType();
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNull(remainderDateTimeField1.getName());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField2 = new RemainderDateTimeField(remainderDateTimeField1, dateTimeFieldType1, 106);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField2.getMinimumValue());
      assertEquals(106, remainderDateTimeField2.getDivisor());
      assertNull(remainderDateTimeField2.getName());
      assertEquals(105, remainderDateTimeField2.getMaximumValue());
      assertTrue(remainderDateTimeField2.isSupported());
      assertNotNull(remainderDateTimeField2);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField0));
      
      long long0 = remainderDateTimeField1.remainder(2271L);
      assertEquals(779L, long0);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNull(remainderDateTimeField1.getName());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      long long1 = remainderDateTimeField2.roundFloor(1155L);
      assertEquals(3600000L, long1);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField2.getMinimumValue());
      assertEquals(106, remainderDateTimeField2.getDivisor());
      assertNull(remainderDateTimeField2.getName());
      assertEquals(105, remainderDateTimeField2.getMaximumValue());
      assertTrue(remainderDateTimeField2.isSupported());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField2);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertNotSame(remainderDateTimeField2, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField2, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField2));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField2.equals((Object)remainderDateTimeField0));
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        remainderDateTimeField1.get(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "Q").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(1863L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      doReturn((-6146L)).when(dateTimeField0).roundHalfFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals(1863L, long0);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      long long1 = remainderDateTimeField0.roundHalfFloor(1);
      assertEquals((-6146L), long1);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertFalse(long1 == long0);
      
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      long long2 = remainderDateTimeField1.roundHalfCeiling(1);
      assertEquals(0L, long2);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertNotSame(remainderDateTimeField1, remainderDateTimeField0);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 779);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeFieldType0).when(dividedDateTimeField0).getType();
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(779, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(778, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField1.getName());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((DurationFieldType) null).when(dateTimeFieldType1).getRangeDurationType();
      RemainderDateTimeField remainderDateTimeField2 = null;
      try {
        remainderDateTimeField2 = new RemainderDateTimeField(remainderDateTimeField1, dateTimeFieldType1, 117);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("UW[u^").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-523)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertNull(remainderDateTimeField1.getName());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      // Undeclared exception!
      try { 
        remainderDateTimeField1.addWrapField((long) 1, (-2107));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("5/i0WVzgfH=fu$?<m^").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-881)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfCeiling(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertTrue(remainderDateTimeField1.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertNull(remainderDateTimeField1.getName());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
      
      long long0 = remainderDateTimeField0.roundHalfCeiling((-1L));
      assertEquals(0L, long0);
      assertNull(remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotSame(remainderDateTimeField0, remainderDateTimeField1);
      assertFalse(remainderDateTimeField0.equals((Object)remainderDateTimeField1));
      
      // Undeclared exception!
      try { 
        remainderDateTimeField1.getAsShortText((long) 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", (String) null, (String) null).when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundCeiling(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals(0L, long0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      DurationField durationField3 = remainderDateTimeField0.getDurationField();
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(durationField3);
      assertSame(durationField3, durationField2);
      assertSame(durationField3, durationField0);
      assertFalse(durationField3.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertNull(remainderDateTimeField1.getName());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("5i0WVzgfH=fu$<m^").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-881)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).roundHalfEven(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      String string0 = remainderDateTimeField0.getAsText((long) (-881));
      assertEquals("1", string0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(string0);
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      long long0 = remainderDateTimeField0.roundHalfEven(2);
      assertEquals(0L, long0);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField1.getDivisor());
      assertEquals(0, remainderDateTimeField1.getMinimumValue());
      assertEquals((-1), remainderDateTimeField1.getMaximumValue());
      assertNull(remainderDateTimeField1.getName());
      assertTrue(remainderDateTimeField1.isSupported());
      assertNotNull(remainderDateTimeField1);
      assertFalse(remainderDateTimeField1.equals((Object)remainderDateTimeField0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dividedDateTimeField0).isSupported();
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0, (-985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeFieldType0).when(dividedDateTimeField0).getType();
      doReturn(dateTimeField0, (DateTimeField) null).when(dividedDateTimeField0).getWrappedField();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dateTimeField0).isSupported();
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, (-3211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeField0, (DateTimeField) null).when(dividedDateTimeField0).getWrappedField();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField((DateTimeField) null, durationField0, dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeField) null).when(dividedDateTimeField0).getWrappedField();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeField) null).when(dividedDateTimeField0).getWrappedField();
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField((DividedDateTimeField) null, (DurationField) null, (DateTimeFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2605, 0).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn((long)(-1404)).when(dateTimeField0).roundCeiling(anyLong());
      doReturn((long)(-1404)).when(dateTimeField0).roundHalfEven(anyLong());
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationField1).toString();
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundCeiling(42474480000L);
      assertEquals((-1404L), long0);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      DurationField durationField2 = remainderDateTimeField0.getDurationField();
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(durationField2);
      assertSame(durationField2, durationField0);
      assertFalse(durationField2.equals((Object)durationField1));
      
      DurationField durationField3 = remainderDateTimeField0.getDurationField();
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(durationField3);
      assertSame(durationField3, durationField0);
      assertSame(durationField3, durationField2);
      assertFalse(durationField3.equals((Object)durationField1));
      
      int int0 = remainderDateTimeField0.getMaximumValue((long) 2);
      assertEquals(1, int0);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      long long1 = remainderDateTimeField0.addWrapField(25L, (-1425));
      assertEquals(0L, long1);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertFalse(long1 == long0);
      
      String string0 = remainderDateTimeField0.getAsText(3508, locale0);
      assertEquals("3508", string0);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(string0);
      
      long long2 = remainderDateTimeField0.roundHalfEven(1);
      assertEquals((-1404L), long2);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      DurationField durationField4 = remainderDateTimeField0.getRangeDurationField();
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(durationField4);
      assertSame(durationField4, durationField1);
      assertFalse(durationField4.equals((Object)durationField2));
      assertFalse(durationField4.equals((Object)durationField0));
      assertFalse(durationField4.equals((Object)durationField3));
      
      int int1 = remainderDateTimeField0.getMinimumValue();
      assertEquals(0, int1);
      assertNull(remainderDateTimeField0.getName());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn("J[[\"~7g+!<%PXo", "Q").when(durationField0).toString();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((-1425)).when(dateTimeField0).get(anyLong());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(1863L).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(0L).when(dateTimeField0).roundHalfFloor(anyLong());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      remainderDateTimeField0.roundCeiling(42474480000L);
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(remainderDateTimeField0, remainderDateTimeField0).when(dividedDateTimeField0).getWrappedField();
      remainderDateTimeField0.getDurationField();
      remainderDateTimeField0.getMaximumValue((long) 2);
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      remainderDateTimeField0.roundHalfFloor(1);
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
      // Undeclared exception!
      try { 
        remainderDateTimeField1.getAsShortText((long) 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      int int0 = 903;
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField((DateTimeField) null, dateTimeFieldType1, 903);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(dateTimeField0).get(anyLong());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      doReturn(0L).when(dateTimeField0).set(anyLong() , anyInt());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType0, 2);
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2440);
      intArray0[4] = 2;
      intArray0[5] = 2;
      int int0 = remainderDateTimeField0.getMinimumValue(readablePartial0, intArray0);
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(1196).when(readablePartial1).get(any(org.joda.time.DateTimeFieldType.class));
      Locale locale0 = Locale.UK;
      remainderDateTimeField0.getAsShortText(readablePartial1, locale0);
      remainderDateTimeField0.addWrapField(0L, (-1385));
      int int1 = remainderDateTimeField0.get(0L);
      assertTrue(int1 == int0);
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField0).getDurationField();
      doReturn(true).when(dateTimeField0).isSupported();
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 779);
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeFieldType0).when(dividedDateTimeField0).getType();
      doReturn(remainderDateTimeField0, (DateTimeField) null).when(dividedDateTimeField0).getWrappedField();
      RemainderDateTimeField remainderDateTimeField1 = null;
      try {
        remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DividedDateTimeField dividedDateTimeField0 = mock(DividedDateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeFieldType) null).when(dividedDateTimeField0).getType();
      doReturn((DateTimeField) null).when(dividedDateTimeField0).getWrappedField();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField((DividedDateTimeField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }
}
