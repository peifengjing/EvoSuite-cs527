/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:28:01 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.field.StrictDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrictDateTimeField_ESTest extends StrictDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 3173).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0, 0).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      doReturn((-1000L), 0L).when(dateTimeField0).set(anyLong() , anyInt());
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.set((-353L), 0);
      long long0 = strictDateTimeField0.set((-146L), 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeFieldType0).getName();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn((-2962), 0).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn(dateTimeFieldType0).when(dateTimeField0).getType();
      doReturn(3036L).when(dateTimeField0).set(anyLong() , anyInt());
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.set(500L, 0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((-692L), (-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -888 for null must be in the range [0,0]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn(0).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((-353L), 487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StrictDateTimeField strictDateTimeField0 = null;
      try {
        strictDateTimeField0 = new StrictDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeField dateTimeField0 = StrictDateTimeField.getInstance((DateTimeField) null);
      assertNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(strictDateTimeField0);
      assertSame(dateTimeField1, strictDateTimeField0);
      assertNotNull(dateTimeField1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeFieldType) null).when(dateTimeField0).getType();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      boolean boolean0 = strictDateTimeField0.isLenient();
      assertFalse(boolean0);
  }
}
