/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 17:02:42 GMT 2017
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.joda.time.Duration;
import org.joda.time.MutableInterval;
import org.joda.time.convert.CalendarConverter;
import org.joda.time.convert.Converter;
import org.joda.time.convert.ConverterSet;
import org.joda.time.convert.DateConverter;
import org.joda.time.convert.MockZeroNullIntegerConverter;
import org.joda.time.convert.NullConverter;
import org.joda.time.convert.ReadableDurationConverter;
import org.joda.time.convert.ReadableInstantConverter;
import org.joda.time.convert.ReadablePartialConverter;
import org.joda.time.convert.ReadablePeriodConverter;
import org.joda.time.convert.StringConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConverterSet_ESTest extends ConverterSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(1, converterArray0);
      ConverterSet converterSet2 = converterSet1.remove(readableInstantConverter0, converterArray0);
      assertSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Converter[] converterArray0 = new Converter[4];
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      converterArray0[0] = (Converter) readableDurationConverter0;
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = new MockZeroNullIntegerConverter();
      converterArray0[1] = (Converter) mockZeroNullIntegerConverter0;
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter1 = new MockZeroNullIntegerConverter();
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(converterArray0[0], converterArray0);
      assertNotSame(converterSet1, converterSet0);
      
      ConverterSet converterSet2 = converterSet1.add(mockZeroNullIntegerConverter1, converterArray0);
      assertNotSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter[] converterArray0 = new Converter[3];
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[1] = (Converter) readablePartialConverter0;
      converterArray0[2] = (Converter) readableDurationConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(0, converterArray0);
      ConverterSet converterSet2 = converterSet1.add(readableDurationConverter0, converterArray0);
      assertSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      DateConverter dateConverter0 = new DateConverter();
      ConverterSet.Entry converterSet_Entry0 = new ConverterSet.Entry(class0, dateConverter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter[] converterArray0 = new Converter[8];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      converterSet0.copyInto(converterArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      converterArray0[1] = (Converter) readableInstantConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(1, converterArray0);
      ConverterSet converterSet2 = converterSet1.remove(readableInstantConverter0, converterArray0);
      int int0 = converterSet2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter[] converterArray0 = new Converter[1];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      int int0 = converterSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.remove((-4097), (Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove((-595), (Converter[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove((-9), converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(16, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter[] converterArray0 = new Converter[3];
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      converterArray0[0] = (Converter) readableDurationConverter0;
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[1] = (Converter) readablePartialConverter0;
      converterArray0[2] = (Converter) readableDurationConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Class<Integer> class0 = Integer.class;
      Converter converter0 = converterSet0.select(class0);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Duration duration0 = new Duration(mutableInterval0);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[0] = (Converter) nullConverter0;
      NullConverter nullConverter1 = new NullConverter();
      converterArray0[1] = (Converter) nullConverter1;
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[2] = (Converter) calendarConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(calendarConverter0, converterArray0);
      ConverterSet converterSet2 = converterSet0.remove(nullConverter0, (Converter[]) null);
      assertSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Converter[] converterArray0 = new Converter[4];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(converterArray0[0], converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      // Undeclared exception!
      try { 
        converterSet0.remove(readablePartialConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      NullConverter nullConverter0 = new NullConverter();
      ConverterSet converterSet1 = converterSet0.add(nullConverter0, (Converter[]) null);
      assertFalse(converterSet1.equals((Object)converterSet0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[0] = (Converter) nullConverter0;
      converterArray0[1] = (Converter) nullConverter0;
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[2] = (Converter) calendarConverter0;
      CalendarConverter calendarConverter1 = CalendarConverter.INSTANCE;
      converterArray0[4] = (Converter) calendarConverter1;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(converterArray0[4], (Converter[]) null);
      assertNotSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Converter[] converterArray0 = new Converter[3];
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[1] = (Converter) readablePartialConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(0, converterArray0);
      // Undeclared exception!
      try { 
        converterSet1.add(readableDurationConverter0, converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[0] = (Converter) nullConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(converterArray0[0], (Converter[]) null);
      assertSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      // Undeclared exception!
      try { 
        converterSet0.add(dateConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      converterArray0[0] = (Converter) readablePeriodConverter0;
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      converterArray0[1] = (Converter) stringConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter converter0 = converterSet0.select((Class<?>) null);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = new MockZeroNullIntegerConverter();
      Converter[] converterArray0 = new Converter[8];
      converterArray0[7] = (Converter) mockZeroNullIntegerConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter converter0 = converterSet0.select(class0);
      Converter converter1 = converterSet0.select(class0);
      assertSame(converter1, converter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.select((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.copyInto((Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }
}
