/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:35:04 GMT 2017
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.convert.MockBadChronology;
import org.joda.time.convert.ReadableIntervalConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadableIntervalConverter_ESTest extends ReadableIntervalConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      DateTime dateTime0 = new DateTime((Object) null, mockBadChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadablePeriod) null);
      Interval interval0 = new Interval(mutableInterval0, mockBadChronology0);
      long long0 = readableIntervalConverter0.getDurationMillis(interval0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      // Undeclared exception!
      try { 
        readableIntervalConverter0.setInto((ReadWritablePeriod) null, (Object) null, (Chronology) mockBadChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableIntervalConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Object object0 = new Object();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      // Undeclared exception!
      try { 
        readableIntervalConverter0.setInto((ReadWritablePeriod) mutablePeriod0, object0, (Chronology) mockBadChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadableInterval
         //
         verifyException("org.joda.time.convert.ReadableIntervalConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      // Undeclared exception!
      try { 
        readableIntervalConverter0.setInto((ReadWritableInterval) null, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableIntervalConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      DateTime dateTime0 = new DateTime((Object) null, mockBadChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadablePeriod) null);
      // Undeclared exception!
      try { 
        readableIntervalConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) null, (Chronology) mockBadChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readableIntervalConverter0.setInto((ReadWritableInterval) null, object0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadableInterval
         //
         verifyException("org.joda.time.convert.ReadableIntervalConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readableIntervalConverter0.getDurationMillis(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadableInterval
         //
         verifyException("org.joda.time.convert.ReadableIntervalConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      boolean boolean0 = readableIntervalConverter0.isReadableInterval(mockThaiBuddhistDate0, mockBadChronology0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      Class<?> class0 = readableIntervalConverter0.getSupportedType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      DateTime dateTime0 = new DateTime((Object) null, mockBadChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadablePeriod) null);
      readableIntervalConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) mutableInterval0, (Chronology) mockBadChronology0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      DateTime dateTime0 = new DateTime((Object) null, mockBadChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadablePeriod) null);
      readableIntervalConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) mutableInterval0, (Chronology) null);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      DateTime dateTime0 = new DateTime((Object) null, mockBadChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadablePeriod) null);
      Interval interval0 = new Interval(mutableInterval0, mockBadChronology0);
      Duration duration0 = interval0.toDuration();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0);
      readableIntervalConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) interval0, (Chronology) mockBadChronology0);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readableIntervalConverter0.getDurationMillis((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableIntervalConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      // Undeclared exception!
      try { 
        readableIntervalConverter0.setInto((ReadWritablePeriod) null, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableIntervalConverter", e);
      }
  }
}
