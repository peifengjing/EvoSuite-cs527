/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 17:31:37 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.TestDateMidnight_Basics;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.TestMutableInterval_Updates;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTime_ESTest extends DateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = testAbstractPartial_MockPartial0.indexOf(dateTimeFieldType0);
      assertEquals((-1), int0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType1.getName());
      assertEquals("minuteOfHour", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = testAbstractPartial_MockPartial0.isSupported(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(boolean1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType1.getName());
      assertEquals("minuteOfHour", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertTrue(boolean1 == boolean0);
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      Instant instant0 = new Instant((-81L));
      assertNotNull(instant0);
      assertEquals((-81L), instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals((-81L), instant0.getMillis());
      assertEquals((-81L), dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property0);
      assertEquals((-81L), instant0.getMillis());
      assertEquals((-81L), dateTime0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals((-81L), instant0.getMillis());
      
      LocalTime localTime0 = new LocalTime((long) (-1), chronology0);
      assertNotNull(localTime0);
      assertEquals((-81L), instant0.getMillis());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMillisOfDay(0);
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals((-81L), instant0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      DateTime dateTime1 = dateTime0.withTime(localTime1);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-81L), instant0.getMillis());
      assertEquals((-81L), dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals((-86400000L), dateTime1.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockNullZoneChronology mockNullZoneChronology1 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime0 = new DateTime(0L, (Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime1);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      Period period0 = new Period(dateTime0, dateTime1, (PeriodType) null);
      assertNotNull(period0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      Period period1 = period0.minusSeconds((-2147483647));
      assertNotNull(period1);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      assertFalse(period1.equals((Object)period0));
      
      // Undeclared exception!
      try { 
        dateTime0.withPeriodAdded(period1, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // seconds field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = Calendar.SEPTEMBER;
      assertEquals(8, int0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        dateTime0.minusMinutes(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minutes field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withChronology(mockNullZoneChronology0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime1.year();
      assertNotNull(dateTime_Property0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.toDateTime((DateTimeZone) null);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      
      LocalDate localDate0 = new LocalDate(1392336000000L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        dateTime2.withDate(localDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MockNullZoneChronology mockNullZoneChronology1 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime0);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTimeField dateTimeField0 = mockNullZoneChronology1.dayOfYear();
      assertNotNull(dateTimeField0);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      int int0 = dateTime0.compareTo(dateTime1);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.minusMinutes(0);
      assertNotNull(dateTime2);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTime dateTime3 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime3);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertTrue(dateTime3.equals((Object)dateTime2));
      assertTrue(dateTime3.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime0.toLocalDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = Calendar.DAY_OF_MONTH;
      assertEquals(5, int0);
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = uTCDateTimeZone0.adjustOffset(668L, false);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertEquals(668L, long0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTime dateTime2 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertTrue(dateTime2.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime0.withDayOfWeek(2374);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // dayOfWeek field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Duration duration0 = new Duration(0L, 1603L);
      assertNotNull(duration0);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1603L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertNotNull(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1603L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409282923L, instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      
      Instant instant2 = instant1.withMillis(0L);
      assertNotNull(instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1603L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409282923L, instant1.getMillis());
      assertEquals(0L, instant2.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Interval interval0 = duration0.toIntervalFrom(instant0);
      assertNotNull(interval0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1603L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409282923L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant2));
      
      DateTime dateTime0 = instant2.toDateTime();
      assertNotNull(dateTime0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1603L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409282923L, instant1.getMillis());
      assertEquals(0L, instant2.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) null);
      assertNotNull(mutablePeriod0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) mutablePeriod0);
      assertNotNull(dateTime1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1603L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409282923L, instant1.getMillis());
      assertEquals(0L, instant2.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      DateTime.Property dateTime_Property0 = dateTime1.era();
      assertNotNull(dateTime_Property0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1603L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1392409282923L, instant1.getMillis());
      assertEquals(0L, instant2.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      // Undeclared exception!
      try { 
        dateTime_Property0.addToCopy(1603L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTimeISO();
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertTrue(dateTime1.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((-152L), (-152L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      
      DateTime dateTime2 = dateTime1.withDurationAdded((ReadableDuration) duration0, (-702));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime3.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTime dateTime4 = dateTime0.plusMonths(0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertSame(dateTime4, dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertTrue(dateTime4.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime3.withTime(0, 0, 0, 0);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime3.getMillis());
      assertEquals(1392336000000L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      DateTime.Property dateTime_Property1 = dateTime2.era();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime.Property dateTime_Property2 = dateTime0.secondOfDay();
      assertNotNull(dateTime_Property2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      DateTime dateTime6 = dateTime2.withField(dateTimeFieldType0, 0);
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime4);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(950559681320L, dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime4));
      
      DateTime dateTime7 = dateTime3.minusMonths((-702));
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime7);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime6);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime3.getMillis());
      assertEquals(3238431660320L, dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      
      // Undeclared exception!
      try { 
        dateTime0.withWeekyear((-2147483645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483645 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property1 = dateTime0.millisOfDay();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      Locale locale0 = new Locale("org.joda.time.chrono.GJLocaleSymbols", "org.joda.time.chrono.GJLocaleSymbols");
      assertNotNull(locale0);
      assertEquals("ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.getCountry());
      assertEquals("org.joda.time.chrono.gjlocalesymbols_ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.chrono.gjlocalesymbols", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.getCountry());
      assertEquals("org.joda.time.chrono.gjlocalesymbols_ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.chrono.gjlocalesymbols", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = dateTime_Property1.getAsText(locale0);
      assertNotNull(string0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("73281320", string0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.getCountry());
      assertEquals("org.joda.time.chrono.gjlocalesymbols_ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.chrono.gjlocalesymbols", locale0.getLanguage());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime1 = dateTime_Property1.getDateTime();
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      DateTime.Property dateTime_Property2 = dateTime0.weekOfWeekyear();
      assertNotNull(dateTime_Property2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      DateTime dateTime2 = dateTime0.minusMillis(1461);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409279859L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property3 = dateTime2.centuryOfEra();
      assertNotNull(dateTime_Property3);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime_Property3, dateTime_Property2);
      assertNotSame(dateTime_Property3, dateTime_Property1);
      assertNotSame(dateTime_Property3, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409279859L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property0));
      
      DateTime dateTime3 = dateTime0.minusWeeks(1440);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(521497281320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime_Property0.withMaximumValue();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertNotSame(dateTime_Property0, dateTime_Property3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1420057281320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime1.plusMillis(1440);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(dateTime_Property1, dateTime_Property2);
      assertNotSame(dateTime_Property1, dateTime_Property3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409282760L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      DateTime dateTime6 = dateTime2.withHourOfDay(1);
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime5);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409279859L, dateTime2.getMillis());
      assertEquals(1392340879859L, dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime5));
      
      // Undeclared exception!
      try { 
        dateTime6.plusYears(2146528361);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2146530375 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withEarlierOffsetAtOverlap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      int int0 = dateTime0.getHourOfDay();
      assertSame(dateTime0, dateTime1);
      assertEquals(20, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Duration duration0 = Duration.standardMinutes(20);
      assertNotNull(duration0);
      assertEquals(1200L, duration0.getStandardSeconds());
      assertEquals(1200000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(20L, duration0.getStandardMinutes());
      
      DateTime dateTime2 = dateTime1.withDurationAdded((ReadableDuration) duration0, 178958986);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1200L, duration0.getStandardSeconds());
      assertEquals(1200000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(20L, duration0.getStandardMinutes());
      assertEquals(216143192481320L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.withWeekOfWeekyear(20);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1200L, duration0.getStandardSeconds());
      assertEquals(1200000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(20L, duration0.getStandardMinutes());
      assertEquals(216143192481320L, dateTime2.getMillis());
      assertEquals(216145006881320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime1.minusYears(6);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1203020481320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1273).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      Integer integer0 = new Integer(1416);
      assertNotNull(integer0);
      assertEquals(1416, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      
      DateTime dateTime0 = dateTimeFormatter3.parseDateTime("");
      assertNotNull(dateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)1, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte) (-113);
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)89;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((byte)23);
      assertNotNull(dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(23, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1416, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)60;
      byteArray1[7] = (byte) (-5);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte) (-113), (byte)13, (byte)89, (byte) (-1), (byte)60, (byte) (-5)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("6AuHI");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      
      DateTime dateTime1 = dateTime0.withZone(testDateTimeZone_MockDateTimeZone0);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      assertNotNull(dateTime2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.hourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      
      DateTime.Property dateTime_Property0 = new DateTime.Property(dateTime1, dateTimeField0);
      assertNotNull(dateTime_Property0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withSecondOfMinute(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.withWeekyear(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-62162998718680L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.withMinuteOfHour(0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-62162998718680L), dateTime2.getMillis());
      assertEquals((-62162999978680L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTime0.withYearOfEra((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period0 = Period.minutes(1452);
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(1452, int0);
      
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) period0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1989L), (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusHours(1452);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      DateTime dateTime2 = dateTime1.withTime(localTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1392465598011L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime1.minus((ReadableDuration) null);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(1392496401320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime1.plusMonths(934);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(3848589201320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime0.plusMonths((-3670));
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-8258902718680L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      
      DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertSame(dateTime5, dateTime6);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime2);
      assertSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-8258902718680L), dateTime5.getMillis());
      assertEquals((-8258902718680L), dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime0));
      
      DateTime dateTime7 = dateTime0.plusMinutes(1);
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime6);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409341320L, dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime6));
      
      DateTime dateTime8 = dateTime0.toDateTime();
      assertNotNull(dateTime8);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime6);
      assertSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime2);
      assertSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime1));
      
      DateTime dateTime9 = dateTime0.withDate((-3251), 1, 1);
      assertNotNull(dateTime9);
      assertNotSame(dateTime9, dateTime2);
      assertNotSame(dateTime9, dateTime6);
      assertNotSame(dateTime9, dateTime3);
      assertNotSame(dateTime9, dateTime8);
      assertNotSame(dateTime9, dateTime5);
      assertNotSame(dateTime9, dateTime1);
      assertNotSame(dateTime9, dateTime0);
      assertNotSame(dateTime9, dateTime4);
      assertNotSame(dateTime9, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime9);
      assertSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertEquals((-164758765118680L), dateTime9.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime9.equals((Object)dateTime2));
      assertFalse(dateTime9.equals((Object)dateTime6));
      assertFalse(dateTime9.equals((Object)dateTime3));
      assertFalse(dateTime9.equals((Object)dateTime8));
      assertFalse(dateTime9.equals((Object)dateTime5));
      assertFalse(dateTime9.equals((Object)dateTime1));
      assertFalse(dateTime9.equals((Object)dateTime0));
      assertFalse(dateTime9.equals((Object)dateTime4));
      assertFalse(dateTime9.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      
      DateTime.Property dateTime_Property1 = dateTime6.secondOfDay();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime9);
      assertSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime7);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime9);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime8);
      assertSame(dateTime5, dateTime6);
      assertNotSame(dateTime6, dateTime7);
      assertNotSame(dateTime6, dateTime8);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime2);
      assertSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime9);
      assertNotSame(dateTime6, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-8258902718680L), dateTime5.getMillis());
      assertEquals((-8258902718680L), dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime7));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime9));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime8));
      assertFalse(dateTime6.equals((Object)dateTime7));
      assertFalse(dateTime6.equals((Object)dateTime8));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime9));
      assertFalse(dateTime6.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime9.withDayOfYear((-3670));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3670 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = dateTime0.compareTo(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTime dateTime2 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertTrue(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.minus((long) 2358);
      assertNotNull(dateTime3);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertEquals(1392409278962L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      // Undeclared exception!
      try { 
        dateTime0.toLocalDateTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      DateTime dateTime0 = new DateTime((long) 0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertTrue(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((-152L), (-152L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      
      DateTime dateTime3 = dateTime2.withDurationAdded((ReadableDuration) duration0, (-702));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, dateTime3.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime4, dateTime2);
      assertSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertSame(dateTime4, dateTime3);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime4.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime4.equals((Object)dateTime0));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTime dateTime5 = dateTime0.plusMonths(0);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime5.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime5.equals((Object)dateTime3));
      assertTrue(dateTime5.equals((Object)dateTime1));
      assertTrue(dateTime5.equals((Object)dateTime4));
      assertTrue(dateTime5.equals((Object)dateTime2));
      
      DateTime dateTime6 = dateTime5.withDurationAdded((ReadableDuration) duration0, 0);
      assertNotNull(dateTime6);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertSame(dateTime5, dateTime6);
      assertSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime3);
      assertSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime2);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, dateTime5.getMillis());
      assertEquals(0L, dateTime6.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime5.equals((Object)dateTime3));
      assertTrue(dateTime5.equals((Object)dateTime1));
      assertTrue(dateTime5.equals((Object)dateTime4));
      assertTrue(dateTime5.equals((Object)dateTime2));
      assertTrue(dateTime6.equals((Object)dateTime2));
      assertTrue(dateTime6.equals((Object)dateTime1));
      assertTrue(dateTime6.equals((Object)dateTime3));
      assertTrue(dateTime6.equals((Object)dateTime4));
      
      DateTime.Property dateTime_Property1 = dateTime3.era();
      assertNotNull(dateTime_Property1);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime6);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime4);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, dateTime3.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime6));
      assertTrue(dateTime2.equals((Object)dateTime6));
      assertTrue(dateTime2.equals((Object)dateTime5));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime6));
      assertTrue(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime.Property dateTime_Property2 = dateTime1.secondOfDay();
      assertNotNull(dateTime_Property2);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      DateTime dateTime7 = dateTime3.withField(dateTimeFieldType0, 0);
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime7);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime7);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime6);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime7);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime4);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, dateTime3.getMillis());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals((-2208988800000L), dateTime7.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime6));
      assertTrue(dateTime2.equals((Object)dateTime6));
      assertTrue(dateTime2.equals((Object)dateTime5));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime6));
      assertTrue(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime4));
      
      DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
      assertNotNull(dateTime8);
      assertNotSame(dateTime8, dateTime0);
      assertSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime5);
      assertSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime7);
      assertSame(dateTime8, dateTime3);
      assertSame(dateTime8, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime8);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime7);
      assertEquals(0L, dateTime8.getMillis());
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertTrue(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertTrue(dateTime8.equals((Object)dateTime0));
      assertTrue(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime7));
      
      // Undeclared exception!
      try { 
        dateTime0.withWeekyear((-2147483645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483645 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = dateTime0.compareTo(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = uTCDateTimeZone0.adjustOffset(668L, false);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertEquals(668L, long0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime2 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTime0.withField(dateTimeFieldType0, 66);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfSecond field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = dateTime0.compareTo(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      // Undeclared exception!
      try { 
        dateTime0.withYear(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      boolean boolean1 = dateTimeFieldType0.isSupported(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertFalse(boolean1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = dateTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean2);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusYears(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertEquals(1392408021320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime0.minusMillis(0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime2.plusHours(0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime4, dateTime2);
      assertSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertEquals(1392408021320L, dateTime2.getMillis());
      assertEquals(1392408021320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      String string0 = dateTime_Property0.toString();
      assertNotNull(string0);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("Property[secondOfMinute]", string0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime5 = dateTime4.minusDays(0);
      assertNotNull(dateTime5);
      assertSame(dateTime5, dateTime1);
      assertSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertSame(dateTime5, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime5);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime5);
      assertSame(dateTime4, dateTime5);
      assertSame(dateTime4, dateTime2);
      assertSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertEquals(1392408021320L, dateTime5.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertEquals(1392408021320L, dateTime2.getMillis());
      assertEquals(1392408021320L, dateTime4.getMillis());
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      DateTime dateTime6 = dateTime_Property0.roundHalfEvenCopy();
      assertNotNull(dateTime6);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime5);
      assertEquals(1392408021000L, dateTime6.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime7 = dateTime0.plusDays(0);
      assertNotNull(dateTime7);
      assertNotSame(dateTime7, dateTime2);
      assertSame(dateTime7, dateTime0);
      assertSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime7.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime6));
      
      // Undeclared exception!
      try { 
        DateTime.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-357));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = localDateTime1.toDateTime(dateTimeZone0);
      assertNotNull(dateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-61196860799000L), dateTime0.getMillis());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      DateTime dateTime1 = dateTime0.withDayOfYear(1);
      assertNotNull(dateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-61196860799000L), dateTime0.getMillis());
      assertEquals((-61220447999000L), dateTime1.getMillis());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime1.withDate(1, 2147483631, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483631 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, (Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.withYearOfEra(2148);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfEra field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T{9-BlhGy");
      assertFalse(boolean0);
      
      DateTime dateTime0 = new DateTime(0L);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusMinutes((-1021));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-61260000L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.minusWeeks((-1021));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-61260000L), dateTime1.getMillis());
      assertEquals(617439540000L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1021), true, (long) (-1021));
      assertEquals((-1021L), long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTime dateTime3 = dateTime0.toDateTime(dateTimeZone0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime0.withTimeAtStartOfDay();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertTrue(dateTime4.equals((Object)dateTime0));
      assertTrue(dateTime4.equals((Object)dateTime3));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      DateTime dateTime5 = dateTime1.plusYears((-1021));
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-61260000L), dateTime1.getMillis());
      assertEquals((-32219658060000L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      
      LocalDate localDate0 = dateTime5.toLocalDate();
      assertNotNull(localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-61260000L), dateTime1.getMillis());
      assertEquals((-32219658060000L), dateTime5.getMillis());
      assertEquals(3, localDate0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      
      int int0 = dateTime5.getMillisOfSecond();
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertEquals(0, int0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-61260000L), dateTime1.getMillis());
      assertEquals((-32219658060000L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      
      TestDateMidnight_Basics testDateMidnight_Basics0 = null;
      try {
        testDateMidnight_Basics0 = new TestDateMidnight_Basics("org/joda/time/tz/data");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = dateTime0.compareTo(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      boolean boolean0 = dateTime1.isBeforeNow();
      assertNotSame(dateTime1, dateTime0);
      assertFalse(boolean0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      long long0 = uTCDateTimeZone0.adjustOffset(668L, false);
      assertEquals(668L, long0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime2 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertTrue(dateTime2.equals((Object)dateTime0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTime2.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime0.plus(0L);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      
      DateTime dateTime3 = dateTime2.withChronology(chronology0);
      assertNotNull(dateTime3);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertEquals(0L, dateTime3.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime2.minusDays(2147482772);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTime dateTime0 = new DateTime(27L);
      assertNotNull(dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusMillis(742);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(742L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTime.Property dateTime_Property0 = dateTime0.year();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(27L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime_Property0.withMaximumValue();
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(9223371985593600027L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime_Property0.roundFloorCopy();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      DateTime dateTime5 = dateTime4.withLaterOffsetAtOverlap();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime4.getMillis());
      assertEquals(0L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertTrue(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Interval interval0 = new Interval(23L, 23L, dateTimeZone0);
      assertNotNull(interval0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, interval0.getEndMillis());
      
      DateTime dateTime0 = interval0.getEnd();
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, dateTime0.getMillis());
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime1 = dateTime0.withDate(localDate0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000023L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.minus(23L);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.withEarlierOffsetAtOverlap();
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertEquals(0L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime0.plus(23L);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(46L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime1.withEarlierOffsetAtOverlap();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime5);
      assertSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000023L, dateTime1.getMillis());
      assertEquals(1392336000023L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime1.dayOfMonth();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withDate(1, (-2020), 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1618L);
      assertNotNull(dateTime0);
      assertEquals(1618L, dateTime0.getMillis());
      
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      DateTime dateTime1 = dateTime0.withFields(testAbstractPartial_MockPartial0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1618L, dateTime0.getMillis());
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1618L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.withDurationAdded((-9223372036854775799L), 2010);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775799 * 2010
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime0.plus(0L);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime2.plusMinutes((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minutes field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-743L));
      assertNotNull(dateTime0);
      assertEquals((-743L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withFields((ReadablePartial) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals((-743L), dateTime0.getMillis());
      assertEquals((-743L), dateTime1.getMillis());
      
      boolean boolean0 = dateTime0.equals(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertTrue(boolean0);
      assertEquals((-743L), dateTime0.getMillis());
      assertEquals((-743L), dateTime1.getMillis());
      
      int int0 = dateTime1.getYearOfEra();
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1969, int0);
      assertEquals((-743L), dateTime0.getMillis());
      assertEquals((-743L), dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.withTimeAtStartOfDay();
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals((-743L), dateTime0.getMillis());
      assertEquals((-743L), dateTime1.getMillis());
      assertEquals((-86400000L), dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime1.minusSeconds(292278993);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertEquals((-743L), dateTime0.getMillis());
      assertEquals((-743L), dateTime1.getMillis());
      assertEquals((-292278993743L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1969);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:01.969", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.969", dateTimeZone0.getID());
      
      DateTime dateTime4 = dateTime2.withZone(dateTimeZone0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertEquals((-743L), dateTime0.getMillis());
      assertEquals((-743L), dateTime1.getMillis());
      assertEquals((-86400000L), dateTime2.getMillis());
      assertEquals("+00:00:01.969", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.969", dateTimeZone0.getID());
      assertEquals((-86400000L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      DateTime dateTime5 = dateTime3.minusDays(1969);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertEquals((-743L), dateTime0.getMillis());
      assertEquals((-743L), dateTime1.getMillis());
      assertEquals((-292278993743L), dateTime3.getMillis());
      assertEquals((-462400593743L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusMinutes((-2589));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((long) (-2589));
      assertNotNull(duration0);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime1, (PeriodType) null);
      assertNotNull(period0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Days days0 = seconds0.toStandardDays();
      assertNotNull(days0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Seconds seconds1 = seconds0.negated();
      assertNotNull(seconds1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(seconds1.equals((Object)seconds0));
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(seconds0, seconds1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(seconds0.equals((Object)seconds1));
      
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, (-2589));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(seconds0, seconds1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1168875021320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      Period period1 = duration0.toPeriod();
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertTrue(period1.equals((Object)period0));
      
      DateTime dateTime3 = dateTime1.withYear((-2589));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-143864152178680L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime3.plusDays((-2589));
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-143864152178680L), dateTime3.getMillis());
      assertEquals((-144087841778680L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      int int0 = dateTime4.getMinuteOfDay();
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(930, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-143864152178680L), dateTime3.getMillis());
      assertEquals((-144087841778680L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotSame(seconds0, seconds1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(period0.equals((Object)period1));
      assertFalse(seconds0.equals((Object)seconds1));
      
      DateTime dateTime5 = dateTime2.withYearOfEra(930);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1168875021320L, dateTime2.getMillis());
      assertEquals((-32817947378680L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(period0.equals((Object)period1));
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      // Undeclared exception!
      try { 
        dateTime5.withYear((-2146014779));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146014779 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      int int0 = dateTime0.getHourOfDay();
      assertSame(dateTime0, dateTime1);
      assertEquals(20, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Duration duration0 = Duration.standardSeconds(1429L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1429L, duration0.getStandardSeconds());
      assertEquals(1429000L, duration0.getMillis());
      assertEquals(23L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      
      DateTime dateTime2 = dateTime1.withDurationAdded((ReadableDuration) duration0, 178958986);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1429L, duration0.getStandardSeconds());
      assertEquals(1429000L, duration0.getMillis());
      assertEquals(23L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(257124800275320L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.plusMillis((-2147381390));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1429L, duration0.getStandardSeconds());
      assertEquals(1429000L, duration0.getMillis());
      assertEquals(23L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(257124800275320L, dateTime2.getMillis());
      assertEquals(257122652893930L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime1.withDurationAdded((ReadableDuration) duration0, (-2147381390));
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1429L, duration0.getStandardSeconds());
      assertEquals(1429000L, duration0.getMillis());
      assertEquals(23L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-3067215597028680L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime1.withLaterOffsetAtOverlap();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime5, dateTime2);
      assertSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertSame(dateTime5, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      // Undeclared exception!
      try { 
        dateTime2.withWeekOfWeekyear((-4728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4728 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withSecondOfMinute((-2147483647));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfMinute field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTimeISO();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      Date date0 = mutableDateTime0.toDate();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(date0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      int int0 = Calendar.ERA;
      assertEquals(0, int0);
      
      DateTime.Property dateTime_Property0 = dateTime0.year();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DurationField durationField0 = dateTime_Property0.getLeapDurationField();
      assertNotNull(durationField0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals(86400000L, durationField0.getUnitMillis());
      assertEquals("days", durationField0.getName());
      assertTrue(durationField0.isSupported());
      
      DateTimeField dateTimeField0 = dateTime_Property0.getField();
      assertNotNull(dateTimeField0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusSeconds(0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      LocalTime localTime0 = dateTime1.toLocalTime();
      assertNotNull(localTime0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime2 = dateTime0.withDayOfYear(1);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1388607681320L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalTime localTime0 = new LocalTime((-26125299517538L), (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertNotNull(dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusSeconds(2889);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusWeeks(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      int int0 = dateTime2.getSecondOfMinute();
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(31, int0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.withFields(localTime0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392409282462L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertTrue(dateTime3.equals((Object)dateTime0));
      
      int int1 = dateTime0.getHourOfDay();
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertEquals(20, int1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(int1 == int0);
      
      DateTime dateTime4 = dateTime1.withZone(uTCDateTimeZone0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertSame(dateTime4, dateTime1);
      assertSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime4.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTime dateTime5 = dateTime2.minusWeeks(65533);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      LocalDate localDate0 = dateTime5.toLocalDate();
      assertNotNull(localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertEquals(3, localDate0.size());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      DateTime.Property dateTime_Property0 = dateTime5.hourOfDay();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      DateTime dateTime6 = dateTime2.toDateTime();
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime0);
      assertSame(dateTime6, dateTime2);
      assertSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime5);
      assertSame(dateTime6, dateTime4);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392412171462L, dateTime6.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime5));
      
      DateTime dateTime7 = dateTime3.withDate(localDate0);
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime7);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime6);
      assertNotSame(dateTime5, dateTime7);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime6);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime2);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392409282462L, dateTime3.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals((-38241949117538L), dateTime7.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertTrue(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime6));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime6));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime2));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      assertNotNull(dateTime0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusMillis(47);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(47L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      MockZone mockZone0 = new MockZone(47, 47, 47);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      DateTime dateTime2 = dateTime1.withZone(mockZone0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(47L, dateTime1.getMillis());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(47L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      int int0 = dateTime2.getDayOfYear();
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1, int0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(47L, dateTime1.getMillis());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(47L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.minusMonths(30);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(47L, dateTime1.getMillis());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(47L, dateTime2.getMillis());
      assertEquals((-79055952953L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime3.withSecondOfMinute(30);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(47L, dateTime1.getMillis());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(47L, dateTime2.getMillis());
      assertEquals((-79055952953L), dateTime3.getMillis());
      assertEquals((-79055969953L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      String string0 = mockZone0.getName((long) 30);
      assertNotNull(string0);
      assertEquals("MockZone", string0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(mockZone0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.MockZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.minusYears((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.minusMonths((-2147483608));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1968L), 17, 17);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusMonths(17);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1347654081320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minus(0L);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.withWeekyear((-2147483647));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime2 = dateTime1.plus((ReadablePeriod) mutablePeriod0);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      
      DateTime dateTime3 = dateTime0.plus(0L);
      assertNotNull(dateTime3);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime3.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime3.minusSeconds((-2147483647));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // seconds field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTime dateTime0 = new DateTime(27L);
      assertNotNull(dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTimeZone dateTimeZone0 = dateTime1.getZone();
      assertNotNull(dateTimeZone0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.year();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(27L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      String string0 = dateTime_Property0.getName();
      assertNotNull(string0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("year", string0);
      assertEquals(27L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime dateTime2 = dateTime_Property0.withMaximumValue();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(9223371985593600027L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime_Property0.roundFloorCopy();
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertTrue(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime3.withZoneRetainFields(dateTimeZone0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertEquals(27L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, dateTime3.getMillis());
      assertEquals(0L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertTrue(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertTrue(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      Period period0 = Period.months(4049);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfSecond((-178954955));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfSecond field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(chronology0);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime0.plus(0L);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime2.minusDays(2147482772);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Chronology must not be null");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.minusYears((-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalTime localTime0 = new LocalTime((-26125299517538L), (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertNotNull(dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusSeconds(2889);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusWeeks(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      int int0 = dateTime2.getSecondOfMinute();
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(31, int0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.withFields(localTime0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392409282462L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertTrue(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      int int1 = dateTime0.getHourOfDay();
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertEquals(20, int1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(int1 == int0);
      
      DateTime dateTime4 = dateTime1.withZone(uTCDateTimeZone0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertSame(dateTime4, dateTime2);
      assertSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTime dateTime5 = dateTime2.minusWeeks(65533);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      int int2 = dateTime5.getCenturyOfEra();
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertEquals(7, int2);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalDate localDate0 = dateTime5.toLocalDate();
      assertNotNull(localDate0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertEquals(3, localDate0.size());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      DateTime dateTime6 = dateTime2.toDateTime();
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime6, dateTime3);
      assertSame(dateTime6, dateTime2);
      assertSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime5);
      assertSame(dateTime6, dateTime4);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392412171462L, dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime5));
      
      DateTime dateTime7 = dateTime5.withMillisOfSecond(31);
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime7);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime6);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime7);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertEquals((-38241946228969L), dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime6));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Locale locale0 = new Locale("org.joda.time.chrono.GJLocaleSymbols", "org.joda.time.chrono.GJLocaleSymbols");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.chrono.gjlocalesymbols_ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.toString());
      assertEquals("ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.getCountry());
      assertEquals("org.joda.time.chrono.gjlocalesymbols", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.chrono.gjlocalesymbols_ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.toString());
      assertEquals("ORG.JODA.TIME.CHRONO.GJLOCALESYMBOLS", locale0.getCountry());
      assertEquals("org.joda.time.chrono.gjlocalesymbols", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusYears(1461);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-44712272318680L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property1 = dateTime1.centuryOfEra();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-44712272318680L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime2 = dateTime0.minusWeeks(1440);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(521497281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime1.withHourOfDay(1);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-44712272318680L), dateTime1.getMillis());
      assertEquals((-44712340718680L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = new DateTime(62L, (Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(62L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withDayOfYear(1535);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // dayOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withYear(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-62163344318680L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.minusYears(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-62163344318680L), dateTime1.getMillis());
      assertEquals((-62163344318680L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      DateTime dateTime3 = dateTime2.withFieldAdded(durationFieldType0, 0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-62163344318680L), dateTime1.getMillis());
      assertEquals((-62163344318680L), dateTime2.getMillis());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals((-62163344318680L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MockNullZoneChronology mockNullZoneChronology1 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime0 = new DateTime(0L, (Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime1);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      // Undeclared exception!
      try { 
        dateTime0.minusWeeks(3048);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = dateTime0.isBeforeNow();
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertFalse(boolean0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.plusSeconds(4934);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // seconds field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DurationField durationField0 = mockNullZoneChronology0.hours();
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("hours", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      // Undeclared exception!
      try { 
        DateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfDay((-2723));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millisOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusMinutes(0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTime1.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      
      Duration duration0 = new Duration((-152L), (-152L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      DateTime dateTime3 = dateTime2.withDurationAdded((ReadableDuration) duration0, (-702));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1196481320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertTrue(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196460320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-702);
      intArray0[2] = (-702);
      intArray0[3] = (-702);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      testAbstractPartial_MockPartial0.val = intArray0;
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      DateTime dateTime5 = dateTime0.plusMonths(0);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime4);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      DateTime.Property dateTime_Property1 = dateTime3.era();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1196481320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertTrue(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      
      DateTime.Property dateTime_Property2 = dateTime1.secondOfDay();
      assertNotNull(dateTime_Property2);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      Period period0 = Period.minutes((-111));
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      Days days1 = seconds0.toStandardDays();
      assertNotNull(days1);
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, days1.size());
      assertEquals(0, days1.getDays());
      
      Minutes minutes0 = days1.toStandardMinutes();
      assertNotNull(minutes0);
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, days1.size());
      assertEquals(0, days1.getDays());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Seconds seconds1 = minutes0.toStandardSeconds();
      assertNotNull(seconds1);
      assertSame(days0, days1);
      assertSame(seconds0, seconds1);
      assertSame(days1, days0);
      assertSame(seconds1, seconds0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, days1.size());
      assertEquals(0, days1.getDays());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds1.size());
      assertEquals(0, seconds1.getSeconds());
      
      Minutes minutes1 = seconds1.toStandardMinutes();
      assertNotNull(minutes1);
      assertSame(days0, days1);
      assertSame(seconds0, seconds1);
      assertSame(days1, days0);
      assertSame(minutes0, minutes1);
      assertSame(seconds1, seconds0);
      assertSame(minutes1, minutes0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, days1.size());
      assertEquals(0, days1.getDays());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds1.size());
      assertEquals(0, seconds1.getSeconds());
      assertEquals(0, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      
      Days days2 = minutes1.toStandardDays();
      assertNotNull(days2);
      assertSame(days0, days1);
      assertSame(days0, days2);
      assertSame(seconds0, seconds1);
      assertSame(days1, days0);
      assertSame(days1, days2);
      assertSame(minutes0, minutes1);
      assertSame(seconds1, seconds0);
      assertSame(minutes1, minutes0);
      assertSame(days2, days0);
      assertSame(days2, days1);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, days1.size());
      assertEquals(0, days1.getDays());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds1.size());
      assertEquals(0, seconds1.getSeconds());
      assertEquals(0, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      assertEquals(0, days2.getDays());
      assertEquals(1, days2.size());
      
      DateTime dateTime6 = dateTime2.withPeriodAdded(days2, 0);
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime6);
      assertSame(days0, days1);
      assertSame(days0, days2);
      assertSame(seconds0, seconds1);
      assertSame(days1, days0);
      assertSame(days1, days2);
      assertSame(minutes0, minutes1);
      assertSame(seconds1, seconds0);
      assertSame(minutes1, minutes0);
      assertSame(days2, days0);
      assertSame(days2, days1);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime4);
      assertSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime0);
      assertSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime5);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, days1.size());
      assertEquals(0, days1.getDays());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds1.size());
      assertEquals(0, seconds1.getSeconds());
      assertEquals(0, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      assertEquals(0, days2.getDays());
      assertEquals(1, days2.size());
      assertEquals(1196481320L, dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertTrue(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime5));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DateTime dateTime0 = new DateTime((Object) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields(uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.minus(1123200000L);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1391286081320L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      Duration duration0 = Duration.standardMinutes(1123200000L);
      assertNotNull(duration0);
      assertEquals(780000L, duration0.getStandardDays());
      assertEquals(67392000000L, duration0.getStandardSeconds());
      assertEquals(18720000L, duration0.getStandardHours());
      assertEquals(1123200000L, duration0.getStandardMinutes());
      assertEquals(67392000000000L, duration0.getMillis());
      
      // Undeclared exception!
      try { 
        duration0.multipliedBy(1123200000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 67392000000000 * 1123200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("Range duration field must be precise", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withCenturyOfEra((-1643));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // centuryOfEra field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withYearOfCentury(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      DateTime dateTime1 = DateTime.parse("", dateTimeFormatter2);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Period period0 = new Period(0, 0, 0, (-1215), 10, 0, 0, (-1215), periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      
      DateTime dateTime2 = dateTime0.plus((ReadablePeriod) seconds0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1287778881320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.minuteOfDay();
      assertNotNull(dateTimeField0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertFalse(dateTimeField0.isSupported());
      
      Seconds seconds1 = seconds0.minus(577);
      assertNotNull(seconds1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1, seconds1.size());
      assertEquals((-104630977), seconds1.getSeconds());
      assertFalse(seconds1.equals((Object)seconds0));
      
      // Undeclared exception!
      try { 
        dateTime1.minusHours(2144966082);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.plusMillis(2745);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property1 = dateTime0.secondOfDay();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property2 = dateTime0.dayOfMonth();
      assertNotNull(dateTime_Property2);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Duration duration0 = new Duration(4959L, 4959L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      
      Hours hours0 = duration0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      Days days0 = seconds0.toStandardDays();
      assertNotNull(days0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      // Undeclared exception!
      try { 
        dateTime0.withTime((-15), 2229, 2229, (-1145));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.toLocalTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period0 = Period.minutes(1452);
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(1452, int0);
      
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) period0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1989L), (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusHours(1452);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      DateTime dateTime2 = dateTime1.withTime(localTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1392465598011L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime1.plusMonths(1452);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(5210858001320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      
      DateTime dateTime4 = dateTime3.withChronology(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(5210858001320L, dateTime3.getMillis());
      assertEquals(5210858001320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime2));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-5));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      boolean boolean1 = dateTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusYears(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertEquals(1392408021320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.plusHours(0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertEquals(1392408021320L, dateTime2.getMillis());
      assertEquals(1392408021320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTime3.withFieldAdded(durationFieldType0, 2337);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      DateTime dateTime1 = dateTime0.withMillisOfDay((byte)0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392336000000L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.withDayOfMonth(1);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1391286081320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(772, 772);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 772 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime0.plusMillis(0);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      
      Duration duration0 = Duration.standardSeconds(1429L);
      assertNotNull(duration0);
      assertEquals(23L, duration0.getStandardMinutes());
      assertEquals(1429000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1429L, duration0.getStandardSeconds());
      
      DateTime dateTime3 = dateTime1.withDurationAdded((ReadableDuration) duration0, 178958986);
      assertNotNull(dateTime3);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(23L, duration0.getStandardMinutes());
      assertEquals(1429000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1429L, duration0.getStandardSeconds());
      assertEquals(257124800275320L, dateTime3.getMillis());
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, 17971875);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1392427253195L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.withYear(17971875);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1392427253195L, dateTime1.getMillis());
      assertEquals(567075433425653195L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        dateTime2.withYearOfEra((-4560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4560 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusSeconds(852);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plus((long) 852);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.minusMonths(1142);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime2.withEarlierOffsetAtOverlap();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals(1392408430172L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime1));
      
      boolean boolean0 = dateTime3.isEqualNow();
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertFalse(boolean0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      
      DateTime.Property dateTime_Property0 = dateTime3.dayOfMonth();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      
      DateTime dateTime5 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertEquals((-1612065169828L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      
      DateTime dateTime6 = dateTime0.withYearOfEra(1142);
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime4));
      
      DateTime dateTime7 = dateTime0.plusSeconds((-294));
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408987320L, dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime1));
      
      DateTime dateTime8 = dateTime6.plus((long) 1142);
      assertNotNull(dateTime8);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime8);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime7);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime6.getMillis());
      assertEquals((-26125299517538L), dateTime8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime7));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime3));
      
      DateTime dateTime9 = dateTime8.plus((ReadableDuration) null);
      assertNotNull(dateTime9);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime9);
      assertNotSame(dateTime6, dateTime8);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime7);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime0);
      assertSame(dateTime8, dateTime9);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime9, dateTime2);
      assertNotSame(dateTime9, dateTime0);
      assertNotSame(dateTime9, dateTime1);
      assertNotSame(dateTime9, dateTime6);
      assertSame(dateTime9, dateTime8);
      assertNotSame(dateTime9, dateTime7);
      assertNotSame(dateTime9, dateTime4);
      assertNotSame(dateTime9, dateTime5);
      assertNotSame(dateTime9, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime6.getMillis());
      assertEquals((-26125299517538L), dateTime8.getMillis());
      assertEquals((-26125299517538L), dateTime9.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime8));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime7));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime9.equals((Object)dateTime2));
      assertFalse(dateTime9.equals((Object)dateTime0));
      assertFalse(dateTime9.equals((Object)dateTime1));
      assertFalse(dateTime9.equals((Object)dateTime6));
      assertFalse(dateTime9.equals((Object)dateTime7));
      assertFalse(dateTime9.equals((Object)dateTime4));
      assertFalse(dateTime9.equals((Object)dateTime5));
      assertFalse(dateTime9.equals((Object)dateTime3));
      
      DateTime dateTime10 = dateTime2.plusMinutes(1142);
      assertNotNull(dateTime10);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime10);
      assertNotSame(dateTime1, dateTime10);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime8);
      assertNotSame(dateTime1, dateTime9);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime10);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime8);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime9);
      assertNotSame(dateTime10, dateTime5);
      assertNotSame(dateTime10, dateTime7);
      assertNotSame(dateTime10, dateTime0);
      assertNotSame(dateTime10, dateTime9);
      assertNotSame(dateTime10, dateTime1);
      assertNotSame(dateTime10, dateTime2);
      assertNotSame(dateTime10, dateTime3);
      assertNotSame(dateTime10, dateTime8);
      assertNotSame(dateTime10, dateTime6);
      assertNotSame(dateTime10, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals(1392476950172L, dateTime10.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime7));
      assertFalse(dateTime1.equals((Object)dateTime8));
      assertFalse(dateTime1.equals((Object)dateTime9));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime7));
      assertFalse(dateTime2.equals((Object)dateTime8));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime9));
      assertFalse(dateTime10.equals((Object)dateTime5));
      assertFalse(dateTime10.equals((Object)dateTime7));
      assertFalse(dateTime10.equals((Object)dateTime0));
      assertFalse(dateTime10.equals((Object)dateTime9));
      assertFalse(dateTime10.equals((Object)dateTime1));
      assertFalse(dateTime10.equals((Object)dateTime2));
      assertFalse(dateTime10.equals((Object)dateTime3));
      assertFalse(dateTime10.equals((Object)dateTime8));
      assertFalse(dateTime10.equals((Object)dateTime6));
      assertFalse(dateTime10.equals((Object)dateTime4));
      
      DateTime dateTime11 = dateTime7.plus((ReadablePeriod) null);
      assertNotNull(dateTime11);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime11);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime10);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime10);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime4);
      assertSame(dateTime7, dateTime11);
      assertNotSame(dateTime7, dateTime9);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime8);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime11, dateTime2);
      assertNotSame(dateTime11, dateTime3);
      assertNotSame(dateTime11, dateTime1);
      assertNotSame(dateTime11, dateTime4);
      assertNotSame(dateTime11, dateTime8);
      assertNotSame(dateTime11, dateTime5);
      assertNotSame(dateTime11, dateTime10);
      assertNotSame(dateTime11, dateTime6);
      assertNotSame(dateTime11, dateTime9);
      assertNotSame(dateTime11, dateTime0);
      assertSame(dateTime11, dateTime7);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408987320L, dateTime7.getMillis());
      assertEquals(1392408987320L, dateTime11.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime10));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime10));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime9));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime8));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime11.equals((Object)dateTime2));
      assertFalse(dateTime11.equals((Object)dateTime3));
      assertFalse(dateTime11.equals((Object)dateTime1));
      assertFalse(dateTime11.equals((Object)dateTime4));
      assertFalse(dateTime11.equals((Object)dateTime8));
      assertFalse(dateTime11.equals((Object)dateTime5));
      assertFalse(dateTime11.equals((Object)dateTime10));
      assertFalse(dateTime11.equals((Object)dateTime6));
      assertFalse(dateTime11.equals((Object)dateTime9));
      assertFalse(dateTime11.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime10.withDate(852, 1142, (-1101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1142 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone((-9L), 0, 0);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTime.Property dateTime_Property0 = dateTime0.property(dateTimeFieldType0);
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTime dateTime3 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1392408021320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTime dateTime4 = dateTime0.withYearOfCentury(0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(950559681320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime1));
      
      DateTime dateTime5 = dateTime1.withTimeAtStartOfDay();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1123200000L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      // Undeclared exception!
      try { 
        dateTime2.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withSecondOfMinute(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plus((long) 0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      DateTime dateTime3 = dateTime2.withFieldAdded(durationFieldType0, 237);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, dateTime2.getMillis());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1392409497320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime3.minusDays((-418));
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, dateTime2.getMillis());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1392409497320L, dateTime3.getMillis());
      assertEquals(1428524697320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusSeconds(852);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plus((long) 852);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.minusMonths(1142);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime0.withCenturyOfEra(1433);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4460389705281320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      DateTime dateTime5 = dateTime3.toDateTime();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime0);
      assertSame(dateTime5, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertEquals((-1610941969828L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTime.Property dateTime_Property0 = dateTime3.dayOfMonth();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      
      DateTime dateTime6 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime6);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertEquals((-1612065169828L), dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime0));
      
      DateTime dateTime7 = dateTime0.withYearOfEra(1142);
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime4));
      
      DateTime dateTime8 = new DateTime();
      assertNotNull(dateTime8);
      assertEquals(1392409281320L, dateTime8.getMillis());
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertTrue(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime1));
      
      DateTime dateTime9 = dateTime7.plus((long) 1142);
      assertNotNull(dateTime9);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime9);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime8);
      assertNotSame(dateTime9, dateTime3);
      assertNotSame(dateTime9, dateTime2);
      assertNotSame(dateTime9, dateTime4);
      assertNotSame(dateTime9, dateTime5);
      assertNotSame(dateTime9, dateTime8);
      assertNotSame(dateTime9, dateTime6);
      assertNotSame(dateTime9, dateTime7);
      assertNotSame(dateTime9, dateTime1);
      assertNotSame(dateTime9, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime7.getMillis());
      assertEquals((-26125299517538L), dateTime9.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime8));
      assertFalse(dateTime9.equals((Object)dateTime3));
      assertFalse(dateTime9.equals((Object)dateTime2));
      assertFalse(dateTime9.equals((Object)dateTime4));
      assertFalse(dateTime9.equals((Object)dateTime5));
      assertFalse(dateTime9.equals((Object)dateTime8));
      assertFalse(dateTime9.equals((Object)dateTime6));
      assertFalse(dateTime9.equals((Object)dateTime7));
      assertFalse(dateTime9.equals((Object)dateTime1));
      assertFalse(dateTime9.equals((Object)dateTime0));
      
      DateTime dateTime10 = dateTime2.plusMinutes(1142);
      assertNotNull(dateTime10);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime10);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime10);
      assertNotSame(dateTime1, dateTime9);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime8);
      assertNotSame(dateTime2, dateTime9);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime8);
      assertNotSame(dateTime2, dateTime10);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime10, dateTime2);
      assertNotSame(dateTime10, dateTime3);
      assertNotSame(dateTime10, dateTime1);
      assertNotSame(dateTime10, dateTime7);
      assertNotSame(dateTime10, dateTime0);
      assertNotSame(dateTime10, dateTime9);
      assertNotSame(dateTime10, dateTime6);
      assertNotSame(dateTime10, dateTime5);
      assertNotSame(dateTime10, dateTime8);
      assertNotSame(dateTime10, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals(1392476950172L, dateTime10.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime9));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime7));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime8));
      assertFalse(dateTime2.equals((Object)dateTime9));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime7));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime8));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime10.equals((Object)dateTime2));
      assertFalse(dateTime10.equals((Object)dateTime3));
      assertFalse(dateTime10.equals((Object)dateTime1));
      assertFalse(dateTime10.equals((Object)dateTime7));
      assertFalse(dateTime10.equals((Object)dateTime0));
      assertFalse(dateTime10.equals((Object)dateTime9));
      assertFalse(dateTime10.equals((Object)dateTime6));
      assertFalse(dateTime10.equals((Object)dateTime5));
      assertFalse(dateTime10.equals((Object)dateTime8));
      assertFalse(dateTime10.equals((Object)dateTime4));
      
      // Undeclared exception!
      try { 
        dateTime10.withDate(852, 1142, (-1101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1142 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-5));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      boolean boolean1 = dateTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean1);
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusYears(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals("-00:00:00.005", dateTimeZone0.toString());
      assertEquals("-00:00:00.005", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408021320L, dateTime1.getMillis());
      assertEquals(1392408021320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      Period period0 = Period.weeks(2147427136);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        dateTime1.withPeriodAdded(period0, 2147427136);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 4611443304429162496 * 604800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      Duration duration0 = Duration.standardDays(1429L);
      assertNotNull(duration0);
      assertEquals(123465600L, duration0.getStandardSeconds());
      assertEquals(34296L, duration0.getStandardHours());
      assertEquals(1429L, duration0.getStandardDays());
      assertEquals(2057760L, duration0.getStandardMinutes());
      assertEquals(123465600000L, duration0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.withDurationAdded((ReadableDuration) duration0, 178958959);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 123465600000 * 178958959
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      
      DateTime dateTime1 = DateTime.parse("", dateTimeFormatter2);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Period period0 = new Period(0, 0, 0, (-1215), 10, 0, 0, (-1215), periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      
      DateTimeField dateTimeField0 = chronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      
      DateTime dateTime2 = dateTime0.plus((ReadablePeriod) seconds0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1287778881320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      Seconds seconds1 = seconds0.minus(577);
      assertNotNull(seconds1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals((-104630977), seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertFalse(seconds1.equals((Object)seconds0));
      
      // Undeclared exception!
      try { 
        dateTime1.plusHours(2492);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      
      Duration duration0 = new Duration((-152L), (-152L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      
      DateTime dateTime3 = dateTime2.withDurationAdded((ReadableDuration) duration0, (-702));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1196481320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertTrue(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertTrue(dateTime1.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime_Property0.addToCopy((long) 0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertTrue(dateTime4.equals((Object)dateTime3));
      assertTrue(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      DateTime dateTime5 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime3);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196460320L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime3));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTime.Property dateTime_Property1 = dateTime0.weekOfWeekyear();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime.Property dateTime_Property2 = dateTime1.secondOfDay();
      assertNotNull(dateTime_Property2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      DateTime dateTime6 = dateTime4.minusMinutes((-702));
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertNotSame(dateTime4, dateTime6);
      assertNotSame(dateTime4, dateTime5);
      assertSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime4.getMillis());
      assertEquals(1238601320L, dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      assertTrue(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime5));
      assertTrue(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = dateTime0.isBefore((ReadableInstant) null);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertFalse(boolean0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withMonthOfYear(157);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTimeField dateTimeField0 = chronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isLenient());
      
      // Undeclared exception!
      try { 
        dateTime0.plusWeeks((-1617));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1);
      assertNotNull(dateTime0);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DateTime dateTime1 = dateTime0.withDayOfMonth(1);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime1.millisOfDay();
      assertNotNull(dateTime_Property0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.withWeekOfWeekyear(1);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      assertEquals((-62135593140000L), dateTime2.getMillis());
      
      DateTime dateTime3 = dateTime2.withMillis(1);
      assertNotNull(dateTime3);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      assertEquals((-62135593140000L), dateTime2.getMillis());
      assertEquals(1L, dateTime3.getMillis());
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime3.minusWeeks((-914));
      assertNotNull(dateTime4);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      assertEquals((-62135593140000L), dateTime2.getMillis());
      assertEquals(1L, dateTime3.getMillis());
      assertEquals(552787200001L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      
      MockZone mockZone0 = new MockZone((-914), 29, (-914));
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      
      DateTime dateTime5 = dateTime4.withZoneRetainFields(mockZone0);
      assertNotNull(dateTime5);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      assertEquals((-62135593140000L), dateTime2.getMillis());
      assertEquals(1L, dateTime3.getMillis());
      assertEquals(552787200001L, dateTime4.getMillis());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(552788113972L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      DateTime dateTime6 = dateTime4.minusMonths((-914));
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime6);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime6);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime1);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      assertEquals((-62135593140000L), dateTime2.getMillis());
      assertEquals(1L, dateTime3.getMillis());
      assertEquals(552787200001L, dateTime4.getMillis());
      assertEquals(2956521600001L, dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime5));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime1));
      
      DateTime dateTime7 = dateTime1.plusWeeks((-702));
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime4);
      assertEquals((-62135593140000L), dateTime0.getMillis());
      assertEquals((-62135593140000L), dateTime1.getMillis());
      assertEquals((-62560162740000L), dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime4));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(6L);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalDate localDate1 = localDate0.withYear((-900));
      assertNotNull(localDate1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals((-90568381118680L), dateTime0.getMillis());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields(uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals((-90568381118680L), dateTime0.getMillis());
      assertEquals((-90568381118680L), dateTime1.getMillis());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      
      // Undeclared exception!
      try { 
        dateTime1.withMillisOfSecond((-900));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -900 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = new DateTime((Object) null, mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.plusDays((-1617));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withWeekyear(2943);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(30708879681320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.withTimeAtStartOfDay();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(30708879681320L, dateTime1.getMillis());
      assertEquals(30708806400000L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MockNullZoneChronology mockNullZoneChronology1 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime0 = new DateTime(0L, (Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime1);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime2 = dateTime0.withDurationAdded(0L, (-2147483647));
      assertNotNull(dateTime2);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      // Undeclared exception!
      try { 
        dateTime0.withMinuteOfHour((-2147483647));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minuteOfHour field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((-152L), (-152L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime3 = dateTime1.plusHours(0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime2));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196460320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTime0.withFieldAdded(durationFieldType0, (-2147483600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481586 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      DateTime dateTime1 = DateTime.parse("", dateTimeFormatter2);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Period period0 = new Period(0, 0, 0, (-1215), 10, 0, 0, (-1215), periodType0);
      assertNotNull(period0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      DateTime dateTime2 = dateTime0.plus((ReadablePeriod) seconds0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1287778881320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      Seconds seconds1 = seconds0.minus(577);
      assertNotNull(seconds1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals((-104630977), seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertFalse(seconds1.equals((Object)seconds0));
      
      // Undeclared exception!
      try { 
        dateTime1.withHourOfDay(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property1 = dateTime0.year();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      Locale locale0 = new Locale("2/[z3Hjl8", "2/[z3Hjl8");
      assertNotNull(locale0);
      assertEquals("2/[Z3HJL8", locale0.getCountry());
      assertEquals("2/[z3hjl8_2/[Z3HJL8", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("2/[z3hjl8", locale0.getLanguage());
      
      String string0 = dateTime_Property1.getAsShortText(locale0);
      assertNotNull(string0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("2014", string0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("2/[Z3HJL8", locale0.getCountry());
      assertEquals("2/[z3hjl8_2/[Z3HJL8", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("2/[z3hjl8", locale0.getLanguage());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime1 = DateTime.parse("2014");
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1388534400000L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, 1461);
      assertNotNull(dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1388534400000L, dateTime1.getMillis());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1514764800000L, dateTime2.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusSeconds(852);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plus((long) 852);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.minusMonths(1142);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime2.withEarlierOffsetAtOverlap();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertSame(dateTime4, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals(1392408430172L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime1));
      
      boolean boolean0 = dateTime3.isEqualNow();
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertFalse(boolean0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      
      DateTime.Property dateTime_Property0 = dateTime3.dayOfMonth();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      
      String string0 = dateTime_Property0.getName();
      assertNotNull(string0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertEquals("dayOfMonth", string0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      
      DateTime dateTime5 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertEquals((-1612065169828L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      
      DateTime dateTime6 = dateTime3.toDateTimeISO();
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime3, dateTime6);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertEquals((-1610941969828L), dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime4));
      
      DateTime dateTime7 = dateTime0.plusSeconds((-294));
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408987320L, dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime4));
      
      DateTime dateTime8 = dateTime6.plus((long) 1142);
      assertNotNull(dateTime8);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime8);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime8);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime3, dateTime6);
      assertNotSame(dateTime3, dateTime8);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime7);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime7);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime8);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals((-1610941969828L), dateTime3.getMillis());
      assertEquals((-1610941969828L), dateTime6.getMillis());
      assertEquals((-1610941968686L), dateTime8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime7));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime7));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime7));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime7));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime4));
      
      DateTime dateTime9 = dateTime2.plusMinutes(1142);
      assertNotNull(dateTime9);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime8);
      assertNotSame(dateTime1, dateTime9);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime8);
      assertNotSame(dateTime2, dateTime9);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime9, dateTime1);
      assertNotSame(dateTime9, dateTime4);
      assertNotSame(dateTime9, dateTime3);
      assertNotSame(dateTime9, dateTime8);
      assertNotSame(dateTime9, dateTime2);
      assertNotSame(dateTime9, dateTime0);
      assertNotSame(dateTime9, dateTime5);
      assertNotSame(dateTime9, dateTime6);
      assertNotSame(dateTime9, dateTime7);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408429320L, dateTime1.getMillis());
      assertEquals(1392408430172L, dateTime2.getMillis());
      assertEquals(1392476950172L, dateTime9.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime7));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime8));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime8));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime7));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime9.equals((Object)dateTime1));
      assertFalse(dateTime9.equals((Object)dateTime4));
      assertFalse(dateTime9.equals((Object)dateTime3));
      assertFalse(dateTime9.equals((Object)dateTime8));
      assertFalse(dateTime9.equals((Object)dateTime2));
      assertFalse(dateTime9.equals((Object)dateTime0));
      assertFalse(dateTime9.equals((Object)dateTime5));
      assertFalse(dateTime9.equals((Object)dateTime6));
      assertFalse(dateTime9.equals((Object)dateTime7));
      
      // Undeclared exception!
      try { 
        dateTime9.withDate(852, 1142, (-1101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1142 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      Duration duration0 = Duration.standardSeconds(1429L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1429L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(23L, duration0.getStandardMinutes());
      assertEquals(1429000L, duration0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.withMillisOfDay(178958986);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 178958986 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' is not supported");
      assertFalse(boolean0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      DateTime dateTime1 = DateTime.parse("", dateTimeFormatter2);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTime1, dateTime0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Period period0 = new Period(0, 0, 0, (-1215), 10, 0, 0, (-1215), periodType0);
      assertNotNull(period0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      
      DateTime dateTime2 = dateTime0.plus((ReadablePeriod) seconds0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1287778881320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime1.withLaterOffsetAtOverlap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((-152L), (-152L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      DateTime dateTime3 = dateTime2.withDurationAdded((ReadableDuration) duration0, (-702));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime2);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1196481320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      
      DateTime.Property dateTime_Property1 = dateTime1.secondOfDay();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime.Property dateTime_Property2 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      DateTime dateTime4 = dateTime1.withTimeAtStartOfDay();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1123200000L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      DateTime dateTime5 = dateTime1.minusWeeks((-702));
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(425766081320L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertTrue(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = DateTime.now((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.minusMillis((-1617));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTime0.withField(dateTimeFieldType0, 780);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 780 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Instant instant0 = new Instant((-3906L));
      assertNotNull(instant0);
      assertEquals((-3906L), instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withMillis(1392459550172L);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      assertEquals(1392459550172L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.yearOfEra();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      assertEquals(1392459550172L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Duration duration0 = new Duration(dateTime0, instant0);
      assertNotNull(duration0);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertNotNull(minutes0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      Days days0 = minutes0.toStandardDays();
      assertNotNull(days0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      Period period0 = days0.toPeriod();
      assertNotNull(period0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime dateTime2 = dateTime0.plus((ReadablePeriod) period0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals((-3906L), instant0.getMillis());
      assertEquals((-3906L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals((-3906L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property1 = dateTime0.year();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      Locale locale0 = new Locale("2/[z3Hjl8", "2/[z3Hjl8");
      assertNotNull(locale0);
      assertEquals("2/[Z3HJL8", locale0.getCountry());
      assertEquals("2/[z3hjl8_2/[Z3HJL8", locale0.toString());
      assertEquals("2/[z3hjl8", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = dateTime_Property1.getAsText(locale0);
      assertNotNull(string0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("2014", string0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("2/[Z3HJL8", locale0.getCountry());
      assertEquals("2/[z3hjl8_2/[Z3HJL8", locale0.toString());
      assertEquals("2/[z3hjl8", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime1 = dateTime_Property1.getDateTime();
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, 1461);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1518639681320L, dateTime2.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-2834));
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals((-2834), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals((-2834), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals((-2834), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-2834));
      assertNotNull(dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals((-2834), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals((-2834), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-2834), dateTimeFormatter3.getDefaultYear());
      assertEquals((-2834), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      
      Integer integer0 = new Integer(1461);
      assertNotNull(integer0);
      assertEquals(1461, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals((-2834), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals((-2834), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-2834), dateTimeFormatter3.getDefaultYear());
      assertEquals((-2834), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(1461, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-2834), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      
      // Undeclared exception!
      try { 
        DateTime.parse("2014", dateTimeFormatter4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plus(0L);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.plusMonths(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(929L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusSeconds((-899));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTime dateTime0 = localTime1.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      
      DateTime dateTime1 = dateTime0.withYear(174);
      assertNotNull(dateTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.minusYears((-899));
      assertNotNull(dateTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertEquals((-28302738300071L), dateTime2.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.plusDays(927);
      assertNotNull(dateTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertEquals((-28302738300071L), dateTime2.getMillis());
      assertEquals((-28222645500071L), dateTime3.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      boolean boolean0 = dateTime3.isBefore(929L);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertEquals((-28302738300071L), dateTime2.getMillis());
      assertEquals((-28222645500071L), dateTime3.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone1);
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      
      long long0 = uTCDateTimeZone1.convertLocalToUTC((long) (-899), true, (-1L));
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertEquals((-899L), long0);
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      
      LocalTime localTime2 = LocalTime.now();
      assertNotNull(localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertEquals(4, localTime2.size());
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      
      DateTime dateTime4 = dateTime1.withFields(localTime2);
      assertNotNull(dateTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertEquals(4, localTime2.size());
      assertEquals((-56672365118680L), dateTime4.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      DateTime dateTime5 = dateTime4.plusHours((-899));
      assertNotNull(dateTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertEquals(4, localTime2.size());
      assertEquals((-56672365118680L), dateTime4.getMillis());
      assertEquals((-56675601518680L), dateTime5.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      DateTime dateTime6 = dateTime0.plusWeeks(174);
      assertNotNull(dateTime6);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime3);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals(1497572099929L, dateTime6.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime3));
      
      long long1 = uTCDateTimeZone0.getMillisKeepLocal(uTCDateTimeZone1, (-1691L));
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertEquals((-1691L), long1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertFalse(long1 == long0);
      
      DateTimeZone.setProvider((Provider) null);
      DateTime.Property dateTime_Property0 = dateTime2.millisOfSecond();
      assertNotNull(dateTime_Property0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertEquals((-28302738300071L), dateTime2.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime7 = dateTime2.minusMillis((-899));
      assertNotNull(dateTime7);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(uTCDateTimeZone0, uTCDateTimeZone1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime7);
      assertEquals(4, localTime0.size());
      assertEquals((-28302738299172L), dateTime7.getMillis());
      assertEquals(4, localTime1.size());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392336899929L, dateTime0.getMillis());
      assertEquals((-56672437500071L), dateTime1.getMillis());
      assertEquals((-28302738300071L), dateTime2.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertTrue(uTCDateTimeZone0.equals((Object)uTCDateTimeZone1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      // Undeclared exception!
      try { 
        dateTime7.withMillisOfSecond(1456);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1456 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196481320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTime.Property dateTime_Property0 = dateTime0.property(dateTimeFieldType0);
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DateTime.Property dateTime_Property1 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime3 = dateTime_Property1.withMinimumValue();
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196460320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTime dateTime4 = dateTime3.withYearOfCentury(13);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1196481320L, dateTime1.getMillis());
      assertEquals(1196460320L, dateTime3.getMillis());
      assertEquals((-1797565139680L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertTrue(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      // Undeclared exception!
      try { 
        dateTime_Property1.setCopy("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1, 1);
      assertNotNull(dateTime0);
      assertEquals((-62135593138999L), dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.centuryOfEra();
      assertNotNull(dateTime_Property0);
      assertEquals((-62135593138999L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime((-140L), (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals((-140L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusMillis((-2935));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals((-140L), dateTime0.getMillis());
      assertEquals((-3075L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MockNullZoneChronology mockNullZoneChronology1 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DurationField durationField0 = mockNullZoneChronology1.months();
      assertNotNull(durationField0);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("months", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime0 = new DateTime(0L, (Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      // Undeclared exception!
      try { 
        dateTime0.plusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer integer0 = new Integer((-818));
      assertNotNull(integer0);
      assertEquals((-818), (int)integer0);
      
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("(T;=j");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertEquals("(T;=j", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("(T;=j", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((Object) integer0, (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusSeconds(852);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plus((long) 852);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertEquals(1392410134172L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.minusMonths(1142);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertEquals(1392410134172L, dateTime2.getMillis());
      assertEquals((-1610940265828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime3.plusDays(852);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertEquals(1392410134172L, dateTime2.getMillis());
      assertEquals((-1610940265828L), dateTime3.getMillis());
      assertEquals((-1537327465828L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      
      boolean boolean0 = dateTime3.isEqualNow();
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertFalse(boolean0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertEquals(1392410134172L, dateTime2.getMillis());
      assertEquals((-1610940265828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime3.dayOfMonth();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertEquals(1392410134172L, dateTime2.getMillis());
      assertEquals((-1610940265828L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime5 = dateTime_Property0.withMinimumValue();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertEquals(1392410134172L, dateTime2.getMillis());
      assertEquals((-1610940265828L), dateTime3.getMillis());
      assertEquals((-1612063465828L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      DateTime dateTime6 = dateTime0.withYearOfEra(1142);
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime2));
      
      DateTime dateTime7 = dateTime0.plusSeconds((-294));
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime5);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392408987320L, dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime5));
      
      DateTime dateTime8 = dateTime6.plus((long) 1142);
      assertNotNull(dateTime8);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime8);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime7);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime6.getMillis());
      assertEquals((-26125299517538L), dateTime8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime7));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime4));
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      
      Days days0 = duration0.toStandardDays();
      assertNotNull(days0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      Hours hours0 = days0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Days days1 = hours0.toStandardDays();
      assertNotNull(days1);
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      
      Minutes minutes0 = days1.toStandardMinutes();
      assertNotNull(minutes0);
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      DateTime dateTime9 = dateTime8.withPeriodAdded(minutes0, 1142);
      assertNotNull(dateTime9);
      assertNotSame(dateTime9, dateTime0);
      assertNotSame(dateTime9, dateTime3);
      assertNotSame(dateTime9, dateTime4);
      assertNotSame(dateTime9, dateTime1);
      assertNotSame(dateTime9, dateTime2);
      assertNotSame(dateTime9, dateTime5);
      assertSame(dateTime9, dateTime8);
      assertNotSame(dateTime9, dateTime6);
      assertNotSame(dateTime9, dateTime7);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime9);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime8);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime7);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime2);
      assertSame(dateTime8, dateTime9);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime4);
      assertSame(days0, days1);
      assertSame(days1, days0);
      assertEquals((-26125299517538L), dateTime9.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-26125299518680L), dateTime6.getMillis());
      assertEquals((-26125299517538L), dateTime8.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertFalse(dateTime9.equals((Object)dateTime0));
      assertFalse(dateTime9.equals((Object)dateTime3));
      assertFalse(dateTime9.equals((Object)dateTime4));
      assertFalse(dateTime9.equals((Object)dateTime1));
      assertFalse(dateTime9.equals((Object)dateTime2));
      assertFalse(dateTime9.equals((Object)dateTime5));
      assertFalse(dateTime9.equals((Object)dateTime6));
      assertFalse(dateTime9.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime8));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime7));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime4));
      
      DateTime dateTime10 = dateTime2.plusMinutes(1142);
      assertNotNull(dateTime10);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime10);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime10, dateTime3);
      assertNotSame(dateTime10, dateTime4);
      assertNotSame(dateTime10, dateTime9);
      assertNotSame(dateTime10, dateTime0);
      assertNotSame(dateTime10, dateTime8);
      assertNotSame(dateTime10, dateTime1);
      assertNotSame(dateTime10, dateTime5);
      assertNotSame(dateTime10, dateTime7);
      assertNotSame(dateTime10, dateTime6);
      assertNotSame(dateTime10, dateTime2);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime10);
      assertNotSame(dateTime1, dateTime8);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime9);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime9);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime8);
      assertNotSame(dateTime2, dateTime10);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime7);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392478654172L, dateTime10.getMillis());
      assertEquals(1392410133320L, dateTime1.getMillis());
      assertEquals(1392410134172L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime10.equals((Object)dateTime3));
      assertFalse(dateTime10.equals((Object)dateTime4));
      assertFalse(dateTime10.equals((Object)dateTime9));
      assertFalse(dateTime10.equals((Object)dateTime0));
      assertFalse(dateTime10.equals((Object)dateTime8));
      assertFalse(dateTime10.equals((Object)dateTime1));
      assertFalse(dateTime10.equals((Object)dateTime5));
      assertFalse(dateTime10.equals((Object)dateTime7));
      assertFalse(dateTime10.equals((Object)dateTime6));
      assertFalse(dateTime10.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime7));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime8));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime9));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime9));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime8));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime7));
      
      // Undeclared exception!
      try { 
        dateTime10.withDate(157, 1142, (-1101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1142 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(929L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusSeconds((-900));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime0 = localTime1.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336900929L, dateTime0.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      
      DateTime dateTime1 = dateTime0.minusMillis(174);
      assertNotNull(dateTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336900929L, dateTime0.getMillis());
      assertEquals(1392336900755L, dateTime1.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.withMillis((-900));
      assertNotNull(dateTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336900929L, dateTime0.getMillis());
      assertEquals((-900L), dateTime2.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.plusDays(927);
      assertNotNull(dateTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336900929L, dateTime0.getMillis());
      assertEquals((-900L), dateTime2.getMillis());
      assertEquals(80092799100L, dateTime3.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      boolean boolean0 = dateTime3.isBefore((-719L));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392336900929L, dateTime0.getMillis());
      assertEquals((-900L), dateTime2.getMillis());
      assertEquals(80092799100L, dateTime3.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone1);
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      
      long long0 = uTCDateTimeZone1.convertLocalToUTC((long) (-900), false, (-1L));
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertEquals((-900L), long0);
      assertTrue(uTCDateTimeZone1.isFixed());
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      
      LocalTime localTime2 = LocalTime.now();
      assertNotNull(localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime2.size());
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = null;
      try {
        testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("VSPPS");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      DateTime dateTime0 = new DateTime((long) 0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertTrue(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((-140L), (-140L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      DateTime dateTime3 = dateTime2.withDurationAdded((ReadableDuration) duration0, (-702));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, dateTime3.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime3.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertTrue(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusSeconds(0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime0.minusYears(0);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      DateTime dateTime1 = DateTime.parse("", dateTimeFormatter2);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTime1, dateTime0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Period period0 = new Period(0, 0, 0, (-1215), 10, 0, 0, (-1215), periodType0);
      assertNotNull(period0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals(1, seconds0.size());
      assertEquals((-104630400), seconds0.getSeconds());
      
      // Undeclared exception!
      try { 
        dateTime1.withEra(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // era field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483643)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      // Undeclared exception!
      try { 
        DateTime.parse("", dateTimeFormatter2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withMonthOfYear(1);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1389730881320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.dayOfMonth();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1389730881320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Duration duration0 = new Duration(0L, 1618L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertNotNull(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409282938L, instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      
      Instant instant2 = instant1.toInstant();
      assertNotNull(instant2);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409282938L, instant1.getMillis());
      assertEquals(1392409282938L, instant2.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      
      Interval interval0 = new Interval(0L, 1618L);
      assertNotNull(interval0);
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(1618L, interval0.getEndMillis());
      
      DateTime dateTime0 = instant2.toDateTime();
      assertNotNull(dateTime0);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409282938L, instant1.getMillis());
      assertEquals(1392409282938L, instant2.getMillis());
      assertEquals(1392409282938L, dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) null);
      assertNotNull(mutablePeriod0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.toMutablePeriod();
      assertNotNull(mutablePeriod1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) mutablePeriod1);
      assertNotNull(dateTime1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertSame(dateTime0, dateTime1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409282938L, instant1.getMillis());
      assertEquals(1392409282938L, instant2.getMillis());
      assertEquals(1392409282938L, dateTime0.getMillis());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409282938L, dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      
      DateTime.Property dateTime_Property0 = dateTime1.era();
      assertNotNull(dateTime_Property0);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertSame(dateTime0, dateTime1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409282938L, instant1.getMillis());
      assertEquals(1392409282938L, instant2.getMillis());
      assertEquals(1392409282938L, dateTime0.getMillis());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409282938L, dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      
      DateTime dateTime2 = interval0.getStart();
      assertNotNull(dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(1618L, interval0.getEndMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTime.Property dateTime_Property1 = dateTime2.property(dateTimeFieldType0);
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(1618L, interval0.getEndMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime3 = dateTime_Property0.withMaximumValue();
      assertNotNull(dateTime3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409282938L, instant1.getMillis());
      assertEquals(1392409282938L, instant2.getMillis());
      assertEquals(1392409282938L, dateTime0.getMillis());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409282938L, dateTime1.getMillis());
      assertEquals(1392409282938L, dateTime3.getMillis());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime.Property dateTime_Property2 = dateTime3.centuryOfEra();
      assertNotNull(dateTime_Property2);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1392409282938L, instant1.getMillis());
      assertEquals(1392409282938L, instant2.getMillis());
      assertEquals(1392409282938L, dateTime0.getMillis());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409282938L, dateTime1.getMillis());
      assertEquals(1392409282938L, dateTime3.getMillis());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      
      DateTime dateTime4 = dateTime2.toDateTime();
      assertNotNull(dateTime4);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(0L, dateTime4.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(1618L, interval0.getEndMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime5 = dateTime2.withYear(1583);
      assertNotNull(dateTime5);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime1);
      assertEquals((-12212553600000L), dateTime5.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(1618L, interval0.getEndMillis());
      assertEquals(0L, dateTime2.getMillis());
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime6 = dateTime_Property0.roundHalfCeilingCopy();
      assertNotNull(dateTime6);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime6);
      assertSame(dateTime0, dateTime3);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime6);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1618L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals((-62135596800000L), dateTime6.getMillis());
      assertEquals(1392409282938L, instant1.getMillis());
      assertEquals(1392409282938L, instant2.getMillis());
      assertEquals(1392409282938L, dateTime0.getMillis());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409282938L, dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Instant instant0 = new Instant((-95L));
      assertNotNull(instant0);
      assertEquals((-95L), instant0.getMillis());
      
      Duration duration0 = new Duration((-95L), 1104L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, (-382));
      assertNotNull(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      
      Instant instant2 = instant1.minus(1345L);
      assertNotNull(instant2);
      assertNotSame(instant0, instant2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Instant instant3 = instant2.minus((ReadableDuration) duration0);
      assertNotNull(instant3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      
      Date date0 = instant3.toDate();
      assertNotNull(date0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals("Wed Dec 31 23:52:19 GMT 1969", date0.toString());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      
      DateTime dateTime0 = instant3.toDateTime();
      assertNotNull(dateTime0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertNotNull(localDateTime0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      assertNotNull(dateTime_Property0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      
      DateTime dateTime1 = dateTime0.minus(1345L);
      assertNotNull(dateTime1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertEquals((-462002L), dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("O{M~o]s.-");
      assertNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((long) (-382), (DateTimeZone) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime2 = localDate0.toDateTime(instant2);
      assertNotNull(dateTime2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals((-459458L), dateTime2.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      boolean boolean0 = instant3.isAfter(dateTime2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertFalse(boolean0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals((-459458L), dateTime2.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime0.withFields(localDateTime0);
      assertNotNull(dateTime3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-460657L), dateTime3.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime0.plusYears((-382));
      assertNotNull(dateTime4);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertEquals((-12054787660657L), dateTime4.getMillis());
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime4.plusMinutes((-3555));
      assertNotNull(dateTime5);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertEquals((-12054787660657L), dateTime4.getMillis());
      assertEquals((-95L), instant0.getMillis());
      assertEquals((-12055000960657L), dateTime5.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      
      DateTime.Property dateTime_Property1 = dateTime3.yearOfEra();
      assertNotNull(dateTime_Property1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-460657L), dateTime3.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      DateTime dateTime6 = dateTime3.minus((ReadablePeriod) minutes0);
      assertNotNull(dateTime6);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime1);
      assertSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime4);
      assertSame(dateTime3, dateTime6);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), dateTime6.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-460657L), dateTime3.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      long long0 = dateTime_Property1.getMillis();
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime4);
      assertSame(dateTime3, dateTime6);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime0);
      assertEquals((-460657L), long0);
      assertEquals((-95L), instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals((-460657L), dateTime3.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime7 = dateTime5.toDateTime((DateTimeZone) null);
      assertNotNull(dateTime7);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime6);
      assertNotSame(dateTime4, dateTime7);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant3);
      assertNotSame(instant0, instant2);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertSame(dateTime5, dateTime7);
      assertNotSame(dateTime5, dateTime6);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(instant1, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant3);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant0);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime2);
      assertSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertEquals((-12054787660657L), dateTime4.getMillis());
      assertEquals((-95L), instant0.getMillis());
      assertEquals((-12055000960657L), dateTime5.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1199L, duration0.getMillis());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-458113L), instant1.getMillis());
      assertEquals((-459458L), instant2.getMillis());
      assertEquals((-460657L), instant3.getMillis());
      assertEquals((-12055000960657L), dateTime7.getMillis());
      assertEquals((-460657L), dateTime0.getMillis());
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime6));
      assertFalse(dateTime4.equals((Object)dateTime5));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant3));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime6));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant1));
      assertFalse(instant3.equals((Object)instant2));
      assertFalse(instant3.equals((Object)instant0));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType2);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType2.getName());
      assertEquals("yearOfCentury", dateTimeFieldType2.toString());
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType3);
      assertNotSame(dateTimeFieldType3, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType3, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType3, dateTimeFieldType1);
      assertEquals("secondOfMinute", dateTimeFieldType3.getName());
      assertEquals("secondOfMinute", dateTimeFieldType3.toString());
      assertFalse(dateTimeFieldType3.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType3.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType3.equals((Object)dateTimeFieldType1));
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType4);
      assertNotSame(dateTimeFieldType4, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType4, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType4, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType4, dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType4.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType4.getName());
      assertFalse(dateTimeFieldType4.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType4.equals((Object)dateTimeFieldType3));
      assertFalse(dateTimeFieldType4.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType4.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType5);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType4);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType1);
      assertEquals("weekyearOfCentury", dateTimeFieldType5.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType5.toString());
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType4));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType3));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType1));
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType5;
      int[] intArray0 = new int[4];
      intArray0[0] = (-382);
      intArray0[1] = (-3555);
      intArray0[3] = (-382);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      Instant instant0 = new Instant((long) (-2147483636));
      assertNotNull(instant0);
      assertEquals((-2147483636L), instant0.getMillis());
      
      DateTime dateTime0 = testAbstractPartial_MockPartial0.toDateTime(instant0);
      assertNotNull(dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals((-2147483636L), instant0.getMillis());
      assertEquals(530916364L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withPeriodAdded((ReadablePeriod) null, (-1101));
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals((-2147483636L), instant0.getMillis());
      assertEquals(530916364L, dateTime0.getMillis());
      assertEquals(530916364L, dateTime1.getMillis());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = dateTime1.getMillisOfSecond();
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(364, int0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals((-2147483636L), instant0.getMillis());
      assertEquals(530916364L, dateTime0.getMillis());
      assertEquals(530916364L, dateTime1.getMillis());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("a#4WCsBdv|L@jl");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset((-2147483636), false);
      assertEquals((-2147483636L), long0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusWeeks(114);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1323462081320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime1.weekyear();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1323462081320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime.Property dateTime_Property2 = dateTime0.era();
      assertNotNull(dateTime_Property2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTime dateTime2 = dateTime1.withField(dateTimeFieldType0, 1123);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1323462081320L, dateTime1.getMillis());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1323456201320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property3 = dateTime1.centuryOfEra();
      assertNotNull(dateTime_Property3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime_Property3, dateTime_Property2);
      assertNotSame(dateTime_Property3, dateTime_Property0);
      assertNotSame(dateTime_Property3, dateTime_Property1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1323462081320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property0));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property1));
      
      DateTime dateTime3 = dateTime0.plusWeeks(1123);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2071599681320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.year();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime_Property0.setCopy((-719));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-84852675518680L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.withHourOfDay(1539);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1539 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DurationField durationField0 = mockNullZoneChronology0.millis();
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(3234, 3234, 3234, 3234, (-2147469518), 3234, 1, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withMillisOfSecond(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281000L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.minusMinutes(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281000L, dateTime1.getMillis());
      assertEquals(1392409281000L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      DateTime dateTime3 = dateTime2.withFieldAdded(durationFieldType0, 237);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281000L, dateTime1.getMillis());
      assertEquals(1392409281000L, dateTime2.getMillis());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1392409518000L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withWeekyear((-896));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-90438003518680L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.withMillisOfDay(169);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-90438003518680L), dateTime1.getMillis());
      assertEquals((-90438076799831L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = testAbstractPartial_MockPartial0.toDateTime(dateTime2);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-90438003518680L), dateTime1.getMillis());
      assertEquals((-90438076799831L), dateTime2.getMillis());
      assertEquals(1555200169L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime3.withChronology((Chronology) null);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-90438003518680L), dateTime1.getMillis());
      assertEquals((-90438076799831L), dateTime2.getMillis());
      assertEquals(1555200169L, dateTime3.getMillis());
      assertEquals(1555200169L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      
      DateTime dateTime5 = dateTime4.withLaterOffsetAtOverlap();
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime5, dateTime2);
      assertSame(dateTime5, dateTime3);
      assertSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-90438003518680L), dateTime1.getMillis());
      assertEquals((-90438076799831L), dateTime2.getMillis());
      assertEquals(1555200169L, dateTime3.getMillis());
      assertEquals(1555200169L, dateTime4.getMillis());
      assertEquals(1555200169L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392336000000L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.centuryOfEra();
      assertNotNull(dateTime_Property0);
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusDays(3234);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-279417600000L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = null;
      try {
        testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("(CCPug>H$'yMd\tW2");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 261, 0, 0, (-1757), 0, (-1), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1757 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDate localDate0 = new LocalDate(0L, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, 0L, (Chronology) null);
      assertNotNull(mutablePeriod0);
      
      LocalDate localDate1 = localDate0.plus(mutablePeriod0);
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      
      LocalDate localDate2 = localDate1.withYear((-1));
      assertNotNull(localDate2);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      
      LocalDate localDate3 = localDate2.plusDays((-1));
      assertNotNull(localDate3);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      
      LocalDate localDate4 = localDate3.plusMonths((-1));
      assertNotNull(localDate4);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      
      DateTime dateTime0 = localDate4.toDateTimeAtCurrentTime(dateTimeZone0);
      assertNotNull(dateTime0);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      
      boolean boolean0 = localDate3.isBefore(localDate0);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertTrue(boolean0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+01:00", dateTimeZone1.toString());
      assertEquals("+01:00", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      
      DateTime dateTime1 = dateTime0.minusMinutes(665);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertEquals((-62201486618680L), dateTime1.getMillis());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = dateTime0.getDayOfYear();
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(334, int0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      Integer integer0 = new Integer(215);
      assertNotNull(integer0);
      assertEquals(215, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = Integer.divideUnsigned(0, (-1936));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Date date0 = dateTime1.toDate();
      assertNotNull(date0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertEquals((-62201486618680L), dateTime1.getMillis());
      assertEquals("Mon Dec 02 09:16:21 GMT 3", date0.toString());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      boolean boolean1 = localDate1.equals(integer0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertFalse(boolean1);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(boolean1 == boolean0);
      
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      LocalDate localDate5 = dateTime1.toLocalDate();
      assertNotNull(localDate5);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(localDate5, localDate0);
      assertNotSame(localDate5, localDate1);
      assertNotSame(localDate5, localDate3);
      assertNotSame(localDate5, localDate4);
      assertNotSame(localDate5, localDate2);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate5);
      assertNotSame(localDate0, localDate4);
      assertNotSame(localDate1, localDate5);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate5);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate5);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate5);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate5.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertEquals((-62201486618680L), dateTime1.getMillis());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate5.equals((Object)localDate0));
      assertFalse(localDate5.equals((Object)localDate1));
      assertTrue(localDate5.equals((Object)localDate4));
      assertFalse(localDate5.equals((Object)localDate3));
      assertFalse(localDate5.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusYears(1917);
      assertNotNull(dateTime2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate5);
      assertNotSame(localDate0, localDate4);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(localDate1, localDate5);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate5);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate5);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate5);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals((-1706885018680L), dateTime2.getMillis());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertEquals((-62201486618680L), dateTime1.getMillis());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate5));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(localDate1.equals((Object)localDate5));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate5));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate5));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertTrue(localDate4.equals((Object)localDate5));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime_Property0.roundFloorCopy();
      assertNotNull(dateTime3);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate5);
      assertNotSame(localDate0, localDate4);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(localDate1, localDate5);
      assertNotSame(localDate1, localDate4);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate1, localDate2);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate5);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate4);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate4);
      assertNotSame(localDate3, localDate5);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate0);
      assertNotSame(localDate4, localDate1);
      assertNotSame(localDate4, localDate5);
      assertNotSame(localDate4, localDate3);
      assertNotSame(localDate4, localDate2);
      assertNotSame(localDate4, localDate0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals((-62230294800000L), dateTime3.getMillis());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertEquals(3, localDate4.size());
      assertEquals((-62201446718680L), dateTime0.getMillis());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate5));
      assertFalse(localDate0.equals((Object)localDate4));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(localDate1.equals((Object)localDate5));
      assertFalse(localDate1.equals((Object)localDate4));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate5));
      assertFalse(localDate2.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate2));
      assertFalse(localDate3.equals((Object)localDate4));
      assertFalse(localDate3.equals((Object)localDate5));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate0));
      assertFalse(localDate4.equals((Object)localDate1));
      assertTrue(localDate4.equals((Object)localDate5));
      assertFalse(localDate4.equals((Object)localDate3));
      assertFalse(localDate4.equals((Object)localDate2));
      assertFalse(localDate4.equals((Object)localDate0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      
      // Undeclared exception!
      try { 
        dateTime2.withSecondOfMinute(1204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1204 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((-1L), dateTimeZone0);
      assertNotNull(localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withCenturyOfEra(1773);
      assertNotNull(localDate1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate1.equals((Object)localDate0));
      
      DateTime dateTime0 = localDate1.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(5535089337600000L, dateTime0.getMillis());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      
      DateTime dateTime1 = dateTime0.withDate(localDate1);
      assertNotNull(dateTime1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(5535089337600000L, dateTime0.getMillis());
      assertEquals(5535089337600000L, dateTime1.getMillis());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      
      DateTime dateTime2 = dateTime1.minusMinutes(1773);
      assertNotNull(dateTime2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(5535089337600000L, dateTime0.getMillis());
      assertEquals(5535089337600000L, dateTime1.getMillis());
      assertEquals(5535089231220000L, dateTime2.getMillis());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.withYearOfEra(4489);
      assertNotNull(dateTime3);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(5535089337600000L, dateTime0.getMillis());
      assertEquals(5535089337600000L, dateTime1.getMillis());
      assertEquals(5535089231220000L, dateTime2.getMillis());
      assertEquals(79523404020000L, dateTime3.getMillis());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property1 = dateTime0.year();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime1 = dateTime_Property1.addToCopy(1271);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(41501362881320L, dateTime1.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime_Property1.getDateTime();
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Instant instant0 = new Instant(1392478654172L);
      assertNotNull(instant0);
      assertEquals(1392478654172L, instant0.getMillis());
      
      Instant instant1 = instant0.minus((-472L));
      assertNotNull(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(1392478654172L, instant0.getMillis());
      assertEquals(1392478654644L, instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      
      DateTime dateTime0 = instant1.toDateTime();
      assertNotNull(dateTime0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(1392478654172L, instant0.getMillis());
      assertEquals(1392478654644L, instant1.getMillis());
      assertEquals(1392478654644L, dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTime();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertNotNull(mutableDateTime0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(1392478654172L, instant0.getMillis());
      assertEquals(1392478654644L, instant1.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392478654644L, mutableDateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      boolean boolean0 = instant0.isEqualNow();
      assertNotSame(instant0, instant1);
      assertFalse(boolean0);
      assertEquals(1392478654172L, instant0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      
      DateTime.Property dateTime_Property0 = dateTime0.dayOfWeek();
      assertNotNull(dateTime_Property0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(1392478654172L, instant0.getMillis());
      assertEquals(1392478654644L, instant1.getMillis());
      assertEquals(1392478654644L, dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      DateTime dateTime1 = dateTime0.withWeekyear((-5));
      assertNotNull(dateTime1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392478654172L, instant0.getMillis());
      assertEquals(1392478654644L, instant1.getMillis());
      assertEquals(1392478654644L, dateTime0.getMillis());
      assertEquals((-62320782145356L), dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.withMillis(2);
      assertNotNull(dateTime2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392478654172L, instant0.getMillis());
      assertEquals(1392478654644L, instant1.getMillis());
      assertEquals(1392478654644L, dateTime0.getMillis());
      assertEquals(2L, dateTime2.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime1.minusMonths((-1003));
      assertNotNull(dateTime3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(1392478654172L, instant0.getMillis());
      assertEquals(1392478654644L, instant1.getMillis());
      assertEquals(1392478654644L, dateTime0.getMillis());
      assertEquals((-62320782145356L), dateTime1.getMillis());
      assertEquals((-59683162945356L), dateTime3.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withMillis(0L);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime1.withWeekyear((-2147483647));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withTime(2548, (-4944), (-1349), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2548 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      assertNotNull(dateTime_Property0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withTime(1271, 1271, 1271, 1271);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1271 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTime dateTime0 = new DateTime(100000000000L, (DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(100000000000L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withEra(99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 99 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      Duration duration0 = new Duration((-152L), (-152L));
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = new DateTime((long) (-702));
      assertNotNull(dateTime0);
      assertEquals((-702L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minus((ReadableDuration) duration0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-702L), dateTime0.getMillis());
      assertEquals((-702L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1392409281319L);
      assertNotNull(dateTime0);
      assertEquals(1392409281319L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime1 = dateTime0.toDateTime(dateTimeZone0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281319L, dateTime0.getMillis());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281319L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime1.withYearOfEra((-233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -233 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = new DateTime((Chronology) mockNullZoneChronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(dateTime0, (ReadableDuration) null);
      assertNotNull(interval0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      DateTime dateTime1 = interval0.getEnd();
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertTrue(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfDay();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime0));
      
      Chronology chronology0 = dateTime_Property0.getChronology();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals("", chronology0.toString());
      assertTrue(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime();
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MockNullZoneChronology mockNullZoneChronology1 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime1);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        Duration.parse("kTxGh|vqr*zHQl+`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"kTxGh|vqr*zHQl+`\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(")rM!+=Qz05,RZDd&[", chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \")rM!+=Qz05,RZDd&[\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTimeISO();
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime1 = dateTime0.withZone(uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      int int0 = Calendar.ERA;
      assertEquals(0, int0);
      
      DateTime dateTime2 = dateTime1.withDayOfWeek(4);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392322881320L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      LocalTime localTime0 = dateTime2.toLocalTime();
      assertNotNull(localTime0);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392322881320L, dateTime2.getMillis());
      assertEquals(4, localTime0.size());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime(0L, chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withTimeAtStartOfDay();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-9));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-09:00", dateTimeZone0.getID());
      assertEquals("-09:00", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-09:00", dateTimeZone0.getID());
      assertEquals("-09:00", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-09:00", dateTimeZone0.getID());
      assertEquals("-09:00", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withZone(dateTimeZone0);
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1335), (-1335), (-2374), (-1335), (-1335), chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withSecondOfMinute(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      DateTime dateTime2 = dateTime0.withFieldAdded(durationFieldType0, 237);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals(1392409518320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(mockNullZoneChronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", mockNullZoneChronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      // Undeclared exception!
      try { 
        DateTime.parse("Il}.oAuPYqVD:yH9>Vc", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Il}.oAuPYqVD:yH9>Vc\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.era();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("era", dateTimeField0.getName());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      
      DateTimeField dateTimeField1 = mockNullZoneChronology0.monthOfYear();
      assertNotNull(dateTimeField1);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField1.isLenient());
      assertFalse(dateTimeField1.isSupported());
      assertEquals("monthOfYear", dateTimeField1.getName());
      assertEquals("UnsupportedDateTimeField", dateTimeField1.toString());
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      
      DateTimeField dateTimeField2 = mockNullZoneChronology0.hourOfHalfday();
      assertNotNull(dateTimeField2);
      assertNotSame(dateTimeField2, dateTimeField0);
      assertNotSame(dateTimeField2, dateTimeField1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(dateTimeField2.isSupported());
      assertEquals("UnsupportedDateTimeField", dateTimeField2.toString());
      assertEquals("hourOfHalfday", dateTimeField2.getName());
      assertFalse(dateTimeField2.isLenient());
      assertFalse(dateTimeField2.equals((Object)dateTimeField0));
      assertFalse(dateTimeField2.equals((Object)dateTimeField1));
      
      DateTimeField dateTimeField3 = mockNullZoneChronology0.hourOfHalfday();
      assertNotNull(dateTimeField3);
      assertNotSame(dateTimeField3, dateTimeField0);
      assertSame(dateTimeField3, dateTimeField2);
      assertNotSame(dateTimeField3, dateTimeField1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertFalse(dateTimeField3.isSupported());
      assertEquals("hourOfHalfday", dateTimeField3.getName());
      assertFalse(dateTimeField3.isLenient());
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertFalse(dateTimeField3.equals((Object)dateTimeField1));
      
      DateTime.Property dateTime_Property0 = new DateTime.Property((DateTime) null, dateTimeField3);
      assertNotNull(dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertFalse(dateTimeField3.isSupported());
      assertEquals("hourOfHalfday", dateTimeField3.getName());
      assertFalse(dateTimeField3.isLenient());
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertFalse(dateTimeField3.equals((Object)dateTimeField1));
      
      DateTimeFieldType dateTimeFieldType0 = dateTime_Property0.getFieldType();
      assertNotNull(dateTimeFieldType0);
      assertNotSame(dateTimeField3, dateTimeField0);
      assertSame(dateTimeField3, dateTimeField2);
      assertNotSame(dateTimeField3, dateTimeField1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UnsupportedDateTimeField", dateTimeField3.toString());
      assertFalse(dateTimeField3.isSupported());
      assertEquals("hourOfHalfday", dateTimeField3.getName());
      assertFalse(dateTimeField3.isLenient());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertFalse(dateTimeField3.equals((Object)dateTimeField0));
      assertFalse(dateTimeField3.equals((Object)dateTimeField1));
      
      // Undeclared exception!
      try { 
        dateTime_Property0.withMinimumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      
      DateTime dateTime1 = DateTime.parse("", dateTimeFormatter2);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Period period0 = new Period(0, 0, 0, (-1215), 10, 0, 0, (-1215), periodType0);
      assertNotNull(period0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      DateTime dateTime2 = dateTime0.plus((ReadablePeriod) seconds0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1287778881320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      Seconds seconds1 = seconds0.minus(577);
      assertNotNull(seconds1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals((-173), weeks0.getWeeks());
      assertEquals((-104630400), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds1.size());
      assertEquals((-104630977), seconds1.getSeconds());
      assertFalse(seconds1.equals((Object)seconds0));
      
      // Undeclared exception!
      try { 
        dateTime1.withWeekOfWeekyear(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekOfWeekyear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.minutes((-1837));
      assertNotNull(period0);
      
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      assertNotNull(dateTime0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusYears(0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      boolean boolean0 = dateTime1.isBefore((long) 0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertFalse(boolean0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.plus(0L);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      
      MockZone mockZone0 = new MockZone((-344L), 0, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      assertNotNull(dateTime_Property0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      long long0 = dateTime_Property0.getMillis();
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime3 = dateTime0.withWeekyear(0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-62162998718680L), dateTime3.getMillis());
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withWeekyear(84);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-59512160318680L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusYears(2146);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-66328861118680L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      TestMutableInterval_Updates testMutableInterval_Updates0 = null;
      try {
        testMutableInterval_Updates0 = new TestMutableInterval_Updates("*XuPKTN");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.minusYears(2147483601);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481587 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-740), (-1256), 2498);
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-740,MONTH=-1256,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2498,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDate0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-88607433600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=839,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-88607433600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=839,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals((-88606669118680L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusSeconds((-1256));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-88607433600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=839,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals((-88606669118680L), dateTime0.getMillis());
      assertEquals((-88606670374680L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      LocalTime localTime0 = dateTime0.toLocalTime();
      assertNotNull(localTime0);
      assertNotSame(dateTime0, dateTime1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-88607433600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=839,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals((-88606669118680L), dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime dateTime2 = dateTime0.minusHours((-1256));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-88607433600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=839,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals((-88606669118680L), dateTime0.getMillis());
      assertEquals((-88602147518680L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime2.withMinuteOfHour(2498);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2498 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeZone dateTimeZone0 = mockNullZoneChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = new DateTime((Object) null, (DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withMinuteOfHour((-2225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2225 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusYears(0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime1.dayOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      int int0 = dateTime0.getMinuteOfDay();
      assertSame(dateTime0, dateTime1);
      assertEquals(1221, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      String string0 = dateTime_Property0.getAsShortText(locale0);
      assertNotNull(string0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("45", string0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      DateTime dateTime2 = dateTime_Property0.addWrapFieldToCopy(0);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      
      int int1 = dateTime0.getCenturyOfEra();
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertEquals(20, int1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(int1 == int0);
      
      Duration duration0 = Duration.standardDays(0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      
      Duration duration1 = weeks0.toStandardDuration();
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertTrue(duration1.equals((Object)duration0));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration1, dateTime1);
      assertNotNull(mutablePeriod0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      
      DateTime dateTime3 = dateTime0.withPeriodAdded(mutablePeriod0, 1221);
      assertNotNull(dateTime3);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      
      DateTime.Property dateTime_Property1 = dateTime2.secondOfMinute();
      assertNotNull(dateTime_Property1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime dateTime4 = dateTime3.minusWeeks(1036);
      assertNotNull(dateTime4);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertEquals(765836481320L, dateTime4.getMillis());
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-2309L));
      assertNotNull(dateTime0);
      assertEquals((-2309L), dateTime0.getMillis());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("+A(rC?&F@c<Gzs");
      assertNull(dateTimeZone0);
      
      DateTime dateTime1 = dateTime0.withZone((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals((-2309L), dateTime0.getMillis());
      assertEquals((-2309L), dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.withTimeAtStartOfDay();
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals((-2309L), dateTime0.getMillis());
      assertEquals((-2309L), dateTime1.getMillis());
      assertEquals((-86400000L), dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.withDurationAdded((-2309L), (-1700));
      assertNotNull(dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertEquals((-2309L), dateTime0.getMillis());
      assertEquals((-2309L), dateTime1.getMillis());
      assertEquals((-86400000L), dateTime2.getMillis());
      assertEquals((-82474700L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime0.minus((-2401L));
      assertNotNull(dateTime4);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertEquals((-2309L), dateTime0.getMillis());
      assertEquals(92L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      boolean boolean0 = mutableDateTime0.isSupported(dateTimeFieldType0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertTrue(boolean0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      
      DateTime dateTime0 = mutableDateTime1.toDateTimeISO();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.year();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime_Property0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      DateTime.Property dateTime_Property0 = dateTime0.property(dateTimeFieldType1);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime_Property0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      DateTime.Property dateTime_Property1 = dateTime0.millisOfDay();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime_Property1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime.Property dateTime_Property2 = dateTime0.millisOfDay();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime_Property2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      DateTime dateTime1 = dateTime_Property2.roundHalfEvenCopy();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertSame(dateTime1, dateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      DateTime dateTime2 = dateTime1.minus(1L);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime2);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281319L, dateTime2.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime_Property2.roundHalfCeilingCopy();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime3);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime3.plusYears(2);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime4);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime2);
      assertSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertEquals(1455481281320L, dateTime4.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      DateTime dateTime5 = dateTime4.withCenturyOfEra(0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime5);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime5);
      assertSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertEquals(1455481281320L, dateTime4.getMillis());
      assertEquals((-61658422718680L), dateTime5.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertTrue(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      DateTime dateTime6 = DateTime.now();
      assertNotNull(dateTime6);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime1);
      assertEquals(1392409281320L, dateTime6.getMillis());
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertTrue(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertTrue(dateTime6.equals((Object)dateTime0));
      assertTrue(dateTime6.equals((Object)dateTime3));
      
      boolean boolean1 = dateTime_Property0.isLeap();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertFalse(boolean1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertFalse(boolean1 == boolean0);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      
      DateTime.Property dateTime_Property3 = dateTime6.era();
      assertNotNull(dateTime_Property3);
      assertNotSame(dateTime_Property3, dateTime_Property2);
      assertNotSame(dateTime_Property3, dateTime_Property1);
      assertNotSame(dateTime_Property3, dateTime_Property0);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime1);
      assertEquals(1392409281320L, dateTime6.getMillis());
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property3.equals((Object)dateTime_Property0));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertTrue(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertTrue(dateTime6.equals((Object)dateTime0));
      assertTrue(dateTime6.equals((Object)dateTime3));
      
      DateTime dateTime7 = dateTime_Property0.roundHalfEvenCopy();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime7);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime_Property0, dateTime_Property3);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1388361600000L, dateTime7.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property3));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      
      DateTime dateTime8 = dateTime7.plusHours(1);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime8);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime8);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime8);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime_Property0, dateTime_Property3);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1388361600000L, dateTime7.getMillis());
      assertEquals(1388365200000L, dateTime8.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property3));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      
      Period period0 = Period.months(0);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Weeks weeks0 = hours0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      Days days0 = weeks0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      
      Duration duration0 = days0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      
      DateTime dateTime9 = dateTime6.plus((ReadableDuration) duration0);
      assertNotNull(dateTime9);
      assertNotSame(dateTime9, dateTime8);
      assertNotSame(dateTime9, dateTime3);
      assertNotSame(dateTime9, dateTime5);
      assertNotSame(dateTime9, dateTime7);
      assertNotSame(dateTime9, dateTime4);
      assertSame(dateTime9, dateTime6);
      assertNotSame(dateTime9, dateTime2);
      assertNotSame(dateTime9, dateTime0);
      assertNotSame(dateTime9, dateTime1);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertSame(dateTime6, dateTime9);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime8);
      assertNotSame(dateTime6, dateTime7);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime1);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1392409281320L, dateTime9.getMillis());
      assertEquals(1392409281320L, dateTime6.getMillis());
      assertFalse(dateTime9.equals((Object)dateTime8));
      assertFalse(dateTime9.equals((Object)dateTime5));
      assertFalse(dateTime9.equals((Object)dateTime7));
      assertFalse(dateTime9.equals((Object)dateTime4));
      assertTrue(dateTime9.equals((Object)dateTime0));
      assertFalse(dateTime9.equals((Object)dateTime2));
      assertTrue(dateTime9.equals((Object)dateTime1));
      assertTrue(dateTime9.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertTrue(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime8));
      assertTrue(dateTime6.equals((Object)dateTime0));
      assertTrue(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime7));
      
      boolean boolean2 = dateTime8.isAfter(0L);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime8);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime9);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime9);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime8);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime9);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime_Property0, dateTime_Property3);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertTrue(boolean2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1388361600000L, dateTime7.getMillis());
      assertEquals(1388365200000L, dateTime8.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime8));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime9));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime9));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property3));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      DateTime.Property dateTime_Property4 = dateTime1.dayOfYear();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime_Property4);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime8);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime9);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property3);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertNotSame(dateTime_Property2, dateTime_Property4);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime8);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime9);
      assertNotSame(dateTime_Property4, dateTime_Property3);
      assertNotSame(dateTime_Property4, dateTime_Property1);
      assertNotSame(dateTime_Property4, dateTime_Property0);
      assertNotSame(dateTime_Property4, dateTime_Property2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property3));
      assertTrue(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      assertTrue(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime8));
      assertTrue(dateTime1.equals((Object)dateTime9));
      assertFalse(dateTime1.equals((Object)dateTime7));
      assertFalse(dateTime_Property4.equals((Object)dateTime_Property3));
      assertFalse(dateTime_Property4.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property4.equals((Object)dateTime_Property0));
      assertFalse(dateTime_Property4.equals((Object)dateTime_Property2));
      
      LocalTime localTime0 = dateTime8.toLocalTime();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(localTime0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime8);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime9);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime6);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime7);
      assertNotSame(dateTime8, dateTime9);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime8);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime9);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTime_Property0, dateTime_Property2);
      assertNotSame(dateTime_Property0, dateTime_Property3);
      assertNotSame(dateTime_Property0, dateTime_Property4);
      assertNotSame(dateTime_Property0, dateTime_Property1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1388361600000L, dateTime7.getMillis());
      assertEquals(1388365200000L, dateTime8.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals(4, localTime0.size());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime8));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime9));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime9));
      assertFalse(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property3));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property4));
      assertFalse(dateTime_Property0.equals((Object)dateTime_Property1));
      
      DateTime.Property dateTime_Property5 = dateTime0.monthOfYear();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(dateTime_Property5);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime8);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime9);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime_Property5, dateTime_Property2);
      assertNotSame(dateTime_Property5, dateTime_Property1);
      assertNotSame(dateTime_Property5, dateTime_Property3);
      assertNotSame(dateTime_Property5, dateTime_Property0);
      assertNotSame(dateTime_Property5, dateTime_Property4);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertTrue(dateTime0.equals((Object)dateTime9));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime8));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertTrue(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime_Property5.equals((Object)dateTime_Property2));
      assertFalse(dateTime_Property5.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property5.equals((Object)dateTime_Property3));
      assertFalse(dateTime_Property5.equals((Object)dateTime_Property0));
      assertFalse(dateTime_Property5.equals((Object)dateTime_Property4));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      DateTime dateTime1 = dateTime0.plusHours(1461);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1397668881320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 0, 0, (-2603), 1026, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2603 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-178L), (-4), (-2134));
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) mockZone0);
      assertNotNull(localTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertNotNull(dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392407147316L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusHours((-2622));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392407147316L, dateTime0.getMillis());
      assertEquals(1401846347316L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1120), 999999, 999999, 0, 417, 0, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L));
      assertNotNull(interval0);
      assertEquals((-1L), interval0.getEndMillis());
      assertEquals((-1L), interval0.getStartMillis());
      
      DateTime dateTime0 = interval0.getEnd();
      assertNotNull(dateTime0);
      assertEquals((-1L), interval0.getEndMillis());
      assertEquals((-1L), interval0.getStartMillis());
      assertEquals((-1L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plus((-1940L));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-1L), interval0.getEndMillis());
      assertEquals((-1L), interval0.getStartMillis());
      assertEquals((-1L), dateTime0.getMillis());
      assertEquals((-1941L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals((-1L), interval0.getEndMillis());
      assertEquals((-1L), interval0.getStartMillis());
      assertEquals((-1L), dateTime0.getMillis());
      assertEquals((-1941L), dateTime1.getMillis());
      assertEquals((-1941L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((-1L), (-12055000501440L));
      assertNotNull(duration0);
      assertEquals((-200916675L), duration0.getStandardMinutes());
      assertEquals((-139525L), duration0.getStandardDays());
      assertEquals((-3348611L), duration0.getStandardHours());
      assertEquals((-12055000501439L), duration0.getMillis());
      assertEquals((-12055000501L), duration0.getStandardSeconds());
      
      Duration duration1 = duration0.dividedBy(1833L);
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals((-200916675L), duration0.getStandardMinutes());
      assertEquals((-139525L), duration0.getStandardDays());
      assertEquals((-3348611L), duration0.getStandardHours());
      assertEquals((-12055000501439L), duration0.getMillis());
      assertEquals((-12055000501L), duration0.getStandardSeconds());
      assertEquals((-109610L), duration1.getStandardMinutes());
      assertEquals((-6576650573L), duration1.getMillis());
      assertEquals((-1826L), duration1.getStandardHours());
      assertEquals((-6576650L), duration1.getStandardSeconds());
      assertEquals((-76L), duration1.getStandardDays());
      assertFalse(duration1.equals((Object)duration0));
      
      DateTime dateTime3 = dateTime2.withDurationAdded((ReadableDuration) duration1, (-6247));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertEquals((-1L), interval0.getEndMillis());
      assertEquals((-1L), interval0.getStartMillis());
      assertEquals((-1L), dateTime0.getMillis());
      assertEquals((-1941L), dateTime1.getMillis());
      assertEquals((-1941L), dateTime2.getMillis());
      assertEquals((-200916675L), duration0.getStandardMinutes());
      assertEquals((-139525L), duration0.getStandardDays());
      assertEquals((-3348611L), duration0.getStandardHours());
      assertEquals((-12055000501439L), duration0.getMillis());
      assertEquals((-12055000501L), duration0.getStandardSeconds());
      assertEquals((-109610L), duration1.getStandardMinutes());
      assertEquals((-6576650573L), duration1.getMillis());
      assertEquals((-1826L), duration1.getStandardHours());
      assertEquals((-6576650L), duration1.getStandardSeconds());
      assertEquals((-76L), duration1.getStandardDays());
      assertEquals(41084336127590L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime3.withLaterOffsetAtOverlap();
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime2, dateTime4);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertSame(dateTime4, dateTime3);
      assertEquals((-1L), interval0.getEndMillis());
      assertEquals((-1L), interval0.getStartMillis());
      assertEquals((-1L), dateTime0.getMillis());
      assertEquals((-1941L), dateTime1.getMillis());
      assertEquals((-1941L), dateTime2.getMillis());
      assertEquals((-200916675L), duration0.getStandardMinutes());
      assertEquals((-139525L), duration0.getStandardDays());
      assertEquals((-3348611L), duration0.getStandardHours());
      assertEquals((-12055000501439L), duration0.getMillis());
      assertEquals((-12055000501L), duration0.getStandardSeconds());
      assertEquals((-109610L), duration1.getStandardMinutes());
      assertEquals((-6576650573L), duration1.getMillis());
      assertEquals((-1826L), duration1.getStandardHours());
      assertEquals((-6576650L), duration1.getStandardSeconds());
      assertEquals((-76L), duration1.getStandardDays());
      assertEquals(41084336127590L, dateTime3.getMillis());
      assertEquals(41084336127590L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      TestDateTime_Basics testDateTime_Basics0 = null;
      try {
        testDateTime_Basics0 = new TestDateTime_Basics("org.joda.time.DateTime");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusYears(1943);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(62707551681320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.secondOfDay();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(62707551681320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for secondOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = dateTime0.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTime.Property dateTime_Property0 = dateTime0.year();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTimeField dateTimeField0 = dateTime_Property0.getField();
      assertNotNull(dateTimeField0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfSecond((-1801));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1801 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y#^$Gwa)");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "63");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-12), (-2269), 352, (-2269), 947, (-12), 1, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2269 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = dateTime1.getSecondOfDay();
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(73281, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      int int1 = (-2147483647);
      DateTime dateTime2 = dateTime1.plusWeeks((-2147483647));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals((-1298796717296318680L), dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime2.withCenturyOfEra((-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483647 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      int int0 = 31;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(772, (-6), (-6), 31, 772, 772);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(114, (-307), (-1), 114, 3052, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -307 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      assertNotNull(dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime_Property0.roundHalfCeilingCopy();
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392595200000L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime_Property0.roundHalfFloorCopy();
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392595200000L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime1));
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime(2052L, (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localDateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(216);
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      DateTime dateTime3 = localDateTime1.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-568079997948L), dateTime3.getMillis());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
      assertNotNull(dateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-568079997948L), dateTime3.getMillis());
      assertEquals((-568080000000L), dateTime4.getMillis());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      
      DateTime dateTime5 = dateTime4.minusSeconds((-388));
      assertNotNull(dateTime5);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime3);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-568079997948L), dateTime3.getMillis());
      assertEquals((-568080000000L), dateTime4.getMillis());
      assertEquals((-568079612000L), dateTime5.getMillis());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime3));
      
      DateTime.Property dateTime_Property1 = dateTime5.dayOfMonth();
      assertNotNull(dateTime_Property1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime5);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals((-568079997948L), dateTime3.getMillis());
      assertEquals((-568080000000L), dateTime4.getMillis());
      assertEquals((-568079612000L), dateTime5.getMillis());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime5));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      Integer integer0 = new Integer(1416);
      assertNotNull(integer0);
      assertEquals(1416, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotNull(dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      
      DateTime dateTime0 = dateTimeFormatter3.parseDateTime("");
      assertNotNull(dateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      
      int int0 = 292278993;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-5);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-1), (byte) (-113), (byte)13, (byte)89, (byte) (-1), (byte)60, (byte) (-5)}, byteArray0);
      assertFalse(boolean0);
      
      DateTime dateTime1 = dateTime0.plusMinutes(292278993);
      assertNotNull(dateTime1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTime0, dateTime1);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(17536739580000L, dateTime1.getMillis());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("6AuHI");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      
      DateTime dateTime2 = dateTime1.withZone(testDateTimeZone_MockDateTimeZone0);
      assertNotNull(dateTime2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(17536739580000L, dateTime1.getMillis());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(17536739580000L, dateTime2.getMillis());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.toDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      assertNotNull(dateTime3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime3);
      assertNotSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(17536739580000L, dateTime1.getMillis());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(17536739580000L, dateTime2.getMillis());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(17536739580000L, dateTime3.getMillis());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DateTimeField dateTimeField0 = mockNullZoneChronology0.hourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      
      DateTime.Property dateTime_Property0 = new DateTime.Property(dateTime2, dateTimeField0);
      assertNotNull(dateTime_Property0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(17536739580000L, dateTime1.getMillis());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("6AuHI", testDateTimeZone_MockDateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1416, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(17536739580000L, dateTime2.getMillis());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1416, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertFalse(dateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
      assertFalse(dateTimeField0.isSupported());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime_Property0.withMaximumValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfHalfday field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = uTCDateTimeZone0.getName(1L, locale0);
      assertNotNull(string0);
      assertEquals("\u534F\u8C03\u4E16\u754C\u65F6\u95F4", string0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTime dateTime0 = new DateTime(1L, (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1L, dateTime0.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.era();
      assertNotNull(dateTime_Property0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1L, dateTime0.getMillis());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimePrinter dateTimePrinter1 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser1 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter1, dateTimeParser1);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Instant instant0 = null;
      try {
        instant0 = new Instant(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.toDateTime(dateTimeZone0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      int int0 = (-1);
      DateTime dateTime2 = dateTime1.plusSeconds((-1));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409280320L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime2.withMonthOfYear(13421772);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 13421772 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-3654), (-3654), (-3654), (-3654), 20503125, (-702), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3654 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      String string0 = uTCDateTimeZone0.getName(4163L);
      assertNotNull(string0);
      assertEquals("Coordinated Universal Time", string0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime1 = dateTime0.minusHours(780);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1389601281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.dayOfWeek();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1389601281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property1 = dateTime0.year();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withSecondOfMinute(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.minusYears(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      DateTime dateTime3 = dateTime2.withFieldAdded(durationFieldType0, 0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime0);
      assertSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime1);
      assertSame(dateTime3, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withSecondOfMinute(0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.minusYears(0);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTime1.withDayOfWeek(237);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 237 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 1;
      int int1 = (-2147483645);
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("Fo8Ug,ZW0Sy\"N");
      assertNull(dateTimeZone0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(1, 1, 1, (-2147483645), 1, (-2147483645), (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483645 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(118);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.118", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.118", dateTimeZone0.getID());
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(118, 118, 295, 295, 295, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 295 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusWeeks(114);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1323462081320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime1.weekyear();
      assertNotNull(dateTime_Property1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1323462081320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime_Property1.equals((Object)dateTime_Property0));
      
      DateTime.Property dateTime_Property2 = dateTime0.era();
      assertNotNull(dateTime_Property2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property2, dateTime_Property1);
      assertNotSame(dateTime_Property2, dateTime_Property0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property1));
      assertFalse(dateTime_Property2.equals((Object)dateTime_Property0));
      
      DateTime dateTime2 = dateTime0.withEra(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-125719011518680L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTimeISO();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTime dateTime1 = dateTime0.withZone(uTCDateTimeZone0);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      Date date0 = mutableDateTime0.toDate();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(date0);
      assertSame(dateTime0, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      int int0 = Calendar.ERA;
      assertEquals(0, int0);
      
      DateTime dateTime2 = dateTime1.minusSeconds(0);
      assertNotNull(dateTime2);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      
      LocalTime localTime0 = dateTime2.toLocalTime();
      assertNotNull(localTime0);
      assertSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertSame(dateTime1, dateTime2);
      assertSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long long0 = 0L;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      MockNullZoneChronology mockNullZoneChronology1 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology1);
      assertEquals("", mockNullZoneChronology1.toString());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime0 = new DateTime(0L, (Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) mockNullZoneChronology1);
      assertNotNull(dateTime1);
      assertNotSame(mockNullZoneChronology1, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology1.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(mockNullZoneChronology1.equals((Object)mockNullZoneChronology0));
      
      // Undeclared exception!
      try { 
        dateTime0.withMinuteOfHour((-2147483647));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minuteOfHour field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long long0 = (-15L);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VIDU6c'rh+zb");
      assertFalse(boolean0);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = new DateTime((-15L), chronology0);
      assertNotNull(dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals((-15L), dateTime0.getMillis());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) null);
      assertNotNull(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals((-15L), dateTime0.getMillis());
      assertEquals((-15L), dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = null;
      try {
        dateTime2 = new DateTime((-2147483647), (-2147483647), (-2147483647), (-2147483647), (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483647 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Interval interval0 = new Interval(23L, 23L, dateTimeZone0);
      assertNotNull(interval0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, interval0.getStartMillis());
      
      DateTime dateTime0 = interval0.getEnd();
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, dateTime0.getMillis());
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime1 = dateTime0.withDate(localDate0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000023L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.withMillis(23L);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(23L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime dateTime3 = dateTime2.withEarlierOffsetAtOverlap();
      assertNotNull(dateTime3);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(23L, dateTime2.getMillis());
      assertEquals(23L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime1));
      
      DateTime dateTime4 = dateTime0.plus(23L);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(46L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime3.withFields(localDate0);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime3);
      assertSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime5);
      assertSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(23L, interval0.getEndMillis());
      assertEquals(23L, interval0.getStartMillis());
      assertEquals(23L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(23L, dateTime2.getMillis());
      assertEquals(23L, dateTime3.getMillis());
      assertEquals(1392336000023L, dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertTrue(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime3));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      LocalTime localTime0 = new LocalTime((-26125299517538L), (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertNotNull(dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusSeconds(2889);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.plusWeeks(0);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      int int0 = dateTime2.getSecondOfMinute();
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertEquals(31, int0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime2.withFields(localTime0);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime2);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392409282462L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertTrue(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      int int1 = dateTime0.getHourOfDay();
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertEquals(20, int1);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(int1 == int0);
      
      DateTime dateTime4 = dateTime1.withZone(uTCDateTimeZone0);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertSame(dateTime4, dateTime1);
      assertSame(dateTime4, dateTime2);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime4.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTime dateTime5 = dateTime2.minusWeeks(65533);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      
      int int2 = dateTime5.getMillisOfDay();
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertEquals(76171462, int2);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      DateTime dateTime6 = dateTime5.minusHours(0);
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertSame(dateTime5, dateTime6);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime0);
      assertSame(dateTime6, dateTime5);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertEquals((-38241946228538L), dateTime6.getMillis());
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime0));
      
      LocalDate localDate0 = dateTime5.toLocalDate();
      assertNotNull(localDate0);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertSame(dateTime5, dateTime6);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime3);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals((-38241946228538L), dateTime5.getMillis());
      assertEquals(3, localDate0.size());
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      
      DateTime dateTime7 = dateTime2.toDateTime();
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertSame(dateTime1, dateTime7);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime1);
      assertSame(dateTime7, dateTime1);
      assertSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime3);
      assertSame(dateTime7, dateTime2);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392412171462L, dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime3));
      
      DateTime dateTime8 = dateTime3.withEra(1);
      assertNotNull(dateTime8);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime1, dateTime4);
      assertNotSame(dateTime1, dateTime5);
      assertSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime8);
      assertNotSame(dateTime1, dateTime6);
      assertSame(dateTime1, dateTime7);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime8);
      assertSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertSame(dateTime2, dateTime7);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime6);
      assertSame(dateTime2, dateTime1);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime7);
      assertSame(dateTime3, dateTime8);
      assertNotSame(dateTime3, dateTime5);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime3, dateTime6);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime7);
      assertSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime6);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(1392409282462L, dateTime0.getMillis());
      assertEquals(1392412171462L, dateTime1.getMillis());
      assertEquals(1392412171462L, dateTime2.getMillis());
      assertEquals(1392409282462L, dateTime3.getMillis());
      assertEquals(1392409282462L, dateTime8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertTrue(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime6));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime7));
      assertFalse(dateTime3.equals((Object)dateTime5));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime6));
      assertTrue(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertTrue(dateTime8.equals((Object)dateTime0));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime7));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime6));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = (-608);
      MockZone mockZone0 = new MockZone((-1968L), 17, (-608));
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusMonths((-608));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2991241281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int1 = dateTime0.getSecondOfDay();
      assertNotSame(dateTime0, dateTime1);
      assertEquals(72673, int1);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        dateTime0.withYearOfCentury((-608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -608 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusMinutes((-2589));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Duration duration0 = new Duration((long) (-2589));
      assertNotNull(duration0);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime1, (PeriodType) null);
      assertNotNull(period0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Days days0 = seconds0.toStandardDays();
      assertNotNull(days0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Seconds seconds1 = seconds0.negated();
      assertNotNull(seconds1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, seconds1.size());
      assertEquals(2, seconds1.getSeconds());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(seconds1.equals((Object)seconds0));
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(seconds0, seconds1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(seconds0.equals((Object)seconds1));
      
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, (-2589));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(seconds0, seconds1);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1168875021320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      Period period1 = duration0.toPeriod();
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertTrue(period1.equals((Object)period0));
      
      DateTime dateTime3 = dateTime1.withYear((-2589));
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-143864152178680L), dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      
      DateTime dateTime4 = dateTime3.plusDays((-2589));
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-143864152178680L), dateTime3.getMillis());
      assertEquals((-144087841778680L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      
      int int0 = dateTime4.getMinuteOfDay();
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertNotSame(dateTime3, dateTime4);
      assertNotSame(dateTime4, dateTime3);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime2);
      assertEquals(930, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-143864152178680L), dateTime3.getMillis());
      assertEquals((-144087841778680L), dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertFalse(dateTime3.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime4));
      assertFalse(dateTime4.equals((Object)dateTime3));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime2));
      
      DateTime dateTime5 = dateTime2.withYearOfEra(930);
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(period0, period1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime5);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1168875021320L, dateTime2.getMillis());
      assertEquals((-32817947378680L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertTrue(period0.equals((Object)period1));
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DateTime dateTime6 = dateTime2.toDateTime();
      assertNotNull(dateTime6);
      assertNotSame(dateTime6, dateTime1);
      assertSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime0);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime5);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(period0, period1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(dateTime2, dateTime4);
      assertNotSame(dateTime2, dateTime3);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime5);
      assertSame(dateTime2, dateTime6);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1168875021320L, dateTime6.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-2589L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1168875021320L, dateTime2.getMillis());
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime0));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime5));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      assertTrue(period0.equals((Object)period1));
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(dateTime2.equals((Object)dateTime4));
      assertFalse(dateTime2.equals((Object)dateTime3));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime5));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime7 = dateTime1.plusDays((-2589));
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime3);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1168875021320L, dateTime7.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime3));
      assertTrue(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      
      DateTime.Property dateTime_Property0 = dateTime1.yearOfCentury();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime7);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime6);
      assertNotSame(dateTime1, dateTime5);
      assertNotSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392564621320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime7));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime6));
      assertFalse(dateTime1.equals((Object)dateTime5));
      assertFalse(dateTime1.equals((Object)dateTime3));
      assertFalse(dateTime1.equals((Object)dateTime4));
      
      int int1 = (-5358);
      // Undeclared exception!
      try { 
        dateTime1.withMillisOfSecond((-5358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5358 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      int int0 = dateTime0.getHourOfDay();
      assertSame(dateTime0, dateTime1);
      assertEquals(20, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Duration duration0 = Duration.standardMinutes(20);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1200000L, duration0.getMillis());
      assertEquals(20L, duration0.getStandardMinutes());
      assertEquals(1200L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      
      DateTime dateTime2 = dateTime1.withDurationAdded((ReadableDuration) duration0, 178958986);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1200000L, duration0.getMillis());
      assertEquals(20L, duration0.getStandardMinutes());
      assertEquals(1200L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(216143192481320L, dateTime2.getMillis());
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      // Undeclared exception!
      try { 
        dateTime2.withWeekOfWeekyear((-4728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4728 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      
      int int0 = dateTime0.getHourOfDay();
      assertSame(dateTime0, dateTime1);
      assertEquals(20, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Duration duration0 = Duration.standardMinutes(20);
      assertNotNull(duration0);
      assertEquals(1200L, duration0.getStandardSeconds());
      assertEquals(20L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1200000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      
      int int1 = 178958969;
      // Undeclared exception!
      try { 
        dateTime1.withMillisOfSecond((-2147482758));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147482758 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = dateTime0.compareTo(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime0.minusMinutes(0);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      long long0 = uTCDateTimeZone0.adjustOffset(668L, false);
      assertEquals(668L, long0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime3 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime3);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertNotSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertTrue(dateTime3.equals((Object)dateTime2));
      
      // Undeclared exception!
      try { 
        dateTime3.withDayOfMonth(2358);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2358 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      
      DateTime dateTime0 = DateTime.now(chronology0);
      assertNotNull(dateTime0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = DateTime.now();
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      int int0 = dateTime0.compareTo(dateTime1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(0, int0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      assertNotNull(dateTime_Property0);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime.Property dateTime_Property1 = dateTime0.minuteOfDay();
      assertNotNull(dateTime_Property1);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime_Property1, dateTime_Property0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      long long0 = uTCDateTimeZone0.adjustOffset(668L, false);
      assertEquals(668L, long0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      DateTime dateTime2 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime2);
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("", chronology0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      // Undeclared exception!
      try { 
        dateTime2.withDayOfMonth(2358);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2358 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period0 = Period.minutes(1452);
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(1452, int0);
      
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) period0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1989L), (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusHours(1452);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      DateTime dateTime2 = dateTime1.withTime(localTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1392465598011L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      DateTime dateTime3 = dateTime1.minus((ReadableDuration) null);
      assertNotNull(dateTime3);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime3, dateTime0);
      assertSame(dateTime3, dateTime1);
      assertNotSame(dateTime3, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(1392496401320L, dateTime3.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime3.equals((Object)dateTime0));
      assertFalse(dateTime3.equals((Object)dateTime2));
      
      DateTime dateTime4 = dateTime1.plusMonths(918);
      assertNotNull(dateTime4);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertSame(dateTime1, dateTime3);
      assertNotSame(dateTime1, dateTime4);
      assertNotSame(dateTime4, dateTime2);
      assertNotSame(dateTime4, dateTime1);
      assertNotSame(dateTime4, dateTime0);
      assertNotSame(dateTime4, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392496401320L, dateTime1.getMillis());
      assertEquals(3806512401320L, dateTime4.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime2));
      assertFalse(dateTime4.equals((Object)dateTime1));
      assertFalse(dateTime4.equals((Object)dateTime0));
      assertFalse(dateTime4.equals((Object)dateTime3));
      
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      DateTime dateTime5 = dateTime0.plusMonths((-3670));
      assertNotNull(dateTime5);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-8258902718680L), dateTime5.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      
      DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
      assertNotNull(dateTime6);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime5, dateTime4);
      assertSame(dateTime5, dateTime6);
      assertNotSame(dateTime5, dateTime1);
      assertNotSame(dateTime5, dateTime3);
      assertNotSame(dateTime5, dateTime0);
      assertNotSame(dateTime5, dateTime2);
      assertNotSame(dateTime6, dateTime1);
      assertNotSame(dateTime6, dateTime3);
      assertNotSame(dateTime6, dateTime2);
      assertNotSame(dateTime6, dateTime4);
      assertNotSame(dateTime6, dateTime0);
      assertSame(dateTime6, dateTime5);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-8258902718680L), dateTime5.getMillis());
      assertEquals((-8258902718680L), dateTime6.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime4));
      assertFalse(dateTime5.equals((Object)dateTime1));
      assertFalse(dateTime5.equals((Object)dateTime3));
      assertFalse(dateTime5.equals((Object)dateTime0));
      assertFalse(dateTime5.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime1));
      assertFalse(dateTime6.equals((Object)dateTime3));
      assertFalse(dateTime6.equals((Object)dateTime2));
      assertFalse(dateTime6.equals((Object)dateTime4));
      assertFalse(dateTime6.equals((Object)dateTime0));
      
      DateTime dateTime7 = dateTime0.plusMinutes(1);
      assertNotNull(dateTime7);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime7, dateTime2);
      assertNotSame(dateTime7, dateTime5);
      assertNotSame(dateTime7, dateTime0);
      assertNotSame(dateTime7, dateTime6);
      assertNotSame(dateTime7, dateTime4);
      assertNotSame(dateTime7, dateTime1);
      assertNotSame(dateTime7, dateTime3);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409341320L, dateTime7.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime2));
      assertFalse(dateTime7.equals((Object)dateTime5));
      assertFalse(dateTime7.equals((Object)dateTime0));
      assertFalse(dateTime7.equals((Object)dateTime6));
      assertFalse(dateTime7.equals((Object)dateTime4));
      assertFalse(dateTime7.equals((Object)dateTime1));
      assertFalse(dateTime7.equals((Object)dateTime3));
      
      DateTime dateTime8 = dateTime0.toDateTime();
      assertNotNull(dateTime8);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime8, dateTime6);
      assertSame(dateTime8, dateTime0);
      assertNotSame(dateTime8, dateTime2);
      assertNotSame(dateTime8, dateTime5);
      assertNotSame(dateTime8, dateTime3);
      assertNotSame(dateTime8, dateTime4);
      assertNotSame(dateTime8, dateTime1);
      assertNotSame(dateTime8, dateTime7);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, dateTime8.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime6));
      assertFalse(dateTime8.equals((Object)dateTime2));
      assertFalse(dateTime8.equals((Object)dateTime5));
      assertFalse(dateTime8.equals((Object)dateTime3));
      assertFalse(dateTime8.equals((Object)dateTime4));
      assertFalse(dateTime8.equals((Object)dateTime1));
      assertFalse(dateTime8.equals((Object)dateTime7));
      
      DateTime dateTime9 = dateTime0.withDate(2347, 1, 1);
      assertNotNull(dateTime9);
      assertNotSame(dateTime9, dateTime7);
      assertNotSame(dateTime9, dateTime4);
      assertNotSame(dateTime9, dateTime6);
      assertNotSame(dateTime9, dateTime5);
      assertNotSame(dateTime9, dateTime2);
      assertNotSame(dateTime9, dateTime3);
      assertNotSame(dateTime9, dateTime8);
      assertNotSame(dateTime9, dateTime1);
      assertNotSame(dateTime9, dateTime0);
      assertNotSame(dateTime0, dateTime7);
      assertNotSame(dateTime0, dateTime4);
      assertSame(dateTime0, dateTime8);
      assertNotSame(dateTime0, dateTime5);
      assertNotSame(dateTime0, dateTime6);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime9);
      assertNotSame(dateTime0, dateTime3);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(11897007681320L, dateTime9.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime9.equals((Object)dateTime7));
      assertFalse(dateTime9.equals((Object)dateTime4));
      assertFalse(dateTime9.equals((Object)dateTime6));
      assertFalse(dateTime9.equals((Object)dateTime5));
      assertFalse(dateTime9.equals((Object)dateTime2));
      assertFalse(dateTime9.equals((Object)dateTime3));
      assertFalse(dateTime9.equals((Object)dateTime8));
      assertFalse(dateTime9.equals((Object)dateTime1));
      assertFalse(dateTime9.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime7));
      assertFalse(dateTime0.equals((Object)dateTime4));
      assertFalse(dateTime0.equals((Object)dateTime5));
      assertFalse(dateTime0.equals((Object)dateTime6));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      // Undeclared exception!
      try { 
        dateTime9.withDayOfYear((-3670));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3670 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusHours(772);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1389630081320L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime.Property dateTime_Property0 = dateTime1.weekOfWeekyear();
      assertNotNull(dateTime_Property0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1389630081320L, dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.minusDays(772);
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1389630081320L, dateTime1.getMillis());
      assertEquals(1322929281320L, dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(772, 772);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 772 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      DateTime.Property dateTime_Property1 = dateTime0.millisOfDay();
      Locale locale0 = new Locale("org.joda.time.chrono.GJLocaleSymbols", "org.joda.time.chrono.GJLocaleSymbols");
      locale0.getUnicodeLocaleAttributes();
      locale0.getDisplayScript();
      DateTime dateTime1 = dateTime_Property1.getDateTime();
      DurationFieldType.days();
      dateTime0.weekOfWeekyear();
      DateTime dateTime2 = dateTime0.minusMillis(1461);
      dateTime2.centuryOfEra();
      DateTime dateTime3 = dateTime0.minusWeeks(1440);
      assertEquals(521497281320L, dateTime3.getMillis());
      
      DateTime dateTime4 = dateTime_Property0.withMaximumValue();
      assertEquals(1420057281320L, dateTime4.getMillis());
      
      DateTime dateTime5 = dateTime1.plusMillis(1440);
      assertEquals(1392409282760L, dateTime5.getMillis());
      
      DateTime dateTime6 = dateTime2.withHourOfDay(1);
      assertEquals(1392340879859L, dateTime6.getMillis());
      
      DateTime dateTime7 = dateTime2.withDurationAdded(2592000000L, 0);
      assertEquals(1392409279859L, dateTime7.getMillis());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      Duration duration0 = new Duration((-152L), (-152L));
      DateTime dateTime3 = dateTime2.withDurationAdded((ReadableDuration) duration0, (-702));
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      DateTime dateTime4 = dateTime_Property0.withMinimumValue();
      DateTimeZone.getProvider();
      DateTime dateTime5 = dateTime0.plusMonths(0);
      dateTime5.withDurationAdded((ReadableDuration) duration0, 0);
      dateTime3.era();
      dateTime1.secondOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTime3.withField(dateTimeFieldType0, 0);
      dateTime4.minusMonths((-702));
      // Undeclared exception!
      try { 
        dateTime0.withWeekyear((-2147483645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483645 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      int int0 = 852;
      DateTime dateTime1 = dateTime0.minusSeconds(852);
      DateTime dateTime2 = dateTime1.plus((long) 852);
      int int1 = 1142;
      DateTime dateTime3 = dateTime2.minusMonths(1142);
      DateTime dateTime4 = dateTime2.withEarlierOffsetAtOverlap();
      dateTime4.minusMinutes((-1970));
      dateTime3.isEqualNow();
      // Undeclared exception!
      try { 
        dateTime4.withField((DateTimeFieldType) null, (-2791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusSeconds(852);
      DateTime dateTime2 = dateTime1.plus((long) 852);
      DateTime dateTime3 = dateTime2.minusMonths(1142);
      DateTime dateTime4 = dateTime2.withEarlierOffsetAtOverlap();
      DateTime dateTime5 = dateTime4.minusMinutes((-1970));
      dateTime3.isEqualNow();
      DateTime.Property dateTime_Property0 = dateTime3.dayOfMonth();
      dateTime_Property0.equals((Object) null);
      dateTime_Property0.withMinimumValue();
      DateTime dateTime6 = dateTime0.withYearOfEra(1142);
      dateTime6.withCenturyOfEra(1142);
      dateTime5.toDateTimeISO();
      DateTime dateTime7 = dateTime2.plusMinutes(1142);
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(1312);
      dateTime5.plus((ReadablePeriod) testBaseSingleFieldPeriod_Single0);
      // Undeclared exception!
      try { 
        dateTime7.withDate(852, 1142, (-1101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1142 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      MockZone mockZone0 = new MockZone((-9L), 0, 0);
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      DateTime dateTime1 = testAbstractPartial_MockPartial0.toDateTime(dateTime0);
      DateTime dateTime2 = dateTime0.minusMonths(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      testAbstractPartial_MockPartial0.indexOf(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      dateTime0.property(dateTimeFieldType1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      DateTime dateTime3 = dateTime1.minusWeeks(0);
      DateTime dateTime4 = dateTime0.withMillisOfDay(0);
      dateTime4.isEqual(dateTime2);
      testAbstractPartial_MockPartial0.isSupported(dateTimeFieldType1);
      dateTime4.withFields(testAbstractPartial_MockPartial0);
      dateTime0.plusMinutes(0);
      dateTime_Property0.roundCeilingCopy();
      dateTime3.monthOfYear();
      DateTimeZone.getProvider();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-5));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTimeZone.getNameProvider();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      dateTimeFieldType0.isSupported(chronology0);
      dateTime0.isSupported(dateTimeFieldType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      DateTime dateTime2 = dateTime1.plusYears(0);
      DateTime.Property dateTime_Property0 = dateTime1.secondOfMinute();
      dateTime0.minusMillis((-5));
      DateTime dateTime3 = dateTime2.plusHours(0);
      dateTime_Property0.toString();
      dateTime3.minusDays(0);
      dateTime_Property0.roundHalfEvenCopy();
      dateTime0.plusDays(0);
      // Undeclared exception!
      try { 
        DateTime.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "E";
      Instant instant0 = new Instant();
      Duration duration0 = new Duration(0L, 1618L);
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      Instant instant2 = instant1.toInstant();
      duration0.toIntervalFrom(instant0);
      DateTime dateTime0 = instant2.toDateTime();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) null);
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) mutablePeriod0);
      DateTime.Property dateTime_Property0 = dateTime1.era();
      // Undeclared exception!
      try { 
        dateTime_Property0.addToCopy(1618L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(929L);
      LocalTime localTime1 = localTime0.minusSeconds((-900));
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      localTime0.getFields();
      DateTime dateTime0 = localTime1.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.minusMillis(475);
      DateTime dateTime2 = dateTime1.minusYears((-900));
      DateTime dateTime3 = dateTime2.plusDays(927);
      dateTime3.isBefore(929L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)DateTimeZone.UTC;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateTime3.equals(mockThaiBuddhistDate0);
      uTCDateTimeZone1.convertLocalToUTC((long) (-900), false, (long) 927);
      LocalTime localTime2 = LocalTime.now();
      DateTime dateTime4 = dateTime1.withFields(localTime2);
      DateTime dateTime5 = dateTime4.plusHours((-900));
      DateTime.Property dateTime_Property0 = dateTime0.millisOfSecond();
      Interval interval0 = dateTime_Property0.toInterval();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime6 = dateTime5.plus((ReadableDuration) duration0);
      dateTime6.toLocalTime();
      dateTime0.plusWeeks(475);
      uTCDateTimeZone0.getMillisKeepLocal(uTCDateTimeZone1, (-1691L));
      dateTimeFieldType0.getDurationType();
      DateTimeZone.setProvider((Provider) null);
      dateTime2.millisOfSecond();
      dateTime3.property(dateTimeFieldType0);
      dateTime6.get(dateTimeFieldType0);
      dateTime5.withCenturyOfEra(112);
      // Undeclared exception!
      try { 
        dateTime5.withMillisOfSecond(1456);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1456 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DateTime dateTime0 = new DateTime(27L);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      DateTime dateTime2 = dateTime1.plusMillis(740);
      assertEquals(740L, dateTime2.getMillis());
      
      DateTime.Property dateTime_Property0 = dateTime0.year();
      DateTime dateTime3 = dateTime_Property0.withMaximumValue();
      assertEquals(9223371985593600027L, dateTime3.getMillis());
      
      DateTime dateTime4 = dateTime_Property0.roundFloorCopy();
      assertEquals(0L, dateTime4.getMillis());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Instant instant0 = new Instant((-95L));
      Duration duration0 = new Duration(2210L, 1104L);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, (-20));
      Instant instant2 = instant1.minus(1345L);
      Instant instant3 = instant2.minus((ReadableDuration) duration0);
      DateTime dateTime0 = instant3.toDateTime();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      dateTime0.hourOfDay();
      dateTime0.minus(1345L);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("O{M~o]s.-");
      LocalDate localDate0 = new LocalDate((long) (-20), (DateTimeZone) null);
      localDate0.toDateTime(instant2);
      DateTime dateTime1 = dateTime0.withFields(localDateTime0);
      DateTime dateTime2 = dateTime0.plusYears((-20));
      DateTime dateTime3 = dateTime2.plusMinutes((-3555));
      dateTime1.yearOfEra();
      Integer integer0 = new Integer((-20));
      dateTime3.toDateTime((DateTimeZone) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType3;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType4;
      int[] intArray0 = new int[4];
      intArray0[0] = (-20);
      intArray0[1] = (-3555);
      intArray0[2] = (-20);
      intArray0[3] = (-20);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
  }
}
