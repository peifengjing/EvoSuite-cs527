/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:56:58 GMT 2017
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.convert.MockBadChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MockBadChronology_ESTest extends MockBadChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      String string0 = mockBadChronology0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      Chronology chronology0 = mockBadChronology0.withUTC();
      assertNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      Chronology chronology0 = mockBadChronology0.withZone((DateTimeZone) null);
      assertNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockBadChronology mockBadChronology0 = new MockBadChronology();
      DateTimeZone dateTimeZone0 = mockBadChronology0.getZone();
      assertNull(dateTimeZone0);
  }
}
