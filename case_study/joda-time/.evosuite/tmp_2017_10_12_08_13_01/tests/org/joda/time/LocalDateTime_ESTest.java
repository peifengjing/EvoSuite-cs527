/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 16:09:05 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestDuration_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.YearMonth;
import org.joda.time.convert.ConverterManager;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1392337281320L);
      localDateTime0.minusHours(1982292598);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1982292598, (-2147480663), 1982292598, (-2147481540), 1982292598, 1000, 1000, 1982292598);
      // Undeclared exception!
      try { 
        localDateTime0.plus((ReadablePeriod) mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1982294612 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      System.setCurrentTimeMillis(1032L);
      LocalDateTime localDateTime0 = new LocalDateTime(4, 4, 4, 4, 4);
      localDateTime0.withWeekOfWeekyear(4);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      Period period0 = new Period((long) 4, periodType2);
      periodFormatter0.printTo((StringBuffer) null, (ReadablePeriod) period0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("Jo&}Q*", periodFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Jo&}Q*\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getYearOfCentury();
      MockDate.UTC((-1577), 1819, (-1441), 1819, 0, 0);
      LocalDateTime localDateTime1 = localDateTime0.withYear(0);
      localDateTime1.plusMinutes(4283);
      localDateTime1.getMonthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      LocalDateTime localDateTime2 = localDateTime1.withFieldAdded(durationFieldType0, 1819);
      localDateTime1.equals(localDateTime1);
      // Undeclared exception!
      try { 
        localDateTime2.withMillisOfSecond(1819);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1819 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      localDateTime0.toDateTime((DateTimeZone) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      Chronology chronology0 = localDateTime_Property0.getChronology();
      LocalDate localDate0 = new LocalDate(chronology0);
      LocalDateTime localDateTime2 = localDateTime0.withFields(localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      localDateTime2.getField(0, chronology0);
      localDateTime1.minusMonths(121);
      localDateTime2.size();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1L));
      Partial partial0 = new Partial(yearMonth0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      Duration duration0 = Duration.standardSeconds((-1742L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      seconds1.getPeriodType();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds1);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfWeek(1);
      localDateTime2.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      localDateTime0.property(dateTimeFieldType0);
      localDateTime1.plusMonths(0);
      localDateTime2.property(dateTimeFieldType0);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded(durationFieldType0, (-2147483629));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -214748362900
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded(durationFieldType0, 2147467129);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147469143 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      Duration duration0 = Duration.standardSeconds((-1742L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds1);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      localDateTime1.isSupported(durationFieldType1);
      LocalDateTime localDateTime2 = localDateTime1.withWeekyear(27);
      // Undeclared exception!
      try { 
        localDateTime2.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-1L));
      LocalDateTime localDateTime2 = localDateTime1.minusMonths((-2147479170));
      localDateTime2.toLocalTime();
      localDateTime0.withFields((ReadablePartial) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Period period0 = null;
      try {
        period0 = new Period(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = LocalDateTime.parse("", dateTimeFormatter0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime2 = localDateTime1.plusYears(4134);
      Duration duration0 = Duration.standardSeconds(4134);
      Duration duration1 = Duration.millis(4134);
      Duration duration2 = duration0.plus((ReadableDuration) duration1);
      localDateTime2.minus((ReadableDuration) duration2);
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = null;
      try {
        testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("year");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      localDateTime_Property0.compareTo((ReadablePartial) localDateTime0);
      localDateTime_Property0.get();
      localDateTime_Property0.getMillis();
      localDateTime0.getChronology();
      DateTime dateTime0 = localDateTime0.toDateTime();
      dateTime0.getYearOfCentury();
      localDateTime0.toDateTime(dateTime0);
      localDateTime_Property0.withMinimumValue();
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-1728));
      localDateTime0.toString((String) null);
      // Undeclared exception!
      try { 
        localDateTime1.toString("Field must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(2838);
      LocalDateTime localDateTime2 = localDateTime1.minusYears(2838);
      localDateTime2.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalDateTime.parse("-0824-02-14T20:21:18.482");
      localDateTime2.plusMillis(2147467379);
      // Undeclared exception!
      try { 
        localDateTime1.minusYears(2147467379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147465365 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1359L));
      localDateTime0.minusMinutes((-4613));
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(0);
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfDay(3);
      localDateTime1.getValue(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      LocalDateTime localDateTime3 = localDateTime2.withMonthOfYear(4);
      localDateTime3.minusWeeks(0);
      LocalDateTime localDateTime4 = localDateTime2.plusYears(1407);
      LocalDateTime localDateTime5 = localDateTime4.minusMinutes(0);
      localDateTime5.withMinuteOfHour(0);
      localDateTime_Property0.addWrapFieldToCopy(0);
      LocalDateTime localDateTime6 = localDateTime4.plusYears(3);
      LocalDateTime localDateTime7 = localDateTime6.minusHours(0);
      localDateTime7.getEra();
      localDateTime0.minusSeconds(3);
      localDateTime1.era();
      localDateTime1.getHourOfDay();
      // Undeclared exception!
      try { 
        localDateTime4.withTime(0, 23, (-456), 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -456 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1339705281320L, (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-2772659400000L));
      localDateTime0.compareTo((ReadablePartial) localDateTime1);
      localDateTime0.getMillisOfSecond();
      localDateTime1.yearOfEra();
      // Undeclared exception!
      try { 
        localDateTime0.getField(1, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      dateTime0.withFields(localDateTime0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      localDateTime1.getYearOfCentury();
      localDateTime2.getYear();
      localDateTime0.getDayOfWeek();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      localDateTime0.isSupported(durationFieldType0);
      localDateTime2.monthOfYear();
      dateTime0.toGregorianCalendar();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.toDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      int int0 = Calendar.DAY_OF_YEAR;
      int int1 = Calendar.HOUR;
      localDateTime1.getEra();
      localDateTime2.dayOfYear();
      localDateTime1.getWeekyear();
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      localDateTime3.plusDays(0);
      localDateTime2.weekOfWeekyear();
      localDateTime1.getCenturyOfEra();
      localDateTime2.getYearOfEra();
      localDateTime1.millisOfDay();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 0, 3);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) mockZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(3);
      localDateTime0.era();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      mockZone0.getOffsetFromLocal(0L);
      DateTimeZone.setNameProvider(defaultNameProvider0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      mockZone0.convertUTCToLocal((-343L));
      LocalDateTime localDateTime2 = localDateTime0.minusMillis(0);
      localDateTime1.toString();
      LocalDateTime localDateTime3 = localDateTime1.withField(dateTimeFieldType0, 3);
      localDateTime3.withFields(localDateTime1);
      LocalDateTime.now((DateTimeZone) mockZone0);
      localDateTime3.withDayOfMonth(7);
      localDateTime2.getWeekOfWeekyear();
      localDateTime3.withMonthOfYear(7);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1359L));
      localDateTime0.minusMinutes((-4613));
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(0);
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfDay(3);
      localDateTime1.getValue(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      localDateTime2.withMonthOfYear(4);
      LocalDateTime localDateTime3 = localDateTime2.plusYears(1407);
      localDateTime3.isSupported((DurationFieldType) null);
      LocalDateTime localDateTime4 = localDateTime3.minusMinutes(0);
      localDateTime4.withMinuteOfHour(0);
      LocalDateTime localDateTime5 = localDateTime_Property0.addWrapFieldToCopy(4);
      LocalDateTime localDateTime6 = localDateTime3.plusYears(3);
      localDateTime6.minusHours(0);
      LocalDateTime localDateTime7 = localDateTime0.minusSeconds(3);
      localDateTime1.era();
      Period period0 = new Period((long) 1969);
      Period period1 = period0.minusHours(1000);
      Seconds seconds0 = period1.toStandardSeconds();
      localDateTime5.withPeriodAdded(seconds0, 1000);
      localDateTime7.withYear(116);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.toDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      int int0 = Calendar.DAY_OF_WEEK;
      localDateTime0.getDayOfWeek();
      localDateTime2.dayOfYear();
      DateTimeZone.getAvailableIDs();
      localDateTime1.getWeekyear();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      localDateTime2.weekOfWeekyear();
      localDateTime1.equals(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1359L));
      localDateTime0.minusMinutes((-4613));
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(0);
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfDay(3);
      localDateTime1.getValue(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      LocalDateTime localDateTime3 = localDateTime2.withMonthOfYear(4);
      localDateTime3.getHourOfDay();
      LocalDateTime localDateTime4 = localDateTime2.plusYears(1407);
      LocalDateTime localDateTime5 = localDateTime4.minusMinutes(0);
      localDateTime5.withMinuteOfHour(0);
      localDateTime_Property0.addWrapFieldToCopy(0);
      LocalDateTime localDateTime6 = localDateTime4.plusYears(3);
      localDateTime6.minusHours(0);
      localDateTime0.minusSeconds(3);
      localDateTime1.era();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      MockDate.UTC((-1577), 1819, 1819, 1819, 0, (-205));
      Period.months(1819);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      localDateTime_Property0.roundFloorCopy();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1359L));
      localDateTime0.minusMinutes((-4613));
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(0);
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfDay(3);
      localDateTime1.getValue(3);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      localDateTime2.withMonthOfYear(4);
      LocalDateTime localDateTime3 = localDateTime2.plusYears(1407);
      LocalDateTime localDateTime4 = localDateTime3.minusMinutes(0);
      LocalDateTime localDateTime5 = localDateTime4.withMinuteOfHour(0);
      localDateTime_Property0.addWrapFieldToCopy(0);
      LocalDateTime localDateTime6 = localDateTime3.plusYears(3);
      localDateTime6.minusHours(0);
      LocalDateTime localDateTime7 = localDateTime0.minusSeconds(3);
      localDateTime7.minusWeeks((-5503));
      localDateTime1.era();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      localDateTime5.withField(dateTimeFieldType0, 3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDateTime1.era();
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded((DurationFieldType) null, (-2353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.toDateTime();
      LocalDateTime localDateTime1 = new LocalDateTime((long) 0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      int int0 = Calendar.DAY_OF_WEEK;
      localDateTime0.getDayOfWeek();
      localDateTime2.dayOfYear();
      localDateTime1.getWeekyear();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      localDateTime2.weekOfWeekyear();
      localDateTime0.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.toDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      int int0 = Calendar.DAY_OF_WEEK;
      localDateTime0.getDayOfWeek();
      localDateTime2.dayOfYear();
      localDateTime1.getWeekyear();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      localDateTime2.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localDateTime2.compareTo((ReadablePartial) testBasePartial_MockPartial0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-61630502412345L));
      localDateTime0.millisOfSecond();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(2146763257);
      // Undeclared exception!
      try { 
        localDateTime1.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("(y?SKe2ckato HXxt", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3618L);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      ConverterManager.getInstance();
      localDateTime1.isEqual(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded((ReadableDuration) null, 0);
      localDateTime2.plusHours((-2672));
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      localDateTime_Property0.getAsShortText();
      LocalDateTime localDateTime3 = localDateTime1.withDurationAdded((ReadableDuration) null, (-3517));
      Locale locale0 = Locale.PRC;
      localDateTime1.withMillisOfDay(0);
      localDateTime3.toString("618", locale0);
      LocalDateTime localDateTime4 = localDateTime3.plus((ReadableDuration) null);
      localDateTime4.minusSeconds((-132));
      LocalDateTime localDateTime5 = localDateTime_Property0.roundHalfFloorCopy();
      LocalDateTime localDateTime6 = localDateTime_Property0.addToCopy(2980L);
      localDateTime0.withFields(localDateTime5);
      localDateTime3.getYear();
      localDateTime3.compareTo((ReadablePartial) localDateTime5);
      localDateTime_Property0.setCopy("618", locale0);
      localDateTime6.getYearOfCentury();
      localDateTime5.getMillisOfDay();
      // Undeclared exception!
      try { 
        localDateTime1.withTime(0, (-10), 0, (-2672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -10 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1339705281320L, (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-2772659400000L));
      localDateTime0.getMillisOfSecond();
      localDateTime1.yearOfEra();
      localDateTime1.getDayOfYear();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType.SECOND_INDEX = 2147482852;
      MutablePeriod mutablePeriod0 = new MutablePeriod(1339705281320L, 51, periodType1, (Chronology) null);
      localDateTime1.getLocalMillis();
      // Undeclared exception!
      try { 
        localDateTime0.withYear(2147467379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147467379 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-4));
      localDateTime0.getMillisOfSecond();
      localDateTime1.minusHours((-2147483646));
      // Undeclared exception!
      try { 
        localDateTime1.withYear((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483646 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.toDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear((-9));
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      int int0 = Calendar.DAY_OF_WEEK;
      localDateTime0.getDayOfWeek();
      localDateTime2.dayOfYear();
      localDateTime1.getWeekyear();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      localDateTime2.weekOfWeekyear();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      localDateTime_Property0.get();
      localDateTime_Property0.getMillis();
      localDateTime0.getChronology();
      DateTime dateTime0 = localDateTime0.toDateTime();
      localDateTime0.toDateTime(dateTime0);
      localDateTime_Property0.withMinimumValue();
      localDateTime0.minusYears((-1728));
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      localDateTime1.withMillisOfDay(925);
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy((-1728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1728 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1359L));
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfCentury((-4596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4596 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-1748));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      localDateTime1.toDate(timeZone0);
      localDateTime1.withYear((-1748));
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      LocalDateTime localDateTime2 = localDateTime1.plusDays((-1748));
      // Undeclared exception!
      try { 
        localDateTime2.withCenturyOfEra((-1748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1748 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockCalendar.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMonths(762);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(762);
      // Undeclared exception!
      try { 
        localDateTime1.minusYears((-2147483645));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2776 + 2147483645
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(57120L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(762);
      // Undeclared exception!
      try { 
        localDateTime1.withMinuteOfHour(762);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 762 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 13, (-3517), (-3016), 2162);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.minusHours((-2111692252));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(13);
      localDateTime1.getWeekyear();
      localDateTime1.toDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      localDateTime1.getValues();
      localDateTime1.isSupported(durationFieldType0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.year();
      LocalDateTime localDateTime2 = localDateTime0.plusSeconds(307);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      localDateTime_Property0.getAsText(locale0);
      localDateTime_Property0.roundHalfEvenCopy();
      // Undeclared exception!
      try { 
        localDateTime2.withWeekyear((-2111692252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2111692252 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      localDateTime0.toDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      localDateTime1.toString((String) null, (Locale) null);
      int int0 = Calendar.DAY_OF_WEEK;
      localDateTime0.getDayOfWeek();
      localDateTime2.dayOfYear();
      localDateTime1.getWeekyear();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      localDateTime1.yearOfCentury();
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      localDateTime2.weekOfWeekyear();
      localDateTime1.getCenturyOfEra();
      localDateTime2.getYearOfEra();
      localDateTime1.millisOfDay();
      localDateTime3.minuteOfHour();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1L));
      Partial partial0 = new Partial(yearMonth0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      Duration duration0 = Duration.standardSeconds((-1742L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      seconds1.getPeriodType();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds1);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfWeek(1);
      localDateTime2.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime3 = localDateTime1.plusMonths(0);
      localDateTime2.property(dateTimeFieldType0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      localDateTime0.withFieldAdded(durationFieldType0, 0);
      localDateTime3.getChronology();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      localDateTime_Property0.compareTo((ReadablePartial) localDateTime0);
      int int0 = Calendar.FEBRUARY;
      Integer integer0 = new Integer(0);
      localDateTime0.getChronology();
      DateTime dateTime0 = new DateTime(0, 1, 1, 0, 0);
      localDateTime0.toDateTime(dateTime0);
      localDateTime0.withTime(0, 1, 0, 1);
      localDateTime0.minusYears((-1728));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusYears(22);
      localDateTime0.getMillisOfSecond();
      localDateTime1.size();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis((-2146680248));
      localDateTime1.withFields(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockZone mockZone0 = new MockZone(3952, 3952, 3952);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, mockZone0);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(12);
      LocalDateTime localDateTime2 = localDateTime1.plusHours((-1546));
      LocalDateTime localDateTime3 = localDateTime2.minusMonths(3952);
      LocalDateTime localDateTime4 = localDateTime3.withMinuteOfHour(12);
      LocalDateTime localDateTime5 = localDateTime4.plusSeconds((-1546));
      // Undeclared exception!
      try { 
        localDateTime5.withWeekOfWeekyear((-1546));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1546 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[0];
      YearMonth yearMonth0 = new YearMonth();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      DateTime dateTime2 = dateTime1.withWeekOfWeekyear(1);
      Locale locale0 = Locale.forLanguageTag("G):c3G9e|Ws>!KS,");
      Calendar calendar0 = dateTime2.toCalendar(locale0);
      LocalDateTime.fromCalendarFields(calendar0);
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = null;
      try {
        testMutableDateTime_Basics0 = new TestMutableDateTime_Basics((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      localDateTime1.getYearOfCentury();
      localDateTime0.getDayOfWeek();
      localDateTime2.dayOfYear();
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDateTime localDateTime3 = LocalDateTime.now(chronology0);
      // Undeclared exception!
      try { 
        localDateTime3.plusYears((-2147483597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481583 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      localDateTime1.getYearOfCentury();
      localDateTime0.getDayOfWeek();
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      testBasePartial_MockPartial0.getChronology();
      localDateTime1.withHourOfDay(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3618L);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-48));
      ConverterManager.getInstance();
      localDateTime1.isEqual(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded((ReadableDuration) null, (-48));
      localDateTime2.plusHours((-2672));
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      localDateTime_Property0.getAsShortText();
      LocalDateTime localDateTime3 = localDateTime1.withDurationAdded((ReadableDuration) null, (-3517));
      Locale locale0 = Locale.PRC;
      localDateTime1.withMillisOfDay(0);
      localDateTime3.toString("618", locale0);
      LocalDateTime localDateTime4 = localDateTime3.plus((ReadableDuration) null);
      LocalDateTime localDateTime5 = localDateTime4.minusSeconds((-132));
      LocalDateTime.Property localDateTime_Property1 = localDateTime4.secondOfMinute();
      LocalDateTime localDateTime6 = localDateTime5.plusMillis((-2672));
      localDateTime_Property0.addToCopy(2980L);
      localDateTime0.withFields(localDateTime6);
      localDateTime3.getYear();
      localDateTime3.compareTo((ReadablePartial) localDateTime6);
      // Undeclared exception!
      try { 
        localDateTime_Property1.setCopy("618", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 618 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      localDateTime0.getEra();
      LocalDateTime localDateTime1 = LocalDateTime.now();
      localDateTime1.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-999L));
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes(495);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        localDateTime2.withFieldAdded(durationFieldType0, (-1929));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockZone mockZone0 = new MockZone(151L, (-1252), 3);
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) mockZone0);
      localDateTime0.size();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x}H38\"2XM<U+D{");
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ENGLISH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime.fromCalendarFields(calendar0);
      localDateTime0.withDate(1407, 3, 3);
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      localDateTime_Property0.compareTo((ReadablePartial) localDateTime0);
      localDateTime_Property0.get();
      localDateTime_Property0.getMillis();
      localDateTime0.getChronology();
      DateTime dateTime0 = localDateTime0.toDateTime();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime0.toDateTime(dateTime0);
      // Undeclared exception!
      try { 
        localDateTime0.withDate(649, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      localDateTime1.millisOfSecond();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.withTime(0, 0, 0, 1898);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1898 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.isWeekDateSupported();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      mockGregorianCalendar0.getTimeZone();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      // Undeclared exception!
      try { 
        localDateTime1.withMillisOfDay((-728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -728 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(280L);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(7678125);
      LocalDateTime localDateTime2 = localDateTime1.minusHours(7678125);
      LocalDateTime localDateTime3 = localDateTime2.plusMinutes(7678125);
      // Undeclared exception!
      try { 
        localDateTime3.toDate((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) null, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(280L);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(7678125);
      localDateTime1.plusMinutes(7678125);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate(735, (-1589), 735, (-773), 735, 0);
      mockDate0.clone();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.withYear((-773));
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.minuteOfHour();
      Locale locale0 = Locale.FRANCE;
      locale0.getScript();
      localDateTime_Property0.getMaximumShortTextLength(locale0);
      LocalDateTime localDateTime2 = localDateTime_Property0.withMaximumValue();
      localDateTime2.getMillisOfSecond();
      localDateTime1.toLocalDate();
      localDateTime0.toDate();
      // Undeclared exception!
      try { 
        localDateTime2.withYearOfEra((-773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -773 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      localDateTime0.toDateTime();
      localDateTime0.toDate();
      localDateTime0.getDayOfWeek();
      localDateTime0.dayOfYear();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      localDateTime0.weekOfWeekyear();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testAbstractPartial_MockPartial0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      localDateTime1.getYearOfCentury();
      localDateTime2.compareTo((ReadablePartial) localDateTime1);
      int int0 = Calendar.YEAR;
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      localDateTime0.isSupported(durationFieldType0);
      localDateTime2.monthOfYear();
      dateTime0.toGregorianCalendar();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3618L);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      ConverterManager.getInstance();
      localDateTime1.isEqual(localDateTime0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      localDateTime_Property0.getAsShortText();
      Locale locale0 = Locale.PRC;
      localDateTime1.withMillisOfDay(0);
      localDateTime_Property0.addToCopy(2980L);
      localDateTime0.withFields(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.plusWeeks(0);
      MockDate.UTC((-1577), 1819, 1819, 1819, 0, 1819);
      localDateTime0.minusMonths(4283);
      // Undeclared exception!
      try { 
        localDateTime0.withHourOfDay((-1577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1577 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1000, 967, 0, 887, 0, 1000, 1720, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 887 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      localDateTime0.getCenturyOfEra();
      LocalDateTime.now(chronology0);
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(5);
      localDateTime1.getYearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        localDateTime0.withField(dateTimeFieldType0, 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 26 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-2147471695));
      Period period0 = Period.days((-2147471695));
      // Undeclared exception!
      try { 
        localDateTime1.withPeriodAdded(period0, (-2147471695));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 4611634680826173025 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withEra(0);
      LocalDateTime localDateTime2 = localDateTime1.minusMonths((-460));
      localDateTime2.minusMinutes((-460));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(86399999L);
      // Undeclared exception!
      try { 
        localDateTime0.withMonthOfYear(598);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 598 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(7);
      localDateTime1.plusMonths(2002);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-15), 0, (-1003), (-1003), (-1003));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(1);
      LocalDateTime localDateTime2 = localDateTime1.minusDays(104);
      // Undeclared exception!
      try { 
        localDateTime2.withField((DateTimeFieldType) null, 104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfDay((-849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -849 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfSecond(1407);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1407 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.withCenturyOfEra((-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -13 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-1480), (-1026), 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.equals(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-1480));
      localDateTime1.getMinuteOfHour();
      localDateTime1.toLocalDate();
      localDateTime0.plusWeeks((-1377));
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1026), (-1377), (-803), 3);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.plusYears((-1373));
      localDateTime0.withPeriodAdded(period1, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.getField((-359), (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -359
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfWeek(2008);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2008 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.parse("", dateTimeFormatter1);
      // Undeclared exception!
      try { 
        localDateTime0.withSecondOfMinute(1309);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1309 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded((ReadablePeriod) null, 0);
      // Undeclared exception!
      try { 
        localDateTime1.withDate(0, 0, 1197);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testBasePartial_MockPartial0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testBasePartial_MockPartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusDays(2104);
      localDateTime0.getValue(0);
      localDateTime0.getCenturyOfEra();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      localDateTime_Property0.get();
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy((-1));
      localDateTime1.getDayOfMonth();
      // Undeclared exception!
      try { 
        localDateTime0.withEra((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period.seconds(792);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear(792);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 792 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      localDateTime0.minusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusWeeks(4);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-2824), (-2824), (-2824), (-2824), 7678125, 20, (-2824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2824 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayLanguage(locale1);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
      // Undeclared exception!
      try { 
        localDateTime1.withWeekOfWeekyear(999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 999 for weekOfWeekyear must be in the range [1,53]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.withSecondOfMinute(0);
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      localDateTime1.millisOfDay();
      localDateTime1.getSecondOfMinute();
      localDateTime1.getSecondOfMinute();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(object0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, (-1657), 0, 0, 0, 0, 14, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("!", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"!\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("8H$s{t{R{@:t,.xx&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8H$s{t{R{@:t,.xx&\" is malformed at \"H$s{t{R{@:t,.xx&\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      LocalDateTime localDateTime1 = localDateTime0.withYear(0);
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes((-1211));
      localDateTime2.getMinuteOfHour();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("ne*lIIUqu?45{mUO7<", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"ne*lIIUqu?45{mUO7<\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.secondOfMinute();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      LocalDateTime.Property localDateTime_Property1 = localDateTime0.dayOfWeek();
      localDateTime_Property1.addToCopy(1286);
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime(994L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(901);
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis(33L);
      LocalDateTime localDateTime3 = localDateTime2.minusHours(901);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDateTime localDateTime4 = localDateTime3.withField(dateTimeFieldType0, (-3069));
      LocalDateTime.Property localDateTime_Property0 = localDateTime4.dayOfMonth();
      localDateTime_Property0.getLocalDateTime();
      localDateTime0.withLocalMillis(994L);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-2147483622);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-2147483622), (-2147483622), (-2147483622), (-2147483622), (-2147483622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483622 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      Chronology chronology0 = localDateTime_Property0.getChronology();
      LocalDate localDate0 = new LocalDate(chronology0);
      LocalDateTime localDateTime2 = localDateTime0.withFields(localDate0);
      Period period0 = new Period(2145338309, 4978125, 2145338309, (-572));
      localDateTime2.plus((ReadablePeriod) period0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      localDateTime0.isSupported(dateTimeFieldType0);
      localDateTime1.minusMonths(121);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusYears(0);
      localDateTime1.getMillisOfDay();
      // Undeclared exception!
      try { 
        localDateTime0.getField(1000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1000
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-94L));
      int int0 = 4;
      LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek(4);
      localDateTime1.dayOfMonth();
      localDateTime0.weekyear();
      localDateTime0.withWeekOfWeekyear(4);
      LocalDateTime localDateTime2 = localDateTime0.withYearOfCentury(4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        localDateTime2.toString("iRUBQe6{)c|#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-94L));
      int int0 = 4;
      LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek(4);
      localDateTime1.dayOfMonth();
      localDateTime1.minusWeeks(4);
      localDateTime1.minusMonths(4);
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis(4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        localDateTime2.toString("iRUBQe6{)c|#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.getYear();
      Clock clock0 = MockClock.systemDefaultZone();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      java.time.Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.tick(clock0, duration0);
      java.time.Instant instant0 = MockInstant.now(clock1);
      Date date0 = Date.from(instant0);
      mockDate0.before(date0);
      Locale locale0 = Locale.UK;
      try { 
        localDateTime0.toString("jp6", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.getYear();
      Clock clock0 = MockClock.systemDefaultZone();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      java.time.Duration duration0 = chronoUnit0.getDuration();
      MockClock.tick(clock0, duration0);
      Locale locale0 = Locale.UK;
      try { 
        localDateTime0.toString("jp6", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        localDateTime1.getValue((-16));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -16
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-4));
      localDateTime0.getMillisOfSecond();
      LocalDateTime localDateTime2 = localDateTime1.minusHours((-2147483646));
      LocalDateTime localDateTime3 = localDateTime1.withYearOfEra(2100);
      localDateTime2.plusMillis((-4));
      localDateTime3.getEra();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(7678125, 7678125, (-3428), (-822), (-135), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -822 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      Duration duration0 = Duration.standardSeconds((-1742L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds1);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      localDateTime1.isSupported(durationFieldType1);
      // Undeclared exception!
      try { 
        localDateTime1.withSecondOfMinute((-1917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1917 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      localDateTime1.getFieldTypes();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-1748));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      LocalDateTime localDateTime2 = LocalDateTime.now(dateTimeZone0);
      localDateTime1.toDate(timeZone0);
      localDateTime1.withYear((-1748));
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      LocalDateTime.now(dateTimeZone0);
      localDateTime0.hourOfDay();
      int int0 = (-922);
      localDateTime2.getHourOfDay();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(421, (-922), 1074);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -922 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 0, 3);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) mockZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(3);
      localDateTime0.era();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      mockZone0.getOffsetFromLocal(0L);
      DateTimeZone.setNameProvider(defaultNameProvider0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      mockZone0.convertUTCToLocal((-343L));
      LocalDateTime localDateTime2 = localDateTime0.minusMillis(0);
      localDateTime1.toString();
      LocalDateTime localDateTime3 = localDateTime1.withField(dateTimeFieldType0, 3);
      localDateTime3.withFields(localDateTime1);
      LocalDateTime.now((DateTimeZone) mockZone0);
      localDateTime2.getWeekOfWeekyear();
      localDateTime3.withMonthOfYear(7);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1359L));
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-4613));
      localDateTime1.plusMillis(0);
      localDateTime1.year();
      LocalDateTime localDateTime2 = localDateTime0.withMillisOfSecond(0);
      LocalDateTime localDateTime3 = localDateTime2.withMillisOfDay(29);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      localDateTime2.getValue(0);
      localDateTime3.plusYears(1407);
      // Undeclared exception!
      try { 
        localDateTime3.withDayOfMonth(1969);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1969 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1359L));
      localDateTime0.minusMinutes((-4613));
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(0);
      LocalDateTime localDateTime2 = localDateTime1.withMillisOfDay(3);
      localDateTime1.getValue(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      localDateTime0.minusWeeks(0);
      LocalDateTime localDateTime3 = localDateTime2.plusYears(1407);
      LocalDateTime localDateTime4 = localDateTime3.minusMinutes(0);
      localDateTime4.withMinuteOfHour(0);
      ConverterManager.getInstance();
      localDateTime_Property0.addWrapFieldToCopy(0);
      LocalDateTime localDateTime5 = localDateTime3.plusYears(3);
      localDateTime5.minusHours(0);
      localDateTime0.minusSeconds(3);
      localDateTime1.era();
      Duration duration0 = new Duration(1000L, (-1669L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Seconds seconds1 = days0.toStandardSeconds();
      Seconds.standardSecondsIn(days0);
      Duration duration1 = seconds1.toStandardDuration();
      localDateTime3.withDurationAdded(duration1, 0);
      localDateTime5.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Duration.millis((-2000L));
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusYears(0);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(2838);
      localDateTime0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime.parse("2014-02-14T20:21:21.320");
      LocalDateTime localDateTime2 = localDateTime1.plusMillis(2147467379);
      LocalDateTime localDateTime3 = localDateTime1.minusMillis(2147467379);
      localDateTime1.millisOfDay();
      localDateTime3.withYear(2838);
      localDateTime1.dayOfWeek();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      localDateTime2.getMillisOfDay();
      LocalDateTime localDateTime4 = localDateTime2.minusMonths((-1965));
      LocalDateTime localDateTime5 = localDateTime2.withLocalMillis(2838);
      localDateTime4.withWeekyear(60745861);
      localDateTime5.getSecondOfMinute();
      localDateTime3.toLocalDate();
      localDateTime1.getWeekyear();
      TestDuration_Basics testDuration_Basics0 = null;
      try {
        testDuration_Basics0 = new TestDuration_Basics("2014-02-14T20:21:21.320");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = 1339705281320L;
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(1339705281320L, (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis((-2772659400000L));
      localDateTime0.getMillisOfSecond();
      localDateTime1.yearOfEra();
      localDateTime1.getDayOfYear();
      PeriodType.yearWeekDayTime();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      DurationFieldType.eras();
      localDateTime0.weekyear();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(7678125);
      Duration duration0 = new Duration((long) 372);
      localDateTime0.minusDays((-1000));
      localDateTime0.dayOfYear();
      LocalDateTime localDateTime2 = localDateTime0.withDurationAdded(duration0, 93);
      localDateTime2.toLocalTime();
      localDateTime2.getMillisOfSecond();
      localDateTime1.minusDays((-1));
      localDateTime0.plusYears((-2526));
      localDateTime2.withYearOfCentury(93);
      int int0 = 12;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        TestDateTime_Basics.main(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      DurationFieldType.eras();
      localDateTime0.weekyear();
      localDateTime0.plusSeconds(7678125);
      Duration duration0 = new Duration((long) 372);
      LocalDateTime localDateTime1 = localDateTime0.minusDays((-1000));
      localDateTime0.dayOfYear();
      int int0 = 93;
      LocalDateTime localDateTime2 = localDateTime0.withDurationAdded(duration0, 93);
      localDateTime2.toLocalTime();
      // Undeclared exception!
      try { 
        localDateTime1.withHourOfDay((-1000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1000 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.toTimeZone();
      DateTime dateTime0 = localDateTime0.toDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      int int0 = Calendar.DAY_OF_WEEK;
      localDateTime0.getDayOfWeek();
      localDateTime2.dayOfYear();
      localDateTime1.getWeekyear();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      localDateTime1.yearOfCentury();
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(0);
      localDateTime2.weekOfWeekyear();
      localDateTime1.getCenturyOfEra();
      localDateTime3.equals(dateTime0);
      localDateTime2.getYearOfEra();
      Duration duration0 = Duration.millis((-145L));
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Duration duration1 = days0.toStandardDuration();
      localDateTime3.minus((ReadableDuration) duration1);
      localDateTime1.millisOfDay();
      localDateTime3.minuteOfHour();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-1759L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      dateTime0.withFields(localDateTime0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      Date date0 = localDateTime1.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.fromDateFields(date0);
      localDateTime1.getYearOfCentury();
      localDateTime0.getDayOfWeek();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      localDateTime0.isSupported(durationFieldType0);
      localDateTime2.monthOfYear();
      dateTime0.toGregorianCalendar();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      localDateTime_Property0.compareTo((ReadablePartial) localDateTime0);
      localDateTime_Property0.get();
      localDateTime_Property0.getMillis();
      localDateTime0.getChronology();
      DateTime dateTime0 = localDateTime0.toDateTime();
      localDateTime0.toDateTime(dateTime0);
      localDateTime_Property0.withMinimumValue();
      int int0 = (-1728);
      localDateTime0.minusYears((-1728));
      localDateTime_Property0.roundHalfFloorCopy();
      // Undeclared exception!
      try { 
        localDateTime0.withDate(0, 20, (-1728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 20 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1L));
      Partial partial0 = new Partial(yearMonth0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      Duration duration0 = Duration.standardSeconds((-1742L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      seconds1.getPeriodType();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfWeek(1);
      localDateTime2.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime3 = localDateTime1.plusMonths(0);
      LocalDateTime.Property localDateTime_Property1 = localDateTime2.property(dateTimeFieldType0);
      assertTrue(localDateTime_Property1.equals((Object)localDateTime_Property0));
      
      LocalDateTime localDateTime4 = localDateTime0.plusDays(0);
      assertSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1L));
      Partial partial0 = new Partial(yearMonth0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      Duration duration0 = Duration.standardSeconds((-1742L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds1);
      LocalDateTime localDateTime2 = localDateTime0.minusSeconds(0);
      localDateTime2.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      localDateTime0.property(dateTimeFieldType0);
      int int0 = localDateTime1.get(dateTimeFieldType0);
      assertSame(localDateTime1, localDateTime2);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFieldType.dayOfWeek();
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-1311));
      LocalDateTime localDateTime2 = localDateTime1.withDayOfYear(13);
      LocalDateTime localDateTime3 = localDateTime2.plusSeconds((-1311));
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      localDateTime3.withFieldAdded(durationFieldType0, 1);
      LocalDateTime localDateTime4 = localDateTime3.withLocalMillis((-1L));
      localDateTime2.getMillisOfDay();
      // Undeclared exception!
      try { 
        localDateTime4.withEra(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getYearOfCentury();
      int int0 = (-1441);
      int int1 = (-193);
      MockDate.UTC((-1577), 1819, (-1441), 1819, 0, (-193));
      LocalDateTime localDateTime1 = localDateTime0.withYear((-193));
      localDateTime1.plusMinutes(4283);
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(547);
      localDateTime1.getMonthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      localDateTime2.withFieldAdded(durationFieldType0, 1819);
      localDateTime2.equals(localDateTime1);
      localDateTime0.plusDays(543);
      localDateTime2.toLocalTime();
      // Undeclared exception!
      try { 
        Interval.parse("\" is tL8oo short");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: \" is tL8oo short
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3626L);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-48));
      ConverterManager.getInstance();
      ReadableDuration readableDuration0 = null;
      localDateTime1.isEqual(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded((ReadableDuration) null, (-48));
      LocalDateTime localDateTime3 = localDateTime2.plusHours((-2644));
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      localDateTime_Property0.getAsShortText();
      LocalDateTime localDateTime4 = localDateTime1.withDurationAdded((ReadableDuration) null, (-3517));
      Locale locale0 = Locale.PRC;
      LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDateTime5.plusHours(0);
      localDateTime4.toString("626", locale0);
      LocalDateTime localDateTime6 = localDateTime4.plus((ReadableDuration) null);
      localDateTime6.minusSeconds((-130));
      localDateTime6.secondOfMinute();
      LocalDateTime localDateTime7 = localDateTime1.withMillisOfDay(0);
      localDateTime_Property0.addToCopy(2980L);
      localDateTime0.withFields(localDateTime7);
      localDateTime4.getYear();
      localDateTime4.compareTo((ReadablePartial) localDateTime7);
      System.setCurrentTimeMillis(2980L);
      localDateTime3.getWeekOfWeekyear();
      // Undeclared exception!
      try { 
        localDateTime1.withTime((-48), (-10), 1, (-2644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -48 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
