/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:49:20 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = new Period(1, (-4L), buddhistChronology0);
      assertNotNull(period0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = buddhistChronology0.add((ReadablePeriod) period0, (-4L), (-13));
      assertEquals(61L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(6, 6);
      assertNotNull(dateTimeZone0);
      assertEquals("+06:06", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+06:06", dateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("+06:06", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+06:06", dateTimeZone0.getID());
      
      Duration duration0 = Duration.standardHours(6);
      assertNotNull(duration0);
      assertEquals(21600000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(21600L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(360L, duration0.getStandardMinutes());
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(21600000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(21600L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(360L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(360, minutes0.getMinutes());
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(21600000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(21600L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(360L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(360, minutes0.getMinutes());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      
      Days days0 = weeks0.toStandardDays();
      assertNotNull(days0);
      assertEquals(21600000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(21600L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(360L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(360, minutes0.getMinutes());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      int[] intArray0 = iSOChronology0.get((ReadablePeriod) days0, (-335L));
      assertNotNull(intArray0);
      assertEquals("+06:06", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+06:06", dateTimeZone0.getID());
      assertEquals(21600000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(21600L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(360L, duration0.getStandardMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(360, minutes0.getMinutes());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(monthDay0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133177600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-132), 1023, 1516, (-2263), 234);
      assertNotNull(mockDate0);
      assertEquals("Thu Feb 19 20:54:00 GMT 1857", mockDate0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertNotNull(localTime0);
      assertEquals("Thu Feb 19 20:54:00 GMT 1857", mockDate0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 1, 1);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertNotNull(lenientChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = zonedChronology0.getDateTimeMillis(616, 29, 29, (-292269055), 2147483623, 29, (-48));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-965971545391048L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DurationField durationField0 = julianChronology0.years();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeField dateTimeField0 = julianChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals((-292269055), dateTimeField0.getMinimumValue());
      assertEquals("year", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertNotNull(buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2395));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.395", dateTimeZone0.toString());
      assertEquals("-00:00:02.395", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.395", dateTimeZone0.toString());
      assertEquals("-00:00:02.395", dateTimeZone0.getID());
      
      DurationField durationField0 = zonedChronology0.weekyears();
      assertNotNull(durationField0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.395", dateTimeZone0.toString());
      assertEquals("-00:00:02.395", dateTimeZone0.getID());
      assertEquals("weekyears", durationField0.getName());
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Chronology chronology0 = buddhistChronology0.getBase();
      assertNotNull(chronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(chronology0);
      assertNotNull(strictChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = strictChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField0 = islamicChronology0.weeks();
      assertNotNull(durationField0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2395));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.395", dateTimeZone0.getID());
      assertEquals("-00:00:02.395", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("-00:00:02.395", dateTimeZone0.getID());
      assertEquals("-00:00:02.395", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeField dateTimeField0 = zonedChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals("-00:00:02.395", dateTimeZone0.getID());
      assertEquals("-00:00:02.395", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = islamicChronology0.toString();
      assertNotNull(string0);
      assertEquals("IslamicChronology[UTC]", string0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      MonthDay monthDay0 = new MonthDay(1, 1, buddhistChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      long long0 = buddhistChronology0.set(monthDay0, 119L);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(119L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int[] intArray0 = islamicChronology0.get((ReadablePartial) monthDay0, 119L);
      assertNotNull(intArray0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertArrayEquals(new int[] {10, 22}, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      buddhistChronology0.validate(monthDay0, intArray0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertArrayEquals(new int[] {10, 22}, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, IslamicChronology.AH);
      
      try { 
        buddhistChronology0.getDateTimeMillis(1, 1, 0, 1, 0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DurationField durationField0 = iSOChronology0.seconds();
      assertNotNull(durationField0);
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertEquals("seconds", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.months();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1159L, (-1903), 12);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) mockZone0);
      assertNotNull(gregorianChronology0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      DateTimeField dateTimeField0 = gregorianChronology0.monthOfYear();
      assertNotNull(dateTimeField0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.minutes();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertNotNull(lenientChronology0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = lenientChronology0.minuteOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeField0.isLenient());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertTrue(dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DurationField durationField0 = gJChronology0.millis();
      assertNotNull(durationField0);
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertEquals("millis", durationField0.getName());
      assertEquals(1L, durationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DurationField durationField0 = ethiopicChronology0.hours();
      assertNotNull(durationField0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      assertNotNull(iSOChronology0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)iSOChronology0.hourOfDay();
      assertNotNull(preciseDateTimeField0);
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertTrue(preciseDateTimeField0.isSupported());
      assertEquals(3600000L, preciseDateTimeField0.getUnitMillis());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals("hourOfDay", preciseDateTimeField0.getName());
      assertEquals(24, preciseDateTimeField0.getRange());
      assertEquals(23, preciseDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DurationField durationField0 = gregorianChronology0.halfdays();
      assertNotNull(durationField0);
      assertTrue(durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(43200000L, durationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = gregorianChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+18:00", dateTimeZone0.toString());
      assertEquals("+18:00", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+18:00", dateTimeZone0.toString());
      assertEquals("+18:00", dateTimeZone0.getID());
      
      long long0 = gJChronology0.getDateTimeMillis(1140L, 1, 1, 1, 1);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+18:00", dateTimeZone0.toString());
      assertEquals("+18:00", dateTimeZone0.getID());
      assertEquals((-61138999L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      long long0 = gregorianChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
      assertEquals((-62135593138999L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = lenientChronology0.getDateTimeMillis(292271022, (-3), (-2080), 2224);
      assertEquals(9223103119334402224L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.joda.time.chrono.BaseChronology");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      assertNotNull(gJChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertNotNull(lenientChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-1603), 4652);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(lenientChronology0, lenientChronology0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getDateTimeMillis((-294), (-2147211054), (-1603), (-2146186073));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-5646807218578186073L), long0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int[] intArray0 = buddhistChronology0.get((ReadablePartial) partial0, (-2094L));
      assertNotNull(intArray0);
      assertEquals(0, partial0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertNotNull(durationField0);
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.era();
      assertNotNull(dateTimeField0);
      assertEquals("era", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.days();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
      assertTrue(dateTimeField0.isSupported());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", dateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("+00:00:00.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", dateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = iSOChronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertEquals("+00:00:00.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", dateTimeZone0.getID());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      assertNotNull(lenientChronology0);
      
      DateTimeField dateTimeField0 = lenientChronology0.dayOfMonth();
      assertNotNull(dateTimeField0);
      assertTrue(dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeField dateTimeField0 = copticChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertTrue(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertTrue(dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField0 = islamicChronology0.centuries();
      assertNotNull(durationField0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = new Period(1, 1L, buddhistChronology0);
      assertNotNull(period0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = buddhistChronology0.add((ReadablePeriod) period0, (long) 0, 0);
      assertEquals(0L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = buddhistChronology0.add((long) 1, (-1L), 2);
      assertEquals((-1L), long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        buddhistChronology0.validate(localDate0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) lenientChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1, IslamicChronology.AH);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        lenientChronology0.validate(localDateTime0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      // Undeclared exception!
      try { 
        julianChronology0.set((ReadablePartial) null, (-307L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      assertNotNull(strictChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      try { 
        strictChronology0.getDateTimeMillis((long) 1, 1, (-2146984348), 1, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146984348 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      try { 
        iSOChronology0.getDateTimeMillis((-669), (-669), 719527, 41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -669 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        ethiopicChronology0.get((ReadablePeriod) null, 888L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Chronology chronology0 = buddhistChronology0.getBase();
      assertNotNull(chronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      MonthDay monthDay0 = new MonthDay((-88290777600000L));
      assertNotNull(monthDay0);
      assertEquals(6, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(3, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      // Undeclared exception!
      try { 
        chronology0.get((ReadablePartial) monthDay0, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      // Undeclared exception!
      try { 
        copticChronology0.get((ReadablePartial) null, (-926L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertNotNull(strictChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      Period period0 = Period.years(23);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        strictChronology0.add((ReadablePeriod) period0, (-85043174400000L), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-4L), 185542587187200000L, (PeriodType) null, ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        ethiopicChronology0.add((ReadablePeriod) mutablePeriod0, (-4L), 5070);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 29809009230
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        buddhistChronology0.add((-145L), 10000000000000000L, (-2068));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 10000000000000000 * -2068
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1159L, (-1903), 12);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) mockZone0);
      assertNotNull(islamicChronology0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      
      Period period0 = new Period(57120L, 1913L, periodType0, islamicChronology0);
      assertNotNull(period0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, IslamicChronology.AH);
      
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) period0, 0L);
      assertNotNull(intArray0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Period period0 = Period.years((-4299));
      assertNotNull(period0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, (long) (-4299), 1L);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 4, 300}, intArray0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(1210L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int[] intArray0 = new int[6];
      intArray0[1] = 1;
      intArray0[2] = 3161;
      // Undeclared exception!
      try { 
        gregorianChronology0.validate(localDateTime0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3161 for dayOfMonth must not be larger than 31
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.add(0L, (-2094L), 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = buddhistChronology0.add((-145L), (-1L), (-2080));
      assertEquals(1935L, long0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = ethiopicChronology0.add(0L, 0L, 137);
      assertEquals(0L, long0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      long long0 = copticChronology0.add((ReadablePeriod) null, (long) (-349), 462);
      assertEquals((-349L), long0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Duration duration0 = Duration.standardSeconds(1);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = duration0.toPeriod(periodType0);
      long long0 = buddhistChronology0.add((ReadablePeriod) period0, (-7877L), 2);
      assertEquals((-5877L), long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Duration duration0 = Duration.standardMinutes(1);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Period period0 = new Period(duration0, mutableDateTime0, (PeriodType) null);
      int[] intArray0 = julianChronology0.get((ReadablePeriod) period0, 24L);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 24}, intArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = Period.years(1);
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, (long) 1, (long) 1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      YearMonth yearMonth0 = new YearMonth((Object) null, limitChronology0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        limitChronology0.validate(yearMonth0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = new MonthDay(1, 1, buddhistChronology0);
      long long0 = buddhistChronology0.set(monthDay0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(1140L, 1, 1, 1, 1);
      assertEquals(3661001L, long0);
  }
}
