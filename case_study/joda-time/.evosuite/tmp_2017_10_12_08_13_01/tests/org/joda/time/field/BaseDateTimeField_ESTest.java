/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 17:19:25 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.TestBaseDateTimeField;
import org.joda.time.field.TestOffsetDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDateTimeField_ESTest extends BaseDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getDifference(34L, 34L);
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfEven(41000L);
      Integer integer0 = new Integer(0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getAsShortText(467L, locale1);
      testOffsetDateTimeField_MockOffsetDateTimeField0.addWrapField((long) 0, 0);
      testOffsetDateTimeField_MockOffsetDateTimeField0.add(0L, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = IslamicChronology.AH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial(dateTimeFieldType0, 3);
      int[] intArray0 = new int[7];
      dividedDateTimeField0.getDifference(1832L, (-3485L));
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      dividedDateTimeField0.getAsText((ReadablePartial) partial0, (Locale) null);
      dateTimeFieldType0.getRangeDurationType();
      intArray0[4] = 1000;
      intArray0[5] = 1000;
      intArray0[6] = 3;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(partial0, 1, intArray0, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDifference(538L, 0L);
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundHalfEven((-153L));
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDifferenceAsLong(1599L, 1599L);
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isLenient();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.get((-180L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      LocalDate localDate0 = new LocalDate(0L, chronology0);
      DateTime dateTime0 = new DateTime((-2013L), chronology0);
      Period period0 = new Period((ReadableInstant) null, dateTime0);
      LocalDate localDate1 = localDate0.plus(period0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) localDate1, (-529), (int[]) null, 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMinimumValue((ReadablePartial) localDate0, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.roundHalfEven((-2002L));
      testPreciseDateTimeField_MockPreciseDateTimeField0.add((-2691L), (-1943));
      testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue((-2691L));
      testPreciseDateTimeField_MockPreciseDateTimeField0.addWrapField((long) (-1943), 0);
      testPreciseDateTimeField_MockPreciseDateTimeField0.get((-1943L));
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.CHINESE;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText(0L, locale0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 27);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.get((-4171L));
      remainderDateTimeField0.roundCeiling(1L);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      YearMonth yearMonth0 = new YearMonth();
      yearMonth0.plusYears(185);
      int[] intArray0 = new int[8];
      intArray0[0] = 339;
      intArray0[1] = 0;
      yearMonth0.minusYears((-2297));
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2297);
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockStandardDateTimeField0.addWrapPartial(yearMonth0, 0, intArray0, (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 294 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFieldType.secondOfMinute();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      YearMonth yearMonth0 = YearMonth.now();
      yearMonth0.plusYears(185);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2297);
      intArray0[1] = 0;
      yearMonth0.minusYears((-2297));
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2297);
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockStandardDateTimeField0.addWrapPartial(yearMonth0, 0, intArray0, 1759);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -538 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockPreciseDateTimeField0.set((-1051L), 2937);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2937 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = Calendar.AM;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 1005);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1005;
      intArray0[2] = 1005;
      intArray0[3] = 1005;
      dateTimeFieldType0.getRangeDurationType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w1nC,mw;Bz2>C");
      intArray0[4] = 0;
      intArray0[5] = 1005;
      remainderDateTimeField0.roundHalfFloor((-959L));
      intArray0[6] = 0;
      int[] intArray1 = dividedDateTimeField0.addWrapPartial(partial0, 0, intArray0, 1005);
      remainderDateTimeField0.addWrapField((ReadablePartial) partial0, 0, intArray1, 0);
      remainderDateTimeField0.addWrapField(2348L, (-2330));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundCeiling(15778800000L);
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapField((long) 3, 1952);
      int int0 = Calendar.APRIL;
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 1005;
      intArray0[6] = 3;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.toString();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue();
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((long) 3, locale0);
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfEven((-691L));
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) partial0, 3, intArray0, 1078);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.roundHalfFloor((-1L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getAsShortText(1L);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, (-1758));
      FileSystemHandling.shouldAllThrowIOExceptions();
      offsetDateTimeField0.getAsShortText((long) (-1758));
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.roundFloor((-1758));
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MonthDay monthDay0 = new MonthDay(1L, (Chronology) julianChronology0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1763);
      intArray0[1] = 964;
      intArray0[2] = 39;
      intArray0[3] = 0;
      intArray0[4] = (-1758);
      intArray0[5] = 0;
      monthDay0.getChronology();
      intArray0[6] = (-1758);
      intArray0[7] = 2;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.add((ReadablePartial) monthDay0, 0, intArray0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1761 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = Calendar.AM;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 1005;
      intArray0[3] = 3;
      dateTimeFieldType0.getRangeDurationType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w1nC,mw;Bz2>C");
      intArray0[4] = 0;
      intArray0[5] = 1005;
      remainderDateTimeField0.roundHalfFloor((-959L));
      intArray0[6] = 0;
      int[] intArray1 = dividedDateTimeField0.addWrapPartial(partial0, 0, intArray0, 1005);
      remainderDateTimeField0.addWrapField((ReadablePartial) partial0, 5, intArray1, 0);
      remainderDateTimeField0.addWrapField(2348L, (-2330));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDifferenceAsLong(1559L, 3600023L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue();
      Locale locale0 = Locale.KOREA;
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumShortTextLength(locale0);
      LocalTime localTime0 = new LocalTime(2, 2, 2);
      testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale0);
      testBaseDateTimeField_MockBaseDateTimeField0.getDifferenceAsLong(4122L, 0L);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.set((-1083L), "122");
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1803L, 2146);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, (-4237));
      offsetDateTimeField0.roundHalfFloor(4122L);
      int[] intArray0 = new int[9];
      intArray0[0] = 59;
      intArray0[1] = (-3435);
      intArray0[2] = 59;
      intArray0[3] = (-377);
      intArray0[4] = (-3435);
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 2146;
      intArray0[8] = (-4237);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.addWrapPartial(localTime0, (-3435), intArray0, 1421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3435
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapField((long) 3, 1952);
      int int0 = Calendar.APRIL;
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 1005;
      intArray0[6] = 3;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.toString();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDifferenceAsLong(1032L, 1130L);
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      Locale locale0 = Locale.FRENCH;
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMaximumShortTextLength(locale0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((long) 3, locale1);
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfEven((-691L));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength(locale1);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) partial0, 0, intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockOffsetDateTimeField0.getAsShortText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue();
      Locale locale0 = Locale.KOREA;
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumShortTextLength(locale0);
      LocalTime localTime0 = new LocalTime(2, 2, 2);
      testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale0);
      testBaseDateTimeField_MockBaseDateTimeField0.getDifferenceAsLong(4122L, 0L);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundHalfEven(59);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1803L, 2146);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, (-4237));
      offsetDateTimeField0.roundHalfFloor(4122L);
      int[] intArray0 = new int[9];
      intArray0[0] = 59;
      intArray0[1] = (-3435);
      intArray0[2] = 59;
      intArray0[3] = (-377);
      intArray0[4] = (-3435);
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 2146;
      intArray0[8] = (-4237);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.addWrapPartial(localTime0, (-3435), intArray0, 1421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3435
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.roundFloor((-1239L));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = Calendar.APRIL;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      // Undeclared exception!
      try { 
        remainderDateTimeField0.add((long) 3, (long) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsText((ReadablePartial) null, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-2341L));
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.getRangeDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, (-2210), 1106, 892);
      offsetDateTimeField0.getMinimumValue((-2341L));
      offsetDateTimeField0.isLeap(1113L);
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1301);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalTime(",mdfw=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",mdfw=\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapField((long) 3, 1952);
      int int0 = Calendar.APRIL;
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 1005;
      intArray0[6] = 3;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((long) 3, locale0);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) partial0, 3, intArray0, 1078);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = Calendar.APRIL;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      dateTimeFieldType0.getRangeDurationType();
      intArray0[4] = (-2013265919);
      intArray0[4] = (-2013265919);
      intArray0[6] = 3;
      dividedDateTimeField0.addWrapPartial(partial0, 3, intArray0, 0);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.getDifferenceAsLong((-289L), (-2013265919));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue();
      testBaseDateTimeField_MockBaseDateTimeField0.getDifference(50L, (-2960L));
      Locale locale0 = Locale.KOREA;
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumShortTextLength(locale0);
      LocalTime localTime0 = new LocalTime(2, 2, 2);
      testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale0);
      testBaseDateTimeField_MockBaseDateTimeField0.getDifferenceAsLong(4122L, 2);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DurationField durationField0 = testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, durationField0, dateTimeFieldType0, 2);
      dividedDateTimeField0.convertText("122", locale0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.get((-2960L));
      testBaseDateTimeField_MockBaseDateTimeField0.isLenient();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.ROOT;
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength(locale0);
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      durationField0.toString();
      locale0.getDisplayVariant();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsShortText(0L, locale0);
      Locale locale1 = Locale.KOREAN;
      locale1.getDisplayLanguage(locale0);
      locale1.stripExtensions();
      locale1.getScript();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsText((-4435L), locale1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, durationField0, dateTimeFieldType0, 2);
      remainderDateTimeField0.roundHalfEven(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfCeiling((-1719L));
      zeroIsMaxDateTimeField0.roundHalfCeiling(0L);
      zeroIsMaxDateTimeField0.set(0L, 2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 510);
      offsetDateTimeField0.remainder(1);
      // Undeclared exception!
      try { 
        LocalDate.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.ROOT;
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength(locale0);
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      locale0.getDisplayVariant();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsShortText(0L, locale0);
      Locale locale1 = Locale.KOREAN;
      locale1.getDisplayLanguage(locale0);
      locale1.stripExtensions();
      locale1.getScript();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsText((-4435L), locale1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, durationField0, dateTimeFieldType0, 2);
      remainderDateTimeField0.roundHalfEven((-273L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfCeiling((-300L));
      remainderDateTimeField0.getName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = Calendar.APRIL;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      dateTimeFieldType0.getRangeDurationType();
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 3;
      dividedDateTimeField0.addWrapPartial(partial0, 3, intArray0, 3);
      remainderDateTimeField0.addWrapField(2348L, (-2330));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.ROOT;
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength(locale0);
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DurationField durationField1 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      locale0.getDisplayVariant();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsShortText(0L, locale0);
      Locale locale1 = Locale.KOREAN;
      locale1.getDisplayLanguage(locale0);
      locale1.stripExtensions();
      locale1.getScript();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsText((-4435L), locale1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, durationField0, dateTimeFieldType0, 2);
      remainderDateTimeField0.getMaximumTextLength(locale0);
      remainderDateTimeField0.roundHalfEven((-273L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfCeiling((-300L));
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsText(1L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, durationField1, dateTimeFieldType0, 2);
      dividedDateTimeField0.addWrapField(0L, 2);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.get((-300L));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, 3);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField1 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 3;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        dividedDateTimeField1.add((ReadablePartial) null, 1, intArray0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.roundHalfEven((-2002L));
      testPreciseDateTimeField_MockPreciseDateTimeField0.add((-2691L), (-1943));
      testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue((-2691L));
      testPreciseDateTimeField_MockPreciseDateTimeField0.addWrapField((long) (-1943), 0);
      testPreciseDateTimeField_MockPreciseDateTimeField0.get(0L);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = new Locale("IX0*QFR;v");
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.set((ReadablePartial) localDateTime0, 59, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      buddhistChronology0.getZone();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      dateTimeZone0.getNameKey(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      zeroIsMaxDateTimeField0.get(15778800000L);
      zeroIsMaxDateTimeField0.roundCeiling(60);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(60);
      YearMonth yearMonth2 = yearMonth1.minusMonths(0);
      LocalDate localDate0 = yearMonth2.toLocalDate(1);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDate0, 1, intArray0, 0);
      zeroIsMaxDateTimeField0.addWrapField((-319L), 1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = Calendar.APRIL;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      dateTimeFieldType0.getRangeDurationType();
      intArray0[4] = 3;
      intArray0[5] = 1005;
      intArray0[6] = 3;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(partial0, 3, intArray0, 1005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      int int0 = Calendar.WEDNESDAY;
      Locale locale0 = Locale.JAPAN;
      testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText(4, locale0);
      Locale locale1 = Locale.KOREA;
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumShortTextLength(locale1);
      LocalTime localTime0 = LocalTime.parse("4");
      testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'monthOfYear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.set(4116L, 0);
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = monthDay0.minusDays(1554);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(4116L);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      gJChronology0.withZone(dateTimeZone0);
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1554;
      // Undeclared exception!
      try { 
        testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.addWrapField((ReadablePartial) monthDay1, 0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      MockFile mockFile0 = new MockFile("org/joda/time/tz/data", "org/joda/time/tz/data");
      buddhistChronology0.add(29L, 2442L, (-846));
      zeroIsMaxDateTimeField0.remainder(2887L);
      zeroIsMaxDateTimeField0.roundHalfFloor((-1307L));
      zeroIsMaxDateTimeField0.getDurationField();
      zeroIsMaxDateTimeField0.roundCeiling(0L);
      zeroIsMaxDateTimeField0.getAsText(0L);
      zeroIsMaxDateTimeField0.getRangeDurationField();
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.set((-2363L), 1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-58), 61234, 10);
      offsetDateTimeField0.remainder(199L);
      offsetDateTimeField0.getAsText(199L, (Locale) null);
      offsetDateTimeField0.getLeapAmount(10);
      offsetDateTimeField0.getMaximumShortTextLength((Locale) null);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2058005162, (-2145249012), (-2147483622));
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2145249012);
      intArray0[1] = 1000;
      intArray0[2] = 3;
      intArray0[3] = (-2145249012);
      intArray0[4] = (-2145249012);
      intArray0[5] = 1;
      testBaseDateTimeField_MockBaseDateTimeField0.addWrapField((ReadablePartial) localTime0, 3, intArray0, 1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.KOREA;
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundHalfCeiling(4122L);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      testBaseDateTimeField_MockBaseDateTimeField0.isLeap((-28));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = new Period();
      iSOChronology0.get((ReadablePeriod) period0, (long) (-28));
      dateTimeFieldType0.getField(iSOChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0, (-28), 1189, (-817));
      offsetDateTimeField0.getMaximumValue((ReadablePartial) null, (int[]) null);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.roundFloor(0L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFieldType0.getField(islamicChronology0);
      YearMonth yearMonth0 = new YearMonth();
      islamicChronology0.set(yearMonth0, 3600000L);
      dateTimeFieldType0.getDurationType();
      testBaseDateTimeField_MockBaseDateTimeField0.add(1734L, 1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMinimumValue();
      dateTimeFieldType0.getField(islamicChronology0);
      testBaseDateTimeField_MockBaseDateTimeField0.add(1764L, 0);
      dateTimeFieldType0.getField(islamicChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0, (-3896), 1, 1);
      offsetDateTimeField0.roundFloor((-1670L));
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.get((-3923L));
      offsetDateTimeField0.getMaximumValue(5836L);
      testPreciseDateTimeField_MockStandardDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFieldType0.getField(islamicChronology0);
      YearMonth yearMonth0 = new YearMonth();
      islamicChronology0.set(yearMonth0, 3600000L);
      dateTimeFieldType0.getDurationType();
      testBaseDateTimeField_MockBaseDateTimeField0.add(1734L, 1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMinimumValue();
      dateTimeFieldType0.getField(islamicChronology0);
      testBaseDateTimeField_MockBaseDateTimeField0.add(1764L, 0);
      dateTimeFieldType0.getField(islamicChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0, (-3896), 1, 1);
      offsetDateTimeField0.roundFloor((-1670L));
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.get((-3923L));
      offsetDateTimeField0.roundHalfCeiling((-3923L));
      testBaseDateTimeField_MockBaseDateTimeField0.getDurationField();
      offsetDateTimeField0.roundHalfEven(19115398800000L);
      Locale locale0 = Locale.CHINESE;
      testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText(2105376125, locale0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getLeapDurationField();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1000);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      remainderDateTimeField0.getMinimumValue();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDifference((-2370L), 1005);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      remainderDateTimeField0.addWrapField(2348L, (-2330));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("w1nC,mw;Bz2>C", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"w1nC,mw;Bz2>C\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.add((long) 0, 0);
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockPreciseDateTimeField0.set(29000L, (-116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -116 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.add((-1L), 0);
      testBaseDateTimeField_MockBaseDateTimeField0.remainder(0L);
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-5097), (-1671), (-1671));
      offsetDateTimeField0.getMinimumValue(630L);
      offsetDateTimeField0.getLeapDurationField();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundHalfEven((-278L));
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      Locale locale0 = Locale.FRENCH;
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.roundHalfEven(2038L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      int[] intArray0 = new int[6];
      intArray0[0] = (-74);
      intArray0[1] = (-74);
      intArray0[2] = (-74);
      intArray0[3] = 3;
      intArray0[4] = (-74);
      intArray0[5] = (-74);
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockStandardDateTimeField0.add((ReadablePartial) null, (-74), intArray0, (-74));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -74
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldType0.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      zeroIsMaxDateTimeField0.getMinimumValue();
      DateTimeField dateTimeField1 = buddhistChronology0.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, dateTimeFieldType0, 60);
      dividedDateTimeField0.getDifference(1, 1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.get(3290L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      LocalTime localTime0 = new LocalTime(chronology0);
      LocalTime localTime1 = localTime0.withMillisOfSecond(6);
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue((ReadablePartial) localTime1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDifference(0L, 0L);
      Locale locale0 = Locale.ITALY;
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsShortText(247L, locale0);
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundFloor(12L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The effective range must be at least 2
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getDifference(1L, 1L);
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfEven(41000L);
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfCeiling(1L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DurationField durationField0 = testPreciseDateTimeField_MockStandardDateTimeField0.getRangeDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      buddhistChronology0.getZone();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 93);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.get((-4252L));
      remainderDateTimeField0.add((long) 1, 3L);
      remainderDateTimeField0.roundHalfEven(3);
      remainderDateTimeField0.getMaximumValue(0L);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set(3503L, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime((-2011L), (Chronology) buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.set((ReadablePartial) localTime0, 1, intArray0, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      buddhistChronology0.set(localTime0, (-4329L));
      zeroIsMaxDateTimeField0.roundCeiling(2133L);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.getAsText((ReadablePartial) localTime0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuryOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-317);
      intArray0[2] = (-317);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.set((ReadablePartial) localDateTime0, (-317), intArray0, (-317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -317 for halfdayOfDay must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType0.getRangeDurationType();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testOffsetDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 1732);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundHalfCeiling(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for secondOfMinute must be in the range [3,62]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      monthDay0.minusDays(1);
      DateTime dateTime0 = new DateTime(4116L);
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.get((-2046L));
      Locale locale0 = Locale.PRC;
      testPreciseDateTimeField_MockStandardDateTimeField0.getAsText((ReadablePartial) monthDay0, (-3347), locale0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue((-3105L));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.roundHalfFloor(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(testOffsetDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, (-1700));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.getType();
      offsetDateTimeField0.getAsText(1258L);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText(59, locale0);
      Locale locale1 = Locale.KOREA;
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumShortTextLength(locale1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      LocalDateTime localDateTime0 = new LocalDateTime();
      Instant instant0 = new Instant();
      Duration duration0 = new Duration(instant0, instant0);
      Duration duration1 = new Duration((-1633L), 0L);
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      duration0.toPeriodTo((ReadableInstant) instant0, periodType1);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration2);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(2155);
      duration2.isShorterThan(duration1);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.addWrapPartial(localDateTime2, 495, (int[]) null, (-542));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundHalfFloor(1015L);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayCountry(locale1);
      // Undeclared exception!
      try { 
        testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.set(947L, "Fields invalid for add", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Fields invalid for add\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.roundHalfCeiling((-567L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      buddhistChronology0.withZone(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0, (-2127413706), (-2127413706), (-2127413706));
      testBaseDateTimeField_MockBaseDateTimeField0.roundCeiling((-2127413706));
      offsetDateTimeField0.getRangeDurationField();
      offsetDateTimeField0.get((-241L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifference(1L, (-2127413640L));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      Locale locale0 = Locale.JAPAN;
      testPreciseDateTimeField_MockStandardDateTimeField0.getMaximumTextLength(locale0);
      testPreciseDateTimeField_MockStandardDateTimeField0.roundCeiling(2);
      System.setCurrentTimeMillis(60L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1626), 1, (-150));
      Locale locale0 = Locale.CANADA_FRENCH;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gp 6]P0&5");
      offsetDateTimeField0.getMaximumTextLength(locale0);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue();
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField1 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField1, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifference(50L, 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      MonthDay monthDay0 = MonthDay.now();
      monthDay0.minusDays(1554);
      DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(4116L);
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundFloor(4116L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.get((-1867L));
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.plusYears(1592);
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue((ReadablePartial) localDate1, (int[]) null);
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockPreciseDateTimeField0.set((long) 3, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 93 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.remainder((-2850L));
      testOffsetDateTimeField_MockOffsetDateTimeField0.toString();
      testOffsetDateTimeField_MockOffsetDateTimeField0.toString();
      testOffsetDateTimeField_MockOffsetDateTimeField0.isSupported();
      Locale locale0 = Locale.JAPAN;
      testOffsetDateTimeField_MockOffsetDateTimeField0.getAsText(0, locale0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapAmount(0L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 93, 0, 93);
      offsetDateTimeField0.roundHalfEven(1L);
      zeroIsMaxDateTimeField0.roundFloor((-776L));
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.getRangeDurationField();
      offsetDateTimeField0.roundHalfFloor(0L);
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.remainder(0L);
      testOffsetDateTimeField_MockStandardDateTimeField0.getDifferenceAsLong(2840L, 0L);
      testOffsetDateTimeField_MockStandardDateTimeField0.getAsText(2840L);
      testOffsetDateTimeField_MockStandardDateTimeField0.getRangeDurationField();
      testOffsetDateTimeField_MockStandardDateTimeField0.getLeapDurationField();
      testOffsetDateTimeField_MockStandardDateTimeField0.roundFloor(2840L);
      testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue((ReadablePartial) null);
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockStandardDateTimeField0.addWrapField((ReadablePartial) null, 0, (int[]) null, 855);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.get(363L);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.getLeapDurationField();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockStandardDateTimeField0.convertText("k$1iG>jJhv<#", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"k$1iG>jJhv<#\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.isLeap(0L);
      dateTimeFieldType0.getRangeDurationType();
      testBaseDateTimeField_MockBaseDateTimeField0.roundHalfCeiling(10L);
      testBaseDateTimeField_MockBaseDateTimeField0.set(10L, 1333);
      testBaseDateTimeField_MockBaseDateTimeField0.remainder((-2669L));
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.isLenient();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue();
      testOffsetDateTimeField_MockOffsetDateTimeField0.isLeap(1766L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getDifference(60000L, 9L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0, 93);
      LocalTime localTime0 = new LocalTime((long) 93);
      LocalTime localTime1 = localTime0.plusMillis(30);
      Locale locale0 = Locale.FRENCH;
      offsetDateTimeField0.getAsShortText((ReadablePartial) localTime1, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue();
      Locale locale0 = Locale.US;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((ReadablePartial) null, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.add(0L, 1000);
      testPreciseDateTimeField_MockStandardDateTimeField0.getRange();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockStandardDateTimeField0.set(0L, "63");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 63 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfEven(41000L);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField((DividedDateTimeField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundFloor(1L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.getRangeDurationType();
      zeroIsMaxDateTimeField0.getDifference((-1L), 1L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      zeroIsMaxDateTimeField0.getMaximumValue((-1737L));
      DateTime dateTime0 = new DateTime();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Integer integer0 = new Integer(13);
      dateTime0.equals(integer0);
      DateTime dateTime1 = dateTime0.withMillisOfDay(478);
      dateTimeFieldType0.getDurationType();
      dateTime0.withDurationAdded((long) 478, 898);
      Date date0 = dateTime1.toDate();
      dateTime1.withDayOfMonth(10);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) localDate0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.add((-1737L), (-1737L));
      zeroIsMaxDateTimeField0.get(0L);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 118);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((-1L), 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 23 for monthOfYear must be in the range [119,178]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime((-1999L), (Chronology) buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[4] = 1;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.set((ReadablePartial) localTime0, 1, intArray0, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      buddhistChronology0.set(localTime0, (-4329L));
      zeroIsMaxDateTimeField0.roundCeiling(2133L);
      Locale locale0 = Locale.GERMANY;
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType0.getRangeDurationType();
      int int0 = 61234;
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-58), 61234, (-58));
      offsetDateTimeField0.remainder(199L);
      offsetDateTimeField0.getAsText(199L, (Locale) null);
      offsetDateTimeField0.getLeapAmount(1);
      offsetDateTimeField0.getMaximumShortTextLength((Locale) null);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      YearMonth yearMonth0 = YearMonth.now();
      yearMonth0.plusYears(185);
      int[] intArray0 = new int[8];
      intArray0[0] = 339;
      intArray0[1] = 0;
      yearMonth0.minusYears((-2297));
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2297);
      intArray0[7] = 1;
      testPreciseDateTimeField_MockStandardDateTimeField0.addWrapPartial(yearMonth0, 0, intArray0, 1759);
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.isLeap(18L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xZ9o3><p5;BI");
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      long long0 = 1022L;
      int int0 = 2363;
      MonthDay monthDay0 = new MonthDay(1022L);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MonthDay monthDay1 = monthDay0.withPeriodAdded(mutablePeriod0, (-2856));
      MonthDay monthDay2 = monthDay1.plusDays(100);
      PeriodType periodType0 = PeriodType.months();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapAmount((-519L));
      periodType0.withWeeksRemoved();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapField(309L, (-2856));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      // Undeclared exception!
      try { 
        monthDay2.withFieldAdded(durationFieldType0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-58), 61234, 10);
      offsetDateTimeField0.remainder(199L);
      offsetDateTimeField0.getAsText(199L, (Locale) null);
      int int0 = Calendar.AM;
      offsetDateTimeField0.getMaximumShortTextLength((Locale) null);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      int[] intArray0 = new int[8];
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.isLeap(18L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      JulianChronology.getInstance((DateTimeZone) null);
      dateTimeFieldType0.getDurationType();
      zeroIsMaxDateTimeField0.getMaximumShortTextLength((Locale) null);
      zeroIsMaxDateTimeField0.getAsText((-1112L));
      zeroIsMaxDateTimeField0.roundHalfEven(0);
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.getMaximumTextLength((Locale) null);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((long) 2);
      testPreciseDateTimeField_MockStandardDateTimeField0.getDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength((Locale) null);
      zeroIsMaxDateTimeField0.remainder(1571L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue(0L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-509));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-959L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EEE d/M");
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, 1881);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, scaledDurationField0, dateTimeFieldType0, 1881);
      Locale locale0 = Locale.GERMAN;
      remainderDateTimeField0.getMaximumTextLength(locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.lookup(linkedList0, linkedHashSet0);
      DateTimeFieldType.millisOfDay();
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.add((long) 4, (-959L));
      testOffsetDateTimeField_MockOffsetDateTimeField0.getOffset();
      YearMonth yearMonth0 = new YearMonth((Object) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (-509);
      intArray0[1] = 1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) yearMonth0, 1, intArray0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      buddhistChronology0.add((long) 1, (long) 1, (int) (byte)59);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(copticChronology0, dateTimeField0);
      Locale locale0 = Locale.ENGLISH;
      skipUndoDateTimeField0.getMaximumTextLength(locale0);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set((-76L), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for yearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapField((long) 3, 1952);
      int int0 = Calendar.APRIL;
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 1005;
      intArray0[6] = 3;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.toString();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDifferenceAsLong(1032L, 1130L);
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      Locale locale0 = Locale.FRENCH;
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMaximumShortTextLength(locale0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((long) 3, locale1);
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfEven((-691L));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength(locale1);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) partial0, 0, intArray0, (-2330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapField((long) 3, 1952);
      int int0 = Calendar.APRIL;
      Partial partial0 = new Partial();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 1005;
      intArray0[6] = 3;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.isSupported();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.toString();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDifferenceAsLong(1032L, 1130L);
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      Locale locale0 = Locale.FRENCH;
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMaximumShortTextLength(locale0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((long) 3, locale1);
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfEven((-691L));
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength(locale1);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) partial0, 0, intArray0, 1078);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = TestBaseDateTimeField.MockCountingDurationField.difference_long;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      Partial partial0 = new Partial(dateTimeFieldType0, 3);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 3;
      dividedDateTimeField0.getAsText((ReadablePartial) partial0, (Locale) null);
      dateTimeFieldType0.getRangeDurationType();
      intArray0[4] = 3;
      intArray0[5] = (-2013265919);
      // Undeclared exception!
      dividedDateTimeField0.addWrapPartial(partial0, 0, intArray0, (-2013265919));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      int int0 = IslamicChronology.AH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial(dateTimeFieldType0, 3);
      int[] intArray0 = new int[10];
      dividedDateTimeField0.getDifference(1832L, (-3485L));
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      dividedDateTimeField0.getAsText((ReadablePartial) partial0, (Locale) null);
      dateTimeFieldType0.getRangeDurationType();
      intArray0[4] = (-2013265919);
      intArray0[5] = (-2013265919);
      intArray0[6] = 3;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(partial0, 1, intArray0, (-2013265919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getLeapDurationField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = IslamicChronology.AH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 3);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      Partial partial0 = new Partial(dateTimeFieldType0, 3);
      int[] intArray0 = new int[7];
      dividedDateTimeField0.getDifference(1832L, (-3485L));
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      dividedDateTimeField0.getAsText((ReadablePartial) partial0, (Locale) null);
      dateTimeFieldType0.getRangeDurationType();
      intArray0[4] = (-2013265919);
      intArray0[5] = (-2013265919);
      intArray0[6] = 3;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(partial0, 1, intArray0, (-2013265919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.roundHalfEven((-2002L));
      testPreciseDateTimeField_MockPreciseDateTimeField0.add((-2691L), (-1943));
      testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue((-2691L));
      testPreciseDateTimeField_MockPreciseDateTimeField0.addWrapField((long) (-1943), 0);
      testPreciseDateTimeField_MockPreciseDateTimeField0.get(0L);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = new Locale("IX0*QFR;v");
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText(0L, locale0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumValue();
      Locale locale0 = Locale.KOREA;
      testBaseDateTimeField_MockBaseDateTimeField0.getMaximumShortTextLength(locale0);
      LocalTime localTime0 = new LocalTime(2, 2, 2);
      testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      testBaseDateTimeField_MockBaseDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale0);
      testBaseDateTimeField_MockBaseDateTimeField0.getDifferenceAsLong(4122L, 0L);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 59;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1803L, 2146);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, (-4237));
      offsetDateTimeField0.roundHalfFloor(4122L);
      int[] intArray1 = new int[9];
      intArray1[0] = 59;
      intArray1[1] = (-3435);
      intArray1[2] = 59;
      intArray1[3] = (-377);
      intArray1[4] = (-3435);
      intArray1[5] = 2;
      intArray1[6] = 0;
      intArray1[7] = 2146;
      intArray1[8] = (-4237);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.addWrapPartial(localTime0, (-3435), intArray1, 1421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3435
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundHalfFloor(198L);
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = monthDay0.minusDays(1554);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(4116L);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      MonthDay monthDay2 = monthDay1.withChronologyRetainFields(chronology0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      DateTime dateTime1 = DateTime.now();
      dateTime0.compareTo((ReadableInstant) dateTime1);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue();
      intArray0[5] = 1554;
      // Undeclared exception!
      try { 
        testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.addWrapField((ReadablePartial) monthDay2, 0, intArray0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      MonthDay monthDay0 = MonthDay.now();
      int int0 = 1554;
      MonthDay monthDay1 = monthDay0.minusDays(1554);
      DateTimeZone.getDefault();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Locale locale0 = Locale.UK;
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue((ReadablePartial) monthDay1, intArray0);
      locale0.getDisplayVariant((Locale) null);
      // Undeclared exception!
      try { 
        testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.set((ReadablePartial) monthDay1, 1, intArray0, "=B[5x", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"=B[5x\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = null;
      try {
        testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField((DateTimeFieldType) null, (DurationField) null, (DurationField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.getRangeDurationField();
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[8];
      intArray0[0] = (-2297);
      intArray0[1] = 0;
      yearMonth0.withYear(0);
      testPreciseDateTimeField_MockStandardDateTimeField0.addWrapPartial(yearMonth0, 0, intArray0, 0);
      intArray0[3] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2297);
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[7] = (-2297);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfFloor(0L);
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockStandardDateTimeField0.addWrapPartial(yearMonth0, (-2297), intArray0, 1759);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2297
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.ROOT;
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumTextLength(locale0);
      DurationField durationField0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      durationField0.toString();
      locale0.getScript();
      locale0.getDisplayVariant();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsShortText(0L, locale0);
      Locale locale1 = Locale.KOREAN;
      locale1.getDisplayLanguage(locale0);
      locale1.stripExtensions();
      locale1.getScript();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsText((-4435L), locale1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, durationField0, dateTimeFieldType0, 2);
      long long0 = remainderDateTimeField0.roundHalfEven(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.getDurationType();
      zeroIsMaxDateTimeField0.roundHalfCeiling((-1719L));
      long long1 = zeroIsMaxDateTimeField0.roundHalfCeiling(0L);
      assertTrue(long1 == long0);
  }
}
