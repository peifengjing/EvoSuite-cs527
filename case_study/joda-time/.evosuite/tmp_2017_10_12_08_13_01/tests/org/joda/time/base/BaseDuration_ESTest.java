/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:51:38 GMT 2017
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.Weeks;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDuration_ESTest extends BaseDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1L));
      Days days0 = duration0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1L));
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Days days0 = duration0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      DateTime dateTime0 = new DateTime(0L);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) null);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = new Duration((-7), (-7));
      Interval interval0 = duration0.toIntervalFrom((ReadableInstant) null);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = new Duration(3050L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      assertEquals((-12219292796950L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = new Duration((-45L));
      Duration duration1 = duration0.multipliedBy((-45L));
      duration1.getMillis();
      assertEquals((-45L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Duration duration0 = hours0.toStandardDuration();
      Duration duration1 = duration0.negated();
      duration1.getMillis();
      assertEquals(14400L, duration0.getStandardSeconds());
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-915L));
      // Undeclared exception!
      try { 
        duration0.toIntervalFrom((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      long long0 = duration0.getMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTime dateTime0 = new DateTime(694L);
      Duration duration0 = new Duration((ReadableInstant) null, dateTime0);
      // Undeclared exception!
      try { 
        duration0.toIntervalTo((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Duration duration0 = new Duration(instant0, instant0);
      duration0.toPeriodTo((ReadableInstant) instant0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Duration duration0 = new Duration(instant0, instant0);
      duration0.toIntervalFrom(instant0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = minutes0.getPeriodType();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        duration0.toPeriod(periodType0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1L));
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      duration0.toPeriod((Chronology) julianChronology0);
      assertEquals((-3600L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Duration duration0 = new Duration(instant0, instant0);
      PeriodType periodType0 = PeriodType.weeks();
      duration0.toPeriod(periodType0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-42521587200000L));
      Days days0 = Days.SIX;
      PeriodType periodType0 = days0.getPeriodType();
      // Undeclared exception!
      try { 
        duration0.toPeriodTo((ReadableInstant) null, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -29528880000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = new Duration(384L, 4941L);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1457L), (Chronology) islamicChronology0);
      duration0.toIntervalTo(mutableDateTime0);
      assertEquals(4L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Duration duration0 = new Duration(instant0, instant0);
      PeriodType periodType0 = PeriodType.weeks();
      duration0.toPeriodFrom((ReadableInstant) instant0, periodType0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Duration duration0 = new Duration(instant0, instant0);
      duration0.toPeriodFrom((ReadableInstant) instant0);
      assertEquals(0L, duration0.getMillis());
  }
}
