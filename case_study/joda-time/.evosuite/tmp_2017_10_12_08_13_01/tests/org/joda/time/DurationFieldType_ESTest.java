/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 21:08:08 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DurationFieldType_ESTest extends DurationFieldType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldType0.isSupported((Chronology) null);
      durationFieldType0.isSupported((Chronology) null);
      DurationFieldType durationFieldType1 = DurationFieldType.days();
      durationFieldType1.isSupported((Chronology) null);
      durationFieldType1.isSupported((Chronology) null);
      durationFieldType1.isSupported((Chronology) null);
      durationFieldType1.isSupported((Chronology) null);
      durationFieldType1.getField((Chronology) null);
      durationFieldType1.isSupported((Chronology) null);
      String string0 = durationFieldType0.toString();
      DurationFieldType durationFieldType2 = DurationFieldType.weekyears();
      durationFieldType2.isSupported((Chronology) null);
      DurationFieldType.hours();
      DurationFieldType.minutes();
      String string1 = durationFieldType2.getName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      durationFieldType0.toString();
      durationFieldType0.getName();
      DurationFieldType.weeks();
      DurationFieldType.weekyears();
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).seconds();
      // Undeclared exception!
      try { 
        durationFieldType0.isSupported(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DurationFieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).weekyears();
      durationFieldType0.getField(chronology0);
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType1.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldType0.isSupported((Chronology) null);
      DurationFieldType durationFieldType1 = DurationFieldType.weeks();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).weeks();
      durationFieldType1.getField(chronology0);
      DurationFieldType durationFieldType2 = DurationFieldType.centuries();
      durationFieldType2.isSupported((Chronology) null);
      durationFieldType2.isSupported((Chronology) null);
      durationFieldType2.getField((Chronology) null);
      DurationFieldType durationFieldType3 = DurationFieldType.eras();
      durationFieldType3.getField((Chronology) null);
      durationFieldType3.isSupported((Chronology) null);
      durationFieldType3.isSupported((Chronology) null);
      DurationFieldType durationFieldType4 = DurationFieldType.years();
      durationFieldType4.isSupported((Chronology) null);
      DurationFieldType durationFieldType5 = DurationFieldType.minutes();
      durationFieldType5.isSupported((Chronology) null);
      DurationFieldType durationFieldType6 = DurationFieldType.weeks();
      durationFieldType6.getField((Chronology) null);
      DurationFieldType durationFieldType7 = DurationFieldType.years();
      durationFieldType7.getField((Chronology) null);
      durationFieldType7.isSupported((Chronology) null);
      durationFieldType7.toString();
      DurationFieldType.seconds();
      DurationFieldType.years();
      DurationFieldType.centuries();
      DurationFieldType durationFieldType8 = DurationFieldType.days();
      durationFieldType8.isSupported((Chronology) null);
      DurationFieldType durationFieldType9 = DurationFieldType.years();
      durationFieldType9.getField((Chronology) null);
      durationFieldType5.getField((Chronology) null);
      DurationFieldType durationFieldType10 = DurationFieldType.hours();
      durationFieldType10.isSupported((Chronology) null);
      DurationFieldType durationFieldType11 = DurationFieldType.millis();
      durationFieldType11.isSupported((Chronology) null);
      DurationFieldType.days();
      DurationFieldType.minutes();
      DurationFieldType durationFieldType12 = DurationFieldType.months();
      assertFalse(durationFieldType12.equals((Object)durationFieldType5));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DurationFieldType.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).months();
      // Undeclared exception!
      try { 
        durationFieldType0.isSupported(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DurationFieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).hours();
      // Undeclared exception!
      try { 
        durationFieldType0.isSupported(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DurationFieldType", e);
      }
  }
}
