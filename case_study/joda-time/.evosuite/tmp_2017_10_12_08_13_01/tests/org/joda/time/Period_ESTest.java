/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 17:49:52 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.time.temporal.TemporalAdjuster;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestBasePartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestInstant_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period(0L, 1782L);
      PeriodType.yearMonthDay();
      period0.minusMillis(0);
      Period period1 = period0.plusMonths((-2696));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      Period.parse("", periodFormatter0);
      period1.ZERO.getPeriodType();
      period0.minus((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i}wAOJ6<S%S*GAj");
      Period period0 = null;
      try {
        period0 = new Period(36L, periodType0, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Period period0 = Period.hours(3163);
      assertNotNull(period0);
      
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minus(period0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotNull(localTime1);
      
      Period period1 = Period.fieldDifference(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotSame(period0, period1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(period1, period0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Period period2 = Period.hours(3163);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period3 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      Period period4 = period0.plusSeconds(3163);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period4);
      
      int int0 = period2.getHours();
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertEquals(3163, int0);
      
      // Undeclared exception!
      try { 
        period3.withSeconds(3163);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Period period0 = Period.years((-488));
      Period period1 = period0.minusDays((-488));
      Period period2 = period1.plusYears(84);
      period2.getYears();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      PeriodType.YEAR_INDEX = 999;
      Period period0 = new Period(3748L, 3748L, periodType0);
      PeriodType.time();
      Period period1 = period0.ZERO.multipliedBy(107);
      PeriodType.yearDay();
      Period period2 = period1.withPeriodType(periodType1);
      // Undeclared exception!
      try { 
        period2.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes((-31));
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays((-31));
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.ZERO.toStandardSeconds();
      period3.minusYears(0);
      period1.ZERO.toString(periodFormatter0);
      period1.ZERO.getFieldTypes();
      // Undeclared exception!
      try { 
        period3.withWeeks(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = new Period((Object) null, (Chronology) null);
      PeriodType periodType0 = PeriodType.days();
      period0.ZERO.getValues();
      Period period1 = period0.normalizedStandard(periodType0);
      Period period2 = period1.toPeriod();
      // Undeclared exception!
      try { 
        period2.getFieldType((-1965));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Period period0 = Period.minutes((-1));
      period0.ZERO.getFieldTypes();
      period0.ZERO.toMutablePeriod();
      period0.indexOf((DurationFieldType) null);
      period0.isSupported((DurationFieldType) null);
      Period period1 = period0.plusWeeks((-23034375));
      period1.getHours();
      Period.hours((-1));
      period0.minusSeconds((-250));
      PeriodType.standard();
      PeriodType.MILLI_INDEX = (-2851);
      period0.plusSeconds(2009);
      period1.getMinutes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Duration duration0 = new Duration((-2336L), (-2336L));
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Duration duration1 = duration0.dividedBy((-2336L), roundingMode0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      Period period0 = Period.days(63);
      DateTime dateTime1 = dateTime0.withPeriodAdded(period0, 609);
      DateTime dateTime2 = dateTime1.plusSeconds(3);
      MutableDateTime mutableDateTime0 = dateTime2.toMutableDateTime();
      Days days0 = duration1.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = duration1.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths(2678);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes(3);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays(3);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.ZERO.toStandardSeconds();
      period3.minusYears(0);
      period1.ZERO.toString(periodFormatter0);
      period1.ZERO.getFieldTypes();
      Period period4 = period0.withSeconds((-845));
      PeriodType.HOUR_INDEX = 3;
      Period.years((-2059));
      Period period5 = period0.withMillis((-4405));
      period0.minusWeeks(12);
      Period period6 = Period.millis((-3780));
      period4.withHours(3);
      period1.getYears();
      period5.getYears();
      Period period7 = period1.withDays(12);
      period7.plus(period4);
      period2.plusSeconds(3);
      period4.plusDays((-845));
      period6.normalizedStandard();
      // Undeclared exception!
      try { 
        period3.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"T BNJk#b");
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period((-459L), (-459L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours((-2655));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalTime.now();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Period period0 = Period.hours(3146);
      LocalDateTime.now();
      Period.days(3146);
      PeriodType.HOUR_INDEX = 647;
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 647
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L), (-1L));
      Period period0 = mutablePeriod0.toPeriod();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Period period1 = period0.plusMonths(6);
      Period period2 = period1.plusMinutes(6);
      period2.negated();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      period2.ZERO.withMonths((-1805));
      Period.months(6);
      PeriodType.YEAR_INDEX = (-680);
      PeriodType.MONTH_INDEX = 2239;
      System.setCurrentTimeMillis((-13L));
      // Undeclared exception!
      try { 
        period2.withMonths(407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2239
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Period period0 = Period.hours(3163);
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.minus(period0);
      Period.fieldDifference(localTime1, localTime0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Period.hours(3163);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period.fieldDifference(localDateTime0, localDateTime0);
      period0.plusSeconds(3163);
      int int0 = Calendar.MILLISECOND;
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime1, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Period period0 = Period.days(12);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Period period1 = period0.withSeconds(1315);
      Period period2 = period0.multipliedBy(12);
      PeriodType.DAY_INDEX = (-23034375);
      PeriodType.yearWeekDay();
      Period period3 = period0.withMillis((-1960));
      Period period4 = period1.ZERO.withYears((-23034375));
      period4.toString();
      period1.plusYears(974);
      period1.multipliedBy(974);
      period2.minusHours(3);
      // Undeclared exception!
      try { 
        period3.withDays(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23034375
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      PeriodType.YEAR_INDEX = 999;
      Period period0 = new Period(3748L, 3748L, periodType0);
      PeriodType.time();
      Period period1 = period0.ZERO.multipliedBy(107);
      period1.withPeriodType(periodType1);
      PeriodType.YEAR_INDEX = (-13421772);
      period1.plusWeeks(999);
      // Undeclared exception!
      try { 
        period1.withYears(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13421772
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.parse("PT1S");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PeriodType.yearWeekDayTime();
      period0.ZERO.getMinutes();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      period0.normalizedStandard();
      period0.ZERO.toStandardDuration();
      Period period1 = period0.normalizedStandard();
      period1.ZERO.withDays(1030);
      FileSystemHandling.shouldAllThrowIOExceptions();
      period1.getMinutes();
      period0.withHours(348);
      Period.hours(0);
      Period.days(348);
      Period.millis((-1647));
      period1.withWeeks(0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(20000L);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.multipliedBy(1622);
      Period period2 = period1.minusMonths(1);
      PeriodType.millis();
      Period period3 = period2.minusMillis(0);
      // Undeclared exception!
      try { 
        period3.minusMinutes((-111));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(20000L);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.multipliedBy(1);
      period1.minusMonths(1);
      Period period2 = Period.millis(1);
      period2.plusSeconds((-117));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.months((-1));
      PeriodType.weeks();
      Period period1 = period0.minusWeeks((-1));
      Period period2 = period0.withYears((-1));
      Period period3 = period2.ZERO.plusHours(23034335);
      period1.minusMonths(23034335);
      PeriodType.yearMonthDay();
      period3.ZERO.plusMillis(0);
      period0.minusHours(0);
      period1.normalizedStandard();
      Period period4 = period2.minusHours((-1));
      period4.ZERO.withFields(period2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Period period0 = Period.hours(3163);
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.minus(period0);
      Period period1 = Period.fieldDifference(localTime1, localTime0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Period period2 = Period.hours(3163);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localTime1.toString();
      Period.fieldDifference(localDateTime0, localDateTime0);
      period0.plusSeconds(3163);
      period2.getHours();
      // Undeclared exception!
      try { 
        period1.withYears(2014);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period((-1), (-1), (-1), (-1));
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = period0.minusWeeks((-1));
      Period period2 = period0.withYears((-1));
      Period period3 = period2.ZERO.plusHours((-1));
      period1.minusMonths((-1));
      PeriodType.yearMonthDay();
      period0.minusHours(4);
      period1.normalizedStandard();
      Period period4 = period2.minusHours((-1));
      period4.ZERO.withFields(period2);
      period2.minusYears(4);
      period1.toStandardDuration();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      period2.ZERO.toString(periodFormatter1);
      period3.minusWeeks(1346);
      Period.days((-3924));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Weeks");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The end instant must be greater than the start instant");
      Period period0 = Period.hours(1000);
      Period period1 = period0.plusMinutes((-1502));
      period0.minus(period1);
      period1.toStandardHours();
      PeriodType.YEAR_INDEX = (-1418);
      Period period2 = Period.hours((-2352));
      PeriodType.yearWeekDayTime();
      Period period3 = period2.minusDays(5);
      Period period4 = period3.plus(period1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Period.months((-1502));
      Period period5 = period4.plusWeeks(783);
      Period.minutes((-1418));
      // Undeclared exception!
      try { 
        period5.ZERO.minusYears((-2352));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1418
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-637), (-2789), 2044, (-827), 2186);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      localDateTime0.minus((ReadablePeriod) period0);
      period0.plusYears(2044);
      mockGregorianCalendar0.getTime();
      Period period1 = period0.negated();
      period1.ZERO.plusDays(8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      period0.ZERO.toStandardMinutes();
      period1.toPeriod();
      Period.months((-2139));
      PeriodType.YEAR_INDEX = (-2789);
      // Undeclared exception!
      try { 
        period1.withMinutes((-3488));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period(365, 0, (-43), (-845), (-43), 2, 2, (-43));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      period0.withFieldAdded(durationFieldType0, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes((-14));
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays((-14));
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.ZERO.toStandardSeconds();
      // Undeclared exception!
      try { 
        period3.minusYears((-43));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Period period0 = null;
      try {
        period0 = new Period(mockHijrahDate0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes(3);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays(3);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.ZERO.toStandardSeconds();
      period3.minusYears(0);
      period1.ZERO.toString(periodFormatter0);
      period1.ZERO.getFieldTypes();
      Period period4 = period0.withSeconds((-845));
      PeriodType.HOUR_INDEX = 3;
      Period.years((-2059));
      period0.withMillis((-4405));
      PeriodType.HOUR_INDEX = 277;
      period0.minusWeeks(12);
      Period.millis((-3780));
      // Undeclared exception!
      try { 
        period4.withHours(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 277
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2528));
      dateTimeZone0.convertUTCToLocal(358L);
      DurationFieldType.weekyears();
      Instant instant0 = new Instant(358L);
      Instant instant1 = instant0.toInstant();
      instant1.toMutableDateTime();
      Instant instant2 = instant1.plus((-9223372036854775799L));
      Duration duration0 = new Duration(9223372036854775807L);
      duration0.toIntervalFrom(instant2);
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant2, duration0);
      PeriodType.days();
      Duration duration1 = new Duration(2, 2);
      Period period0 = new Period(3, (-2828), (-1384), 5, 7199992, 5, 207, 7199992);
      period0.getMonths();
      Period period1 = period0.plusMillis(2);
      period1.minusMinutes(7199992);
      // Undeclared exception!
      try { 
        period0.multipliedBy((-479));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 7199992 * -479
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.minutes((-14));
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period1 = period0.ZERO.plusDays((-14));
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period2 = period1.ZERO.withPeriodType(periodType0);
      period2.ZERO.toStandardSeconds();
      Period period3 = period2.minusYears(0);
      period0.ZERO.toString(periodFormatter0);
      period0.ZERO.getFieldTypes();
      // Undeclared exception!
      try { 
        period3.plusMinutes(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.months((-1));
      PeriodType.weeks();
      Period period1 = Period.years((-1));
      Period period2 = period0.withYears((-1));
      Period period3 = period2.ZERO.plusHours(23034375);
      period1.minusMonths(23034375);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      period3.ZERO.plusMillis(0);
      period0.minusHours(0);
      period1.normalizedStandard();
      Period period4 = period2.normalizedStandard(periodType0);
      period4.ZERO.withFields(period2);
      period4.minus(period0);
      PeriodType.yearWeekDay();
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.seconds((-1));
      PeriodType.weeks();
      Period period1 = Period.years((-1));
      Period period2 = period0.withYears((-1));
      Period period3 = period2.ZERO.plusHours(23034375);
      period1.minusMonths(23034375);
      PeriodType.yearMonthDay();
      period3.ZERO.plusMillis(0);
      period0.minusHours(0);
      period1.normalizedStandard();
      Period period4 = period2.minusMonths((-3924));
      period4.ZERO.withFields(period2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(vI-K4q%VC/Ii6Q9");
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 23034375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.minutes((-1630));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.millis();
      durationFieldTypeArray0[2] = durationFieldType2;
      Weeks weeks0 = period0.toStandardWeeks();
      PeriodType.hours();
      DurationFieldType durationFieldType3 = weeks0.getFieldType();
      durationFieldTypeArray0[3] = durationFieldType3;
      DurationFieldType durationFieldType4 = DurationFieldType.weekyears();
      durationFieldTypeArray0[4] = durationFieldType4;
      DurationFieldType durationFieldType5 = DurationFieldType.weekyears();
      durationFieldTypeArray0[5] = durationFieldType5;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1630);
      intArray0[1] = (-1630);
      PeriodType periodType0 = new PeriodType("Gh/pv'E~/z] % |y", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      DurationFieldType durationFieldType6 = weeks0.getFieldType();
      period1.withField(durationFieldType6, 2346);
      // Undeclared exception!
      try { 
        period1.withMinutes(2346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.seconds((-56));
      Period period1 = period0.minusYears(1132);
      Period period2 = period0.withDays((-2452));
      PeriodType.SECOND_INDEX = (-1691);
      Period period3 = period2.ZERO.negated();
      PeriodType.seconds();
      PeriodType.minutes();
      PeriodType.seconds();
      period2.toMutablePeriod();
      period2.getDays();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      period2.ZERO.equals(mockHijrahDate0);
      period2.getValues();
      period3.minusMillis((-367));
      Period period4 = period1.withHours(1000);
      period4.ZERO.plusDays((-523));
      // Undeclared exception!
      try { 
        period2.plusSeconds((-2452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1691
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes(3);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays(3);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.ZERO.toStandardSeconds();
      period3.minusYears(0);
      period1.ZERO.toString(periodFormatter0);
      period1.ZERO.getFieldTypes();
      Period period4 = period0.withSeconds((-845));
      PeriodType.HOUR_INDEX = 3;
      Period.years((-2059));
      Period period5 = period0.withMillis((-4405));
      period5.getSeconds();
      Period period6 = period0.minusWeeks(12);
      Period.millis((-3780));
      PeriodType.standard();
      period4.withHours(3);
      period1.getYears();
      period5.getYears();
      Period period7 = period6.withHours((-2059));
      PeriodType.SECOND_INDEX = (-57);
      // Undeclared exception!
      try { 
        period7.plus(period4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -57
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes(3);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays(3);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.ZERO.toStandardSeconds();
      // Undeclared exception!
      try { 
        period3.plusMonths(365);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Period period0 = Period.weeks(3455);
      Period period1 = period0.withHours(5062500);
      Hours hours0 = period1.toStandardHours();
      period1.plus(hours0);
      PeriodType.weeks();
      period1.plusMillis(3530);
      Period period2 = period1.plusSeconds((-1262));
      period2.negated();
      System.setCurrentTimeMillis(3530);
      period2.getMinutes();
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 20314584000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(0L);
      period0.getSeconds();
      Period period1 = period0.minusSeconds(0);
      period1.ZERO.minusSeconds(0);
      Period.weeks(0);
      Period period2 = period1.withYears(0);
      period0.toStandardWeeks();
      Period period3 = period1.withYears(13421772);
      Period period4 = period2.minusDays(0);
      Period period5 = period4.withWeeks(2056);
      period3.plusMinutes(637);
      PeriodType.WEEK_INDEX = 1017;
      // Undeclared exception!
      try { 
        period5.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1017
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      PeriodType periodType0 = PeriodType.weeks();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Period period0 = new Period((-2792L), (-2792L), periodType0, mockNullZoneChronology0);
      Days days0 = period0.toStandardDays();
      Period period1 = days0.toPeriod();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      period1.ZERO.withHours(25);
      Period period2 = period1.withWeeks(3600);
      Period.millis(1040);
      Period period3 = period2.minus(period1);
      Period period4 = period3.minusMinutes(3600);
      Period period5 = period4.withYears(3600);
      // Undeclared exception!
      try { 
        period5.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime((-2792L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withZone(uTCDateTimeZone0);
      DateTime dateTime2 = dateTime1.plusWeeks((-2033));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(dateTime2, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes(3);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays(3);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period2.toStandardSeconds();
      period3.minusYears(0);
      period1.ZERO.toString(periodFormatter0);
      period1.ZERO.getFieldTypes();
      Period period4 = period2.minusWeeks(2);
      PeriodType.HOUR_INDEX = 3;
      Period.years((-2059));
      Period period5 = period0.withMillis((-4405));
      period5.getSeconds();
      Period period6 = period0.minusWeeks(12);
      period4.plusHours((-3780));
      period4.withHours(3);
      period1.getYears();
      period5.getYears();
      Period period7 = period6.withHours((-2059));
      period7.plus(period4);
      period2.plusSeconds(3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Period period0 = new Period(3, 3736, 3, 3736);
      period0.ZERO.getYears();
      Period period1 = period0.withHours(3);
      Period.hours(0);
      PeriodType.yearDay();
      Period period2 = period1.withMonths(77);
      Period period3 = period0.toPeriod();
      PeriodType.hours();
      System.setCurrentTimeMillis(0);
      period2.minusDays(77);
      period3.plusMillis(1427);
      Period.days(8);
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.months(13421772);
      Period period1 = Period.minutes(1190);
      PeriodType.yearMonthDayTime();
      Period period2 = period0.withMinutes((-2));
      Period period3 = period0.ZERO.minusSeconds((-3736));
      period0.getMonths();
      period0.negated();
      period0.plus(period2);
      period3.getYears();
      period1.withWeeks(1523);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3736));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withDayOfMonth((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Period period0 = new Period(731L, 731L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Period period1 = period0.plusSeconds(7200000);
      Period period2 = period1.plusWeeks(990);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      period2.ZERO.withField(durationFieldType0, 7200000);
      period2.toStandardDays();
      period2.ZERO.getMinutes();
      period2.plusWeeks(7200000);
      period0.negated();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Period period0 = Period.seconds(12);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Period period1 = period0.plus((ReadablePeriod) null);
      period1.ZERO.withMonths((-8));
      PeriodType.yearWeekDayTime();
      Period period2 = Period.millis(12);
      period2.minusDays((-738));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period.hours(3163);
      // Undeclared exception!
      try { 
        period0.withDays(3163);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.months(0);
      PeriodType.seconds();
      Period period1 = Period.days((-1030));
      PeriodType.yearWeekDay();
      PeriodType.yearWeekDay();
      period1.ZERO.minusYears(977);
      Period.days(977);
      PeriodType.time();
      Period period2 = period0.withMonths(1523);
      period2.ZERO.getDays();
      period2.normalizedStandard();
      Period.months(0);
      DurationFieldType.eras();
      // Undeclared exception!
      try { 
        Period.parse("Rks");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Rks\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.millis(2);
      Object object0 = new Object();
      period0.equals(object0);
      Period period1 = period0.ZERO.plusSeconds(647);
      Period period2 = period0.withMinutes(2);
      Period period3 = period0.negated();
      Period period4 = period3.withYears(8);
      period0.equals(period2);
      Period period5 = Period.seconds((-24));
      Period period6 = Period.weeks((-24));
      period6.ZERO.getSeconds();
      period4.withHours(5);
      period6.toStandardMinutes();
      period5.minusDays((-24));
      Period.seconds((-483));
      period0.withHours(0);
      period1.withMinutes(3585);
      Period period7 = period4.plusMinutes(0);
      period3.getMonths();
      Period period8 = period1.withHours(0);
      period5.getWeeks();
      period0.minusHours((-168));
      period7.ZERO.normalizedStandard((PeriodType) null);
      period1.getMinutes();
      period7.minusHours(8);
      period8.toStandardWeeks();
      Period.minutes((-24));
      period3.toPeriod();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.millis((-933));
      PeriodType.DAY_INDEX = (-933);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Period period1 = period0.plusMonths((-933));
      // Undeclared exception!
      try { 
        period1.minusDays((-933));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -933
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.hours(7);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(25200, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period1 = Period.weeks(7);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType periodType1 = PeriodType.standard();
      assertEquals(8, periodType1.size());
      assertEquals("Standard", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      Weeks weeks1 = period1.toStandardWeeks();
      assertEquals(7, weeks1.getWeeks());
      assertEquals(1, weeks1.size());
      assertNotSame(period1, period0);
      assertNotSame(weeks1, weeks0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotNull(weeks1);
      
      Period period2 = period0.withMonths((-3));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      DurationFieldType[] durationFieldTypeArray0 = period2.getFieldTypes();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(durationFieldTypeArray0);
      
      Period period3 = period0.withWeeks(47);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      int int0 = period1.getDays();
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertEquals(0, int0);
      
      Period period4 = period2.minusMonths((-3));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertNotNull(period4);
      
      Period period5 = period1.withMinutes(0);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertNotNull(period5);
      
      Period period6 = period3.negated();
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period6);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertNotSame(period6, period2);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period2));
      assertNotNull(period6);
      
      Period period7 = period1.minus(period3);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period7);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period6);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period7, period0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period2);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period2));
      assertNotNull(period7);
      
      period6.getHours();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Duration duration0 = Duration.millis((-1L));
      Instant instant0 = new Instant();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0, periodType0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      period0.ZERO.isSupported(durationFieldType0);
      Duration duration1 = period0.toDurationTo(instant0);
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      Period period1 = new Period(duration2, instant0, periodType0);
      // Undeclared exception!
      try { 
        period1.plusYears((-2390));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.days(28181250);
      Period period1 = Period.hours((-4214));
      PeriodType.MILLI_INDEX = 3;
      period0.getMinutes();
      Duration duration0 = Duration.ZERO;
      period0.plusMonths(3);
      period1.withMillis(188);
      Period period2 = period0.plusWeeks(28181250);
      Period period3 = period1.withFields(period0);
      period2.minusMillis(0);
      period2.plusMonths((-617));
      ISOPeriodFormat.standard();
      period0.plusMinutes(3);
      period2.getHours();
      period1.minusMinutes((-4214));
      period3.withMillis((-4214));
      period1.toStandardDays();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1036L, (DateTimeZone) null);
      Period period0 = Period.seconds(0);
      Interval interval0 = new Interval(dateTime0, period0);
      Period period1 = interval0.toPeriod();
      Period period2 = period1.withMillis((-2985));
      Period period3 = period2.minus(period1);
      Period period4 = period3.toPeriod();
      Period period5 = period4.plus(period0);
      Period.hours(0);
      period0.getSeconds();
      period5.toStandardSeconds();
      period4.minusHours(0);
      PeriodType.WEEK_INDEX = 4;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      period2.withField(durationFieldType0, 0);
      period4.getMillis();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      PeriodType.yearMonthDay();
      PeriodType.yearWeekDay();
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      periodFormatter0.withParseType(periodType0);
      Period period0 = Period.days((-3924));
      period0.toStandardDuration();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.days(28181228);
      Period period1 = Period.hours((-4183));
      PeriodType.MILLI_INDEX = 3;
      period0.getMinutes();
      period0.toStandardDuration();
      period0.plusMonths(3);
      period1.withMillis(188);
      Period period2 = period0.plusWeeks(28181228);
      Period period3 = period1.withFields(period0);
      PeriodType periodType0 = PeriodType.yearDay();
      period0.withPeriodType(periodType0);
      period3.minusMonths(3);
      period0.plusMinutes(3);
      period2.getHours();
      // Undeclared exception!
      try { 
        period3.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 40580968789
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Period period0 = null;
      try {
        period0 = new Period(673L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes(3);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays(3);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.minusYears(0);
      period1.ZERO.toString(periodFormatter0);
      period1.ZERO.getFieldTypes();
      period0.withSeconds((-845));
      PeriodType.HOUR_INDEX = (-1);
      Period.years((-2059));
      Period period4 = period0.withMillis((-4405));
      period4.getSeconds();
      period0.minusWeeks(2014);
      Period period5 = Period.millis((-3780));
      // Undeclared exception!
      try { 
        period5.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.hours((-4029));
      PeriodType.dayTime();
      Period.millis(1350);
      FileSystemHandling.shouldAllThrowIOExceptions();
      period0.withDays(1000);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PeriodType.minutes();
      PeriodType periodType0 = PeriodType.seconds();
      periodType0.withWeeksRemoved();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period((-874), (-874), (-874), (-874));
      assertNotNull(period0);
      
      Duration duration0 = Duration.standardMinutes((-1L));
      assertEquals((-60000L), duration0.getMillis());
      assertEquals((-60L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals((-60000L), duration0.getMillis());
      assertEquals((-60L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-1), minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals((-60000L), duration0.getMillis());
      assertEquals((-60L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-1), minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Period period1 = period0.plus(weeks0);
      assertEquals((-60000L), duration0.getMillis());
      assertEquals((-60L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-1), minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period1.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Duration duration0 = Duration.standardHours(163L);
      assertEquals(9780L, duration0.getStandardMinutes());
      assertEquals(586800L, duration0.getStandardSeconds());
      assertEquals(163L, duration0.getStandardHours());
      assertEquals(586800000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(9780L, duration0.getStandardMinutes());
      assertEquals(586800L, duration0.getStandardSeconds());
      assertEquals(163L, duration0.getStandardHours());
      assertEquals(586800000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardDays());
      assertEquals(586800, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Hours hours0 = seconds0.toStandardHours();
      assertEquals(9780L, duration0.getStandardMinutes());
      assertEquals(586800L, duration0.getStandardSeconds());
      assertEquals(163L, duration0.getStandardHours());
      assertEquals(586800000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardDays());
      assertEquals(586800, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(163, hours0.getHours());
      assertNotNull(hours0);
      
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(9780L, duration0.getStandardMinutes());
      assertEquals(586800L, duration0.getStandardSeconds());
      assertEquals(163L, duration0.getStandardHours());
      assertEquals(586800000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardDays());
      assertEquals(586800, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(163, hours0.getHours());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals(9780L, duration0.getStandardMinutes());
      assertEquals(586800L, duration0.getStandardSeconds());
      assertEquals(163L, duration0.getStandardHours());
      assertEquals(586800000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardDays());
      assertEquals(586800, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(163, hours0.getHours());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      Period period0 = new Period((-1L), periodType1);
      assertEquals(9780L, duration0.getStandardMinutes());
      assertEquals(586800L, duration0.getStandardSeconds());
      assertEquals(163L, duration0.getStandardHours());
      assertEquals(586800000L, duration0.getMillis());
      assertEquals(6L, duration0.getStandardDays());
      assertEquals(586800, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(163, hours0.getHours());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusSeconds(12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(9);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = Period.minutes(3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      assertFalse(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      Period period3 = period2.ZERO.plusDays(3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.MINUTE_INDEX = 2;
      PeriodType.SECOND_INDEX = 9;
      Period period4 = period3.ZERO.withPeriodType(periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Period period5 = Period.years(2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertNotNull(period5);
      
      Period period6 = period4.minusYears(0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertSame(period4, period6);
      assertNotSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period6, period5);
      assertSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertNotNull(period6);
      
      String string0 = period2.ZERO.toString(periodFormatter0);
      assertFalse(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertNotNull(string0);
      assertEquals("", string0);
      
      DurationFieldType[] durationFieldTypeArray0 = period2.ZERO.getFieldTypes();
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertNotNull(durationFieldTypeArray0);
      
      // Undeclared exception!
      try { 
        period0.withSeconds((-845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Days days0 = seconds0.toStandardDays();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertNotNull(days0);
      
      Seconds seconds1 = days0.toStandardSeconds();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0, seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertSame(seconds0, seconds1);
      assertSame(seconds1, seconds0);
      assertNotNull(seconds1);
      
      PeriodType periodType0 = seconds1.getPeriodType();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0, seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertSame(seconds0, seconds1);
      assertSame(seconds1, seconds0);
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0, seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotSame(period0, period1);
      assertSame(seconds0, seconds1);
      assertSame(seconds1, seconds0);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.withHours(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period((-1499), (-1499), (-1872), 87, 87, 27, 87, (-105));
      assertNotNull(period0);
      
      int int0 = period0.getWeeks();
      assertEquals((-1872), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.minutes((-1));
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = Period.years((-1));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.normalizedStandard(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period2.ZERO.plusHours(23034375);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertNotNull(period3);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertEquals(3, periodType1.size());
      assertEquals("YearMonthDay", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      Period period4 = period3.ZERO.plusMillis(0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertNotNull(period4);
      
      Period period5 = period0.minusHours(0);
      assertSame(period0, period5);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period3));
      assertNotNull(period5);
      
      Period period6 = period1.normalizedStandard();
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period5));
      assertTrue(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertNotNull(period6);
      
      // Undeclared exception!
      try { 
        period2.minusMonths((-3924));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(7199999L, periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusWeeks(2601);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.minutes((-2579));
      assertNotNull(period0);
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Period period1 = Period.years((-107));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.minusSeconds(0);
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      int int1 = period2.getWeeks();
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Seconds seconds0 = period2.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals((-154740), seconds0.getSeconds());
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(seconds0);
      
      // Undeclared exception!
      try { 
        Period.parse("R74mmC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"R74mmC\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.days(8);
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      
      Period period1 = period0.minusHours(8);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.ZERO.minusDays((-4096));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(8);
      assertEquals(8, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertNotNull(testBaseSingleFieldPeriod_Single0);
      
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      assertEquals(8, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = period0.ZERO.indexOf(durationFieldType0);
      assertEquals(8, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      Hours hours0 = period1.toStandardHours();
      assertEquals(184, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotNull(hours0);
      
      int int2 = period1.getDays();
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      
      Period period3 = period1.minusWeeks((-1044));
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertNotNull(period3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period(2613, 0, (-1053), 2613);
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(273);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType.MILLI_INDEX = 273;
      Period period2 = period1.withHours(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = period2.ZERO.get(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals(0, int0);
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale((Locale) null);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      
      String string0 = period0.toString(periodFormatter1);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = period1.getDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      assertEquals(273, int1);
      
      int int2 = period2.getMonths();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = period0.getSeconds();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1053), int3);
      
      // Undeclared exception!
      try { 
        period2.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 273
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Period period0 = Period.days(86400);
      assertNotNull(period0);
      
      Period period1 = Period.hours(1193);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period0.getDays();
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertEquals(86400, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNotNull(mockNullZoneChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((-1883L), true, (-3308L));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-1883L), long0);
      
      Chronology chronology0 = mockNullZoneChronology0.withZone(dateTimeZone0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("", chronology0.toString());
      assertSame(mockNullZoneChronology0, chronology0);
      assertSame(chronology0, mockNullZoneChronology0);
      assertNotNull(chronology0);
      
      Period period0 = null;
      try {
        period0 = new Period(4173L, 1245L, periodType0, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period((Object) null);
      assertNotNull(period0);
      
      Period period1 = period0.minusDays((-3239));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.withYears((-3239));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period1.withDays((-3239));
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      PeriodType.YEAR_INDEX = (-3239);
      Period period4 = period1.plusMillis(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertNotNull(period4);
      
      // Undeclared exception!
      try { 
        period4.ZERO.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3239
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.hours((-1278));
      assertNotNull(period0);
      
      Period period1 = Period.minutes(0);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.withHours((-1278));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = Period.years(0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      int int0 = period3.getWeeks();
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertEquals(0, int0);
      
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(seconds0);
      
      Period period4 = period0.minusSeconds(0);
      assertSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertSame(period4, period0);
      assertNotSame(period4, period2);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period4);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      int int1 = period0.getSeconds();
      assertSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      PeriodType.DAY_INDEX = (-3594);
      PeriodType.MINUTE_INDEX = 0;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3594
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType.MILLI_INDEX = 0;
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(0, periodType2.size());
      assertEquals("SecondsNoSeconds", periodType2.getName());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertNotNull(periodType2);
      
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotNull(testBasePartial_MockPartial0);
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotNull(chronology0);
      
      Period period0 = new Period((Object) null, periodType1, chronology0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.normalizedStandard();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.minusMinutes(0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period2.ZERO.plusYears((-837));
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      Period period4 = period1.normalizedStandard();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Period period5 = period4.plusSeconds(0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertSame(period4, period5);
      assertNotSame(period4, period0);
      assertSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period1));
      assertNotNull(period5);
      
      PeriodType periodType3 = PeriodType.yearDay();
      assertEquals(2, periodType3.size());
      assertEquals("YearDay", periodType3.getName());
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertNotNull(periodType3);
      
      Period period6 = period1.withFields(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertTrue(period6.equals((Object)period1));
      assertTrue(period6.equals((Object)period5));
      assertTrue(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertNotNull(period6);
      
      Period period7 = period1.minusWeeks(0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertSame(period7, period1);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertTrue(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertTrue(period7.equals((Object)period4));
      assertTrue(period7.equals((Object)period5));
      assertNotNull(period7);
      
      Period period8 = period1.withSeconds(0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period8);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period5);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertTrue(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertTrue(period8.equals((Object)period4));
      assertTrue(period8.equals((Object)period5));
      assertTrue(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertTrue(period8.equals((Object)period6));
      assertNotNull(period8);
      
      MutablePeriod mutablePeriod0 = period8.toMutablePeriod();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period8);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period5);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period8));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertTrue(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period0));
      assertTrue(period8.equals((Object)period4));
      assertTrue(period8.equals((Object)period5));
      assertTrue(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertTrue(period8.equals((Object)period6));
      assertNotNull(mutablePeriod0);
      
      Period period9 = period0.plusMillis(0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period6);
      assertSame(period9, period0);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period6));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period4));
      assertNotNull(period9);
      
      Period period10 = period6.withPeriodType(periodType2);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(0, periodType2.size());
      assertEquals("SecondsNoSeconds", periodType2.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period2);
      assertNotSame(period10, period9);
      assertNotSame(period10, period1);
      assertNotSame(period10, period3);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period0);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType3);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period9);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period10);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period8);
      assertNotSame(period1, period9);
      assertNotSame(period1, period10);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period9);
      assertNotSame(period6, period8);
      assertNotSame(period6, period4);
      assertNotSame(period6, period7);
      assertNotSame(period6, period5);
      assertNotSame(period6, period10);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period9));
      assertTrue(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period8));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertTrue(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period9));
      assertTrue(period6.equals((Object)period1));
      assertTrue(period6.equals((Object)period5));
      assertTrue(period6.equals((Object)period8));
      assertTrue(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertNotNull(period10);
      
      Period period11 = period2.plusYears(0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(period11, period4);
      assertNotSame(period11, period1);
      assertNotSame(period11, period5);
      assertNotSame(period11, period8);
      assertNotSame(period11, period7);
      assertNotSame(period11, period10);
      assertNotSame(period11, period3);
      assertNotSame(period11, period6);
      assertSame(period11, period2);
      assertSame(period11, period0);
      assertSame(period11, period9);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period9);
      assertSame(period0, period11);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period8);
      assertNotSame(period0, period10);
      assertNotSame(period0, period4);
      assertSame(period0, period2);
      assertSame(period2, period9);
      assertNotSame(period2, period7);
      assertSame(period2, period11);
      assertNotSame(period2, period5);
      assertNotSame(period2, period8);
      assertNotSame(period2, period10);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period2, period6);
      assertSame(period2, period0);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period6));
      assertNotNull(period11);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.weeks((-2119));
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis((-2119));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.withWeeks((-2119));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period1.withMillis(7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertNotNull(period3);
      
      Period period4 = Period.years(5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Period period5 = period4.plusSeconds(0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertSame(period5, period4);
      assertNotSame(period5, period2);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertNotNull(period5);
      
      int int0 = period5.getYears();
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertSame(period5, period4);
      assertNotSame(period5, period2);
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertEquals(5, int0);
      
      Period period6 = period1.normalizedStandard();
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertNotNull(period6);
      
      Period period7 = Period.days(0);
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertNotNull(period7);
      
      int int1 = period7.getHours();
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Period period8 = period4.minusSeconds((-2119));
      assertNotSame(period4, period8);
      assertNotSame(period4, period6);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period5);
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period5));
      assertNotNull(period8);
      
      PeriodType.SECOND_INDEX = (-2119);
      Period period9 = Period.weeks(5);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period4);
      assertNotSame(period9, period8);
      assertNotSame(period9, period1);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertNotNull(period9);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Duration duration0 = new Duration(807L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(807L, duration0.getMillis());
      assertNotNull(duration0);
      
      Days days0 = duration0.toStandardDays();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(807L, duration0.getMillis());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(807L, duration0.getMillis());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertNotNull(period0);
      
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(1542);
      assertEquals(1542, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertNotNull(testBaseSingleFieldPeriod_Single0);
      
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      assertEquals(1542, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = testBaseSingleFieldPeriod_Single0.get(durationFieldType0);
      assertEquals(1542, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1542, int0);
      
      Period period1 = period0.ZERO.withField(durationFieldType0, 3148);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(807L, duration0.getMillis());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1542, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType.YEAR_INDEX = 1542;
      Period period2 = period0.minusMillis(1899);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(807L, duration0.getMillis());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      // Undeclared exception!
      try { 
        period2.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1542
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(period0);
      
      Weeks weeks0 = period0.ZERO.toStandardWeeks();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Period period1 = period0.negated();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period0.plusMillis(1827);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = new Period(3050L, 3050L);
      assertNotNull(period0);
      
      Period period1 = period0.withYears(0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.minus(period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period0.withDays(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      assertNotNull(period3);
      
      Period period4 = period3.withSeconds(0);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period3.equals((Object)period2));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Period period5 = period1.plusMonths(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertSame(period5, period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period4));
      assertNotNull(period5);
      
      Period period6 = period0.plusWeeks(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertSame(period6, period0);
      assertNotSame(period6, period2);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period4));
      assertTrue(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period4));
      assertTrue(period6.equals((Object)period2));
      assertTrue(period6.equals((Object)period1));
      assertTrue(period6.equals((Object)period5));
      assertNotNull(period6);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(20000L);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(1);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.minusWeeks(0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotSame(period0, period1);
      assertSame(period0, period2);
      assertNotSame(period2, period1);
      assertSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      // Undeclared exception!
      try { 
        period2.plusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = Period.millis((-2040));
      assertNotNull(period0);
      
      Days days0 = period0.ZERO.toStandardDays();
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = period0.ZERO.getYears();
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals((-2040L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      Period period1 = period0.plusYears((-2040));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals((-2), seconds0.getSeconds());
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertNotNull(seconds0);
      
      Period period2 = period1.minusMonths(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      // Undeclared exception!
      try { 
        period2.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("P");
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.toString());
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      
      DateTime dateTime0 = new DateTime(812L, (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(812L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTime dateTime1 = dateTime0.withFields(partial0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(812L, dateTime0.getMillis());
      assertEquals(0, partial0.size());
      assertEquals(812L, dateTime1.getMillis());
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      
      Period period0 = new Period(dateTime1, dateTime0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(812L, dateTime0.getMillis());
      assertEquals(0, partial0.size());
      assertEquals(812L, dateTime1.getMillis());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("P", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(812L, dateTime0.getMillis());
      assertEquals(0, partial0.size());
      assertEquals(812L, dateTime1.getMillis());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.minusDays((-3980));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = new Period(0, 0, 292278993, 292278993, 0, 292278993, (-1447), (-3307));
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.ZERO.getPeriodType();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.HOUR_INDEX = 0;
      PeriodType.HOUR_INDEX = 0;
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
      
      Period period1 = period0.plusYears(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      int int1 = period0.getWeeks();
      assertSame(period0, period1);
      assertFalse(int1 == int0);
      assertEquals(292278993, int1);
      
      Period period2 = period0.plus(period1);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period2.ZERO.multipliedBy((-316));
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period1, period2);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      Period period4 = period1.ZERO.withDays(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertTrue(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Period period5 = period2.minusDays((-3723));
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertNotNull(period5);
      
      Period period6 = Period.days((-5));
      assertNotSame(period6, period3);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertNotNull(period6);
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        Period.parse("Hours", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Hours\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.seconds(1447);
      assertNotNull(period0);
      
      Period period1 = period0.minusHours(1447);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.withWeeks(1447);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.WEEK_INDEX = (-132);
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -132
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = new Period(1000L, 0L, (Chronology) null);
      assertNotNull(period0);
      
      PeriodType.WEEK_INDEX = (-2848);
      Period period1 = period0.ZERO.withSeconds((-2848));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.plusSeconds(1229);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period2.plus(period0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period2.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2848
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.months((-1));
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = Period.years((-1));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P-1M
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period(1120L, (-2520L), (Chronology) null);
      assertNotNull(period0);
      
      Period period1 = period0.multipliedBy(4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(9);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = Period.minutes(3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      assertTrue(periodFormatter0.isPrinter());
      assertFalse(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      Period period3 = period2.ZERO.plusDays(3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType.MINUTE_INDEX = 2;
      Period period4 = period3.ZERO.withPeriodType(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Period period5 = period4.minusYears(0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertSame(period4, period5);
      assertNotSame(period4, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertSame(period5, period4);
      assertNotSame(period5, period0);
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertNotNull(period5);
      
      String string0 = period2.ZERO.toString(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertFalse(periodFormatter0.isParser());
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      DurationFieldType[] durationFieldTypeArray0 = period2.ZERO.getFieldTypes();
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(durationFieldTypeArray0);
      
      Period period6 = period0.withSeconds((-845));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertNotNull(period6);
      
      PeriodType.HOUR_INDEX = (-1);
      Period period7 = Period.years((-2059));
      assertNotSame(period7, period0);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertNotNull(period7);
      
      Period period8 = period0.withMillis((-4405));
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period8, period5);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertNotNull(period8);
      
      int int0 = period8.getSeconds();
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period8, period5);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period4);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period4));
      assertEquals(2, int0);
      
      Period period9 = period0.minusWeeks(12);
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period9, period7);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period8);
      assertNotSame(period9, period6);
      assertNotSame(period9, period3);
      assertNotSame(period9, period4);
      assertNotSame(period9, period5);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period5));
      assertNotNull(period9);
      
      Period period10 = Period.millis((-3780));
      assertNotSame(period10, period0);
      assertNotSame(period10, period4);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertNotSame(period10, period2);
      assertNotSame(period10, period7);
      assertNotSame(period10, period3);
      assertNotSame(period10, period6);
      assertNotSame(period10, period5);
      assertNotSame(period10, period8);
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period8));
      assertNotNull(period10);
      
      // Undeclared exception!
      try { 
        period6.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.days(28181250);
      assertNotNull(period0);
      
      Period period1 = Period.hours((-4214));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType.MILLI_INDEX = 3;
      int int0 = period0.getMinutes();
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, int0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(2434860028181250L, duration0.getMillis());
      assertEquals(40581000469L, duration0.getStandardMinutes());
      assertEquals(28181250L, duration0.getStandardDays());
      assertEquals(2434860028181L, duration0.getStandardSeconds());
      assertEquals(676350007L, duration0.getStandardHours());
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertNotNull(duration0);
      
      Period period2 = period0.plusMonths(3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period1.withMillis(188);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertNotNull(period3);
      
      Period period4 = period0.plusWeeks(28181250);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertNotNull(period4);
      
      Period period5 = period1.withFields(period0);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertNotNull(period5);
      
      Period period6 = period4.minusMillis(0);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period4, period0);
      assertSame(period4, period6);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period6, period1);
      assertSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertNotNull(period6);
      
      Period period7 = period0.plusMinutes(3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period5);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period5));
      assertNotNull(period7);
      
      int int1 = period4.getHours();
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period4, period0);
      assertSame(period4, period6);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period7);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period5));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.hours(4);
      assertNotNull(period0);
      
      Period period1 = period0.withYears(4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        Period.parse("ZlS/v$8yr7,6VW-Z", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"ZlS/v$8yr7,6VW-Z\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.weeks(10080);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 6096384000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.days((-708));
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes(1176);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(1, weeks0.size());
      assertEquals((-101), weeks0.getWeeks());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(weeks0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Interval interval0 = new Interval(dateTime0, (ReadableDuration) null);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, periodType1.size());
      assertEquals("YearMonthDayNoDays", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(3, periodType2.size());
      assertEquals("YearMonthDay", periodType2.getName());
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      assertNotNull(periodType2);
      
      Period period0 = interval0.toPeriod(periodType1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, periodType1.size());
      assertEquals("YearMonthDayNoDays", periodType1.getName());
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertNotNull(period0);
      
      int int0 = period0.getYears();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, periodType1.size());
      assertEquals("YearMonthDayNoDays", periodType1.getName());
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.years((-1));
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period((-108L), (PeriodType) null, (Chronology) null);
      assertNotNull(period0);
      
      Period period1 = period0.withMonths(183);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = Period.minutes(0);
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      Period period1 = new Period(3600000L, 3600000L, periodType1);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.minusMonths(0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      Period period3 = period2.withPeriodType(periodType0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertSame(period1, period2);
      assertSame(period1, period3);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertSame(period2, period3);
      assertNotSame(period2, period0);
      assertSame(period3, period1);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2528));
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(215L, dateTimeZone0);
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period(localDateTime0, localDateTime0, (PeriodType) null);
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(358L);
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-2170L), long0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Instant instant0 = new Instant(358L);
      assertEquals(358L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.toInstant();
      assertEquals(358L, instant0.getMillis());
      assertEquals(358L, instant1.getMillis());
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      
      boolean boolean0 = instant0.isBefore(215L);
      assertEquals(358L, instant0.getMillis());
      assertSame(instant0, instant1);
      assertFalse(boolean0);
      
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTime();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(358L, instant0.getMillis());
      assertEquals(358L, instant1.getMillis());
      assertEquals(358L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(mutableDateTime0);
      
      Instant instant2 = instant1.plus((-9223372036854775799L));
      assertEquals(358L, instant0.getMillis());
      assertEquals(358L, instant1.getMillis());
      assertEquals((-9223372036854775441L), instant2.getMillis());
      assertNotSame(instant0, instant2);
      assertSame(instant0, instant1);
      assertNotSame(instant1, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertNotNull(instant2);
      
      Duration duration0 = new Duration(9223372036854775807L);
      assertEquals(153722867280912L, duration0.getStandardMinutes());
      assertEquals(9223372036854775807L, duration0.getMillis());
      assertEquals(2562047788015L, duration0.getStandardHours());
      assertEquals(9223372036854775L, duration0.getStandardSeconds());
      assertEquals(106751991167L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant2, duration0);
      assertEquals(358L, instant0.getMillis());
      assertEquals(358L, instant1.getMillis());
      assertEquals((-9223372036854775441L), instant2.getMillis());
      assertEquals(153722867280912L, duration0.getStandardMinutes());
      assertEquals(9223372036854775807L, duration0.getMillis());
      assertEquals(2562047788015L, duration0.getStandardHours());
      assertEquals(9223372036854775L, duration0.getStandardSeconds());
      assertEquals(106751991167L, duration0.getStandardDays());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertNotNull(mutablePeriod0);
      
      Period period1 = period0.ZERO.withFields(mutablePeriod0);
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(358L, instant0.getMillis());
      assertEquals(358L, instant1.getMillis());
      assertEquals((-9223372036854775441L), instant2.getMillis());
      assertEquals(153722867280912L, duration0.getStandardMinutes());
      assertEquals(9223372036854775807L, duration0.getMillis());
      assertEquals(2562047788015L, duration0.getStandardHours());
      assertEquals(9223372036854775L, duration0.getStandardSeconds());
      assertEquals(106751991167L, duration0.getStandardDays());
      assertNotSame(period0, period1);
      assertNotSame(instant0, instant2);
      assertSame(instant0, instant1);
      assertNotSame(instant1, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertNotSame(period1, period0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      Duration duration1 = period1.toDurationTo(instant1);
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(358L, instant0.getMillis());
      assertEquals(358L, instant1.getMillis());
      assertEquals((-9223372036854775441L), instant2.getMillis());
      assertEquals(153722867280912L, duration0.getStandardMinutes());
      assertEquals(9223372036854775807L, duration0.getMillis());
      assertEquals(2562047788015L, duration0.getStandardHours());
      assertEquals(9223372036854775L, duration0.getStandardSeconds());
      assertEquals(106751991167L, duration0.getStandardDays());
      assertEquals(153722867280912L, duration1.getStandardMinutes());
      assertEquals(9223372036854775807L, duration1.getMillis());
      assertEquals(2562047788015L, duration1.getStandardHours());
      assertEquals(9223372036854775L, duration1.getStandardSeconds());
      assertEquals(106751991167L, duration1.getStandardDays());
      assertNotSame(period0, period1);
      assertNotSame(instant0, instant2);
      assertSame(instant0, instant1);
      assertNotSame(instant1, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertNotSame(duration0, duration1);
      assertNotSame(period1, period0);
      assertNotSame(duration1, duration0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      
      // Undeclared exception!
      try { 
        period0.ZERO.withField(durationFieldType0, 7200000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weekyears'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = new Period(6, 2131, 161, 2131);
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(149623L, duration0.getStandardSeconds());
      assertEquals(2493L, duration0.getStandardMinutes());
      assertEquals(149623131L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Period period1 = period0.ZERO.minusMinutes(97);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period0.getYears();
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, int0);
      
      Period period2 = period1.withMinutes(1894);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      PeriodType.MILLI_INDEX = 0;
      Period period3 = period0.plusMillis(161);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertNotNull(period3);
      
      // Undeclared exception!
      try { 
        Period.parse("R=GP0R=qG#L!aBuS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"R=GP0R=qG#L!aBuS\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((-3599999L), periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Seconds seconds1 = minutes0.toStandardSeconds();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds1.size());
      assertEquals(0, seconds1.getSeconds());
      assertSame(seconds0, seconds1);
      assertSame(seconds1, seconds0);
      assertNotNull(seconds1);
      
      PeriodType periodType1 = seconds1.getPeriodType();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds1.size());
      assertEquals(0, seconds1.getSeconds());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertSame(seconds0, seconds1);
      assertSame(seconds1, seconds0);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.minutes(2517);
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      Period period1 = duration0.toPeriodTo((ReadableInstant) null);
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertEquals(2517, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(minutes0);
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertEquals(2517, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertEquals(2517, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(seconds0);
      
      Weeks weeks1 = seconds0.toStandardWeeks();
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertEquals(2517, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertSame(weeks0, weeks1);
      assertSame(weeks1, weeks0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(weeks1);
      
      DurationFieldType durationFieldType0 = weeks1.getFieldType();
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertEquals(2517, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks1.size());
      assertEquals(0, weeks1.getWeeks());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertSame(weeks0, weeks1);
      assertSame(weeks1, weeks0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(durationFieldType0);
      
      Duration duration1 = duration0.withDurationAdded(2362L, 0);
      assertEquals(151020L, duration0.getStandardSeconds());
      assertEquals(151020000L, duration0.getMillis());
      assertEquals(41L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(2517L, duration0.getStandardMinutes());
      assertEquals(2517L, duration1.getStandardMinutes());
      assertEquals(41L, duration1.getStandardHours());
      assertEquals(151020000L, duration1.getMillis());
      assertEquals(1L, duration1.getStandardDays());
      assertEquals(151020L, duration1.getStandardSeconds());
      assertNotSame(period0, period1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertFalse(period0.equals((Object)period1));
      assertNotNull(duration1);
      
      TestInstant_Basics testInstant_Basics0 = null;
      try {
        testInstant_Basics0 = new TestInstant_Basics("<S-cZnN|IY");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = Period.months(0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = period0.ZERO.isSupported(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertTrue(boolean0);
      
      Period period1 = period0.minusSeconds((-6));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period1.ZERO.getYears();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(0, int0);
      
      int int1 = period0.getHours();
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Period period2 = period0.withSeconds((-6));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      Period period3 = period1.minusMinutes(1415);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertNotNull(period3);
      
      Period period4 = period0.negated();
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period4);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period5 = period1.ZERO.withPeriodType(periodType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertNotNull(period5);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Period period6 = period0.withMonths(0);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period5);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertTrue(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertNotNull(period6);
      
      Period period7 = period1.minusMonths((-363));
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period7, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period5);
      assertNotSame(period7, period0);
      assertNotSame(period7, period6);
      assertNotSame(period7, period3);
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period3));
      assertNotNull(period7);
      
      boolean boolean1 = period4.equals(mockHijrahDate0);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Period period8 = period1.withYears(634);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period1, period8);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period7);
      assertNotSame(period8, period5);
      assertNotSame(period8, period2);
      assertNotSame(period8, period0);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period4);
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertNotNull(period8);
      
      int int2 = period3.getMonths();
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period1, period8);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period7);
      assertNotSame(period3, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertEquals(0, int2);
      
      Period period9 = period2.minusDays(5989);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period3);
      assertNotSame(period9, period8);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period9);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertNotSame(period2, period3);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period3));
      assertNotNull(period9);
      
      Period period10 = period1.normalizedStandard((PeriodType) null);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period10, period8);
      assertNotSame(period10, period4);
      assertNotSame(period10, period1);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period9);
      assertNotSame(period10, period5);
      assertNotSame(period10, period7);
      assertNotSame(period1, period8);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period10);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period9);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period3));
      assertTrue(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertNotNull(period10);
      
      Period period11 = period1.minus(period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period11, period4);
      assertNotSame(period11, period3);
      assertNotSame(period11, period2);
      assertNotSame(period11, period7);
      assertNotSame(period11, period8);
      assertNotSame(period11, period9);
      assertNotSame(period11, period5);
      assertNotSame(period11, period10);
      assertNotSame(period11, period1);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period1, period8);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period10);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period9);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period4, period11);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period9);
      assertNotSame(period4, period5);
      assertNotSame(period4, period8);
      assertNotSame(period4, period7);
      assertNotSame(period4, period10);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period7));
      assertTrue(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period5));
      assertTrue(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period11);
      
      int int3 = period11.getSeconds();
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period11, period4);
      assertNotSame(period11, period3);
      assertNotSame(period11, period2);
      assertNotSame(period11, period7);
      assertNotSame(period11, period8);
      assertNotSame(period11, period9);
      assertNotSame(period11, period5);
      assertNotSame(period11, period10);
      assertNotSame(period11, period1);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period1, period8);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period10);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period9);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period4, period11);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period9);
      assertNotSame(period4, period5);
      assertNotSame(period4, period8);
      assertNotSame(period4, period7);
      assertNotSame(period4, period10);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period7));
      assertTrue(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period5));
      assertTrue(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period11));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period1));
      assertEquals(6, int3);
      
      Period period12 = period9.plusDays(0);
      assertNotSame(period0, period8);
      assertNotSame(period0, period4);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period5);
      assertNotSame(period0, period11);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertNotSame(period0, period12);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period5);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period11);
      assertNotSame(period9, period3);
      assertNotSame(period9, period8);
      assertNotSame(period9, period1);
      assertNotSame(period9, period4);
      assertNotSame(period9, period10);
      assertSame(period9, period12);
      assertNotSame(period12, period4);
      assertNotSame(period12, period11);
      assertNotSame(period12, period7);
      assertNotSame(period12, period2);
      assertNotSame(period12, period8);
      assertNotSame(period12, period5);
      assertNotSame(period12, period1);
      assertNotSame(period12, period10);
      assertSame(period12, period9);
      assertNotSame(period12, period3);
      assertNotSame(period12, period0);
      assertNotSame(period12, period6);
      assertNotSame(period2, period1);
      assertNotSame(period2, period10);
      assertNotSame(period2, period12);
      assertNotSame(period2, period11);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertNotSame(period2, period9);
      assertNotSame(period2, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period6);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period11));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period10));
      assertFalse(period12.equals((Object)period4));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period10));
      assertFalse(period2.equals((Object)period11));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period3));
      assertNotNull(period12);
      
      Period period13 = period11.toPeriod();
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period13);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period11);
      assertNotSame(period0, period10);
      assertNotSame(period0, period12);
      assertNotSame(period0, period6);
      assertSame(period11, period13);
      assertNotSame(period11, period4);
      assertNotSame(period11, period3);
      assertNotSame(period11, period2);
      assertNotSame(period11, period9);
      assertNotSame(period11, period1);
      assertNotSame(period11, period7);
      assertNotSame(period11, period8);
      assertNotSame(period11, period5);
      assertNotSame(period11, period12);
      assertNotSame(period11, period10);
      assertNotSame(period11, period0);
      assertNotSame(period11, period6);
      assertNotSame(period1, period8);
      assertNotSame(period1, period10);
      assertNotSame(period1, period12);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period9);
      assertNotSame(period1, period13);
      assertNotSame(period13, period1);
      assertSame(period13, period11);
      assertNotSame(period13, period0);
      assertNotSame(period13, period2);
      assertNotSame(period13, period9);
      assertNotSame(period13, period3);
      assertNotSame(period13, period10);
      assertNotSame(period13, period6);
      assertNotSame(period13, period4);
      assertNotSame(period13, period5);
      assertNotSame(period13, period8);
      assertNotSame(period13, period7);
      assertNotSame(period13, period12);
      assertNotSame(period4, period11);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period9);
      assertNotSame(period4, period13);
      assertNotSame(period4, period1);
      assertNotSame(period4, period5);
      assertNotSame(period4, period8);
      assertNotSame(period4, period7);
      assertNotSame(period4, period12);
      assertNotSame(period4, period10);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period12));
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period7));
      assertTrue(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period12));
      assertTrue(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period9));
      assertTrue(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period6));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period9));
      assertTrue(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period7));
      assertTrue(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period12));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period11));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period12));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period13);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(period0);
      
      Period period1 = period0.multipliedBy(1622);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.minusMonths(1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      Period period3 = period2.minusMillis(0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(seconds0);
      
      Period period4 = period3.plusYears(0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(period2, period3);
      assertSame(period3, period2);
      assertSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertSame(period4, period3);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Period period5 = period1.minusMonths(1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period1, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertTrue(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertNotNull(period5);
      
      // Undeclared exception!
      try { 
        period3.plusSeconds((-111));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      YearMonth yearMonth0 = new YearMonth((-100L));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(1969, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(0, yearMonth1.getMonthOfYear());
      assertEquals(1, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertArrayEquals(new int[] {1, 0, 1, 1, 1, 1, 0}, intArray0);
      assertNotNull(yearMonth1);
      
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, yearMonth1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime.Property dateTime_Property0 = dateTime0.secondOfDay();
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime_Property0);
      
      DateTime dateTime1 = dateTime0.withSecondOfMinute(0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNotNull(mockNullZoneChronology0);
      
      DateTimeZone dateTimeZone0 = mockNullZoneChronology0.getZone();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = dateTime1.toMutableDateTime((DateTimeZone) null);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(mutableDateTime0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = new Period(mutableDateTime0, duration0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(period0);
      
      int int0 = period0.getMillis();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(0, int0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(hours0);
      
      Duration duration1 = Duration.parse((String) null);
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertNotSame(duration1, duration0);
      assertTrue(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      
      int int1 = period0.getWeeks();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertNotNull(minutes0);
      
      Hours hours1 = period0.toStandardHours();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertSame(hours1, hours0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertNotNull(hours1);
      
      Period period1 = period0.minusMillis((-205));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertNotNull(period1);
      
      int int2 = dateTime1.getDayOfMonth();
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(14, int2);
      
      int int3 = period0.getSeconds();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period1);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, int3);
      
      Period period2 = period0.plusSeconds(5);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period1.minusYears(1);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period3);
      
      Period period4 = period3.minus(period1);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period4);
      
      int[] intArray0 = period0.ZERO.getValues();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      
      Duration duration2 = period1.toDurationFrom(dateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(205L, duration2.getMillis());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(duration2);
      
      Period period5 = period4.minusYears((-3799));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period5);
      
      Period period6 = period5.plusMinutes(99);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period5);
      assertNotSame(period6, period4);
      assertNotSame(period6, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period6);
      
      Period period7 = period5.plusDays(4);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period3);
      assertNotSame(period5, period7);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period1);
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertNotNull(period7);
      
      Period period8 = period5.minusHours((-205));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409260320L, dateTime1.getMillis());
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period8);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period5);
      assertNotSame(period3, period1);
      assertNotSame(period3, period7);
      assertNotSame(period3, period8);
      assertNotSame(period3, period4);
      assertNotSame(period3, period6);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(period4, period8);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period6);
      assertNotSame(period4, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period3);
      assertNotSame(period5, period8);
      assertNotSame(period5, period7);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period8);
      assertNotSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period0, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period6));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertTrue(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period5));
      assertNotNull(period8);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(period0);
      
      int int0 = period0.getMillis();
      assertEquals(0, int0);
      
      Period period1 = period0.withSeconds(0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.seconds((-1879));
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-31), minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals((-31), minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertEquals((-31), minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("YearMonthDayTimeNoMillis", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      Period period0 = null;
      try {
        period0 = new Period(9600000, (-1457), 9600000, (-4518), 9600000, 9600000, (-1457), 9600000, periodType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      
      Period period0 = new Period(monthDay0, monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(period0);
      
      int int0 = period0.getWeeks();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, int0);
      
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(0);
      assertEquals(0, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertNotNull(testBaseSingleFieldPeriod_Single0);
      
      Period period1 = period0.withFields(testBaseSingleFieldPeriod_Single0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.withMonths(4);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertTrue(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period(3600L);
      assertNotNull(period0);
      
      Period period1 = period0.withSeconds((-551));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = Period.hours(45);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      int int0 = period2.getWeeks();
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      int int1 = period2.getDays();
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      PeriodType.YEAR_INDEX = 1053;
      // Undeclared exception!
      try { 
        period1.minusYears((-551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1053
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1822L));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1292;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertArrayEquals(new int[] {1, 0, 1292}, intArray0);
      assertNotNull(monthDay1);
      
      Period period0 = new Period(34L, 1711L);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      Period period1 = null;
      try {
        period1 = new Period(monthDay1, monthDay0, periodType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null, (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = Period.seconds((-2738));
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, (-2738));
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period2 = period0.plusMonths((-2738));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      MonthDay monthDay0 = new MonthDay(4301L);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      
      java.time.Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      java.time.Instant instant1 = MockInstant.with(instant0, (TemporalAdjuster) instant0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      
      java.time.Instant instant2 = MockInstant.minusNanos(instant1, 0);
      assertSame(instant0, instant1);
      assertSame(instant0, instant2);
      assertSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant0);
      assertSame(instant2, instant1);
      assertNotNull(instant2);
      
      Date date0 = Date.from(instant2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertSame(instant0, instant1);
      assertSame(instant0, instant2);
      assertSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant0);
      assertSame(instant2, instant1);
      assertNotNull(date0);
      
      MonthDay monthDay1 = MonthDay.fromDateFields(date0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertSame(instant0, instant1);
      assertSame(instant0, instant2);
      assertSame(instant1, instant0);
      assertSame(instant1, instant2);
      assertSame(instant2, instant0);
      assertSame(instant2, instant1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertNotNull(monthDay1);
      
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = Period.days(1630);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, 3163);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.weeks(210);
      assertNotNull(period0);
      
      String string0 = period0.toString((PeriodFormatter) null);
      assertNotNull(string0);
      assertEquals("P210W", string0);
      
      Period period1 = period0.plusYears(210);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.minusSeconds(7);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      Period period0 = new Period(1342L, (-2973L), periodType1);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertNotNull(period0);
      
      PeriodType periodType2 = PeriodType.months();
      assertEquals(1, periodType2.size());
      assertEquals("Months", periodType2.getName());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.time();
      assertEquals(4, periodType3.size());
      assertEquals("Time", periodType3.getName());
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertNotNull(periodType3);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertNotNull(hours0);
      
      // Undeclared exception!
      try { 
        period0.plusHours((-1834));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.YEAR_INDEX = 1528;
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoSeconds", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.millis(1506);
      assertNotNull(period0);
      
      Hours hours0 = period0.ZERO.toStandardHours();
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period1 = Period.millis(3);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period0.getDays();
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.millis((-1617));
      assertNotNull(period0);
      
      Period period1 = period0.plusDays((-80));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.plusDays(2063);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period(3L);
      assertNotNull(period0);
      
      Period period1 = period0.withHours(1065);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotSame(period0, period1);
      assertFalse(period0.equals((Object)period1));
      assertNotNull(hours0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, (-237), 97, (-3378), (-237), (-3378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3378 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Period period0 = null;
      try {
        period0 = new Period(mockMinguoDate0, (PeriodType) null, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = Period.weeks((-1212));
      assertNotNull(period0);
      
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      assertTrue(periodFormatter0.isPrinter());
      assertFalse(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      String string0 = periodFormatter0.print(period0);
      assertTrue(periodFormatter0.isPrinter());
      assertFalse(periodFormatter0.isParser());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Period.parse("Chronology must not be null", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.months(817);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.minutes(1783);
      assertNotNull(period0);
      
      PeriodType.YEAR_INDEX = 1783;
      Period period1 = period0.plusSeconds(1783);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period2 = period1.minusMonths(1783);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      Period period3 = Period.years(1783);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      Period period4 = period3.ZERO.minusMillis(59);
      assertNotSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertNotNull(period4);
      
      Duration duration0 = Duration.standardSeconds(1783);
      assertEquals(1783000L, duration0.getMillis());
      assertEquals(29L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1783L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1783
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Period period0 = null;
      try {
        period0 = new Period(mockHijrahDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((-12345L), (-2800L), periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusMillis(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((Object) null, periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(period0);
      
      PeriodType.MILLI_INDEX = 0;
      boolean boolean0 = period0.equals(" as this period contains months and months vary in length");
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertFalse(boolean0);
      
      Period period1 = period0.plusYears((-806));
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      PeriodType.HOUR_INDEX = 1574;
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, (-806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period(768L, (PeriodType) null);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Chronology chronology0 = null;
      Interval interval0 = new Interval(641L, 641L, (Chronology) null);
      assertEquals(641L, interval0.getStartMillis());
      assertEquals(641L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Duration duration0 = interval0.toDuration();
      assertEquals(641L, interval0.getStartMillis());
      assertEquals(641L, interval0.getEndMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-78);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-78)}, byteArray0);
      assertFalse(boolean0);
      
      Period period0 = duration0.toPeriod((PeriodType) null);
      assertEquals(641L, interval0.getStartMillis());
      assertEquals(641L, interval0.getEndMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(period0);
      
      int int0 = 647;
      Period period1 = period0.plusSeconds(647);
      assertEquals(641L, interval0.getStartMillis());
      assertEquals(641L, interval0.getEndMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = Period.days(647);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        periodType0.getFieldType(647);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 647
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotNull(testBasePartial_MockPartial0);
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotNull(chronology0);
      
      Period period0 = new Period((-13L), chronology0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.plusYears((-1426));
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.ZERO.plusWeeks(431);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period1.ZERO.multipliedBy(3392);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      DurationField durationField0 = durationFieldType0.getField(chronology0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertNotNull(durationField0);
      
      DurationField durationField1 = durationFieldType0.getField(chronology0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertTrue(durationField1.isPrecise());
      assertEquals(1000L, durationField1.getUnitMillis());
      assertEquals("seconds", durationField1.getName());
      assertTrue(durationField1.isSupported());
      assertSame(durationField1, durationField0);
      assertNotNull(durationField1);
      
      int int0 = period1.ZERO.indexOf(durationFieldType0);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertEquals(6, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Period period4 = period0.plusMinutes(5);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period4);
      
      Period period5 = period4.withMillis(5);
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertNotNull(period5);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = new Period(0L, 1782L);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.minusMillis(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      Period period2 = period0.plusMonths((-2696));
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      Period period3 = Period.parse("", periodFormatter0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      PeriodType periodType1 = period2.ZERO.getPeriodType();
      assertEquals("Standard", periodType1.getName());
      assertEquals(8, periodType1.size());
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertNotSame(periodType1, periodType0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      int int0 = period0.getMillis();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertEquals(782, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)118;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)24, (byte)4, (byte)118}, byteArray0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Period period1 = period0.ZERO.plusHours(151);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertNotNull(period2);
      
      int int1 = period2.getSeconds();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Period period3 = period0.ZERO.plusSeconds(151);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertNotNull(period3);
      
      Duration duration0 = period0.ZERO.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertNotNull(duration0);
      
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period1, period3);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotNull(weeks0);
      
      Period period4 = period1.plusMinutes(151);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotNull(period4);
      
      Period period5 = period4.plusMonths(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotNull(period5);
      
      Period period6 = period3.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period6, period5);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertNotNull(period6);
      
      Period period7 = period6.ZERO.withDays(1030);
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period6, period5);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period7);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period1);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period2);
      assertNotSame(period7, period6);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertNotNull(period7);
      
      Minutes minutes0 = period5.toStandardMinutes();
      assertEquals(9211, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period6);
      assertSame(period5, period4);
      assertNotSame(period5, period6);
      assertNotSame(period5, period0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period7);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period2));
      assertNotNull(minutes0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = period6.getMinutes();
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period6, period5);
      assertNotSame(period6, period0);
      assertNotSame(period6, period2);
      assertNotSame(period6, period7);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertNotSame(period3, period7);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertEquals(2, int2);
      
      Period period8 = period0.withHours(348);
      assertNotSame(period0, period8);
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period7);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period2);
      assertNotSame(period8, period5);
      assertNotSame(period8, period4);
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertNotNull(period8);
      
      Period period9 = Period.hours(0);
      assertNotSame(period9, period2);
      assertNotSame(period9, period6);
      assertNotSame(period9, period8);
      assertNotSame(period9, period5);
      assertNotSame(period9, period4);
      assertNotSame(period9, period3);
      assertNotSame(period9, period0);
      assertNotSame(period9, period7);
      assertNotSame(period9, period1);
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period7));
      assertTrue(period9.equals((Object)period0));
      assertTrue(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      assertNotNull(period9);
      
      Period period10 = period0.normalizedStandard(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotSame(period0, period8);
      assertNotSame(period0, period9);
      assertNotSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period10);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period6);
      assertNotSame(period10, period8);
      assertNotSame(period10, period0);
      assertNotSame(period10, period3);
      assertNotSame(period10, period5);
      assertNotSame(period10, period4);
      assertNotSame(period10, period2);
      assertNotSame(period10, period6);
      assertNotSame(period10, period7);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period9));
      assertNotNull(period10);
      
      Period period11 = Period.days(348);
      assertNotSame(period11, period7);
      assertNotSame(period11, period1);
      assertNotSame(period11, period9);
      assertNotSame(period11, period2);
      assertNotSame(period11, period6);
      assertNotSame(period11, period8);
      assertNotSame(period11, period10);
      assertNotSame(period11, period3);
      assertNotSame(period11, period5);
      assertNotSame(period11, period0);
      assertNotSame(period11, period4);
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period11.equals((Object)period4));
      assertNotNull(period11);
      
      // Undeclared exception!
      try { 
        Period.parse("b>8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"b>8\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType1.size());
      assertEquals("YearMonthDayTime", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      PeriodType.YEAR_INDEX = 999;
      Period period0 = new Period(3748L, 3748L, periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertFalse(periodType0.equals((Object)periodType1));
      assertNotNull(period0);
      
      PeriodType periodType2 = PeriodType.time();
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertNotNull(periodType2);
      
      Period period1 = period0.ZERO.multipliedBy(107);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.withPeriodType(periodType1);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(7, periodType1.size());
      assertEquals("YearMonthDayTime", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      int int0 = (-13421772);
      PeriodType.YEAR_INDEX = (-13421772);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1544);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = period0.getYears();
      assertEquals(0, int0);
      
      PeriodType periodType1 = PeriodType.millis();
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)86;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)86}, byteArray0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      PeriodType periodType2 = period0.getPeriodType();
      assertEquals(8, periodType2.size());
      assertEquals("Standard", periodType2.getName());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertNotNull(periodType2);
      
      // Undeclared exception!
      try { 
        period0.ZERO.getFieldType((-47));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(duration0, dateTime0, periodType0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      PeriodType periodType1 = PeriodType.weeks();
      assertEquals("Weeks", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertNotNull(seconds0);
      
      Seconds seconds1 = Seconds.seconds((-23034375));
      assertEquals((-23034375), seconds1.getSeconds());
      assertEquals(1, seconds1.size());
      assertNotSame(seconds1, seconds0);
      assertFalse(seconds1.equals((Object)seconds0));
      assertNotNull(seconds1);
      
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotNull(duration1);
      
      PeriodType periodType2 = PeriodType.time();
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertNotNull(periodType2);
      
      Days days1 = duration1.toStandardDays();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertSame(days1, days0);
      assertNotNull(days1);
      
      Duration duration2 = days1.toStandardDuration();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getMillis());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertSame(days1, days0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertTrue(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration1));
      assertNotNull(duration2);
      
      PeriodType periodType3 = PeriodType.hours();
      assertEquals("Hours", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertNotNull(periodType3);
      
      Period period1 = new Period(duration2, dateTime0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getMillis());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Weeks weeks0 = days1.toStandardWeeks();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertSame(days1, days0);
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertNotNull(weeks0);
      
      Period period2 = duration1.toPeriodFrom((ReadableInstant) dateTime0, periodType1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Weeks", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertTrue(duration0.equals((Object)duration2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType0));
      assertTrue(duration1.equals((Object)duration2));
      assertNotNull(period2);
      
      Period period3 = period1.withField(durationFieldType0, 1777);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getMillis());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertSame(days1, days0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertTrue(duration0.equals((Object)duration2));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotNull(period3);
      
      Period period4 = period1.withPeriodType(periodType2);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertEquals(0, days1.getDays());
      assertEquals(1, days1.size());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getMillis());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardMinutes());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertSame(days1, days0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period4);
      assertTrue(duration0.equals((Object)duration2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertTrue(duration1.equals((Object)duration2));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType1));
      assertTrue(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period2));
      assertNotNull(period4);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.months((-1));
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = period0.minusWeeks((-1));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = Period.years((-1));
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = period2.ZERO.plusHours(23034383);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertNotNull(period3);
      
      Period period4 = period1.minusMonths(23034383);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertNotNull(period4);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertEquals(3, periodType1.size());
      assertEquals("YearMonthDay", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      Period period5 = period3.ZERO.plusMillis(0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period5);
      assertNotSame(period5, period1);
      assertNotSame(period5, period3);
      assertNotSame(period5, period0);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period2));
      assertNotNull(period5);
      
      Period period6 = period0.minusHours(0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period6, period3);
      assertNotSame(period6, period1);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertSame(period6, period0);
      assertNotSame(period6, period5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period5));
      assertNotNull(period6);
      
      Period period7 = period1.normalizedStandard();
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period1, period7);
      assertNotSame(period7, period0);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertTrue(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertNotNull(period7);
      
      int int0 = (-3924);
      Period period8 = period2.minusHours((-1));
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period8);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertNotNull(period8);
      
      Period period9 = period8.ZERO.withFields(period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period2, period8);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period8, period7);
      assertNotSame(period8, period3);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period3);
      assertNotSame(period9, period6);
      assertNotSame(period9, period4);
      assertNotSame(period9, period2);
      assertNotSame(period9, period8);
      assertNotSame(period9, period5);
      assertNotSame(period9, period7);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period4));
      assertTrue(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period7));
      assertNotNull(period9);
      
      Period period10 = period8.minus(period0);
      assertNotSame(period0, period9);
      assertNotSame(period0, period8);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period7);
      assertNotSame(period2, period0);
      assertNotSame(period2, period4);
      assertNotSame(period2, period1);
      assertNotSame(period2, period10);
      assertNotSame(period2, period3);
      assertNotSame(period2, period6);
      assertNotSame(period2, period9);
      assertNotSame(period2, period8);
      assertNotSame(period2, period5);
      assertNotSame(period2, period7);
      assertNotSame(period8, period7);
      assertNotSame(period8, period10);
      assertNotSame(period8, period3);
      assertNotSame(period8, period9);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period1);
      assertNotSame(period10, period0);
      assertNotSame(period10, period6);
      assertNotSame(period10, period8);
      assertNotSame(period10, period9);
      assertNotSame(period10, period4);
      assertNotSame(period10, period5);
      assertNotSame(period10, period7);
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period6));
      assertTrue(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period7));
      assertNotNull(period10);
      
      PeriodType periodType2 = PeriodType.yearWeekDay();
      assertEquals(3, periodType2.size());
      assertEquals("YearWeekDay", periodType2.getName());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertNotNull(periodType2);
      
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.months((-1));
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = Period.years((-1));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = Period.minutes((-1));
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      Period period3 = period2.ZERO.plusHours(23034375);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertNotNull(period3);
      
      Period period4 = period0.multipliedBy(0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period4, period1);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period3));
      assertNotNull(period4);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      Period period5 = period3.ZERO.plusMillis(0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period5);
      assertNotSame(period3, period2);
      assertNotSame(period5, period4);
      assertNotSame(period5, period3);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period1);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period1));
      assertNotNull(period5);
      
      Period period6 = period0.minusHours(0);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period4);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertSame(period6, period0);
      assertNotSame(period6, period5);
      assertNotSame(period6, period3);
      assertNotSame(period6, period2);
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period2));
      assertNotNull(period6);
      
      Period period7 = period1.normalizedStandard();
      assertNotSame(period1, period7);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period6);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period1, period2);
      assertNotSame(period7, period5);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period2));
      assertTrue(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertNotNull(period7);
      
      int int0 = (-3924);
      Period period8 = period2.minusMonths((-3924));
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period8);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertNotNull(period8);
      
      Period period9 = period8.ZERO.withFields(period2);
      assertNotSame(period2, period9);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period8);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period9);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period9, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period2);
      assertNotSame(period9, period0);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotSame(period9, period5);
      assertNotSame(period9, period4);
      assertNotSame(period9, period6);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period3));
      assertTrue(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period6));
      assertNotNull(period9);
      
      Period period10 = period8.minus(period0);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period10);
      assertSame(period0, period6);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period2);
      assertNotSame(period0, period9);
      assertNotSame(period0, period4);
      assertNotSame(period2, period9);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period10);
      assertNotSame(period2, period5);
      assertNotSame(period2, period3);
      assertNotSame(period2, period7);
      assertNotSame(period2, period8);
      assertNotSame(period8, period1);
      assertNotSame(period8, period7);
      assertNotSame(period8, period2);
      assertNotSame(period8, period10);
      assertNotSame(period8, period4);
      assertNotSame(period8, period6);
      assertNotSame(period8, period9);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertNotSame(period10, period5);
      assertNotSame(period10, period1);
      assertNotSame(period10, period0);
      assertNotSame(period10, period9);
      assertNotSame(period10, period6);
      assertNotSame(period10, period2);
      assertNotSame(period10, period8);
      assertNotSame(period10, period7);
      assertNotSame(period10, period4);
      assertNotSame(period10, period3);
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period9));
      assertFalse(period2.equals((Object)period5));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period7));
      assertFalse(period2.equals((Object)period8));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertNotNull(period10);
      
      PeriodType periodType2 = PeriodType.yearWeekDay();
      assertEquals(3, periodType2.size());
      assertEquals("YearWeekDay", periodType2.getName());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertNotNull(periodType2);
      
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.millis(2);
      assertNotNull(period0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = period0.equals(object0);
      assertFalse(boolean0);
      
      Period period1 = period0.ZERO.plusSeconds(647);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.withMinutes(2);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      Period period3 = period0.negated();
      assertNotSame(period0, period3);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertNotNull(period3);
      
      Period period4 = period3.withYears(8);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertNotNull(period4);
      
      boolean boolean1 = period0.equals(period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period4);
      assertNotSame(period2, period3);
      assertNotSame(period2, period0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period3));
      assertFalse(period2.equals((Object)period0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Period period5 = Period.seconds(0);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertNotNull(period5);
      
      Period period6 = Period.weeks(0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period5));
      assertNotNull(period6);
      
      int int0 = period6.ZERO.getSeconds();
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period5));
      assertEquals(0, int0);
      
      Period period7 = period5.minusWeeks(2);
      assertNotSame(period5, period2);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period7);
      assertNotSame(period7, period5);
      assertNotSame(period7, period6);
      assertNotSame(period7, period1);
      assertNotSame(period7, period0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period2);
      assertNotSame(period7, period3);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period3));
      assertNotNull(period7);
      
      Minutes minutes0 = period6.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertNotSame(period6, period4);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period2);
      assertNotSame(period6, period7);
      assertNotSame(period6, period3);
      assertNotSame(period6, period5);
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period3));
      assertTrue(period6.equals((Object)period5));
      assertNotNull(minutes0);
      
      Period period8 = period5.minusDays(0);
      assertNotSame(period5, period2);
      assertSame(period5, period8);
      assertNotSame(period5, period0);
      assertNotSame(period5, period6);
      assertNotSame(period5, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period4);
      assertNotSame(period5, period7);
      assertNotSame(period8, period0);
      assertNotSame(period8, period4);
      assertNotSame(period8, period2);
      assertNotSame(period8, period1);
      assertNotSame(period8, period3);
      assertSame(period8, period5);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period7));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period3));
      assertTrue(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period7));
      assertNotNull(period8);
      
      Period period9 = Period.seconds((-483));
      assertNotSame(period9, period6);
      assertNotSame(period9, period7);
      assertNotSame(period9, period3);
      assertNotSame(period9, period2);
      assertNotSame(period9, period4);
      assertNotSame(period9, period5);
      assertNotSame(period9, period0);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertNotNull(period9);
      
      Period period10 = period0.withHours(0);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period9);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period10, period5);
      assertNotSame(period10, period7);
      assertNotSame(period10, period9);
      assertNotSame(period10, period2);
      assertNotSame(period10, period4);
      assertNotSame(period10, period3);
      assertNotSame(period10, period1);
      assertNotSame(period10, period8);
      assertNotSame(period10, period6);
      assertNotSame(period10, period0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period10.equals((Object)period5));
      assertFalse(period10.equals((Object)period7));
      assertFalse(period10.equals((Object)period9));
      assertTrue(period10.equals((Object)period0));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period6));
      assertNotNull(period10);
      
      Period period11 = period1.withMinutes(3585);
      assertNotSame(period11, period1);
      assertNotSame(period11, period8);
      assertNotSame(period11, period4);
      assertNotSame(period11, period6);
      assertNotSame(period11, period9);
      assertNotSame(period11, period3);
      assertNotSame(period11, period7);
      assertNotSame(period11, period2);
      assertNotSame(period11, period5);
      assertNotSame(period11, period10);
      assertNotSame(period11, period0);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period9);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period1, period6);
      assertNotSame(period1, period8);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period1, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period0);
      assertFalse(period11.equals((Object)period1));
      assertFalse(period11.equals((Object)period8));
      assertFalse(period11.equals((Object)period4));
      assertFalse(period11.equals((Object)period6));
      assertFalse(period11.equals((Object)period9));
      assertFalse(period11.equals((Object)period3));
      assertFalse(period11.equals((Object)period7));
      assertFalse(period11.equals((Object)period2));
      assertFalse(period11.equals((Object)period5));
      assertFalse(period11.equals((Object)period10));
      assertFalse(period11.equals((Object)period0));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period11);
      
      Period period12 = period4.plusMinutes(0);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period9);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period12, period6);
      assertNotSame(period12, period3);
      assertNotSame(period12, period10);
      assertSame(period12, period4);
      assertNotSame(period12, period11);
      assertNotSame(period12, period7);
      assertNotSame(period12, period5);
      assertNotSame(period12, period9);
      assertNotSame(period12, period2);
      assertNotSame(period12, period0);
      assertNotSame(period12, period1);
      assertNotSame(period12, period8);
      assertNotSame(period3, period1);
      assertNotSame(period3, period8);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period12);
      assertNotSame(period3, period11);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period9);
      assertNotSame(period4, period1);
      assertNotSame(period4, period8);
      assertNotSame(period4, period10);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertSame(period4, period12);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period9);
      assertNotSame(period4, period6);
      assertNotSame(period4, period11);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period11));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period11));
      assertNotNull(period12);
      
      int int1 = period3.getMonths();
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period9);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period3, period1);
      assertNotSame(period3, period8);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period12);
      assertNotSame(period3, period11);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period9);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period12));
      assertTrue(int1 == int0);
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period12));
      assertFalse(period3.equals((Object)period11));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period9));
      assertEquals(0, int1);
      
      Period period13 = period1.withHours(0);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period13, period9);
      assertNotSame(period13, period4);
      assertNotSame(period13, period8);
      assertNotSame(period13, period12);
      assertNotSame(period13, period1);
      assertNotSame(period13, period11);
      assertNotSame(period13, period3);
      assertNotSame(period13, period10);
      assertNotSame(period13, period6);
      assertNotSame(period13, period7);
      assertNotSame(period13, period0);
      assertNotSame(period13, period2);
      assertNotSame(period13, period5);
      assertNotSame(period1, period8);
      assertNotSame(period1, period9);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period1, period13);
      assertNotSame(period1, period12);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period6));
      assertTrue(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period1.equals((Object)period12));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period13);
      
      int int2 = period5.getWeeks();
      assertNotSame(period5, period9);
      assertNotSame(period5, period0);
      assertNotSame(period5, period13);
      assertNotSame(period5, period3);
      assertNotSame(period5, period11);
      assertNotSame(period5, period4);
      assertNotSame(period5, period2);
      assertSame(period5, period8);
      assertNotSame(period5, period10);
      assertNotSame(period5, period6);
      assertNotSame(period5, period12);
      assertNotSame(period5, period1);
      assertNotSame(period5, period7);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period9));
      assertFalse(period5.equals((Object)period10));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period13));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period12));
      assertTrue(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period11));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertFalse(period5.equals((Object)period7));
      assertEquals(0, int2);
      
      Period period14 = period0.minusHours((-168));
      assertNotSame(period0, period14);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period14, period4);
      assertNotSame(period14, period0);
      assertNotSame(period14, period12);
      assertNotSame(period14, period6);
      assertNotSame(period14, period5);
      assertNotSame(period14, period10);
      assertNotSame(period14, period2);
      assertNotSame(period14, period7);
      assertNotSame(period14, period1);
      assertNotSame(period14, period8);
      assertNotSame(period14, period3);
      assertNotSame(period14, period13);
      assertNotSame(period14, period9);
      assertNotSame(period14, period11);
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period14.equals((Object)period4));
      assertFalse(period14.equals((Object)period0));
      assertFalse(period14.equals((Object)period12));
      assertFalse(period14.equals((Object)period6));
      assertFalse(period14.equals((Object)period5));
      assertFalse(period14.equals((Object)period10));
      assertFalse(period14.equals((Object)period2));
      assertFalse(period14.equals((Object)period7));
      assertFalse(period14.equals((Object)period1));
      assertFalse(period14.equals((Object)period8));
      assertFalse(period14.equals((Object)period3));
      assertFalse(period14.equals((Object)period13));
      assertFalse(period14.equals((Object)period9));
      assertFalse(period14.equals((Object)period11));
      assertNotNull(period14);
      
      Period period15 = period12.ZERO.normalizedStandard((PeriodType) null);
      assertNotSame(period0, period14);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period0, period15);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertSame(period12, period4);
      assertNotSame(period12, period14);
      assertNotSame(period12, period9);
      assertNotSame(period12, period0);
      assertNotSame(period12, period6);
      assertNotSame(period12, period13);
      assertNotSame(period12, period3);
      assertNotSame(period12, period10);
      assertNotSame(period12, period11);
      assertNotSame(period12, period7);
      assertNotSame(period12, period5);
      assertNotSame(period12, period2);
      assertNotSame(period12, period15);
      assertNotSame(period12, period1);
      assertNotSame(period12, period8);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period3, period15);
      assertNotSame(period3, period12);
      assertNotSame(period3, period6);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period8);
      assertNotSame(period3, period14);
      assertNotSame(period3, period11);
      assertNotSame(period3, period13);
      assertNotSame(period3, period9);
      assertNotSame(period15, period5);
      assertNotSame(period15, period6);
      assertNotSame(period15, period13);
      assertNotSame(period15, period10);
      assertNotSame(period15, period1);
      assertNotSame(period15, period8);
      assertNotSame(period15, period12);
      assertNotSame(period15, period0);
      assertNotSame(period15, period2);
      assertNotSame(period15, period14);
      assertNotSame(period15, period7);
      assertNotSame(period15, period9);
      assertNotSame(period15, period4);
      assertNotSame(period15, period3);
      assertNotSame(period15, period11);
      assertNotSame(period4, period15);
      assertNotSame(period4, period13);
      assertNotSame(period4, period10);
      assertNotSame(period4, period0);
      assertNotSame(period4, period5);
      assertNotSame(period4, period7);
      assertSame(period4, period12);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertNotSame(period4, period14);
      assertNotSame(period4, period1);
      assertNotSame(period4, period8);
      assertNotSame(period4, period3);
      assertNotSame(period4, period9);
      assertNotSame(period4, period11);
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period12.equals((Object)period14));
      assertFalse(period12.equals((Object)period9));
      assertFalse(period12.equals((Object)period0));
      assertFalse(period12.equals((Object)period6));
      assertFalse(period12.equals((Object)period13));
      assertFalse(period12.equals((Object)period3));
      assertFalse(period12.equals((Object)period10));
      assertFalse(period12.equals((Object)period11));
      assertFalse(period12.equals((Object)period7));
      assertFalse(period12.equals((Object)period5));
      assertFalse(period12.equals((Object)period2));
      assertFalse(period12.equals((Object)period1));
      assertFalse(period12.equals((Object)period8));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period12));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period14));
      assertFalse(period3.equals((Object)period11));
      assertFalse(period3.equals((Object)period13));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period15.equals((Object)period13));
      assertFalse(period15.equals((Object)period10));
      assertTrue(period15.equals((Object)period5));
      assertTrue(period15.equals((Object)period6));
      assertFalse(period15.equals((Object)period1));
      assertFalse(period15.equals((Object)period12));
      assertFalse(period15.equals((Object)period0));
      assertFalse(period15.equals((Object)period2));
      assertFalse(period15.equals((Object)period14));
      assertFalse(period15.equals((Object)period7));
      assertTrue(period15.equals((Object)period8));
      assertFalse(period15.equals((Object)period9));
      assertFalse(period15.equals((Object)period4));
      assertFalse(period15.equals((Object)period3));
      assertFalse(period15.equals((Object)period11));
      assertFalse(period4.equals((Object)period13));
      assertFalse(period4.equals((Object)period10));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period6));
      assertFalse(period4.equals((Object)period14));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period8));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period9));
      assertFalse(period4.equals((Object)period11));
      assertNotNull(period15);
      
      int int3 = period1.getMinutes();
      assertNotSame(period0, period14);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period0, period15);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period1, period14);
      assertNotSame(period1, period8);
      assertNotSame(period1, period9);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period1, period13);
      assertNotSame(period1, period15);
      assertNotSame(period1, period12);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period15));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period15));
      assertFalse(period1.equals((Object)period12));
      assertTrue(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      Period period16 = new Period(0, 0, 3585, 2, 5, 0, (-483), (-168), (PeriodType) null);
      assertFalse(period16.equals((Object)period1));
      assertFalse(period16.equals((Object)period8));
      assertFalse(period16.equals((Object)period14));
      assertFalse(period16.equals((Object)period7));
      assertFalse(period16.equals((Object)period2));
      assertFalse(period16.equals((Object)period10));
      assertFalse(period16.equals((Object)period0));
      assertFalse(period16.equals((Object)period5));
      assertFalse(period16.equals((Object)period12));
      assertFalse(period16.equals((Object)period15));
      assertFalse(period16.equals((Object)period4));
      assertFalse(period16.equals((Object)period6));
      assertFalse(period16.equals((Object)period9));
      assertFalse(period16.equals((Object)period11));
      assertFalse(period16.equals((Object)period3));
      assertFalse(period16.equals((Object)period13));
      assertNotNull(period16);
      
      Weeks weeks0 = period13.toStandardWeeks();
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotSame(period0, period14);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period16);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period0, period15);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period13, period9);
      assertNotSame(period13, period14);
      assertNotSame(period13, period4);
      assertNotSame(period13, period8);
      assertNotSame(period13, period12);
      assertNotSame(period13, period1);
      assertNotSame(period13, period15);
      assertNotSame(period13, period16);
      assertNotSame(period13, period11);
      assertNotSame(period13, period3);
      assertNotSame(period13, period10);
      assertNotSame(period13, period6);
      assertNotSame(period13, period7);
      assertNotSame(period13, period0);
      assertNotSame(period13, period2);
      assertNotSame(period13, period5);
      assertNotSame(period1, period14);
      assertNotSame(period1, period8);
      assertNotSame(period1, period9);
      assertNotSame(period1, period11);
      assertNotSame(period1, period3);
      assertNotSame(period1, period13);
      assertNotSame(period1, period16);
      assertNotSame(period1, period15);
      assertNotSame(period1, period12);
      assertNotSame(period1, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period5);
      assertNotSame(period1, period10);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period16));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period15));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period13.equals((Object)period9));
      assertFalse(period13.equals((Object)period14));
      assertFalse(period13.equals((Object)period4));
      assertFalse(period13.equals((Object)period8));
      assertFalse(period13.equals((Object)period12));
      assertFalse(period13.equals((Object)period15));
      assertFalse(period13.equals((Object)period16));
      assertFalse(period13.equals((Object)period11));
      assertFalse(period13.equals((Object)period3));
      assertFalse(period13.equals((Object)period10));
      assertFalse(period13.equals((Object)period6));
      assertTrue(period13.equals((Object)period1));
      assertFalse(period13.equals((Object)period7));
      assertFalse(period13.equals((Object)period0));
      assertFalse(period13.equals((Object)period2));
      assertFalse(period13.equals((Object)period5));
      assertFalse(period1.equals((Object)period14));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period11));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period16));
      assertFalse(period1.equals((Object)period15));
      assertFalse(period1.equals((Object)period12));
      assertTrue(period1.equals((Object)period13));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period1.equals((Object)period10));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(weeks0);
      
      Period period17 = Period.minutes((-24));
      assertNotSame(period17, period14);
      assertNotSame(period17, period1);
      assertNotSame(period17, period8);
      assertNotSame(period17, period5);
      assertNotSame(period17, period2);
      assertNotSame(period17, period7);
      assertNotSame(period17, period10);
      assertNotSame(period17, period12);
      assertNotSame(period17, period6);
      assertNotSame(period17, period13);
      assertNotSame(period17, period0);
      assertNotSame(period17, period15);
      assertNotSame(period17, period16);
      assertNotSame(period17, period9);
      assertNotSame(period17, period11);
      assertNotSame(period17, period3);
      assertNotSame(period17, period4);
      assertFalse(period17.equals((Object)period14));
      assertFalse(period17.equals((Object)period1));
      assertFalse(period17.equals((Object)period8));
      assertFalse(period17.equals((Object)period5));
      assertFalse(period17.equals((Object)period2));
      assertFalse(period17.equals((Object)period7));
      assertFalse(period17.equals((Object)period10));
      assertFalse(period17.equals((Object)period12));
      assertFalse(period17.equals((Object)period6));
      assertFalse(period17.equals((Object)period13));
      assertFalse(period17.equals((Object)period0));
      assertFalse(period17.equals((Object)period15));
      assertFalse(period17.equals((Object)period16));
      assertFalse(period17.equals((Object)period9));
      assertFalse(period17.equals((Object)period11));
      assertFalse(period17.equals((Object)period3));
      assertFalse(period17.equals((Object)period4));
      assertNotNull(period17);
      
      Period period18 = period3.toPeriod();
      assertNotSame(period0, period14);
      assertNotSame(period0, period9);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period16);
      assertNotSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period12);
      assertNotSame(period0, period18);
      assertNotSame(period0, period15);
      assertNotSame(period0, period10);
      assertNotSame(period0, period3);
      assertNotSame(period0, period13);
      assertNotSame(period0, period4);
      assertNotSame(period0, period11);
      assertNotSame(period0, period2);
      assertNotSame(period0, period5);
      assertNotSame(period0, period17);
      assertSame(period3, period18);
      assertNotSame(period3, period4);
      assertNotSame(period3, period16);
      assertNotSame(period3, period0);
      assertNotSame(period3, period15);
      assertNotSame(period3, period12);
      assertNotSame(period3, period6);
      assertNotSame(period3, period17);
      assertNotSame(period3, period5);
      assertNotSame(period3, period10);
      assertNotSame(period3, period7);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period8);
      assertNotSame(period3, period14);
      assertNotSame(period3, period11);
      assertNotSame(period3, period13);
      assertNotSame(period3, period9);
      assertNotSame(period18, period4);
      assertNotSame(period18, period0);
      assertNotSame(period18, period9);
      assertNotSame(period18, period6);
      assertNotSame(period18, period13);
      assertNotSame(period18, period12);
      assertNotSame(period18, period15);
      assertSame(period18, period3);
      assertNotSame(period18, period16);
      assertNotSame(period18, period8);
      assertNotSame(period18, period2);
      assertNotSame(period18, period1);
      assertNotSame(period18, period11);
      assertNotSame(period18, period14);
      assertNotSame(period18, period7);
      assertNotSame(period18, period10);
      assertNotSame(period18, period5);
      assertNotSame(period18, period17);
      assertFalse(period0.equals((Object)period14));
      assertFalse(period0.equals((Object)period9));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period16));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period8));
      assertFalse(period0.equals((Object)period12));
      assertFalse(period0.equals((Object)period15));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period13));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period11));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period17));
      assertTrue(period0.equals((Object)period10));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period16));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period15));
      assertFalse(period3.equals((Object)period12));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period3.equals((Object)period17));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period10));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period8));
      assertFalse(period3.equals((Object)period14));
      assertFalse(period3.equals((Object)period11));
      assertFalse(period3.equals((Object)period13));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period18.equals((Object)period4));
      assertFalse(period18.equals((Object)period0));
      assertFalse(period18.equals((Object)period9));
      assertFalse(period18.equals((Object)period6));
      assertFalse(period18.equals((Object)period13));
      assertFalse(period18.equals((Object)period12));
      assertFalse(period18.equals((Object)period15));
      assertFalse(period18.equals((Object)period16));
      assertFalse(period18.equals((Object)period8));
      assertFalse(period18.equals((Object)period2));
      assertFalse(period18.equals((Object)period1));
      assertFalse(period18.equals((Object)period11));
      assertFalse(period18.equals((Object)period14));
      assertFalse(period18.equals((Object)period7));
      assertFalse(period18.equals((Object)period10));
      assertFalse(period18.equals((Object)period5));
      assertFalse(period18.equals((Object)period17));
      assertNotNull(period18);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2528));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(353L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.528", dateTimeZone0.getID());
      assertEquals("-00:00:02.528", dateTimeZone0.toString());
      assertEquals((-2175L), long0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Instant instant0 = new Instant(353L);
      assertEquals(353L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.toInstant();
      assertEquals(353L, instant0.getMillis());
      assertEquals(353L, instant1.getMillis());
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTime();
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(353L, instant0.getMillis());
      assertEquals(353L, instant1.getMillis());
      assertEquals(353L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(mutableDateTime0);
      
      Instant instant2 = instant1.plus((-9223372036854775799L));
      assertEquals(353L, instant0.getMillis());
      assertEquals(353L, instant1.getMillis());
      assertEquals((-9223372036854775446L), instant2.getMillis());
      assertSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertNotNull(instant2);
      
      Duration duration0 = new Duration(9223372036854775807L);
      assertEquals(2562047788015L, duration0.getStandardHours());
      assertEquals(106751991167L, duration0.getStandardDays());
      assertEquals(9223372036854775807L, duration0.getMillis());
      assertEquals(153722867280912L, duration0.getStandardMinutes());
      assertEquals(9223372036854775L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Interval interval0 = duration0.toIntervalFrom(instant2);
      assertEquals(353L, instant0.getMillis());
      assertEquals(353L, instant1.getMillis());
      assertEquals((-9223372036854775446L), instant2.getMillis());
      assertEquals(2562047788015L, duration0.getStandardHours());
      assertEquals(106751991167L, duration0.getStandardDays());
      assertEquals(9223372036854775807L, duration0.getMillis());
      assertEquals(153722867280912L, duration0.getStandardMinutes());
      assertEquals(9223372036854775L, duration0.getStandardSeconds());
      assertEquals(361L, interval0.getEndMillis());
      assertEquals((-9223372036854775446L), interval0.getStartMillis());
      assertSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertNotNull(interval0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant2, duration0);
      assertEquals(353L, instant0.getMillis());
      assertEquals(353L, instant1.getMillis());
      assertEquals((-9223372036854775446L), instant2.getMillis());
      assertEquals(2562047788015L, duration0.getStandardHours());
      assertEquals(106751991167L, duration0.getStandardDays());
      assertEquals(9223372036854775807L, duration0.getMillis());
      assertEquals(153722867280912L, duration0.getStandardMinutes());
      assertEquals(9223372036854775L, duration0.getStandardSeconds());
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Duration duration1 = Duration.standardDays(0L);
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      
      Period period0 = new Period(3, (-2828), (-1384), 5, 7199992, 5, 207, 7199992);
      assertNotNull(period0);
      
      int int0 = period0.getMonths();
      assertEquals((-2828), int0);
      
      Period period1 = period0.plusMillis(2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.minusMinutes(7199992);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P3Y-2828M-1384W5DT7199992H-7199987M7406.994S
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.years(0);
      assertNotNull(period0);
      
      Period period1 = Period.months(0);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.negated();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertNotNull(period2);
      
      int int0 = period2.ZERO.getSeconds();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period3 = period1.withHours((-1030));
      assertNotSame(period1, period3);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertNotNull(period3);
      
      Period period4 = Period.days((-1030));
      assertNotSame(period4, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period4);
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType0.withDaysRemoved();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      assertNotNull(periodType2);
      
      Period period5 = period4.ZERO.minusYears(977);
      assertNotSame(period4, period3);
      assertNotSame(period4, period5);
      assertNotSame(period4, period2);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertNotSame(period5, period2);
      assertNotSame(period5, period1);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period5, period4);
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period1));
      assertFalse(period5.equals((Object)period0));
      assertFalse(period5.equals((Object)period3));
      assertFalse(period5.equals((Object)period4));
      assertNotNull(period5);
      
      Period period6 = Period.days(977);
      assertNotSame(period6, period3);
      assertNotSame(period6, period4);
      assertNotSame(period6, period2);
      assertNotSame(period6, period0);
      assertNotSame(period6, period1);
      assertNotSame(period6, period5);
      assertFalse(period6.equals((Object)period3));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period5));
      assertNotNull(period6);
      
      Period period7 = period0.plusYears((-1030));
      assertNotSame(period0, period4);
      assertNotSame(period0, period5);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period6);
      assertNotSame(period7, period4);
      assertNotSame(period7, period0);
      assertNotSame(period7, period5);
      assertTrue(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period0));
      assertFalse(period7.equals((Object)period5));
      assertNotNull(period7);
      
      PeriodType periodType3 = PeriodType.millis();
      assertEquals(1, periodType3.size());
      assertEquals("Millis", periodType3.getName());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertNotNull(periodType3);
      
      Period period8 = period3.plusHours(0);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period6);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period5);
      assertSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period0);
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period0));
      assertNotNull(period8);
      
      Period period9 = period1.withMonths(1523);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period8);
      assertNotSame(period1, period9);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period9, period4);
      assertNotSame(period9, period0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertNotSame(period9, period3);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotSame(period9, period7);
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period8));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period7));
      assertNotNull(period9);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period10 = period8.withField(durationFieldType0, 0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotSame(period10, period7);
      assertNotSame(period10, period6);
      assertNotSame(period10, period4);
      assertNotSame(period10, period3);
      assertNotSame(period10, period2);
      assertNotSame(period10, period0);
      assertNotSame(period10, period8);
      assertNotSame(period10, period1);
      assertNotSame(period10, period9);
      assertNotSame(period10, period5);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period1, period10);
      assertNotSame(period1, period8);
      assertNotSame(period1, period9);
      assertNotSame(period1, period0);
      assertNotSame(period1, period5);
      assertNotSame(period3, period5);
      assertNotSame(period3, period7);
      assertSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period4);
      assertNotSame(period3, period9);
      assertNotSame(period3, period1);
      assertNotSame(period3, period2);
      assertNotSame(period3, period6);
      assertNotSame(period3, period10);
      assertNotSame(period8, period2);
      assertNotSame(period8, period7);
      assertNotSame(period8, period6);
      assertNotSame(period8, period1);
      assertNotSame(period8, period9);
      assertNotSame(period8, period10);
      assertNotSame(period8, period5);
      assertSame(period8, period3);
      assertNotSame(period8, period4);
      assertNotSame(period8, period0);
      assertFalse(period10.equals((Object)period7));
      assertTrue(period10.equals((Object)period8));
      assertFalse(period10.equals((Object)period6));
      assertFalse(period10.equals((Object)period4));
      assertFalse(period10.equals((Object)period2));
      assertFalse(period10.equals((Object)period0));
      assertTrue(period10.equals((Object)period3));
      assertFalse(period10.equals((Object)period1));
      assertFalse(period10.equals((Object)period9));
      assertFalse(period10.equals((Object)period5));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period6));
      assertFalse(period1.equals((Object)period8));
      assertFalse(period1.equals((Object)period9));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period5));
      assertFalse(period3.equals((Object)period5));
      assertFalse(period3.equals((Object)period7));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period9));
      assertFalse(period3.equals((Object)period1));
      assertFalse(period3.equals((Object)period2));
      assertFalse(period3.equals((Object)period6));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period9));
      assertFalse(period8.equals((Object)period5));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period0));
      assertNotNull(period10);
      
      // Undeclared exception!
      try { 
        Period.parse("Rks");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Rks\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Duration duration0 = new Duration(1440L, 1440L);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotNull(duration1);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = duration1.toPeriodFrom((ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotNull(hours0);
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotNull(minutes0);
      
      Hours hours1 = minutes0.toStandardHours();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(hours1);
      
      Days days0 = hours1.toStandardDays();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(days0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotNull(mutablePeriod0);
      
      Period period1 = period0.plus(mutablePeriod0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotSame(period0, period1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.withHours(0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertNotNull(period2);
      
      MutablePeriod mutablePeriod1 = period2.ZERO.toMutablePeriod();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
      
      Period period3 = period2.minusYears(0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
      assertNotSame(period3, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertNotNull(period3);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      Duration duration2 = duration0.dividedBy((-928L), roundingMode0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getMillis());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertTrue(duration2.equals((Object)duration1));
      assertTrue(duration2.equals((Object)duration0));
      assertNotNull(duration2);
      
      Period period4 = period2.withHours(5);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period3);
      assertNotSame(period4, period2);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertNotSame(period4, period1);
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertFalse(period4.equals((Object)period1));
      assertNotNull(period4);
      
      Period period5 = period2.plusMonths(0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period5);
      assertSame(period2, period3);
      assertNotSame(period5, period4);
      assertNotSame(period5, period1);
      assertSame(period5, period3);
      assertNotSame(period5, period0);
      assertSame(period5, period2);
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period5.equals((Object)period4));
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period1));
      assertNotNull(period5);
      
      Period period6 = period3.plusHours(0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period5);
      assertSame(period2, period3);
      assertSame(period2, period6);
      assertSame(period3, period5);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
      assertSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period6, period0);
      assertNotSame(period6, period4);
      assertNotSame(period6, period1);
      assertSame(period6, period2);
      assertSame(period6, period5);
      assertSame(period6, period3);
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period4));
      assertTrue(period6.equals((Object)period0));
      assertNotNull(period6);
      
      Period period7 = period0.normalizedStandard();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period3);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(period7.equals((Object)period0));
      assertTrue(period7.equals((Object)period5));
      assertTrue(period7.equals((Object)period3));
      assertTrue(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertTrue(period7.equals((Object)period1));
      assertTrue(period7.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period6));
      assertNotNull(period7);
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period8 = period7.withFieldAdded(durationFieldType0, 0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertSame(period7, period8);
      assertNotSame(period7, period2);
      assertNotSame(period7, period1);
      assertNotSame(period7, period6);
      assertNotSame(period7, period0);
      assertNotSame(period7, period4);
      assertNotSame(period7, period5);
      assertNotSame(period7, period3);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertNotSame(period8, period6);
      assertSame(period8, period7);
      assertNotSame(period8, period4);
      assertNotSame(period8, period5);
      assertNotSame(period8, period3);
      assertNotSame(period8, period0);
      assertNotSame(period8, period1);
      assertNotSame(period8, period2);
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(period7.equals((Object)period0));
      assertTrue(period7.equals((Object)period5));
      assertTrue(period7.equals((Object)period3));
      assertTrue(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period4));
      assertTrue(period7.equals((Object)period1));
      assertTrue(period7.equals((Object)period2));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period6));
      assertTrue(period8.equals((Object)period2));
      assertTrue(period8.equals((Object)period5));
      assertTrue(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period4));
      assertTrue(period8.equals((Object)period0));
      assertTrue(period8.equals((Object)period1));
      assertTrue(period8.equals((Object)period6));
      assertNotNull(period8);
      
      DurationFieldType durationFieldType1 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType1.toString());
      assertEquals("years", durationFieldType1.getName());
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertNotNull(durationFieldType1);
      
      Period period9 = period3.withField(durationFieldType1, 1772);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals("years", durationFieldType1.toString());
      assertEquals("years", durationFieldType1.getName());
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period7);
      assertNotSame(period0, period8);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertNotSame(period0, period9);
      assertNotSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period0, period2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period7);
      assertNotSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period3);
      assertNotSame(period1, period9);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period8);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertSame(period2, period5);
      assertNotSame(period2, period9);
      assertSame(period2, period3);
      assertSame(period2, period6);
      assertNotSame(period2, period8);
      assertNotSame(period2, period7);
      assertSame(period3, period5);
      assertNotSame(period3, period9);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
      assertSame(period3, period6);
      assertNotSame(period3, period4);
      assertNotSame(period3, period8);
      assertNotSame(period3, period0);
      assertNotSame(period3, period7);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period7);
      assertNotSame(period9, period2);
      assertNotSame(period9, period0);
      assertNotSame(period9, period4);
      assertNotSame(period9, period1);
      assertNotSame(period9, period8);
      assertNotSame(period9, period3);
      assertTrue(duration0.equals((Object)duration2));
      assertTrue(duration1.equals((Object)duration2));
      assertTrue(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period1));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period0.equals((Object)period6));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period8));
      assertTrue(period1.equals((Object)period7));
      assertTrue(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period7));
      assertTrue(period2.equals((Object)period8));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period3.equals((Object)period4));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period7));
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period8));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period7));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period3));
      assertNotNull(period9);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = new Period(0L);
      assertNotNull(period0);
      
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
      
      Period period1 = period0.minusSeconds(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      Period period2 = period1.ZERO.minusSeconds(0);
      assertNotSame(period0, period2);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Period period3 = Period.weeks(0);
      assertNotSame(period3, period0);
      assertNotSame(period3, period2);
      assertNotSame(period3, period1);
      assertTrue(period3.equals((Object)period1));
      assertTrue(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
      assertNotNull(period3);
      
      Period period4 = period1.withYears(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertNotNull(period4);
      
      Period period5 = period4.minusDays(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period4, period2);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period1));
      assertNotNull(period5);
      
      Period period6 = period5.withWeeks(2056);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period2);
      assertSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period6, period2);
      assertNotSame(period6, period4);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period2));
      assertTrue(period5.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertNotNull(period6);
      
      Period period7 = period2.plusMinutes(637);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period2, period4);
      assertNotSame(period2, period7);
      assertNotSame(period2, period6);
      assertNotSame(period2, period0);
      assertNotSame(period2, period3);
      assertNotSame(period2, period5);
      assertNotSame(period2, period1);
      assertNotSame(period7, period2);
      assertNotSame(period7, period4);
      assertNotSame(period7, period6);
      assertNotSame(period7, period5);
      assertNotSame(period7, period1);
      assertNotSame(period7, period3);
      assertNotSame(period7, period0);
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period3));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertTrue(period2.equals((Object)period5));
      assertTrue(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period3));
      assertTrue(period2.equals((Object)period4));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period6));
      assertFalse(period7.equals((Object)period2));
      assertFalse(period7.equals((Object)period4));
      assertFalse(period7.equals((Object)period6));
      assertFalse(period7.equals((Object)period5));
      assertFalse(period7.equals((Object)period1));
      assertFalse(period7.equals((Object)period3));
      assertFalse(period7.equals((Object)period0));
      assertNotNull(period7);
      
      Days days0 = period6.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(14392, days0.getDays());
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period7);
      assertNotSame(period5, period2);
      assertSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period6, period2);
      assertNotSame(period6, period7);
      assertNotSame(period6, period4);
      assertNotSame(period6, period5);
      assertNotSame(period6, period1);
      assertNotSame(period6, period0);
      assertNotSame(period6, period3);
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period6));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period7));
      assertTrue(period5.equals((Object)period1));
      assertFalse(period6.equals((Object)period2));
      assertFalse(period6.equals((Object)period7));
      assertFalse(period6.equals((Object)period4));
      assertFalse(period6.equals((Object)period5));
      assertFalse(period6.equals((Object)period1));
      assertFalse(period6.equals((Object)period0));
      assertFalse(period6.equals((Object)period3));
      assertNotNull(days0);
      
      int int1 = period1.getHours();
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period8 = period5.withFieldAdded(durationFieldType0, 525);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period8);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period4, period7);
      assertNotSame(period4, period2);
      assertNotSame(period4, period6);
      assertSame(period4, period5);
      assertNotSame(period4, period1);
      assertNotSame(period4, period0);
      assertNotSame(period4, period3);
      assertNotSame(period4, period8);
      assertNotSame(period5, period6);
      assertNotSame(period5, period1);
      assertNotSame(period5, period7);
      assertNotSame(period5, period8);
      assertNotSame(period5, period2);
      assertSame(period5, period4);
      assertNotSame(period5, period0);
      assertNotSame(period5, period3);
      assertNotSame(period8, period1);
      assertNotSame(period8, period6);
      assertNotSame(period8, period7);
      assertNotSame(period8, period4);
      assertNotSame(period8, period3);
      assertNotSame(period8, period2);
      assertNotSame(period8, period0);
      assertNotSame(period8, period5);
      assertTrue(period0.equals((Object)period4));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertFalse(period4.equals((Object)period7));
      assertFalse(period4.equals((Object)period6));
      assertTrue(period4.equals((Object)period1));
      assertTrue(period4.equals((Object)period0));
      assertTrue(period4.equals((Object)period3));
      assertTrue(period4.equals((Object)period2));
      assertTrue(period5.equals((Object)period0));
      assertTrue(period5.equals((Object)period3));
      assertTrue(period5.equals((Object)period2));
      assertFalse(period5.equals((Object)period6));
      assertFalse(period5.equals((Object)period7));
      assertTrue(period5.equals((Object)period1));
      assertFalse(period8.equals((Object)period1));
      assertFalse(period8.equals((Object)period6));
      assertFalse(period8.equals((Object)period7));
      assertFalse(period8.equals((Object)period4));
      assertFalse(period8.equals((Object)period3));
      assertFalse(period8.equals((Object)period2));
      assertFalse(period8.equals((Object)period0));
      assertFalse(period8.equals((Object)period5));
      assertNotNull(period8);
      
      int int2 = (-479);
      Period period9 = period1.plusSeconds(int2);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period8);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period3);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period8));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertNotNull(period9);
      
      Duration duration0 = period9.ZERO.toStandardDuration();
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period8);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertNotSame(period9, period1);
      assertNotSame(period9, period0);
      assertNotSame(period9, period3);
      assertNotSame(period9, period8);
      assertNotSame(period9, period4);
      assertNotSame(period9, period5);
      assertNotSame(period9, period6);
      assertNotSame(period9, period2);
      assertNotSame(period9, period7);
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period8));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(period9.equals((Object)period1));
      assertFalse(period9.equals((Object)period0));
      assertFalse(period9.equals((Object)period3));
      assertFalse(period9.equals((Object)period8));
      assertFalse(period9.equals((Object)period4));
      assertFalse(period9.equals((Object)period5));
      assertFalse(period9.equals((Object)period6));
      assertFalse(period9.equals((Object)period2));
      assertFalse(period9.equals((Object)period7));
      assertNotNull(duration0);
      
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period5);
      assertNotSame(period0, period4);
      assertSame(period0, period1);
      assertNotSame(period0, period8);
      assertNotSame(period0, period7);
      assertNotSame(period0, period6);
      assertNotSame(period0, period9);
      assertNotSame(period1, period4);
      assertNotSame(period1, period5);
      assertNotSame(period1, period3);
      assertNotSame(period1, period7);
      assertNotSame(period1, period9);
      assertNotSame(period1, period8);
      assertSame(period1, period0);
      assertNotSame(period1, period6);
      assertNotSame(period1, period2);
      assertTrue(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period8));
      assertTrue(period0.equals((Object)period2));
      assertTrue(period0.equals((Object)period5));
      assertFalse(period0.equals((Object)period7));
      assertFalse(period0.equals((Object)period6));
      assertFalse(period0.equals((Object)period9));
      assertTrue(period0.equals((Object)period3));
      assertFalse(period1.equals((Object)period7));
      assertFalse(period1.equals((Object)period9));
      assertFalse(period1.equals((Object)period8));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period1.equals((Object)period3));
      assertTrue(period1.equals((Object)period4));
      assertFalse(period1.equals((Object)period6));
      assertTrue(period1.equals((Object)period5));
      assertNotNull(minutes0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period(365, 0, 0, (-845), 0, 2, 2, 0);
      period0.withWeeks(9);
      Period period1 = Period.minutes(3);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      Period period2 = period1.ZERO.plusDays(3);
      PeriodType periodType0 = PeriodType.time();
      PeriodType.MINUTE_INDEX = 2;
      Period period3 = period2.ZERO.withPeriodType(periodType0);
      period3.ZERO.toStandardSeconds();
      period3.minusYears(0);
      period1.ZERO.toString(periodFormatter0);
      period1.ZERO.getFieldTypes();
      Period period4 = period0.withSeconds((-845));
      PeriodType.HOUR_INDEX = 3;
      Period.years((-2059));
      Period period5 = period0.withMillis((-4405));
      period0.minusWeeks(12);
      Period.millis((-845));
      Period period6 = new Period((-2059), (-845), 3, 0);
      period5.ZERO.withMinutes(3);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      period6.get(durationFieldType0);
      period1.getYears();
      period5.getYears();
      Period period7 = period1.withDays(12);
      period7.plus(period4);
      period2.plusSeconds(3);
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
}
