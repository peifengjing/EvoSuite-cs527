/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:19:55 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.format.PeriodFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(43, 971, 2628, 0);
      mutablePeriod0.setValue(0, 687);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1741), 114, (-1741), (-1741), (-1741), (-3158), (-1741), (-1741));
      mutablePeriod0.setSeconds(114);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[7];
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology0).get(any(org.joda.time.ReadablePeriod.class) , anyLong());
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1953L), chronology0);
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology1).get(any(org.joda.time.ReadablePeriod.class) , anyLong() , anyLong());
      mutablePeriod0.setPeriod((-1953L), (-1953L), chronology1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1935), (-1935), (-3339), 0, 0, (-1935), 5, 1660);
      int int0 = mutablePeriod0.getYears();
      assertEquals((-1935), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (-2734);
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology0).get(any(org.joda.time.ReadablePeriod.class) , anyLong());
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1953L), chronology0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals((-2734), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 490, (-18), (-18), 21, (-18), (PeriodType) null);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 1781, (-855), 0);
      int int0 = mutablePeriod0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, (-4131));
      mutablePeriod0.add(593, (-177), 360, 593, 0, 0, 360, 0);
      int int0 = mutablePeriod0.getMonths();
      assertEquals((-177), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, (-4131));
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, (-4131));
      mutablePeriod0.add(593, (-177), 360, 593, 39, 39, 360, 39);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1935), (-1935), (-3339), 0, 0, (-1935), 5, 1660);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(1660, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      int int0 = mutablePeriod0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1741), 114, (-1741), 1184, 1184, (-3158), 1184, (-1741));
      int int0 = mutablePeriod0.getHours();
      assertEquals(1184, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 7678125, 0, (-1932), 0, 2182);
      int int0 = mutablePeriod0.getDays();
      assertEquals(7678125, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3547), 0, 0, (-16), (-3547), (-1628), (-3547), 0);
      int int0 = mutablePeriod0.getDays();
      assertEquals((-16), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[4];
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology0).get(any(org.joda.time.ReadablePeriod.class) , anyLong());
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1953L), chronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setSeconds((-2734));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3234), 1972, (-3234), 159, 1972, 1945, 606, 606);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mutablePeriod0.setPeriod((long) (-1), 5L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(chronology0).get(any(org.joda.time.ReadablePeriod.class) , anyLong());
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1953L), chronology0);
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(chronology1).get(any(org.joda.time.ReadablePeriod.class) , anyLong() , anyLong());
      // Undeclared exception!
      try { 
        mutablePeriod0.setPeriod((-1953L), (-1953L), chronology1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 490, (-18), (-18), (-1), (-18), (PeriodType) null);
      mutablePeriod0.setPeriod((-922L), 1296L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[2];
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology0).get(any(org.joda.time.ReadablePeriod.class) , anyLong());
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1953L), chronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setMinutes(278);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(43, 971, 971, 0);
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, (-2186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      PeriodType.DAY_INDEX = 4011;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4011
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[4];
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology0).get(any(org.joda.time.ReadablePeriod.class) , anyLong());
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1953L), chronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.addMinutes(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3547), 0, 0, (-16), (-3547), (-1628), (-3547), (-16));
      PeriodType.HOUR_INDEX = (-628);
      // Undeclared exception!
      try { 
        mutablePeriod0.add((-16), (-1374), (-16), 1184, (-3547), 1184, 1128, (-987));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -628
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("Invalid min days in first week: ", periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Invalid min days in first week: \"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(2802L, periodType0, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(1034L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3050L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      MutablePeriod mutablePeriod0 = new MutablePeriod(36L, 880L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(0, 0, (-28), (-28), 0, 28181250, 28181250, 1, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 490, (-18), (-18), 21, (-18), (PeriodType) null);
      int int0 = mutablePeriod0.getHours();
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Object object0 = mutablePeriod0.clone();
      assertNotSame(mutablePeriod0, object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutablePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-3247), (-3247));
      int int0 = mutablePeriod0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-1158), (-1158), 490, (-1158), (-1158), (-1), (-1158), (PeriodType) null);
      int int0 = mutablePeriod0.getMillis();
      assertEquals((-1158), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-3247), (-3247));
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-1), (-1330), 0, 0, 0, (-1), 0);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mutablePeriod0.setPeriod((long) 0, (Chronology) mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1935), (-1935), (-3339), 0, 0, (-1935), 5, 1660);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals((-1935), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setPeriod(0, 3403, 63, 0, 15, 1139, 3403, 0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(63, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, 1L, mockNullZoneChronology0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1181), (-1181), (-1181), 0);
      int int0 = mutablePeriod0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1181), (-1181), (-1181), 0);
      mutablePeriod0.setPeriod((ReadablePeriod) mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-1158), (-1158), 490, (-1158), (-1158), (-1), (-1158), (PeriodType) null);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-3247), (-3247));
      mutablePeriod0.clear();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2344), (-2344), (-2344), (-2344));
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 490, (-18), (-18), 21, (-18), (PeriodType) null);
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1741), 114, (-1741), (-1741), (-1741), (-3158), (-1741), (-1741));
      mutablePeriod0.setPeriod((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-3247), (-3247));
      mutablePeriod0.addHours(1375);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      PeriodType periodType0 = minutes0.getPeriodType();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-765L), (-765L), periodType0, mockNullZoneChronology0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("kWAYOXf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"kWAYOXf\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Duration duration0 = new Duration(1L, (-7877L));
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.millis();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1741), 114, (-1741), (-1741), (-1741), (-3158), (-1741), (-1741));
      mutablePeriod0.setDays(114);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Duration duration0 = Duration.millis((-2448L));
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(7730941132800022L, periodType0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1935), (-1935), (-3339), 0, 0, (-1935), 5, 1660);
      mutablePeriod0.setHours(2086);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3547), 0, 0, (-16), (-3547), (-1628), (-3547), 0);
      mutablePeriod0.setMonths((-3547));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, (-4131));
      mutablePeriod0.add((long) 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 490, (-18), (-18), 21, (-18), (PeriodType) null);
      Months months0 = Months.ELEVEN;
      mutablePeriod0.add((ReadablePeriod) months0);
      assertEquals(11, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3234), 1972, (-3234), 159, 1972, 1945, 606, 606);
      mutablePeriod0.addSeconds(1248);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(43, 971, 2628, (-9));
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue((-9), 687);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1741), 114, (-1741), (-1741), (-1741), (-3158), (-1741), (-1741));
      mutablePeriod0.addMillis(1957);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(43, 971, 2628, 0);
      mutablePeriod0.setYears(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(chronology0).get(any(org.joda.time.ReadablePeriod.class) , anyLong());
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1953L), chronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setSeconds(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-3247), (-3247));
      mutablePeriod0.setWeeks(0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(11, 11, 11, (-4131));
      mutablePeriod0.addYears(1442);
      int int0 = mutablePeriod0.getYears();
      assertEquals(1442, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2182L), (-2182L));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      mutablePeriod0.add(2336L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3547), 0, 0, (-16), (-3547), (-1628), (-3547), 0);
      mutablePeriod0.setPeriod((-1863L), (long) 1184);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1181), (-1181), (-1181), 0);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3234), 1972, (-3234), 172, 1972, 1945, 606, 606);
      Years years0 = Years.TWO;
      mutablePeriod0.mergePeriod(years0);
      assertEquals(2, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3234), 1972, (-3234), 159, 1972, 1945, 606, 606);
      mutablePeriod0.addWeeks(1248);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Years years0 = Years.TWO;
      PeriodType periodType0 = years0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1732L), periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2135L), 0L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("P1D/P1D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P1D/P1D\" is malformed at \"/P1D\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 494, (-18), (-18), 494, (-18), (PeriodType) null);
      Days days0 = Days.FIVE;
      Duration duration0 = days0.toStandardDuration();
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(432000L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, instant0, periodType0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = new Instant();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, instant0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3547), 0, 0, 0, (-3547), (-1628), (-3547), (-1628));
      mutablePeriod0.add(0, 0, 0, 0, (-3547), 0, 1128, (-987));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(43, 971, 2628, 0);
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      mutablePeriod0.set(durationFieldType0, 0);
      assertEquals("hours", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1741), 114, (-1741), 1184, 1184, (-3158), 1184, (-1741));
      int int0 = mutablePeriod0.getMonths();
      assertEquals(114, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1181), (-1181), (-1181), 0);
      mutablePeriod0.setPeriod((long) 0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-724L), (-724L), periodType0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3547), 0, 0, (-16), (-3547), (-1628), (-3547), 0);
      mutablePeriod0.addMinutes(0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3234), 1972, (-3234), 159, 1972, 1945, 606, 606);
      mutablePeriod0.addDays((-86399999));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3234), 1972, (-3234), 159, 1972, 1945, 606, 606);
      mutablePeriod0.addMonths((-971));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 490, (-18), (-18), 21, (-18), (PeriodType) null);
      mutablePeriod0.setMinutes((-2353));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, mockNullZoneChronology0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Duration duration0 = Duration.standardDays(0);
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 1781, (-855), 0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      mutablePeriod0.add(durationFieldType0, (-855));
      assertEquals("years", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("", chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, (-4131));
      mutablePeriod0.setMillis(0);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1158), (-18), (-18), 490, (-18), (-18), 21, (-18), (PeriodType) null);
      Days days0 = Days.FIVE;
      Duration duration0 = days0.toStandardDuration();
      mutablePeriod0.setPeriod((ReadableDuration) duration0, (Chronology) null);
      assertEquals(432000000L, duration0.getMillis());
  }
}
