/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:58:35 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicDayOfMonthDateTimeField;
import org.joda.time.chrono.CopticChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicDayOfMonthDateTimeField_ESTest extends BasicDayOfMonthDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.days();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(86400000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(1934, 1246).when(readablePartial0).get(any(org.joda.time.DateTimeFieldType.class));
      doReturn(true, true).when(readablePartial0).isSupported(any(org.joda.time.DateTimeFieldType.class));
      int int0 = basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(86400000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.halfdays();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(43200000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      boolean boolean0 = basicDayOfMonthDateTimeField0.isLeap((-2207L));
      assertEquals(1, CopticChronology.AM);
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(43200000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.millis();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(1L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.isLeap((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.minutes();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(60000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.getRangeDurationField();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.weeks();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.getMaximumValueForSet(0L, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.millis();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(1L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial0).size();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.halfdays();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(43200000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.getMaximumValue((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.minutes();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(60000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.getMaximumValue((long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.millis();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(1L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.getMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.hours();
      assertEquals(1, CopticChronology.AM);
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(3600000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.get(1318L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfMonthDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = null;
      try {
        basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, (DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.weeks();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      DurationField durationField1 = basicDayOfMonthDateTimeField0.getRangeDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotSame(durationField0, durationField1);
      assertNotSame(durationField1, durationField0);
      assertFalse(durationField1.equals((Object)durationField0));
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertNotNull(durationField1);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField1 = null;
      try {
        basicDayOfMonthDateTimeField1 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unit duration field must be precise
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null, 1);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.weeks();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial0).get(any(org.joda.time.DateTimeFieldType.class));
      doReturn(true, false).when(readablePartial0).isSupported(any(org.joda.time.DateTimeFieldType.class));
      int int0 = basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.halfdays();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(43200000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(readablePartial0).isSupported(any(org.joda.time.DateTimeFieldType.class));
      int int0 = basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(43200000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null, 1);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.weeks();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(readablePartial0).size();
      int[] intArray0 = new int[1];
      int int0 = basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.minutes();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(60000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      int int0 = basicDayOfMonthDateTimeField0.getMinimumValue();
      assertEquals(1, CopticChronology.AM);
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals(60000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.seconds();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(1000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfMonthDateTimeField0.isLeap((-53215747200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null, 1);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.weeks();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertNotNull(basicDayOfMonthDateTimeField0);
      
      int int0 = basicDayOfMonthDateTimeField0.get(30);
      assertEquals(1, CopticChronology.AM);
      assertTrue(basicDayOfMonthDateTimeField0.isSupported());
      assertEquals(1, basicDayOfMonthDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfMonthDateTimeField0.isLenient());
      assertEquals("dayOfMonth", basicDayOfMonthDateTimeField0.getName());
      assertEquals(30, basicDayOfMonthDateTimeField0.getMaximumValue());
      assertEquals(604800000L, basicDayOfMonthDateTimeField0.getUnitMillis());
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null, 1);
      DurationField durationField0 = copticChronology0.weeks();
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      basicDayOfMonthDateTimeField0.getMaximumValue((long) 1);
      CopticChronology.getInstance((DateTimeZone) null);
      basicDayOfMonthDateTimeField0.getMaximumValue((-1704L));
      ReadablePartial readablePartial0 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(readablePartial0).size();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial0, intArray0);
      int int0 = basicDayOfMonthDateTimeField0.getMaximumValue();
      basicDayOfMonthDateTimeField0.getRangeDurationField();
      ReadablePartial readablePartial1 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null, (DateTimeFieldType) null).when(readablePartial1).getFieldType(anyInt());
      doReturn(30).when(readablePartial1).size();
      basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial1, intArray0);
      basicDayOfMonthDateTimeField0.get(30);
      basicDayOfMonthDateTimeField0.getAsShortText((long) 1);
      basicDayOfMonthDateTimeField0.getRangeDurationField();
      basicDayOfMonthDateTimeField0.getRangeDurationField();
      ReadablePartial readablePartial2 = mock(ReadablePartial.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(readablePartial2).get(any(org.joda.time.DateTimeFieldType.class));
      doReturn(true, false).when(readablePartial2).isSupported(any(org.joda.time.DateTimeFieldType.class));
      int int1 = basicDayOfMonthDateTimeField0.getMaximumValue(readablePartial2);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DurationField durationField0 = copticChronology0.days();
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(copticChronology0, durationField0);
      int int0 = basicDayOfMonthDateTimeField0.getMaximumValueForSet(1, (-2924));
      assertEquals(30, int0);
  }
}
