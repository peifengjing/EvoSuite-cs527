/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:38:13 GMT 2017
 */

package org.joda.time.chrono.gj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.chrono.gj.TestJulianChronology;
import org.joda.time.chrono.gj.TestJulianYearField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestJulianYearField_ESTest extends TestJulianYearField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.addWrapField(0L, 0);
      assertEquals((-100000000), testJulianYearField0.getMinimumValue());
      assertEquals(0L, long0);
      assertEquals(100000000, testJulianYearField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.addWrapField(26050L, 35);
      assertEquals(100000000, testJulianYearField0.getMaximumValue());
      assertEquals(1104537626050L, long0);
      assertEquals((-100000000), testJulianYearField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.add(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-2679), (-2679), (-2679));
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      // Undeclared exception!
      try { 
        testJulianYearField0.add((long) 100000000, (-84542732000000L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -84542732000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestJulianYearField testJulianYearField0 = null;
      try {
        testJulianYearField0 = new TestJulianYearField((TestJulianChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.gj.TestGJYearField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.add((-2890L), (-2890L));
      assertEquals((-91201507202890L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-2679), (-2679), (-2679));
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.add((long) 100000000, (long) 100000000);
      assertEquals(3155760000100000000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-2679), (-2679), (-2679));
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      int int0 = testJulianYearField0.getMaximumValue();
      assertEquals(100000000, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(1, 0, 0);
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      int int0 = testJulianYearField0.getMinimumValue();
      assertEquals((-100000000), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-694), (-694), (-694));
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.add((long) (-694), (long) (-694));
      assertEquals((-21900931200694L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(1, 0, 0);
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.roundCeiling(0L);
      assertEquals(2764800000L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(1, 8, 8);
      TestJulianYearField testJulianYearField0 = new TestJulianYearField(testJulianChronology0);
      long long0 = testJulianYearField0.addWrapField((-384L), (-1));
      assertEquals(100000000, testJulianYearField0.getMaximumValue());
      assertEquals((-31536000384L), long0);
      assertEquals((-100000000), testJulianYearField0.getMinimumValue());
  }
}
