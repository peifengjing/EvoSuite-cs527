/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:07:08 GMT 2017
 */

package org.joda.time.chrono.gj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.chrono.gj.TestJulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestJulianChronology_ESTest extends TestJulianChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(586, 586, 586);
      int[] intArray0 = testJulianChronology0.isoFromFixed(1L);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.millisPerYear();
      assertEquals(31557600000L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.millisPerMonth();
      assertEquals(2629800000L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(2032, 2032, 2032);
      boolean boolean0 = testJulianChronology0.isLeapYear(2032);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      boolean boolean0 = testJulianChronology0.isLeapYear(1134);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int int0 = testJulianChronology0.gjYearFromFixed(0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int[] intArray0 = testJulianChronology0.gjFromFixed((-1));
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromISO(352831696, (-1), 13);
      assertEquals(128871776606L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromISO((-1), 0, 362);
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromGJ(3613, 3613, 3613);
      assertEquals(1433359L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      long long0 = testJulianChronology0.fixedFromGJ((-1), 13, (-1));
      assertEquals((-3L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      // Undeclared exception!
      try { 
        testJulianChronology0.gjYearFromFixed(30962844000019L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: 84771646818
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      // Undeclared exception!
      try { 
        testJulianChronology0.gjFromFixed(21260793600000L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: 58208880493
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = null;
      try {
        testJulianChronology0 = new TestJulianChronology(0, (-820), (-1690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-1608), (-1608), 367);
      assertEquals("TestJulianChronology", testJulianChronology0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      DateTimeField dateTimeField0 = testJulianChronology0.year();
      assertEquals(100000000, dateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(2032, 2032, 2032);
      DateTimeField dateTimeField0 = testJulianChronology0.monthOfYear();
      assertEquals("monthOfYear", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      DateTimeField dateTimeField0 = testJulianChronology0.dayOfMonth();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int[] intArray0 = testJulianChronology0.isoFromFixed(2629800000L);
      assertArrayEquals(new int[] {7200001, 1, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int[] intArray0 = testJulianChronology0.isoFromFixed((-752L));
      assertArrayEquals(new int[] {(-3), 50, 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int[] intArray0 = testJulianChronology0.isoFromFixed((-322L));
      assertArrayEquals(new int[] {(-1), 7, 7}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      // Undeclared exception!
      try { 
        testJulianChronology0.fixedFromISO(0, 362, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal weekyear: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      // Undeclared exception!
      try { 
        testJulianChronology0.isoFromFixed((-62087731200000L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // year cannot be cast to an int: -169986943738
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(586, 586, 586);
      // Undeclared exception!
      try { 
        testJulianChronology0.fixedFromGJ(0, 586, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      int int0 = testJulianChronology0.gjYearFromFixed((-307L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      // Undeclared exception!
      try { 
        testJulianChronology0.isLeapYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal year: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      String string0 = testJulianChronology0.toString();
      assertEquals("TestJulianChronology", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(2032, 2032, 2032);
      DateTimeField dateTimeField0 = testJulianChronology0.weekyear();
      assertEquals(100000000, dateTimeField0.getMaximumValue());
  }
}
