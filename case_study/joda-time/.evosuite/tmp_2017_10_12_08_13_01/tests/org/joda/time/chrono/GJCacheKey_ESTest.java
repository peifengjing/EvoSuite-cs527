/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:22:59 GMT 2017
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.MockZone;
import org.joda.time.chrono.GJCacheKey;
import org.joda.time.chrono.GJChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GJCacheKey_ESTest extends GJCacheKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Instant instant0 = gJChronology0.getGregorianCutover();
      GJCacheKey gJCacheKey0 = new GJCacheKey(dateTimeZone0, instant0, 40);
      GJCacheKey gJCacheKey1 = new GJCacheKey(dateTimeZone0, instant0, 1107);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertFalse(gJCacheKey1.equals((Object)gJCacheKey0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockZone mockZone0 = new MockZone(45, 45, 45);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      GJCacheKey gJCacheKey0 = new GJCacheKey(mockZone0, (Instant) null, 45);
      GJCacheKey gJCacheKey1 = new GJCacheKey(dateTimeZone0, (Instant) null, 45);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = new Instant((long) (byte)37);
      GJCacheKey gJCacheKey0 = new GJCacheKey((DateTimeZone) null, instant0, (byte)37);
      GJCacheKey gJCacheKey1 = new GJCacheKey((DateTimeZone) null, instant0, (byte)37);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJCacheKey gJCacheKey0 = new GJCacheKey(dateTimeZone0, (Instant) null, 1);
      GJCacheKey gJCacheKey1 = new GJCacheKey(dateTimeZone0, (Instant) null, 1);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Instant instant0 = Instant.now();
      GJCacheKey gJCacheKey0 = new GJCacheKey(dateTimeZone0, instant0, (-932));
      Instant instant1 = instant0.withMillis((-932));
      GJCacheKey gJCacheKey1 = new GJCacheKey(dateTimeZone0, instant1, (-932));
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJCacheKey gJCacheKey0 = new GJCacheKey(dateTimeZone0, (Instant) null, 1);
      Instant instant0 = Instant.now();
      GJCacheKey gJCacheKey1 = new GJCacheKey(dateTimeZone0, instant0, 1);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      GJCacheKey gJCacheKey0 = new GJCacheKey(dateTimeZone0, instant0, 1);
      GJCacheKey gJCacheKey1 = new GJCacheKey(dateTimeZone0, instant0, 0);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertFalse(gJCacheKey1.equals((Object)gJCacheKey0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockZone mockZone0 = new MockZone(39, 39, 39);
      GJCacheKey gJCacheKey0 = new GJCacheKey((DateTimeZone) null, (Instant) null, 39);
      GJCacheKey gJCacheKey1 = new GJCacheKey(mockZone0, (Instant) null, 39);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey1);
      assertFalse(boolean0);
      assertFalse(gJCacheKey1.equals((Object)gJCacheKey0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJCacheKey gJCacheKey0 = new GJCacheKey((DateTimeZone) null, (Instant) null, 39);
      boolean boolean0 = gJCacheKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJCacheKey gJCacheKey0 = new GJCacheKey(dateTimeZone0, (Instant) null, 1);
      boolean boolean0 = gJCacheKey0.equals(gJCacheKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJCacheKey gJCacheKey0 = new GJCacheKey((DateTimeZone) null, (Instant) null, 39);
      boolean boolean0 = gJCacheKey0.equals("org/joda/time/tz/data");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      GJCacheKey gJCacheKey0 = new GJCacheKey(dateTimeZone0, instant0, 1);
      gJCacheKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJCacheKey gJCacheKey0 = new GJCacheKey((DateTimeZone) null, (Instant) null, 39);
      gJCacheKey0.hashCode();
  }
}
