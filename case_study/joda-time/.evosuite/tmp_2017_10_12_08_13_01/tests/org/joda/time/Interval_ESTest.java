/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:29:30 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDuration_Basics;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Duration duration0 = Duration.standardDays((-2169L));
      Duration duration1 = duration0.dividedBy((-2169L));
      Interval interval1 = interval0.withDurationBeforeEnd(duration1);
      assertEquals(1392322881320L, interval1.getStartMillis());
      assertEquals(1392409281320L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockZone mockZone0 = new MockZone(2L, (-359), (-359));
      DateTime dateTime0 = new DateTime(2L, (DateTimeZone) mockZone0);
      Duration duration0 = new Duration(1392409282045L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, period0);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertEquals(2L, interval1.getStartMillis());
      assertEquals(1392409282047L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(dateTime0, duration0);
      Interval interval1 = new Interval(0, 0L);
      boolean boolean0 = interval1.abuts(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = Period.years(725);
      Interval interval0 = new Interval((ReadableInstant) null, period0);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      Interval interval2 = interval0.withDurationAfterStart((ReadableDuration) null);
      boolean boolean0 = interval1.abuts(interval2);
      assertEquals(24271129281320L, interval1.getStartMillis());
      assertFalse(boolean0);
      assertEquals(1392409281320L, interval2.getStartMillis());
      assertEquals(1392409281320L, interval2.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval(246L, 246L);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.millis(8L);
      Interval interval0 = new Interval(dateTime0, duration0);
      Interval interval1 = new Interval(0, 8L);
      Interval interval2 = interval1.gap(interval0);
      assertEquals(8L, interval2.getStartMillis());
      assertEquals(1392409281320L, interval2.getEndMillis());
      assertNotNull(interval2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Period period0 = Period.years(725);
      Interval interval0 = new Interval((ReadableInstant) null, period0);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      YearMonth yearMonth0 = new YearMonth();
      Interval interval2 = yearMonth0.toInterval((DateTimeZone) null);
      Interval interval3 = interval1.gap(interval2);
      assertEquals(24271129281320L, interval3.getEndMillis());
      assertEquals(1393632000000L, interval3.getStartMillis());
      assertNotNull(interval3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.millis(8L);
      Interval interval0 = new Interval(dateTime0, duration0);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), (Chronology) null);
      Interval interval1 = interval0.withStartMillis((-1L));
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), (Chronology) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4300);
      DateTime dateTime0 = new DateTime(1392409277754L, dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime(dateTimeZone0);
      mutableDateTime0.setWeekyear(112);
      Interval interval1 = interval0.withStart(mutableDateTime0);
      assertEquals((-1L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Hours hours0 = Hours.hoursIn(interval0);
      Interval interval1 = interval0.withPeriodBeforeEnd(hours0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interval interval0 = new Interval((-471L), (-471L));
      Duration duration0 = Duration.ZERO;
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null);
      Interval interval1 = interval0.withPeriodBeforeEnd(mutablePeriod0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(0, 0);
      Period period0 = new Period(duration0, dateTime0);
      Minutes minutes0 = period0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Interval interval1 = interval0.withPeriodAfterStart(weeks0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval(13L, 13L, (Chronology) null);
      Interval interval1 = interval0.withEndMillis(13L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), (Chronology) null);
      Interval interval1 = interval0.withEndMillis((-1L));
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval((ReadablePeriod) null, (ReadableInstant) null);
      DateTimeUtils.setCurrentMillisFixed((-102L));
      Interval interval1 = interval0.withStart((ReadableInstant) null);
      assertEquals((-102L), interval1.getStartMillis());
      
      Interval interval2 = interval1.withEnd((ReadableInstant) null);
      assertEquals((-102L), interval2.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), (Chronology) null);
      Duration duration0 = new Duration(3320L, 3320L);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = new Interval((-634L), (-634L));
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Interval interval0 = new Interval(0, 0);
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      Interval interval1 = interval0.withChronology(chronology0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), (Chronology) null);
      Interval interval1 = interval0.withChronology((Chronology) null);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(dateTime0, duration0);
      Interval interval1 = interval0.toInterval();
      assertEquals(1392409281320L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(11, 11);
      Interval interval0 = yearMonth0.toInterval();
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      Interval interval0 = Interval.parse((String) null);
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockZone mockZone0 = new MockZone(2L, (-359), (-359));
      DateTime dateTime0 = new DateTime(2L, (DateTimeZone) mockZone0);
      Duration duration0 = new Duration(1392409282045L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, period0);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.overlap(interval0);
      assertNotNull(interval1);
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-123L), (-2147461508), (-2147461508));
      Interval interval0 = new Interval((-123L), (-123L), mockZone0);
      Interval interval1 = new Interval((-2147461508), 1703L, (DateTimeZone) null);
      Interval interval2 = interval0.overlap(interval1);
      assertEquals((-123L), interval2.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), (Chronology) null);
      MutableInterval mutableInterval0 = new MutableInterval(1392409281074L, 1392409281074L, (Chronology) null);
      Interval interval1 = interval0.gap(mutableInterval0);
      assertEquals((-1L), interval1.getStartMillis());
      assertEquals(1392409281074L, interval1.getEndMillis());
      assertNotNull(interval1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval((-2670L), (-2670L));
      // Undeclared exception!
      try { 
        interval0.withStartMillis(342L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval(3815L, 3815L);
      // Undeclared exception!
      try { 
        interval0.withStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = new Interval((-4803L), 1557L);
      Period period0 = new Period((-2147463299), 3164, 3164, 3164, 3229, 3229, (-2743), (-1315), (PeriodType) null);
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147465269 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Interval interval0 = new Interval(31449600000L, 31449600000L, mockNullZoneChronology0);
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      Period period1 = period0.minusMillis((-2147480684));
      Weeks weeks0 = period1.toStandardWeeks();
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(weeks0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Interval interval0 = yearMonth0.toInterval();
      Period period0 = new Period(1, (-2096));
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Interval interval0 = new Interval(5678L, 5678L, mockNullZoneChronology0);
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration((-1L));
      Duration duration0 = testDuration_Basics_MockMutableDuration0.toDuration();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("S");
      LocalDate localDate0 = new LocalDate((-1L), (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime localTime0 = LocalTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0, (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = new Interval(0L, 365L);
      Period period0 = Period.minutes((-1480));
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Interval interval0 = new Interval((ReadablePeriod) null, (ReadableInstant) null);
      DateTimeUtils.setCurrentMillisFixed(3566L);
      // Undeclared exception!
      try { 
        interval0.withEnd((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = Duration.standardDays((-634L));
      Interval interval0 = duration0.toIntervalFrom((ReadableInstant) null);
      // Undeclared exception!
      try { 
        interval0.withDurationAfterStart(duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("Interval composed of two durations: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: Interval composed of two durations: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Period period0 = Period.years(2144525681);
      Interval interval0 = null;
      try {
        interval0 = new Interval((ReadableInstant) null, period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2144527695 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Period period0 = Period.years((-5));
      Interval interval0 = null;
      try {
        interval0 = new Interval((ReadableInstant) null, period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.plus(1440L);
      Interval interval0 = null;
      try {
        interval0 = new Interval(instant1, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardMinutes((-16L));
      Interval interval0 = null;
      try {
        interval0 = new Interval(dateTime0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-634L));
      Interval interval0 = null;
      try {
        interval0 = new Interval(duration0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval("", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Interval interval0 = null;
      try {
        interval0 = new Interval(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(185542587187200000L, (-2023L), dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      Interval interval0 = null;
      try {
        interval0 = new Interval(4652L, 0L, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(0L, (-467L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      // Undeclared exception!
      try { 
        interval0.withEndMillis((-731L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withEndMillis(0L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withStartMillis(0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Duration duration0 = Duration.millis(38898367845L);
      DateTime dateTime0 = new DateTime(38898367845L);
      Interval interval0 = new Interval(duration0, dateTime0);
      assertEquals(38898367845L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Period period0 = Period.years(721);
      Interval interval0 = new Interval((ReadableInstant) null, period0);
      Interval interval1 = new Interval(interval0);
      assertEquals(24144898881320L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L), (Chronology) null);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Period period0 = Period.years(725);
      Interval interval0 = new Interval((ReadableInstant) null, period0);
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Interval interval0 = new Interval((ReadablePeriod) null, (ReadableInstant) null);
      Chronology chronology0 = interval0.getChronology();
      Interval interval1 = interval0.withChronology(chronology0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Period period0 = Period.years(725);
      Interval interval0 = new Interval((ReadableInstant) null, period0);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      boolean boolean0 = interval0.abuts(interval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = duration0.toIntervalFrom((ReadableInstant) null);
      boolean boolean0 = interval0.abuts(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withEnd(dateTime0);
      boolean boolean0 = interval1.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(dateTime0, duration0);
      DateTimeUtils.setCurrentMillisFixed(0L);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(dateTime0, duration0);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(dateTime0, duration0);
      Interval interval1 = new Interval(0, 0);
      Interval interval2 = interval1.gap(interval0);
      assertEquals(0L, interval2.getStartMillis());
      assertEquals(1392409281320L, interval2.getEndMillis());
      assertNotNull(interval2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(dateTime0, duration0);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = duration0.toIntervalFrom((ReadableInstant) null);
      Interval interval1 = interval0.withStartMillis(0);
      Interval interval2 = interval1.overlap(interval1);
      assertNotNull(interval2);
      assertTrue(interval2.equals((Object)interval1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Interval interval0 = Interval.parseWithOffset("2010-06-30T12:30+04:00/2010-07-01T14:30+04:00");
      assertEquals(1277980200000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Interval interval0 = Interval.parseWithOffset("2010-06-30T12:30/P1DT2H");
      assertEquals(1277994600000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Interval interval0 = Interval.parseWithOffset("P1DT2H/2010-07-01T14:30");
      assertEquals(1277994600000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("4P7V]k/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: 4P7V]k/
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("/wv!LsZNc<$yd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: /wv!LsZNc<$yd
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("2010-06-30T1:30+04:00/2010-0-01T4:30+04:00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"2010-0-01T4:30+04:00\": Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("#)&N^?YTHS#e5[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: #)&N^?YTHS#e5[
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Interval interval0 = new Interval(28L, 28L, (DateTimeZone) null);
      Interval interval1 = interval0.withStartMillis(28L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Interval interval0 = new Interval((Object) null, (Chronology) null);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Interval interval0 = new Interval((ReadablePeriod) null, (ReadableInstant) null);
      Interval interval1 = interval0.withStart((ReadableInstant) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Period period0 = Period.years(725);
      Interval interval0 = new Interval((ReadableInstant) null, period0);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      Interval interval2 = interval1.overlap(interval0);
      assertNull(interval2);
      assertEquals(24271129281320L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Duration duration0 = Duration.standardDays((-2169L));
      // Undeclared exception!
      try { 
        interval0.withDurationBeforeEnd(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Period period0 = Period.hours(1);
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      Interval interval1 = interval0.withPeriodBeforeEnd(period0);
      Interval interval2 = interval1.gap((ReadableInterval) null);
      assertEquals(1393628400000L, interval2.getEndMillis());
      assertNotNull(interval2);
      assertEquals(1393632000000L, interval1.getEndMillis());
      assertEquals(1392409281320L, interval2.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.toInterval();
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3566L, 246L);
      Interval interval0 = null;
      try {
        interval0 = new Interval(mutablePeriod0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("201006-30T12:30+04:00/2010-07-01T14:30+04:00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"201006-30T12:30+04:00\": Value 30 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = new Interval(dateTime0, duration0);
      Interval interval1 = interval0.withEnd(dateTime0);
      assertSame(interval1, interval0);
  }
}
