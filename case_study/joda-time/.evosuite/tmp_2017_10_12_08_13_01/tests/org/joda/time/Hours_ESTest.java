/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:15:22 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MockPartial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestDuration_Basics;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Hours_ESTest extends Hours_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.hours(51);
      Hours hours1 = hours0.EIGHT.minus(51);
      boolean boolean0 = hours0.isLessThan(hours1);
      assertEquals((-43), hours1.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals(0, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) null, (ReadablePartial) mockPartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) null, (ReadableInstant) instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(3, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.hours((-755));
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals((-4), weeks0.getWeeks());
      assertEquals((-755), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.hours(1996);
      Seconds seconds0 = hours0.TWO.toStandardSeconds();
      assertEquals(7200, seconds0.getSeconds());
      assertEquals(1996, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.hours(51);
      Minutes minutes0 = hours0.FIVE.toStandardMinutes();
      assertEquals(51, hours0.getHours());
      assertEquals(300, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.hours(52);
      Hours hours1 = hours0.negated();
      Minutes minutes0 = hours1.toStandardMinutes();
      assertEquals((-3120), minutes0.getMinutes());
      assertEquals(52, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.millis(Integer.MAX_VALUE);
      Hours hours0 = duration0.toStandardHours();
      Duration duration1 = hours0.toStandardDuration();
      assertEquals(2145600000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardDays(18L);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Hours hours1 = hours0.MAX_VALUE.negated();
      Duration duration1 = hours1.toStandardDuration();
      assertEquals((-128849018820L), duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      Days days0 = hours0.FOUR.toStandardDays();
      assertEquals(3, hours0.getHours());
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2910L);
      Hours hours0 = duration0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      assertEquals(69840, hours0.getHours());
      assertEquals(2910, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Hours hours1 = hours0.plus(hours0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-410L));
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.plus((-19));
      Hours hours2 = hours1.plus(hours0);
      assertSame(hours2, hours1);
      assertEquals((-19), hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Hours hours1 = hours0.plus(0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-410L));
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.multipliedBy(52);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.FOUR.multipliedBy((-1));
      assertEquals((-4), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      Hours hours1 = hours0.MAX_VALUE.minus(hours0);
      assertEquals(3, hours0.getHours());
      assertEquals(2147483644, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Hours hours1 = hours0.FOUR.minus(0);
      assertEquals(4, hours1.getHours());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.minus(24);
      Seconds seconds1 = hours1.toStandardSeconds();
      assertEquals((-86400), seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.plus(8);
      int int0 = hours1.getHours();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.MIN_VALUE.minus(hours0);
      int int0 = hours1.getHours();
      assertEquals(0, hours0.getHours());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hours hours0 = Hours.hours(52);
      Hours hours1 = hours0.negated();
      Hours hours2 = hours1.dividedBy(52);
      assertEquals((-1), hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(104767008L);
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 1746116 * 3600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.hours(52);
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(370370367L);
      Duration duration0 = testDuration_Basics_MockMutableDuration0.toDuration();
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        hours0.MAX_VALUE.multipliedBy(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.MIN_VALUE.minus(hours0);
      // Undeclared exception!
      try { 
        hours1.FIVE.minus(hours1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MAX_VALUE.minus((-176));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 176
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) mockPartial0, (ReadablePartial) mockPartial0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Hours", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(Integer.MIN_VALUE);
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertEquals((-596523), hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2147483621);
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertFalse(boolean0);
      assertEquals(596523, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.hours(16);
      boolean boolean0 = hours0.isLessThan(hours0);
      assertEquals(16, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.standardDays(18L);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      Hours hours1 = hours0.plus(hours0);
      boolean boolean0 = hours1.isGreaterThan(hours0);
      assertEquals(672, hours1.getHours());
      assertEquals(336, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(Integer.MIN_VALUE);
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals((-596523), hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2147483621);
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals(596523, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hours hours0 = Hours.hours(1);
      boolean boolean0 = hours0.isGreaterThan(hours0);
      assertEquals(1, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1075L));
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.THREE.dividedBy(1);
      assertEquals(0, hours0.getHours());
      assertEquals(3, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.hours(1996);
      Hours hours1 = hours0.TWO.dividedBy(2006);
      assertEquals(1996, hours0.getHours());
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = new Duration(1424L, 1424L);
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.minus((Hours) null);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.hours(1);
      // Undeclared exception!
      try { 
        hours0.MAX_VALUE.plus(hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        hours0.FOUR.plus(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 4 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hours hours0 = Hours.hours(8);
      assertEquals(8, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.hours(7);
      assertEquals(7, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.hours(6);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.hours(5);
      assertEquals(5, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.hours(4);
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      hours0.FIVE.plus((Hours) null);
      assertEquals(3, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hours hours0 = Hours.hours(2);
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MIN_VALUE);
      Duration duration0 = Duration.standardSeconds(Integer.MIN_VALUE);
      Hours hours1 = duration0.toStandardHours();
      boolean boolean0 = hours0.isLessThan(hours1);
      assertEquals((-596523), hours1.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1075L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      int int0 = hours0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Hours hours0 = Hours.hours((-1767));
      hours0.negated();
      assertEquals((-1767), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2910L);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(415, weeks0.getWeeks());
      assertEquals(69840, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      hours0.getPeriodType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Hours hours0 = Hours.hours((-1767));
      Days days0 = hours0.MIN_VALUE.toStandardDays();
      assertEquals((-89478485), days0.getDays());
      assertEquals((-1767), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Hours hours0 = Hours.hours((-1767));
      Hours hours1 = hours0.multipliedBy((-1767));
      assertEquals(3122289, hours1.getHours());
      assertEquals((-1767), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2910L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = Hours.standardHoursIn(hours0);
      assertTrue(hours1.equals((Object)hours0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Duration duration0 = new Duration(1424L, 1424L);
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      hours0.getFieldType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Instant instant0 = Instant.now();
      Hours hours0 = Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Duration duration0 = Duration.standardDays(18L);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      String string0 = hours0.SIX.toString();
      assertEquals("PT6H", string0);
      assertEquals(336, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hours hours0 = Hours.hours(1);
      Hours hours1 = hours0.minus(1);
      boolean boolean0 = hours1.isGreaterThan(hours0);
      assertEquals(1, hours0.getHours());
      assertFalse(boolean0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1075L));
      Hours hours0 = duration0.toStandardHours();
      hours0.toStandardSeconds();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Hours hours0 = duration0.toStandardHours();
      Duration duration1 = hours0.toStandardDuration();
      assertEquals(0L, duration1.getStandardSeconds());
  }
}
