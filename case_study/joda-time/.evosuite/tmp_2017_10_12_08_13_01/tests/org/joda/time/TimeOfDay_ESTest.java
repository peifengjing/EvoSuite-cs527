/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 19:17:22 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.time.DateTimeException;
import java.time.Month;
import java.time.chrono.IsoChronology;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestLocalDateTime_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.TestMutableInterval_Updates;
import org.joda.time.TimeOfDay;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = new TimeOfDay(3, 0, 14, 1);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(14);
      timeOfDay1.plusHours(0);
      timeOfDay1.minusMinutes((-12));
      timeOfDay2.isEqual(timeOfDay1);
      timeOfDay0.getFieldTypes();
      TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(14);
      timeOfDay3.plusHours((-2794));
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      Period period0 = new Period((Object) null, chronology0);
      timeOfDay0.MIDNIGHT.toDateTimeToday();
      TimeOfDay timeOfDay4 = timeOfDay1.withPeriodAdded(period0, (-1880));
      timeOfDay4.plusMillis(4);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay4.MIDNIGHT.withField(dateTimeFieldType0, 3);
      timeOfDay0.withSecondOfMinute(1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      timeOfDay1.equals(mockThaiBuddhistDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(208, 1, (-869));
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(2, 14, 122, 1, 1338, 1);
      TimeOfDay timeOfDay5 = TimeOfDay.fromDateFields(mockDate0);
      timeOfDay0.withSecondOfMinute(3);
      // Undeclared exception!
      try { 
        timeOfDay5.withChronologyRetainFields(chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      Period period0 = Period.hours(2557);
      Period period1 = period0.withPeriodType((PeriodType) null);
      Instant instant0 = new Instant();
      Instant instant1 = instant0.plus((long) 2557);
      DateTime dateTime0 = instant1.toDateTime(chronology0);
      period1.toDurationFrom(dateTime0);
      // Undeclared exception!
      timeOfDay0.withPeriodAdded(period1, 2557);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(14);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(14);
      TimeOfDay timeOfDay3 = timeOfDay1.plusHours(0);
      timeOfDay3.compareTo(timeOfDay2);
      timeOfDay1.minusMinutes((-12));
      DateTimeUtils.setCurrentMillisFixed(1);
      timeOfDay2.isEqual(timeOfDay1);
      timeOfDay0.getFieldTypes();
      TimeOfDay timeOfDay4 = timeOfDay1.minusSeconds(14);
      timeOfDay4.plusHours((-2794));
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      Period period0 = new Period((Object) null, chronology0);
      timeOfDay0.MIDNIGHT.toDateTimeToday();
      TimeOfDay timeOfDay5 = timeOfDay1.withPeriodAdded(period0, (-1880));
      TimeOfDay timeOfDay6 = timeOfDay5.plusMillis(4);
      timeOfDay0.withSecondOfMinute(1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      timeOfDay1.equals(mockThaiBuddhistDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(208, 1, (-869));
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(2, 14, 122, 1, 1338, 1);
      TimeOfDay timeOfDay7 = TimeOfDay.fromDateFields(mockDate0);
      timeOfDay6.plusSeconds(1);
      timeOfDay0.withSecondOfMinute(3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      timeOfDay4.withField(dateTimeFieldType0, 2);
      // Undeclared exception!
      try { 
        timeOfDay7.withChronologyRetainFields(chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-7L));
      Period period0 = Period.years(1);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      timeOfDay1.equals(uTCDateTimeZone0);
      timeOfDay1.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay2 = timeOfDay1.minusMillis(1);
      period0.getFieldTypes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay2.withField(dateTimeFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.getZone();
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      mockNullZoneChronology0.days();
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.plusMinutes(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(3);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(0);
      timeOfDay1.plusHours(0);
      timeOfDay1.minusMinutes((-12));
      timeOfDay2.isEqual(timeOfDay1);
      TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(3);
      timeOfDay3.plusHours((-2794));
      TimeOfDay timeOfDay4 = timeOfDay0.withSecondOfMinute(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(208, 1, (-863));
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      timeOfDay4.getFieldTypes();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.toDateTimeToday();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 0, 2);
      TimeOfDay timeOfDay1 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay(1000L);
      DateTimeFieldType dateTimeFieldType0 = timeOfDay2.getFieldType(3);
      TimeOfDay timeOfDay3 = new TimeOfDay(1, 1, 1, 1);
      TimeOfDay timeOfDay4 = timeOfDay1.withMillisOfSecond(36);
      timeOfDay4.withMinuteOfHour(2);
      DateTimeUtils.setCurrentMillisFixed(3L);
      TimeOfDay timeOfDay5 = timeOfDay4.minusHours(3317);
      timeOfDay5.minusHours(3317);
      timeOfDay4.withField(dateTimeFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, (Chronology) null);
      TimeOfDay timeOfDay1 = new TimeOfDay(3, 0, 3, 1, (Chronology) null);
      java.time.Period period0 = java.time.Period.ZERO;
      period0.getChronology();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      timeOfDay1.plusSeconds((-32));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(14);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(14);
      timeOfDay1.plusHours(0);
      timeOfDay1.minusMinutes((-12));
      timeOfDay2.isEqual(timeOfDay1);
      TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(14);
      timeOfDay3.plusHours((-2794));
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      Period period0 = new Period((Object) null, chronology0);
      period0.multipliedBy(2);
      TimeOfDay timeOfDay4 = timeOfDay1.withPeriodAdded(period0, (-1880));
      TimeOfDay timeOfDay5 = timeOfDay4.plusMillis(4);
      TimeOfDay timeOfDay6 = timeOfDay0.withSecondOfMinute(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(208, 1, (-863));
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(2, 14, 122, 1, 0, 1);
      TimeOfDay.fromDateFields(mockDate0);
      timeOfDay5.plusSeconds(1);
      timeOfDay6.getFieldTypes();
      timeOfDay1.withSecondOfMinute(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds((-1880));
      TimeOfDay timeOfDay2 = timeOfDay1.minusHours((-2409));
      TimeOfDay timeOfDay3 = timeOfDay1.MIDNIGHT.withSecondOfMinute(5);
      timeOfDay3.isAfter(timeOfDay2);
      // Undeclared exception!
      timeOfDay0.plusMillis(352831696);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.minus((ReadablePeriod) null);
      java.time.Period period0 = java.time.Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      MockIsoChronology.dateNow(isoChronology0);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      timeOfDay1.minusSeconds(1860);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(0);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(2);
      timeOfDay1.plusHours(0);
      timeOfDay1.minusMinutes((-12));
      timeOfDay2.isEqual(timeOfDay1);
      TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(0);
      timeOfDay3.plusHours((-2794));
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      Period period0 = new Period((Object) null, chronology0);
      TimeOfDay timeOfDay4 = timeOfDay1.withPeriodAdded(period0, (-1880));
      timeOfDay4.plusMillis(4);
      // Undeclared exception!
      try { 
        TimeOfDay.fromMillisOfDay((long) 1, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(14);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(14);
      TimeOfDay timeOfDay3 = timeOfDay1.plusHours(0);
      timeOfDay3.MIDNIGHT.plusSeconds(0);
      timeOfDay1.minusMinutes((-12));
      timeOfDay2.isEqual(timeOfDay1);
      timeOfDay0.getFieldTypes();
      TimeOfDay timeOfDay4 = timeOfDay1.minusSeconds(14);
      timeOfDay4.plusHours((-2794));
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      Period period0 = new Period((Object) null, chronology0);
      TimeOfDay timeOfDay5 = timeOfDay1.withPeriodAdded(period0, (-1880));
      timeOfDay5.plusMillis(4);
      timeOfDay0.withSecondOfMinute(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(208, 1, (-863));
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1153L);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(0);
      timeOfDay1.MIDNIGHT.isBefore(timeOfDay0);
      Month month0 = Month.APRIL;
      // Undeclared exception!
      try { 
        MockLocalDate.of(0, month0, (-631));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -631
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.MIDNIGHT.getFields();
      timeOfDay0.getSecondOfMinute();
      timeOfDay0.plusMillis((-463));
      // Undeclared exception!
      try { 
        timeOfDay0.withSecondOfMinute((-463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -463 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay0 = new TimeOfDay(0L, chronology0);
      timeOfDay0.plusHours(3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(14);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(14);
      timeOfDay1.plusHours(0);
      timeOfDay1.minusMinutes((-12));
      timeOfDay2.isEqual(timeOfDay1);
      timeOfDay0.getFieldTypes();
      TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(14);
      // Undeclared exception!
      timeOfDay3.plusHours(20587500);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay.fromMillisOfDay((-5103L), (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay();
      Period period0 = new Period(0L);
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded(period0, (-1958));
      TimeOfDay timeOfDay2 = timeOfDay1.plusMinutes((-1958));
      timeOfDay2.getField(0);
      timeOfDay0.MIDNIGHT.withPeriodAdded(period0, (-342));
      TimeOfDay.fromMillisOfDay((long) (-1958));
      TimeOfDay timeOfDay3 = timeOfDay0.minus(period0);
      timeOfDay0.getSecondOfMinute();
      timeOfDay3.getField(1, chronology0);
      Calendar calendar0 = MockCalendar.getInstance();
      TimeOfDay.fromCalendarFields(calendar0);
      timeOfDay3.withMinuteOfHour(3);
      timeOfDay1.minusMinutes(3);
      timeOfDay3.plusSeconds(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = new Locale("org.joda.time.base.BaseSingleFieldPeriod");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (int[]) null);
      // Undeclared exception!
      try { 
        timeOfDay1.getHourOfDay();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.MIDNIGHT.getChronology();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusSeconds(1);
      timeOfDay1.MIDNIGHT.compareTo((ReadablePartial) timeOfDay0);
      // Undeclared exception!
      try { 
        timeOfDay0.withMillisOfSecond((-1607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1607 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1, (Chronology) null);
      Duration duration0 = Duration.millis(1312L);
      Duration duration1 = duration0.dividedBy(1664L);
      duration1.negated();
      TimeOfDay timeOfDay1 = null;
      try {
        timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) uTCDateTimeZone0);
      timeOfDay0.minus((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, (Chronology) null);
      Duration duration0 = Duration.millis(1312L);
      Duration duration1 = duration0.dividedBy(1664L);
      duration1.negated();
      TimeOfDay timeOfDay1 = null;
      try {
        timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2602), 1714, 1714);
      TimeOfDay.fromDateFields(mockDate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType.seconds();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.getHourOfDay();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.toDateTimeToday();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 2);
      TimeOfDay timeOfDay1 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay(1000L);
      timeOfDay2.getFieldType(3);
      TimeOfDay.fromMillisOfDay((long) 0);
      TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(0);
      timeOfDay3.withMinuteOfHour(2);
      DateTimeUtils.setCurrentMillisFixed(1);
      timeOfDay3.toString();
      timeOfDay3.minusHours(3317);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer.getInteger("PeriodFormat.weeks");
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withDurationAdded(0L, 14);
      Duration duration0 = Duration.millis(0L);
      Instant instant2 = instant1.plus((ReadableDuration) duration0);
      Chronology chronology0 = instant2.getChronology();
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null, chronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      TimeOfDay timeOfDay1 = timeOfDay0.withFieldAdded(durationFieldType0, (-2115));
      timeOfDay1.withMinuteOfHour(0);
      timeOfDay1.minusHours(14);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, 3);
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(3);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      // Undeclared exception!
      try { 
        timeOfDay1.withFieldAdded(durationFieldType0, 1198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.minusHours(2);
      Duration duration0 = Duration.millis(2);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Duration duration1 = duration0.dividedBy(1999L, roundingMode0);
      duration0.isEqual(duration1);
      PeriodType periodType0 = PeriodType.time();
      Period period0 = duration0.toPeriod(periodType0);
      timeOfDay1.MIDNIGHT.getFields();
      Days days0 = period0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      TimeOfDay timeOfDay2 = timeOfDay0.plus(seconds0);
      TimeOfDay timeOfDay3 = timeOfDay2.plusMillis(2);
      timeOfDay0.withSecondOfMinute(2);
      timeOfDay3.getSecondOfMinute();
      timeOfDay3.plusHours(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(3114, 3114, 3114, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.withMillisOfSecond(12);
      timeOfDay0.getFields();
      PeriodType periodType0 = PeriodType.time();
      timeOfDay0.minusMillis(2);
      timeOfDay0.MIDNIGHT.withChronologyRetainFields((Chronology) null);
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(3, (-1788), 1000, 3, 2, 0, 3, (-4697), periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      timeOfDay0.minus((ReadablePeriod) null);
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(0);
      TimeOfDay timeOfDay2 = timeOfDay1.minusMinutes(3);
      TimeOfDay timeOfDay3 = new TimeOfDay(2, 3);
      timeOfDay2.MIDNIGHT.plusMillis(4207);
      DurationFieldType.weeks();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        timeOfDay2.withField(dateTimeFieldType0, 600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 600 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.plusMillis((-519));
      timeOfDay0.plusHours(4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      // Undeclared exception!
      try { 
        timeOfDay1.withField(dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdayOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeOfDay.fromMillisOfDay(0L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(1692, (-989), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1692 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.yearOfCentury();
      Chronology chronology0 = mockNullZoneChronology0.withZone((DateTimeZone) null);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(3, 3, 3, 14, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0, 12, 0);
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds(11);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      timeOfDay1.withFieldAdded(durationFieldType0, 0);
      timeOfDay0.minusHours(12);
      DurationFieldType durationFieldType1 = DurationFieldType.HALFDAYS_TYPE;
      TestMutableInterval_Updates testMutableInterval_Updates0 = null;
      try {
        testMutableInterval_Updates0 = new TestMutableInterval_Updates("org.joda.time.LocalDate");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay0 = new TimeOfDay(50400000L, chronology0);
      // Undeclared exception!
      try { 
        timeOfDay0.withMinuteOfHour(1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(0L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.toDateTimeToday();
      // Undeclared exception!
      try { 
        timeOfDay0.withMinuteOfHour(1248);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1248 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds((-1307));
      timeOfDay1.minusMinutes(3);
      TestDateTime_Basics testDateTime_Basics0 = null;
      try {
        testDateTime_Basics0 = new TestDateTime_Basics("dEOaD=MDjNd^/Cw");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(2);
      TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay(2);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(0L, periodType0);
      PeriodType.yearDay();
      Hours hours0 = period0.toStandardHours();
      TimeOfDay timeOfDay3 = timeOfDay2.withPeriodAdded(hours0, 0);
      period0.minus(hours0);
      timeOfDay3.toString();
      timeOfDay3.getSecondOfMinute();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      durationFieldType0.getField((Chronology) null);
      durationFieldType0.getField((Chronology) null);
      timeOfDay2.getValue(2);
      TimeOfDay timeOfDay4 = timeOfDay2.withFieldAdded(durationFieldType0, 0);
      TimeOfDay timeOfDay5 = timeOfDay0.plusMillis(0);
      timeOfDay5.minusHours(1);
      timeOfDay4.getMinuteOfHour();
      timeOfDay1.minusMinutes(0);
      timeOfDay1.getFieldType(2);
      timeOfDay5.toLocalTime();
      // Undeclared exception!
      try { 
        timeOfDay4.getField(3, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-12L));
      // Undeclared exception!
      try { 
        timeOfDay0.withHourOfDay((-1614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1614 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 4);
      timeOfDay0.MIDNIGHT.toString();
      DateTimeUtils.setCurrentMillisFixed(1L);
      timeOfDay0.getFieldType(2);
      timeOfDay0.plusMillis(2);
      Instant instant0 = new Instant((long) 3);
      Period period0 = Period.years(2301);
      Period period1 = period0.plusSeconds(11);
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.toLocalTime();
      TimeOfDay timeOfDay1 = timeOfDay0.withHourOfDay(1);
      timeOfDay0.getMinuteOfHour();
      timeOfDay0.getFieldType(1);
      DateTimeUtils.setCurrentMillisSystem();
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay(0L);
      Period period0 = Period.millis((-1131));
      Seconds seconds0 = period0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Seconds seconds1 = minutes0.toStandardSeconds();
      Weeks weeks0 = seconds1.toStandardWeeks();
      Minutes minutes1 = weeks0.toStandardMinutes();
      Hours hours0 = minutes1.toStandardHours();
      Days days0 = hours0.toStandardDays();
      timeOfDay2.MIDNIGHT.minus(days0);
      timeOfDay0.size();
      TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
      timeOfDay0.getFieldTypes();
      timeOfDay3.plus(hours0);
      TestMutableInterval_Updates testMutableInterval_Updates0 = null;
      try {
        testMutableInterval_Updates0 = new TestMutableInterval_Updates("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      Period period0 = Period.years(1);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      timeOfDay1.plusSeconds(1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(4551, 4551, 4551);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4551 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 3367;
      intArray0[2] = 323;
      intArray0[3] = (-1739);
      intArray0[4] = 2060;
      intArray0[5] = (-1427);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((TimeOfDay) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(2658, 2658, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      timeOfDay0.minusMillis(3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields((Chronology) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "3O4");
      Locale locale0 = Locale.GERMANY;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      timeOfDay1.get(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardMinutes((-504));
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      Chronology chronology0 = instant1.getChronology();
      // Undeclared exception!
      try { 
        timeOfDay0.getField((-504), chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -504
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(2, 1900, 1836, 877, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for minuteOfHour must not be larger than 59
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeOfDay timeOfDay0 = new TimeOfDay(2, 2, 2);
      timeOfDay0.getMinuteOfHour();
      // Undeclared exception!
      try { 
        timeOfDay0.getFieldType(6130);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(calendar0);
      timeOfDay0.getMinuteOfHour();
      timeOfDay0.getMinuteOfHour();
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(12);
      timeOfDay1.plusSeconds(1);
      timeOfDay0.getHourOfDay();
      timeOfDay0.getSecondOfMinute();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0, 0, 2);
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds(3);
      timeOfDay1.MIDNIGHT.isEqual(timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1);
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = null;
      try {
        testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2024));
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      timeOfDay0.getMillisOfSecond();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-5272), (-5272), 2, (-5272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5272 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.getMinuteOfHour();
      timeOfDay0.withPeriodAdded((ReadablePeriod) null, 21);
      try { 
        DateTimeZone.forOffsetHoursMinutes(5690, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 5690
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.MIDNIGHT.getChronology();
      timeOfDay0.size();
      timeOfDay0.toDateTimeToday();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(2394);
      Duration duration0 = Duration.ZERO;
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadableDuration) duration0);
      LocalDateTime localDateTime3 = localDateTime2.plus((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        timeOfDay0.compareTo(localDateTime3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object object0 = new Object();
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(object0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("*");
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      timeOfDay0.getMinuteOfHour();
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = null;
      try {
        testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("org/joda/time/tz/data");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-5251);
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-5251), (-5251), (-5251), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5251 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, (Chronology) null);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusSeconds((-1));
      timeOfDay1.MIDNIGHT.compareTo((ReadablePartial) timeOfDay0);
      TimeOfDay timeOfDay2 = timeOfDay0.minus((ReadablePeriod) null);
      java.time.Period period0 = java.time.Period.ZERO;
      period0.getChronology();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      TimeOfDay timeOfDay3 = timeOfDay2.plusSeconds((-32));
      timeOfDay3.withChronologyRetainFields((Chronology) null);
      // Undeclared exception!
      try { 
        timeOfDay2.getField((-2409), (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2409
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1L);
      Period period0 = Period.years(1);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      timeOfDay1.equals(uTCDateTimeZone0);
      timeOfDay1.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay2 = timeOfDay1.minusMillis(1);
      period0.getFieldTypes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay2.withField(dateTimeFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.seconds();
      mockNullZoneChronology0.getZone();
      timeOfDay0.toDateTimeToday((DateTimeZone) null);
      timeOfDay0.plusHours((-653));
      timeOfDay0.plusMillis(0);
      int int0 = (-1770);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1770), 43, 0);
      TimeOfDay timeOfDay1 = null;
      try {
        timeOfDay1 = new TimeOfDay(2, (-653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -653 for minuteOfHour must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      timeOfDay0.toLocalTime();
      timeOfDay0.getMillisOfSecond();
      timeOfDay0.toString();
      long long0 = 0L;
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      int int0 = 3027;
      TestDateTime_Basics testDateTime_Basics0 = null;
      try {
        testDateTime_Basics0 = new TestDateTime_Basics("T00:00:00.000");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone.forOffsetMillis(1758);
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0, 0);
      TimeOfDay timeOfDay1 = timeOfDay0.minus((ReadablePeriod) null);
      TimeOfDay timeOfDay2 = timeOfDay1.minusMinutes(3);
      TimeOfDay timeOfDay3 = timeOfDay0.plusMinutes(4177);
      timeOfDay2.MIDNIGHT.plusMillis(4177);
      TimeOfDay timeOfDay4 = timeOfDay0.minusSeconds(3797);
      timeOfDay4.size();
      timeOfDay2.plusHours(3);
      timeOfDay3.plusSeconds(3);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(14);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.withHourOfDay(14);
      timeOfDay1.plusHours(0);
      timeOfDay1.minusMinutes((-12));
      timeOfDay2.isEqual(timeOfDay1);
      timeOfDay0.getFieldTypes();
      TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(14);
      timeOfDay3.plusHours((-2794));
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      Period period0 = new Period((Object) null, chronology0);
      timeOfDay0.MIDNIGHT.toDateTimeToday();
      TimeOfDay timeOfDay4 = timeOfDay1.withPeriodAdded(period0, (-1880));
      timeOfDay4.plusMillis(4);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay4.MIDNIGHT.withField(dateTimeFieldType0, 3);
      timeOfDay0.withSecondOfMinute(1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      timeOfDay1.equals(mockThaiBuddhistDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(208, 1, (-869));
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(2, 14, 122, 1, 1338, 1);
      TimeOfDay timeOfDay5 = TimeOfDay.fromDateFields(mockDate0);
      timeOfDay0.withSecondOfMinute(3);
      // Undeclared exception!
      try { 
        timeOfDay5.withChronologyRetainFields(chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.toDateTimeToday();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 2);
      TimeOfDay timeOfDay1 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      timeOfDay1.getFieldType(3);
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay((long) 0);
      TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(36);
      TimeOfDay timeOfDay4 = timeOfDay3.withMinuteOfHour(2);
      DateTimeUtils.setCurrentMillisFixed(3L);
      timeOfDay3.minusHours(3317);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      timeOfDay4.getHourOfDay();
      timeOfDay2.getSecondOfMinute();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        timeOfDay4.withFieldAdded(durationFieldType0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdays' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
}
