/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 16:33:17 GMT 2017
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MockPartial;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("G[{BUx0<!QjcnrZ", "G[{BUx0<!QjcnrZ", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, (Locale) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("G[{BUx0<!QjcnrZ");
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(0, (String) null, (-2604));
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Chronology chronology0 = iSOChronology0.withUTC();
      Period period0 = new Period((-3359L), (-2394L), chronology0);
      Hours hours0 = period0.toStandardHours();
      Locale locale0 = Locale.CHINESE;
      periodFormatterBuilder_Separator1.countFieldsToPrint(hours0, 0, locale0);
      periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "7XqBA!e:", 0, (Locale) null);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "G[{BUx0<!QjcnrZ";
      stringArray1[1] = null;
      stringArray1[2] = "8Isd";
      stringArray1[3] = null;
      stringArray1[4] = "l@";
      periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "G[{BUx0<!QjcnrZ", (-2604), (Locale) null);
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(0, "8Isd", (-2604));
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No printer or parser supplied");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 2010, 116, false, (-711), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-706L), 2010);
      periodFormatterBuilder_FieldFormatter1.setFieldValue(mutablePeriod0, (-711), 2010);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter1;
      periodFormatterBuilder_FieldFormatterArray0[1] = periodFormatterBuilder_FieldFormatter0;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter2 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatter2;
      periodFormatterBuilder_FieldFormatterArray0[3] = periodFormatterBuilder_FieldFormatter1;
      periodFormatterBuilder_FieldFormatterArray0[4] = periodFormatterBuilder_FieldFormatter1;
      periodFormatterBuilder_FieldFormatterArray0[5] = periodFormatterBuilder_FieldFormatter1;
      periodFormatterBuilder_FieldFormatterArray0[6] = periodFormatterBuilder_FieldFormatter0;
      periodFormatterBuilder_FieldFormatter1.finish(periodFormatterBuilder_FieldFormatterArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No printer or parser supplied");
      MutablePeriod mutablePeriod0 = new MutablePeriod((PeriodType) null);
      Locale locale0 = Locale.JAPAN;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-711), (-711), 2042, false, 2009, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale1 = Locale.JAPAN;
      periodFormatterBuilder_FieldFormatter0.printTo((Writer) null, (ReadablePeriod) mutablePeriod0, locale1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No printer or parser supplied");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 2042, 116, false, (-711), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-706L), 2042);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-711), 2042);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-1287), (-16));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No printer or parser supplied";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No printer or parser supplied", "No printer or parser supplied", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.KOREAN;
      periodFormatterBuilder_Separator0.countFieldsToPrint(mutablePeriod0, (-12), locale0);
      Locale locale1 = new Locale("k)+>g", "org.joda.time.format.perizzuto5zf_ {6uilder$literal");
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("c0>FvoE]S0");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      linkedList0.add((Object) periodFormatterBuilder_CompositeAffix0);
      linkedList0.add((Object) null);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Literal", "zzutO5Zf_ {6");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Literal", (-1186));
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("&q;ibkk'!k1:z9w");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-10), (-3306), (-16), 0, (-10), 724, 2, 952);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.spliterator();
      periodFormatterBuilder_PluralAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$Literal", 7);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("\u0004{iv,+([iV71", (-1837));
      // Undeclared exception!
      try { 
        Charset.forName("\u0004{iv,+([iV71");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \u0004{iv,+([iV71
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Duration duration0 = new Duration(1777L);
      Hours hours0 = duration0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      minutes0.toStandardHours();
      Locale locale0 = Locale.ITALY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("org.joda.time.chrono.JulianChronol;gy");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("org.joda.time.chrono.JulianChronol;gy");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("org.joda.time.chrono.JulianChronol;gy", "org.joda.time.chrono.JulianChronol;gy");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder5.toFormatter();
      periodFormatterBuilder4.appendMillis3Digit();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.joda.time.chrono.JulianChronol;gy";
      stringArray0[1] = "org.joda.time.chrono.JulianChronol;gy";
      stringArray0[2] = "org.joda.time.chrono.JulianChronol;gy";
      stringArray0[3] = "org.joda.time.chrono.JulianChronol;gy";
      stringArray0[4] = "org.joda.time.chrono.JulianChronol;gy";
      stringArray0[5] = "org.joda.time.chrono.JulianChronol;gy";
      stringArray0[6] = "-10:00";
      stringArray0[7] = "org.joda.time.chrono.JulianChronol;gy";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-905), 56, (-905), true, 33, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(days0, 97, locale0);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("org.joda.time.format.periodformattzzuto5zf_ {6teral");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.periodforma...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No printer or parser supplied");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 2042, 116, false, (-711), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((PeriodType) null);
      Locale locale0 = Locale.JAPAN;
      periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "No printer or parser supplied", 8, locale0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "gY";
      stringArray0[2] = "org.joda.time.field.ImpreciseDateTimeField";
      stringArray0[3] = "\uFFFD\uFFFD\uFFFD\uFFFD 10";
      stringArray0[4] = "z}a-T~|,7";
      stringArray0[5] = "";
      stringArray0[6] = "d]X?q}vwf>3";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer("No printer or parser supplied");
      stringBuffer0.append('I');
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, (-3579));
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Period period0 = Period.millis((-3579));
      Locale locale0 = Locale.JAPANESE;
      periodFormatterBuilder_Composite0.calculatePrintedLength(period0, locale0);
      periodFormatterBuilder3.toPrinter();
      Locale locale1 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength((ReadablePeriod) null, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Literal", "zzutO5Zf_ {6");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Literal", (-1186));
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("&q;ibkk'!k1:z9w");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-10), (-3306), (-16), 0, (-10), 724, 2, 952);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      periodFormatterBuilder_PluralAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$Literal", 0);
      // Undeclared exception!
      try { 
        Charset.forName("\u0004{iv,+([iV71");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \u0004{iv,+([iV71
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_SimpleAffix0.calculatePrintedLength((-1));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('l');
      stringWriter1.append('l');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      stringWriter2.append((CharSequence) "");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("Literal must not be null");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ",.hb^uN4b";
      stringArray0[2] = "";
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator(",.hb^uN4b", "", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendDays();
      periodFormatterBuilder5.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2, (-1), 2147483646, true, (-3073), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter1.isSupported((PeriodType) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      String[] stringArray1 = new String[5];
      stringArray1[1] = null;
      stringArray1[2] = "8Isd";
      stringArray1[3] = null;
      stringArray1[4] = "l@";
      mutablePeriod0.setDays(2089);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("hDDGK:)dr", ">&pv].p''yH", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(66, 66, 66, false, 66, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("z|n^82h,,UEvj6{S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Literal", "zzutO5Zf_ {6");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      int int0 = periodFormatterBuilder_PluralAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Literal", (-1186));
      assertEquals(0, int0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("&q;ibkk'!k1:z9w");
      MutablePeriod mutablePeriod0 = new MutablePeriod((-10), (-3306), (-16), 0, (-10), 724, 2, 952);
      Locale locale0 = Locale.ENGLISH;
      int int1 = periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "P@F36}c:tzg", 46, locale0);
      assertEquals((-47), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&q;ibkk'!k1:z9w";
      stringArray0[1] = "&q;ibkk'!k1:z9w";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      periodFormatterBuilder2.printZeroRarelyFirst();
      StringBuffer stringBuffer0 = new StringBuffer("N printer or parser supplied");
      periodFormatterBuilder0.toParser();
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.FRENCH;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(23034375, (-3579), (-19), true, (-3), periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("M`+u[tqf5");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Period period0 = new Period((-679L), (-591L), chronology0);
      periodFormatterBuilder_FieldFormatter1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = Locale.ROOT;
      periodFormatter0.withLocale(locale0);
      PeriodType.seconds();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      DateTime dateTime0 = new DateTime((-1582L));
      Duration duration0 = Duration.standardDays((-1582L));
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      DateTime dateTime2 = dateTime1.minusMonths(47);
      Period period0 = new Period(dateTime2, duration0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) outputStreamWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendPrefix("No printer or parser supplied", "org.joda.time.TestMutableInterval_Basics");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      periodFormatterBuilder2.printZeroRarelyFirst();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "gY";
      stringArray0[2] = "org.joda.time.field.ImpreciseDateTimeField";
      stringArray0[3] = "\uFFFD\uFFFD\uFFFD\uFFFD 10";
      stringArray0[4] = "z}a-T~|,7";
      stringArray0[5] = "";
      stringArray0[6] = "The unit milliseconds must be at least 1";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer("N printer or parser supplied");
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, (-3579));
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Period period0 = Period.millis((-3579));
      Locale locale0 = Locale.JAPANESE;
      periodFormatterBuilder_Composite0.calculatePrintedLength(period0, locale0);
      Locale locale1 = Locale.FRENCH;
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      periodFormatterBuilder3.appendYears();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "gY";
      stringArray0[2] = "g.joda.timfield.ImpreciseDteTimeField";
      stringArray0[3] = "\uFFFD\uFFFD\uFFFD\uFFFD 10";
      stringArray0[4] = "gY";
      stringArray0[5] = "";
      stringArray0[6] = "d]W?q}v f>3";
      StringBuffer stringBuffer0 = new StringBuffer("No printer or parser supplied");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Period period0 = Period.seconds((-3579));
      Locale locale0 = Locale.JAPANESE;
      periodFormatterBuilder_Composite0.calculatePrintedLength(period0, locale0);
      Locale locale1 = Locale.FRENCH;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Literal", "zzutO5Zf_ {6");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Literal", (-1186));
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("&q;ibkk'!k1:z9w");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "QNv{}]";
      stringArray0[1] = "YaxQ.:z_$N";
      stringArray0[2] = "QNv{}]";
      stringArray0[3] = "QNv{}]";
      stringArray0[4] = "QNv{}]";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("v,q%?x`CZcI7", "QNv{}]", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('D');
      // Undeclared exception!
      try { 
        Duration.parse("YaxQ.:z_$N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"YaxQ.:z_$N\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      periodFormatterBuilder2.printZeroRarelyFirst();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "gY";
      stringArray0[2] = "org.joda.time.field.ImpreciseDateTimeField";
      stringArray0[3] = "\uFFFD\uFFFD\uFFFD\uFFFD 10";
      stringArray0[4] = "z}a-T~|,7";
      stringArray0[5] = "";
      stringArray0[6] = "d]X?q}vwf>3";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer("No printer or parser supplied");
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, (-3579));
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Period period0 = Period.millis((-3579));
      Locale locale0 = Locale.JAPANESE;
      periodFormatterBuilder_Composite0.countFieldsToPrint(period0, (-3579), locale0);
      periodFormatterBuilder_Composite0.calculatePrintedLength(period0, locale0);
      Locale locale1 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength((ReadablePeriod) null, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("h");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("S?=nVj", 6);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-20));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h";
      stringArray0[1] = "S?=nVj";
      stringArray0[2] = "S?=nVj";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("h", "h", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Literal", "zzutO5Zf_ {6");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Literal", (-1186));
      MutablePeriod mutablePeriod0 = new MutablePeriod((-10), (-3306), (-16), 0, (-10), 724, 2, 952);
      Locale locale0 = Locale.ENGLISH;
      MockFileWriter mockFileWriter0 = new MockFileWriter(".JA~xPi6!P{OWQoK");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".JA~xPi6!P{OWQoK";
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "&q;ibkk'!k1:z9w", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockPrintWriter1, 1044);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-35), 412, 2681, false, (-35), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("O.N%@2c4m<:!g[");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-713), 2694, (-3239), false, (-464746615), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.calculatePrintedLength((ReadablePeriod) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("z@3+-{hxv@j1b}a:K", "z@3+-{hxv@j1b}a:K");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z@3+-{hxv@j1b}a:K";
      stringArray0[1] = "z@3+-{hxv@j1b}a:K";
      stringArray0[2] = "z@3+-{hxv@j1b}a:K";
      stringArray0[3] = "z@3+-{hxv@j1b}a:K";
      stringArray0[4] = "z@3+-{hxv@j1b}a:K";
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("z@3+-{hxv@j1b}a:K");
      stringArray0[5] = "GBkY#Ndhq:B:PN;*=iF";
      stringArray0[6] = "z@3+-{hxv@j1b}a:K";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroIfSupported();
      periodFormatterBuilder3.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendWeeks();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "z@3+-{hxv@j1b}a:K";
      stringArray1[1] = "z@3+-{hxv@j1b}a:K";
      stringArray1[2] = "GBkY#Ndhq:B:PN;*=iF";
      stringArray1[3] = "GBkY#Ndhq:B:PN;*=iF";
      stringArray1[4] = "z@3+-{hxv@j1b}a:K";
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMonths();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";ibkk'!k1:z9";
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator(";ibkk'!k1:z9", ";ibkk'!k1:z9", stringArray0);
      periodFormatterBuilder5.maximumParsedDigits(6442);
      String[] stringArray1 = new String[2];
      stringArray1[0] = ";ibkk'!k1:z9";
      stringArray1[1] = ";ibkk'!k1:z9";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      periodFormatterBuilder_RegExAffix0.scan(";ibkk'!k1:z9", 6442);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(";ibkk'!k1:z9", ";ibkk'!k1:z9");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;ibkk'!k1:z9
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      stringArray0[3] = "Prefix not followed by field";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[4] = "";
      periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral("X>+0-|Y\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("&q;ibkk'!k1:z9w");
      MutablePeriod mutablePeriod0 = new MutablePeriod((-10), (-3306), (-16), 0, (-10), (-1186), 2, 952);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "zzutO5Zf_ {6");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale1);
      Locale locale2 = Locale.ENGLISH;
      periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "P@F36}c:tzg", 46, locale2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("G[{BUx0<!QjcnrZ", "G[{BUx0<!QjcnrZ", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 945);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.printf("The divisor must be at least 2", (Object[]) stringArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      Locale locale0 = Locale.PRC;
      periodFormatterBuilder_Separator1.printTo((Writer) outputStreamWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, (Locale) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("G[{BUx0<!QjcnrZ");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "G[{BUx0<!QjcnrZ";
      stringArray1[1] = null;
      stringArray1[2] = "8Isd";
      stringArray1[3] = null;
      stringArray1[4] = "l@";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = null;
      try {
        periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("XUf8NDSJc?ryPS'DA^.");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("XUf8NDSJc?ryPS'DA^.", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("&B==u8H.bZL{");
      periodFormatterBuilder_SimpleAffix0.parse("&B==u8H.bZL{", 0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("T3<D|l ", "&B==u8H.bZL{");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits((-1869));
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMonths();
      String[] stringArray0 = new String[9];
      periodFormatterBuilder4.appendSuffix("&B==u8H.bZL{", "(C<&zj");
      stringArray0[0] = "&B==u8H.bZL{";
      stringArray0[1] = "T3<D|l ";
      stringArray0[2] = "T3<D|l ";
      stringArray0[3] = "&B==u8H.bZL{";
      stringArray0[4] = "T3<D|l ";
      stringArray0[5] = "&B==u8H.bZL{";
      stringArray0[6] = "T3<D|l ";
      stringArray0[7] = "EiAy.g_$hL^";
      stringArray0[8] = "&B==u8H.bZL{";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 10
         // &B==u8H.bZL{
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1), (-1), (-1), false, (-1), periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      DateTime dateTime0 = new DateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 2, (-3190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("U0Q*)$uPJTIZN%[;]");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSuffix("U0Q*)$uPJTIZN%[;]", "U0Q*)$uPJTIZN%[;]");
      periodFormatterBuilder5.minimumPrintedDigits((-161));
      periodFormatterBuilder5.printZeroRarelyFirst();
      periodFormatterBuilder5.printZeroRarelyFirst();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("U0Q*)$uPJTIZN%[;]");
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-161), 44, 44, false, 10, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      Period period0 = Period.ZERO;
      Days days0 = period0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      periodFormatterBuilder_FieldFormatter0.getFieldValue(hours0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";ibkk'!k1:z9";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator(";ibkk'!k1:z9", ";ibkk'!k1:z9", stringArray0);
      periodFormatterBuilder4.maximumParsedDigits(6442);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Millis out of range: ");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Millis out of range: ";
      stringArray0[1] = "Millis out of range: ";
      stringArray0[2] = "&q;ibkK'!K1:Z9W";
      stringArray0[3] = "Millis out of range: ";
      stringArray0[4] = "Millis out of range: ";
      stringArray0[5] = "] \"YaT8";
      stringArray0[6] = "Millis out of range: ";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      linkedHashSet0.add(periodFormatterBuilder_RegExAffix0);
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix((-2), "No formatter supplied", (-2));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("Millis out of range: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nI6OCfBEu");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nI6OCfBEu";
      stringArray0[1] = "nI6OCfBEu";
      stringArray0[2] = "nI6OCfBEu";
      stringArray0[3] = "nI6OCfBEu";
      stringArray0[4] = "nI6OCfBEu";
      stringArray0[5] = "nI6OCfBEu";
      stringArray0[6] = "nI6OCfBEu";
      stringArray0[7] = "nI6OCfBEu";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.rejectSignedValues(false);
      periodFormatterBuilder5.printZeroNever();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.maximumParsedDigits(1893);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The instant must not be null";
      stringArray0[1] = "N?";
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix(stringArray0, stringArray0);
      periodFormatterBuilder5.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", "org.joda.time.format.PeriodFormatterBuilder$RegExAffix");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder5.toFormatter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      // Undeclared exception!
      try { 
        Period.parse("N?", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"N?\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("z@3+-{hxv@j1b}a:K", "z@3+-{hxv@j1b}a:K");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      periodFormatterBuilder2.appendHours();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "z@3+-{hxv@j1b}a:K";
      stringArray0[2] = "z@3+-{hxv@j1b}a:K";
      stringArray0[3] = "z@3+-{hxv@j1b}a:K";
      stringArray0[4] = "z@3+-{hxv@j1b}a:K";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter(stringArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("B+-VH`x");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroIfSupported();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "B+-VH`x";
      stringArray0[1] = "B+-VH`x";
      stringArray0[2] = "B+-VH`x";
      stringArray0[3] = "B+-VH`x";
      stringArray0[4] = "B+-VH`x";
      stringArray0[5] = "";
      periodFormatterBuilder4.toParser();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.minimumPrintedDigits(1753);
      periodFormatterBuilder5.appendSecondsWithMillis();
      periodFormatterBuilder5.appendSeconds();
      stringArray0[6] = "B+-VH`x";
      stringArray0[7] = "B+-VH`x";
      stringArray0[8] = "B+-VH`x";
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeparator("B+-VH`x", "B+-VH`x", stringArray0);
      periodFormatterBuilder6.toFormatter();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      // Undeclared exception!
      try { 
        YearMonth.parse("B+-VH`x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"B+-VH`x\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("org.joda.time.format.PeriodFormatterBuilder$Literal", "uz", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("No file directory provided", "No file directory provided");
      periodFormatterBuilder_PluralAffix0.scan("[1G*a E5`<:-.", (-28));
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.parse("[1G*a E5`<:-.", (-1318));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("HmWL", "]=B {8gDWo+~o");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = '<';
      charArray0[2] = 'J';
      charArray0[3] = '1';
      charArray0[4] = '|';
      charArray0[5] = ',';
      periodFormatterBuilder_PluralAffix0.finish((Set<PeriodFormatterBuilder.PeriodFieldAffix>) null);
      periodFormatterBuilder_PluralAffix0.getAffixes();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("X@}z2\"?");
      periodFormatterBuilder_SimpleAffix0.scan("X@}z2\"?", 0);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.minimumPrintedDigits(0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(48, 0, 0, true, 48, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 48, gregorianChronology0);
      periodFormatterBuilder_FieldFormatter0.isZero(mutablePeriod0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("K::c*?@&QJP&G");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("so", "so", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      DateTime dateTime0 = new DateTime(0L);
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) null, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Oef^sC7pO j";
      stringArray0[1] = "org.joda.time.field.DelegatedDurationField";
      stringArray0[2] = "VAV4kJCJ!v]H+HdT";
      stringArray0[3] = "org.joda.time.format.PeriodFormatterBuilder";
      String[] stringArray1 = new String[2];
      periodFormatterBuilder0.minimumPrintedDigits((-3646));
      stringArray1[0] = "Oef^sC7pO j";
      stringArray1[1] = "org.joda.time.field.DelegatedDurationField";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-796));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P";
      stringArray0[1] = "8~[N000Y/|es]M";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, "_r<^e)W4#VfC>S$u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("PT-1.123S", "A45", stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("w;%;,", "w;%;,");
      periodFormatterBuilder_PluralAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$Literal", (-3198));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.CANADA;
      PeriodType periodType0 = PeriodType.months();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, locale0, periodType0);
      periodFormatterBuilder2.printZeroNever();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter1);
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparatorIfFieldsBefore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("A5+\"s\"7hhFKqMWDb:Kw", "A5+\"s\"7hhFKqMWDb:Kw");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) periodFormatterBuilder_PluralAffix0;
      objectArray0[1] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) periodFormatterBuilder_PluralAffix0;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) charArrayWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("rmatterbuild", objectArray0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) printWriter0, (-35));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("PX4Ahy!rztU:BX34");
      periodFormatterBuilder1.printZeroAlways();
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "c=";
      stringArray0[1] = "2002-06-09T00:00:00.000Z";
      stringArray0[2] = "No printer or parser supplied";
      stringArray0[3] = "is not supported";
      stringArray0[4] = "%wq ";
      stringArray0[5] = "\"!gxzJASUf3X))Q";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 12
         // \"!gxzJASUf3X))Q
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(43);
      periodFormatterBuilder_CompositeAffix0.scan("Bj7wogJ8", 2707);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = ">^_o'";
      stringArray1[2] = "";
      periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray1);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("");
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparatorIfFieldsBefore("{S%0,+0eFj'Am2CF~Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$RegExAffix");
      periodFormatterBuilder_SimpleAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", (-17));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(1386);
      LocalDate localDate2 = localDate1.plusDays((-4397));
      Period period0 = Period.fieldDifference(localDate2, localDate1);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.countFieldsToPrint(period0, 1386, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("atterbuilder");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("Builder has created neither a printer nor a parser", "DateTimeField[secondOfMinute]");
      periodFormatterBuilder5.appendSecondsWithMillis();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("c2?Qm94Bz");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
      periodFormatterBuilder5.appendSeparatorIfFieldsAfter("{Sc,{s|[Kn;8:<<G");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("<rG\"'");
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone0);
      Period period0 = new Period(1672L, 0L, chronology0);
      Locale locale0 = Locale.CANADA;
      periodFormatterBuilder_Literal0.countFieldsToPrint(period0, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      periodFormatterBuilder_PluralAffix0.scan("", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("2002-06-09T01:00:00.000+01:00");
      MockFileWriter mockFileWriter0 = new MockFileWriter("P]cXt(");
      java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
      Locale locale0 = dateTimeFormatter0.getLocale();
      periodFormatterBuilder_Literal0.printTo((Writer) mockFileWriter0, (ReadablePeriod) null, locale0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("P]cXt(", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("\"V@wXJYoV15lSnv3H");
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "\"V@wXJYoV15lSnv3H";
      stringArray0[2] = null;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("DateTimeField[secondOfDay]", "DateTimeField[secondOfDay]");
      periodFormatterBuilder_PluralAffix0.calculatePrintedLength(166);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits(26);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("7.M^");
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparator("DateTimeField[secondOfDay]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("&|=$SpS:H]S1[5X", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = stringBuffer0.append((-255));
      // Undeclared exception!
      try { 
        stringBuffer1.insert(32, (CharSequence) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("nkN?Pwi+{dBnvs1T");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "nkN?Pwi+{dBnvs1T";
      stringArray0[1] = "nkN?Pwi+{dBnvs1T";
      stringArray0[2] = "nkN?Pwi+{dBnvs1T";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "nkN?Pwi+{dBnvs1T";
      stringArray1[1] = "nkN?Pwi+{dBnvs1T";
      stringArray1[2] = "nkN?Pwi+{dBnvs1T";
      periodFormatterBuilder0.appendDays();
      stringArray1[3] = "nkN?Pwi+{dBnvs1T";
      stringArray1[4] = "nkN?Pwi+{dBnvs1T";
      stringArray1[5] = "nkN?Pwi+{dBnvs1T";
      stringArray1[6] = "UY>0^)^$";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("No field to apply suffix to", "No field to apply suffix to");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No field to apply suffix to";
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3272, 3272, (-630), true, (-3032), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No field to apply suffix to", "No field to apply suffix to", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Duration duration0 = Duration.standardMinutes((-630));
      Duration duration1 = duration0.multipliedBy((-3032));
      PeriodType periodType0 = PeriodType.dayTime();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = duration1.toPeriod(periodType0, (Chronology) copticChronology0);
      duration1.minus(1895L);
      Locale locale0 = Locale.CHINESE;
      periodFormatterBuilder_Separator0.printTo((StringBuffer) null, (ReadablePeriod) period0, locale0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.printTo((StringBuffer) null, (-1281));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(43);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.scan("Bj7wogJ8", (-305));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("No field to apply suffix to", "No field to apply suffix to");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No field to apply suffix to";
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3272, 3272, (-630), true, (-3032), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No field to apply suffix to", "No field to apply suffix to", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      Duration duration0 = Duration.standardMinutes((-630));
      Duration duration1 = duration0.multipliedBy((-3032));
      PeriodType periodType0 = PeriodType.dayTime();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = duration1.toPeriod(periodType0, (Chronology) copticChronology0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((StringBuffer) null, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("{0yFuma4{m");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{0yFuma4{m");
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, (-987));
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 2573);
      StringBuffer stringBuffer1 = new StringBuffer("{0yFuma4{m");
      stringBuffer1.append(994L);
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer1, 0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(">`3w\"P?5");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits((-987));
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendDays();
      periodFormatterBuilder3.printZeroRarelyFirst();
      periodFormatterBuilder5.appendSeparatorIfFieldsAfter("{0yFuma4{m");
      periodFormatterBuilder3.printZeroIfSupported();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("5P;@0.p");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 40);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("G[{BUx0<!QjcnrZ", "G[{BUx0<!QjcnrZ", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer("Literal must not be null");
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L));
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("v3m~U XdP$ZavK9Od", "v3m~U XdP$ZavK9Od");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("v3m~U XdP$ZavK9Od", "v3m~U XdP$ZavK9Od");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder2.appendMinutes();
      periodFormatterBuilder3.appendSeconds();
      periodFormatterBuilder2.maximumParsedDigits(400);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Duration duration0 = Duration.standardMinutes(69L);
      Instant instant0 = new Instant(69L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(duration0, instant0, periodType0);
      Weeks weeks0 = period0.toStandardWeeks();
      Days days0 = weeks0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((StringBuffer) null, (ReadablePeriod) seconds0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      periodFormatterBuilder_PluralAffix0.parse("", 1680);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      MockPartial mockPartial0 = new MockPartial();
      Chronology chronology0 = mockPartial0.getChronology();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1681), (-597L), chronology0);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "org.joda.time.field.UnsupportedDurationField", 1680, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        periodFormatter1.parseMutablePeriod("Kc/<]h+3D");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "P1DT2H/2010-07-01T14:30+04:00";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(0);
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tterbuilder$");
      stringArray0[0] = "Prefix not followed by field";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength((-59));
      periodFormatterBuilder_CompositeAffix0.scan("Prefix not followed by field", (-29));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, "");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_PluralAffix0.parse("", 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      StringBuffer stringBuffer0 = new StringBuffer("");
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 0);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer1, 1950);
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer1, 1950);
      periodFormatterBuilder_SimpleAffix0.getAffixes();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      stringArray0[3] = "Prefix not followed by field";
      stringArray0[4] = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "\"R@?!@;eY;w", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = new PeriodFormatterBuilder.Separator("q", "q", stringArray0, periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator1, false, false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) pipedWriter0, 999999);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "'cst3~";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      periodFormatterBuilder_RegExAffix0.parse("4e0p1\"X99^v'", 2200);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Asia/Yerevan";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      periodFormatterBuilder_CompositeAffix0.parse("Asia/Yerevan", 55);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("Asia/Yerevan");
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      periodFormatterBuilder1.clear();
      periodFormatterBuilder1.toParser();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z";
      stringArray0[1] = "10 20";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      stringArray0[3] = "Z";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3988, 6, 332, true, 332, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      PeriodType periodType0 = PeriodType.yearDay();
      periodFormatterBuilder_FieldFormatter0.isSupported(periodType0, 6);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-376));
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral("ce");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("ce", "ce");
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparator("ce");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("u{@#");
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_PluralAffix0.finish((Set<PeriodFormatterBuilder.PeriodFieldAffix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Printing not supported", "Printing not supported");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_PluralAffix0.printTo((StringBuffer) null, 2197);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("PeriodFormat.days.regex", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      String[] stringArray0 = new String[1];
      periodFormatterBuilder1.appendSeparator("", "");
      stringArray0[0] = "";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("", "org.joda.time.format.PeriodFormatterBuilder$Literal");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("#j^(~;r7jn");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.append(periodFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1492), (-1492), 46, false, 46, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_RegExAffix0);
      periodFormatterBuilder_FieldFormatter0.getFieldType();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No field to apply suffix to");
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No field to apply suffix to", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      periodFormatterBuilder_RegExAffix0.printTo((Writer) mockPrintWriter0, (-3058));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("org.joda.time.format.periozzuto5zf_ {6ilder$literal");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("org.joda.time.format.periozzuto5zf_ {6ilder$literal");
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator("org.joda.time.format.periozzuto5zf_ {6ilder$literal", "org.joda.time.format.periozzuto5zf_ {6ilder$literal");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("'i2Y)RmBaL)0Q~P.");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(false);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
      periodFormatterBuilder5.printZeroRarelyLast();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No printer or parser supplied");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 2042, 116, false, (-711), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((PeriodType) null);
      periodFormatterBuilder_FieldFormatter0.isZero(mutablePeriod0);
      Locale locale0 = Locale.JAPAN;
      periodFormatterBuilder_FieldFormatter1.parseInto(mutablePeriod0, "No printer or parser supplied", (-1307), locale0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Prefix not followed by field";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("Prefix not followed by field", (-29));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No printer or parser supplied");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 2042, 116, false, (-711), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((PeriodType) null);
      Locale locale0 = Locale.JAPAN;
      periodFormatterBuilder_FieldFormatter1.parseInto(mutablePeriod0, "No printer or parser supplied", (-1307), locale0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("terbuilder$l", "matterbuilde");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      periodFormatterBuilder0.appendMillis();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroIfSupported();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsBefore("");
      periodFormatterBuilder5.appendHours();
      periodFormatterBuilder1.toPrinter();
      periodFormatterBuilder2.minimumPrintedDigits(8);
      periodFormatterBuilder5.maximumParsedDigits((-5844));
      periodFormatterBuilder5.appendSuffix(")8:_d[f_^(O~q%(0Y2{", "terbuilder$l");
      periodFormatterBuilder1.appendMonths();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("G[{BUx0<!QjcnrZ", "G[{BUx0<!QjcnrZ", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = null;
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, (Locale) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("G[{BUx0<!QjcnrZ");
      int int0 = (-2604);
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(0, (String) null, (-2604));
      periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "7XqBA!e:", 0, (Locale) null);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "G[{BUx0<!QjcnrZ";
      stringArray1[1] = null;
      stringArray1[2] = "8Isd";
      stringArray1[3] = null;
      stringArray1[4] = "l@";
      periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "G[{BUx0<!QjcnrZ", (-2604), (Locale) null);
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(0, "8Isd", (-2604));
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("G[{BUx0<!QjcnrZ", "G[{BUx0<!QjcnrZ", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, (Locale) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("G[{BUx0<!QjcnrZ");
      mutablePeriod0.getFieldTypes();
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(0, (String) null, (-2604));
      String[] stringArray1 = new String[5];
      stringArray1[0] = "G[{BUx0<!QjcnrZ";
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 92, false, (-2604), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_Separator1.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatter0);
      stringArray1[1] = null;
      stringArray1[3] = "8Isd";
      stringArray1[3] = null;
      stringArray1[4] = "l@";
      periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "G[{BUx0<!QjcnrZ", (-2604), (Locale) null);
      periodFormatterBuilder_SimpleAffix0.matchesOtherAffix(0, stringArray1[2], 2603);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSuffix("Types array must not contain null");
      periodFormatterBuilder5.toFormatter();
      periodFormatterBuilder1.maximumParsedDigits(47);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HFNP8GmzV(CM";
      stringArray0[1] = "-rH9.{oj9J^";
      stringArray0[2] = "Types array must not contain null";
      stringArray0[3] = "HFNP8GmzV(CM";
      stringArray0[4] = "Types array must not contain null";
      stringArray0[5] = "Types array must not contain null";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Types array must not contain null", "HFNP8GmzV(CM", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale0 = Locale.UK;
      periodFormatterBuilder_Separator1.countFieldsToPrint((ReadablePeriod) null, 47, locale0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("No printer or parser supplied");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      periodFormatterBuilder5.appendSeparator("No printer or parser supplied");
      periodFormatterBuilder1.printZeroAlways();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = ')';
      charArray0[2] = 'E';
      charArray0[3] = ';';
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-42), charArray0, (-42), 317351877);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -42
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Europe/Athens";
      stringArray0[2] = "org.joda.time.DurationFieldType";
      stringArray0[3] = "";
      stringArray0[4] = "3wr5J8rp6D";
      stringArray0[5] = "eu]1hD/HWF<nQ3";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      int int0 = (-42);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3wr5J8rp6D");
      periodFormatterBuilder_RegExAffix0.scan("yi", (-42));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("org.joda.time.DurationFieldType");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      StringWriter stringWriter0 = new StringWriter(4);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 4);
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-376));
      periodFormatterBuilder_CompositeAffix0.scan("S?=~nVj", 6);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-20));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "S?=~nVj";
      stringArray0[2] = "S?=~nVj";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("", "", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(true);
      periodFormatterBuilder3.printZeroIfSupported();
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("h");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-20));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h";
      stringArray0[1] = "S?=~nVj";
      stringArray0[2] = "S?=~nVj";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("h", "h", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(true);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendPrefix("S?=~nVj");
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "S?=~nVj";
      stringArray1[1] = "S?=~nVj";
      stringArray1[2] = "S?=~nVj";
      stringArray1[3] = "S?=~nVj";
      stringArray1[4] = "S?=~nVj";
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("h");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      String string0 = "S?=~nVj";
      periodFormatterBuilder_CompositeAffix0.scan("S?=~nVj", 6);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-20));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h";
      stringArray0[0] = "S?=~nVj";
      stringArray0[2] = "S?=~nVj";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("h", "h", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(true);
      String string1 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Literal", "zzutO5Zf_ {6");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$Literal", (-1186));
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("&q;ibkk'!k1:z9w");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-10), (-3306), (-16), 0, (-10), 724, 2, 952);
      String string0 = "P@F36}c:tzg";
      int int0 = 46;
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      mutablePeriod0.toString();
      periodFormatterBuilder_PluralAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$Literal", 7);
      // Undeclared exception!
      try { 
        Charset.forName("\u0004{iv,+([iV71");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \u0004{iv,+([iV71
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("h");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      String string0 = "S?=~nVj";
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_CompositeAffix0.scan("S?=~nVj", 6);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-20));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h";
      stringArray0[1] = "S?=~nVj";
      stringArray0[2] = "S?=~nVj";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("h", "h", stringArray0);
      periodFormatterBuilder2.toFormatter();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(true);
      String string1 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "GI(b";
      String string1 = "zzutO5Zf_ {6";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("GI(b", "zzutO5Zf_ {6");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_PluralAffix0.scan("GI(b", (-1186));
      String string2 = "&q;ibkk'!k1:z9w";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("&q;ibkk'!k1:z9w");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-10), (-3306), (-16), 0, (-10), 724, 2, 952);
      String string3 = "P@F36}c:tzg";
      int int0 = 46;
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string4 = "\\4{iv,+([iV71";
      periodFormatterBuilder_PluralAffix0.parse("GI(b", 7);
      // Undeclared exception!
      try { 
        Charset.forName("\u0004{iv,+([iV71");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \u0004{iv,+([iV71
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      try { 
        MockURI.URI("", "", (String) null, "6nfz/>fB ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#6nfz/%3EfB%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[5];
      String string0 = "&^$RaLFc0 Gu0@";
      stringArray0[0] = "&^$RaLFc0 Gu0@";
      stringArray0[1] = "&^$RaLFc0 Gu0@";
      stringArray0[2] = "orgjda.time.format.PeridFormtterBuilder$Literal";
      stringArray0[3] = "Prefix not followed by field";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_SimpleAffix0.calculatePrintedLength((-1));
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('l');
      stringWriter1.append('l');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      stringWriter2.append((CharSequence) "");
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) stringWriter2, 0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("Literal must not be null");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ",.hb^uN4b";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparator(",.hb^uN4b", "", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String string0 = "z@3+-{hxv@j1b}a:K";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("z@3+-{hxv@j1b}a:K", "z@3+-{hxv@j1b}a:K");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z@3+-{hxv@j1b}a:K";
      stringArray0[1] = "z@3+-{hxv@j1b}a:K";
      stringArray0[2] = "z@3+-{hxv@j1b}a:K";
      stringArray0[3] = "z@3+-{hxv@j1b}a:K";
      stringArray0[5] = "z@3+-{hxv@j1b}a:K";
      stringArray0[6] = "z@3+-{hxv@j1b}a:K";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // z@3+-{hxv@j1b}a:K
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(">[O@T", ">[O@T");
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ">[O@T");
      periodFormatterBuilder_PluralAffix0.printTo((Writer) printWriter0, 23034375);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.codePoints();
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">[O@T";
      stringArray0[1] = "{+ *";
      stringArray0[2] = "{+ *";
      stringArray0[3] = ">[O@T";
      stringArray0[4] = "";
      stringArray0[5] = "Nn1>n?";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(">[O@T", "{+ *", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      Period period0 = null;
      try {
        period0 = new Period("{+ *");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"{+ *\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodType periodType0 = PeriodType.seconds();
      periodType0.withHoursRemoved();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("/w");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/w";
      stringArray0[1] = "/w";
      stringArray0[2] = "Cannot have two adjacent separators";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithMillis();
      periodFormatterBuilder5.append(periodFormatter0);
      periodFormatterBuilder5.printZeroRarelyLast();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("6l=F68, 5b8T>N", "Cannot have two adjacent separators");
      periodFormatterBuilder_PluralAffix0.parse("/w", (-389));
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix("/w");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "gY";
      stringArray0[2] = "org.joda.time.field.ImpreciseDateTimeField";
      stringArray0[3] = "\uFFFD\uFFFD\uFFFD\uFFFD 10";
      stringArray0[4] = "z}a-T~|,7";
      stringArray0[5] = "";
      stringArray0[6] = "d]X?q}vwf>3";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer("No printer or parser supplied");
      periodFormatterBuilder4.appendSecondsWithMillis();
      stringBuffer0.append('I');
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, (-3579));
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Period period0 = Period.millis((-3579));
      Locale locale0 = Locale.JAPANESE;
      periodFormatterBuilder_Composite0.calculatePrintedLength(period0, locale0);
      periodFormatterBuilder4.toPrinter();
      Locale locale1 = new Locale("d]X?q}vwf>3", "\uFFFD\uFFFD\uFFFD\uFFFD 10");
      periodFormatterBuilder2.appendSeparatorIfFieldsAfter("z}a-T~|,7");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength((ReadablePeriod) null, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("D+v1+:t15H~H6");
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      periodFormatterBuilder1.toParser();
      periodFormatterBuilder1.appendWeeks();
      periodFormatterBuilder1.appendDays();
      String[] stringArray0 = new String[2];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("S3^~E.EXzP");
  }
}
