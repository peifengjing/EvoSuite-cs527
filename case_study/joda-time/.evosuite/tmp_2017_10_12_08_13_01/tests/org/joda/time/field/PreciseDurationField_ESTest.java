/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:25:39 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.field.PreciseDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PreciseDurationField_ESTest extends PreciseDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-978L));
      preciseDurationField0.hashCode();
      assertEquals((-978L), preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 35L);
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType0, (-292L));
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField1);
      assertFalse(preciseDurationField1.equals((Object)preciseDurationField0));
      assertEquals((-292L), preciseDurationField1.getUnitMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 3600000L);
      long long0 = preciseDurationField0.getValueAsLong(3600000L, 1183L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 30L);
      long long0 = preciseDurationField0.getValueAsLong((-3565L), 421L);
      assertEquals((-118L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      long long0 = preciseDurationField0.getUnitMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1226L));
      long long0 = preciseDurationField0.getUnitMillis();
      assertEquals((-1226L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      long long0 = durationField0.getMillis(0L, 3127L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1L));
      long long0 = preciseDurationField0.getMillis(60000L, (-1L));
      assertEquals((-60000L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      long long0 = preciseDurationField0.getMillis((-423), (long) (-423));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-5L));
      long long0 = preciseDurationField0.getMillis(2146914476, (long) 2146914476);
      assertEquals((-10734572380L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 3540L);
      long long0 = preciseDurationField0.getDifferenceAsLong(3540L, 3540L);
      assertEquals(3540L, preciseDurationField0.getUnitMillis());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1L);
      long long0 = preciseDurationField0.getDifferenceAsLong(0L, 91L);
      assertEquals((-91L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      long long0 = preciseDurationField0.add(0L, (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      long long0 = durationField0.add((-398L), 0L);
      assertEquals((-398L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1L);
      long long0 = preciseDurationField0.add(0L, 0);
      assertEquals(0L, long0);
      assertEquals(1L, preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 697L);
      long long0 = preciseDurationField0.add(90L, 465);
      assertEquals(324195L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      // Undeclared exception!
      try { 
        durationField0.isPrecise();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getValueAsLong(0L, (-3162L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 3600000L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getMillis((-42521587200000L), 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -42521587200000 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getDifferenceAsLong(15308640144L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-12219292800000L));
      // Undeclared exception!
      try { 
        preciseDurationField0.add((-12219292800000L), (-12219292800000L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -12219292800000 * -12219292800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PreciseDurationField preciseDurationField0 = null;
      try {
        preciseDurationField0 = new PreciseDurationField((DurationFieldType) null, (-1085L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1L);
      long long0 = preciseDurationField0.getUnitMillis();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-886L));
      long long0 = preciseDurationField0.add((-886L), (-886L));
      assertEquals(784110L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1L);
      long long0 = preciseDurationField0.add(0L, (-1004));
      assertEquals((-1004L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-886L));
      long long0 = preciseDurationField0.getDifferenceAsLong((-886L), 1232L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2779L);
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType0, 7722841L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField1);
      assertEquals(7722841L, preciseDurationField1.getUnitMillis());
      assertFalse(boolean0);
      assertFalse(preciseDurationField1.equals((Object)preciseDurationField0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DurationFieldType durationFieldType1 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType1, 0L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2779L);
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType0, 2779L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField1);
      assertEquals(2779L, preciseDurationField1.getUnitMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2779L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField0);
      assertTrue(boolean0);
      assertEquals(2779L, preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2779L);
      boolean boolean0 = preciseDurationField0.equals(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(2779L, preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 697L);
      long long0 = preciseDurationField0.getMillis(522, (long) 522);
      assertEquals(363834L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2779L);
      long long0 = preciseDurationField0.getMillis(2779L, 2779L);
      assertEquals(7722841L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2779L);
      boolean boolean0 = preciseDurationField0.isPrecise();
      assertTrue(boolean0);
      assertEquals(2779L, preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      long long0 = durationField0.getValueAsLong(0L, (-3162L));
      assertEquals(0L, long0);
      assertEquals(86400000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
  }
}
