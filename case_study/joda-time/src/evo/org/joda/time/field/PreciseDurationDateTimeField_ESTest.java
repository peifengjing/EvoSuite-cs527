/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:02:23 GMT 2017
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DurationField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PreciseDurationDateTimeField_ESTest extends PreciseDurationDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.set(0L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.set(1619L, 0);
      assertEquals(59L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundFloor(9223372036854775807L);
      assertEquals(9223372036854775800L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      long long0 = testPreciseDateTimeField_MockStandardDateTimeField0.roundCeiling((-2647L));
      assertEquals((-2640L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.remainder(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      int int0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMaximumValueForSet((-943L), 1);
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      // Undeclared exception!
      try { 
        testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.set((-943L), 282);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 282 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundCeiling(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      long long0 = testPreciseDateTimeField_MockStandardDateTimeField0.roundCeiling(60L);
      assertEquals(60L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getUnitMillis();
      assertEquals(60L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      int int0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      long long0 = testPreciseDateTimeField_MockStandardDateTimeField0.remainder(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.remainder((-7L));
      assertEquals(53L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundHalfEven(1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      long long0 = testPreciseDateTimeField_MockStandardDateTimeField0.roundHalfEven((-2250L));
      assertEquals((-2280L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      long long0 = testPreciseDateTimeField_MockStandardDateTimeField0.roundFloor(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      long long0 = testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.roundFloor((-120L));
      assertEquals((-120L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DurationField durationField0 = testPreciseDateTimeField_MockPreciseDateTimeField0.getDurationField();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      assertEquals(0, testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getMinimumValue());
      
      long long0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.set((long) (-3861), 0);
      assertEquals((-21L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      boolean boolean0 = testPreciseDateTimeField_MockPreciseDateTimeField0.isLenient();
      assertFalse(boolean0);
  }
}
