/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:21:17 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.TestDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateMidnight_ESTest extends DateMidnight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(Integer.MIN_VALUE);
      assertEquals(1298799502646400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-3478));
      assertEquals(10538380800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(2);
      assertEquals(172800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy(">&LWE>1Z8%Gp5_1\"?G", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \">&LWE>1Z8%Gp5_1\"?G\" for clockhourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      DateMidnight dateMidnight1 = dateMidnight_Property0.setCopy(0);
      assertEquals((-59958144000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      DateTimeField dateTimeField0 = dateMidnight_Property0.getField();
      assertEquals(2922789, dateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, (-1436), Integer.MAX_VALUE);
      DateMidnight dateMidnight0 = new DateMidnight(1L, (DateTimeZone) mockZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(mockZone0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(0);
      assertEquals(950486400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(3080);
      assertEquals(35032003200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(1);
      assertEquals((-62131622400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(41);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(100000000000000L);
      assertEquals(99999964800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withFields((ReadablePartial) null);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(1587);
      DateMidnight dateMidnight2 = dateMidnight1.withFields((ReadablePartial) null);
      assertEquals((-50080896000000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 2);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withEra(0);
      assertEquals((-125719084800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(2);
      assertEquals(1388620800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-3890L));
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertEquals((-31536000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
      assertEquals(1391990400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(600000L);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
      assertEquals((-259200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(2);
      assertEquals(1391299200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(1587);
      DateMidnight dateMidnight2 = dateMidnight1.withChronology((Chronology) null);
      assertEquals((-50080896000000L), dateMidnight2.getMillis());
      assertNotSame(dateMidnight2, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(4166);
      assertEquals(13084904592000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(10);
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals((-30164572800000L), interval0.getEndMillis());
      assertEquals((-30164659200000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1345L);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-351));
      assertEquals((-9684144000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths((-2152));
      DateMidnight dateMidnight2 = dateMidnight1.plusWeeks((-15));
      assertEquals((-4276108800000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2357L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays((-3964));
      assertEquals((-342576000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(0L, 0L, periodType0);
      Weeks weeks0 = period0.toStandardWeeks();
      Days days0 = weeks0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) minutes0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Period period0 = Period.months((-166));
      Duration duration0 = Duration.standardMinutes(31536000008L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, (-166));
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadablePeriod) period0);
      assertEquals((-314097604156800000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(43).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      Period period0 = Period.minutes(0);
      Minutes minutes0 = period0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, (-1436), Integer.MAX_VALUE);
      DateMidnight dateMidnight0 = new DateMidnight(1L, (DateTimeZone) mockZone0);
      Duration duration0 = Duration.ZERO;
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertEquals((-86398564L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      DateMidnight dateMidnight1 = dateMidnight0.plus((-1L));
      assertEquals(1392249600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      DateMidnight dateMidnight1 = dateMidnight0.plus((-1L));
      assertEquals((-172800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1689).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-9));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter2);
      assertEquals(32400000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      System.setCurrentTimeMillis(527L);
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      System.setCurrentTimeMillis((-313L));
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals((-86400000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(2028);
      assertEquals((-1226534400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 0);
      DateMidnight dateMidnight2 = dateMidnight1.minusMonths(0);
      assertEquals((-62167219200000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      Period period0 = Period.minutes(0);
      Minutes minutes0 = period0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) hours0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2145826639).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter1);
      Period period0 = Period.minutes(0);
      Minutes minutes0 = period0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) hours0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) null);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(61L, (Chronology) null);
      Duration duration0 = Duration.standardMinutes(137L);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) 0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minus(7805808000000L);
      assertEquals((-6413472000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      DateMidnight dateMidnight0 = DateMidnight.now(chronology0);
      long long0 = dateMidnight0.checkInstant(1, chronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      long long0 = dateMidnight0.checkInstant(1000000000000000000L, chronology0);
      assertEquals(999999999993600000L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      long long0 = dateMidnight0.checkInstant((-3677), chronology0);
      assertEquals((-86400000L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfEra((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfEra(2146959999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfEra field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury(944);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 944 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury(2361);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withYear((-2147483148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483148 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYear(2146959999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekyear(2146959999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2146959999 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekyear((-166));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear((-523));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekOfWeekyear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      // Undeclared exception!
      try { 
        dateMidnight0.withMonthOfYear(1901);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1901 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withMonthOfYear((-4309));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, 1749);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      // Undeclared exception!
      try { 
        dateMidnight0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      // Undeclared exception!
      try { 
        dateMidnight0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withEra((-165));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // era field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = Duration.standardMinutes(31536000000L);
      // Undeclared exception!
      try { 
        dateMidnight0.withDurationAdded((ReadableDuration) duration0, 2146405052);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1892160000000000 * 2146405052
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfYear(2361);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // dayOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek((-166));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // dayOfWeek field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfMonth((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -24 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYear((-555));
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      // Undeclared exception!
      try { 
        dateMidnight1.withChronology(chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.withCenturyOfEra((-4682));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4682 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withCenturyOfEra(41);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // centuryOfEra field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((-1L), (Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.toLocalDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.toInterval();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears((-2120300309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2120298295 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears(23);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) (-987));
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears(2147483644);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1969 + 2147483644
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusWeeks((-166));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusMonths(2361);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusDays((-4309));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        DateMidnight.parse("", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1246, (-2147483645)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      dateTimeFormatter0.parseMutableDateTime("");
      // Undeclared exception!
      try { 
        DateMidnight.parse("", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse("Zone must not be null", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Zone must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("' is not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"' is not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears(2146959999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146957985 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears(1687);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      DateMidnight dateMidnight0 = DateMidnight.now(chronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusWeeks(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusWeeks(392);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weeks field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusMonths(2146959999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusDays(2146959999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.checkInstant((-1), (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(mockThaiBuddhistDate0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(mockMinguoDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-3256), 0, (-3256), mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded((ReadablePeriod) null, 27);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Period period0 = Period.days((-2832));
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, (-2832));
      assertEquals(694339689600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = Duration.standardHours(3150);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 3959);
      assertEquals(46287331200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(0L, (-15));
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDurationAdded(9223372036854775798L, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1392336000000 + 9223372036854775798
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-973L));
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2357L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-2357L));
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1609L), (-3255), (-3255));
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, mockZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 310);
      DateMidnight dateMidnight2 = dateMidnight1.minusDays(310);
      assertEquals((-52407215996745L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1, dateTimeZone0);
      assertEquals((-62135596800000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) mockNullZoneChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      // Undeclared exception!
      try { 
        dateMidnight0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekOfWeekyear' is not supported
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minusDays((-3677));
      assertEquals(1710028800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(3150);
      assertEquals(3297456000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(21);
      assertEquals(1447459200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2996L));
      Duration duration0 = Duration.standardMinutes((-2996L));
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateMidnight0);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(mutablePeriod0, 0);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      Duration duration0 = new Duration(0L, 1L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) null, (-2582));
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(1318L, 0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(43).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single((-770));
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, (-2147483645));
      assertEquals((-185542586928000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded((DurationFieldType) null, 20587500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-110));
      DateMidnight dateMidnight0 = new DateMidnight((-83L), dateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withField((DateTimeFieldType) null, (-110));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateMidnight dateMidnight1 = dateMidnight0.withFields((ReadablePartial) null);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) mockNullZoneChronology0);
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        dateMidnight0.withFields(localDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      MockZone mockZone0 = new MockZone(0L, 3150, 3150);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(mockZone0);
      assertEquals(1392332846850L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      DateMidnight dateMidnight0 = DateMidnight.now(chronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(chronology0);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology((Chronology) null);
      assertEquals(0L, dateMidnight1.getMillis());
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      DateMidnight dateMidnight1 = dateMidnight_Property0.getDateMidnight();
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      assertEquals((-59958144000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfFloorCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertEquals(1391212800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundCeilingCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundFloorCopy();
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy(0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1295L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("The DateTimeFieldType must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"The DateTimeFieldType must not be null\" for centuryOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy((long) 1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMaximumValue();
      assertEquals(28857600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.minuteOfHour();
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, dateTimeField0);
      dateMidnight_Property0.getChronology();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(3162, 3162, (-2120300309), (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3162 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(733L);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(15);
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded(733L, 15);
      assertSame(dateMidnight2, dateMidnight1);
      assertEquals((-1735689600000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      dateMidnight0.dayOfYear();
      assertEquals((-86400000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateMidnight0.yearOfCentury();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(560);
      assertEquals((-44491507200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      Duration duration0 = Duration.standardDays((-612L));
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertEquals(1339459200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) null);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateMidnight0.weekOfWeekyear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Period period0 = Period.months((-166));
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) period0);
      assertEquals(955670400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-222), (-222), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -222 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateMidnight0.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) (-1));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(733L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(946684800000L, dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      dateMidnight0.toLocalDate();
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      DateMidnight dateMidnight1 = dateMidnight0.plus((long) 0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      dateMidnight0.yearOfEra();
      assertEquals((-86400000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1318L);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      DateMidnight dateMidnight0 = DateMidnight.now(chronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(5);
      assertEquals(1400025600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(733L);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(15);
      DateMidnight dateMidnight2 = dateMidnight1.withWeekOfWeekyear(15);
      assertEquals((-61685366400000L), dateMidnight2.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withEra((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(733L);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(15);
      assertEquals(8467200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L), (Chronology) null);
      Duration duration0 = Duration.standardDays((-1L));
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(2217);
      assertEquals(7798377600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1L, (-1436), Integer.MAX_VALUE);
      DateMidnight dateMidnight0 = new DateMidnight(1L, (DateTimeZone) mockZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      assertNotNull(dateMidnight_Property0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addWrapFieldToCopy((-3255));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      DateMidnight dateMidnight0 = DateMidnight.now(chronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(0, 0, 1, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(12);
      assertEquals((-1728000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      dateMidnight0.dayOfMonth();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("Chronology must not be null", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(3150);
      assertEquals(37241251200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      DateMidnight dateMidnight0 = DateMidnight.now(chronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(5);
      DateMidnight dateMidnight2 = dateMidnight1.withMonthOfYear(5);
      assertEquals((-64869811200000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, mockNullZoneChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("2y.JSIJ2={3");
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(mockHijrahDate0, testDateTimeZone_MockDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
}
