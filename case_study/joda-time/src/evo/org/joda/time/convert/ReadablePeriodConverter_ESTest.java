/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 21:01:52 GMT 2017
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.convert.ReadablePeriodConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadablePeriodConverter_ESTest extends ReadablePeriodConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      readablePeriodConverter0.setInto(mutablePeriod0, mutablePeriod0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      Months months0 = Months.THREE;
      // Undeclared exception!
      try { 
        readablePeriodConverter0.setInto((ReadWritablePeriod) null, months0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Years years0 = Years.years(2497);
      PeriodType periodType0 = years0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2244L), periodType0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.setInto(mutablePeriod0, mockHijrahDate0, gJChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to org.joda.time.ReadablePeriod
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Class<?> class0 = readablePeriodConverter0.getSupportedType();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to org.joda.time.ReadablePeriod
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Years years0 = Years.years(2497);
      PeriodType periodType0 = years0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2244L), periodType0);
      PeriodType periodType1 = readablePeriodConverter0.getPeriodType(mutablePeriod0);
      assertEquals("Years", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      Months months0 = Months.SEVEN;
      PeriodType periodType0 = months0.getPeriodType();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2507L), periodType0, (Chronology) strictChronology0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        readablePeriodConverter0.setInto(mutablePeriod0, seconds0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
}
