/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 21:06:30 GMT 2017
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.convert.NullConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NullConverter_ESTest extends NullConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NullConverter nullConverter0 = new NullConverter();
      ReadWritablePeriod readWritablePeriod0 = mock(ReadWritablePeriod.class, new ViolatedAssumptionAnswer());
      nullConverter0.setInto(readWritablePeriod0, (Object) "RE|", (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NullConverter nullConverter0 = new NullConverter();
      // Undeclared exception!
      try { 
        nullConverter0.setInto((ReadWritableInterval) null, (Object) "RE|", (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.NullConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      ReadWritableInterval readWritableInterval0 = mock(ReadWritableInterval.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      Chronology chronology0 = nullConverter0.getChronology((Object) readWritableInterval0, dateTimeZone0);
      // Undeclared exception!
      try { 
        nullConverter0.setInto((ReadWritablePeriod) null, (Object) null, chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.NullConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      Class<?> class0 = nullConverter0.getSupportedType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      ReadWritableInterval readWritableInterval0 = mock(ReadWritableInterval.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      Chronology chronology0 = nullConverter0.getChronology((Object) readWritableInterval0, dateTimeZone0);
      nullConverter0.setInto(readWritableInterval0, (Object) "", chronology0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NullConverter nullConverter0 = new NullConverter();
      long long0 = nullConverter0.getDurationMillis((Object) null);
      assertEquals(0L, long0);
  }
}
