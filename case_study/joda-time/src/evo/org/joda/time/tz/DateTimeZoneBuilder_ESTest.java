/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 16:54:43 GMT 2017
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZoneBuilder_ESTest extends DateTimeZoneBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
          assertNotNull(dateTimeZoneBuilder0);
          
          DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("u_@U+8Rm", Integer.MAX_VALUE);
          assertNotNull(dateTimeZoneBuilder1);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
          assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
          
          DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder0.addCutover(Integer.MAX_VALUE, 'w', Integer.MAX_VALUE, 2006, 1066, false, 2006);
          assertNotNull(dateTimeZoneBuilder2);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
          assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
          assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
          
          DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setStandardOffset(1066);
          assertNotNull(dateTimeZoneBuilder3);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder3);
          assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
          assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
          assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder3);
          assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder0);
          assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder2);
          assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder1);
          
          DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder0.setFixedSavings(";9TD&wY}u<)2UjH", Integer.MAX_VALUE);
          assertNotNull(dateTimeZoneBuilder4);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder4);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
          assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder3);
          assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder3);
          assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder1);
          assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder0);
          assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder2);
          
          // Undeclared exception!
          try { 
            dateTimeZoneBuilder4.toDateTimeZone(";9TD&wY}u<)2UjH", false);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Value 292278994 for year must be in the range [-292275054,292278993]
             //
             verifyException("org.joda.time.field.FieldUtils", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(51);
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("hY!W", 1590);
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder2.toDateTimeZone("y\"EE1J(Nw>-6h~o", true);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("y\"EE1J(Nw>-6h~o", dateTimeZone0.toString());
      assertEquals("y\"EE1J(Nw>-6h~o", dateTimeZone0.getID());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("u_@U+8Rm", Integer.MAX_VALUE);
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder0.addRecurringSavings("u_@U+8Rm", 98, 2006, 2006, 'w', (-1274), 1066, Integer.MAX_VALUE, true, 'p');
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone(";9TD&wY}u<)2UjH", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1274 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(98, 'p', Integer.MAX_VALUE, 'p', Integer.MAX_VALUE, true, Integer.MAX_VALUE);
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder0.addCutover(Integer.MAX_VALUE, 'w', Integer.MAX_VALUE, 2006, 1066, false, 2006);
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.addCutover((-1274), 'w', 30, 2187, 98, false, 98);
      assertNotNull(dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      long long0 = DateTimeZoneBuilder.readMillis(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals((-26172088320000L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      long long0 = DateTimeZoneBuilder.readMillis(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals((-25964052480000L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      char char0 = dataInputStream0.readChar();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals('\u0000', char0);
      
      long long0 = DateTimeZoneBuilder.readMillis(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-1800000L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.writeMillis((DataOutput) null, 2629800000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" std: ", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      DateTimeZoneBuilder.writeMillis(dataOutputStream0, 60000L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      long long0 = DateTimeZoneBuilder.readMillis(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3600000L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("8B4-}a@jrL-Qv*/NT", 1968);
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder0.addCutover(52, 's', 52, 52, 52, true, 52);
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("8|W)_R", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 52 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo((String) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        dateTimeZoneBuilder0.writeTo("N4#>$r$GV&G", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo(")", (DataOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readMillis((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(20587500);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        DateTimeZoneBuilder.readMillis(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) byteArrayInputStream0, "2{<");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) null, "Sun 9/6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1629, 868);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1623), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1623), byteArrayInputStream0.available());
      
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, "");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addCutover(115, 'Z', 914, 914, 914, true, 115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: Z
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      try { 
        dateTimeZoneBuilder0.writeTo(" tso ", (DataOutput) dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      MockFile mockFile0 = new MockFile("!@W.*.h0i4HTv@");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("UYOEVK`~_d", 2033, 's', 1786, 's', 2, (-1317), (-1317), false, (-1));
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      dateTimeZoneBuilder0.writeTo("!@W.*.h0i4HTv@", (DataOutput) dataOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("!@W.*.h0i4HTv@", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(52L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, "MillisOfDay: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("aA:vFC,x2n,GbM", (-2080));
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder0.addRecurringSavings("M! HH", 2033, 's', 1786, 's', 2, (-1317), (-1317), true, (-1));
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder0.toDateTimeZone("M! HH", true);
      assertNotNull(dateTimeZone0);
      assertEquals("M! HH", dateTimeZone0.toString());
      assertEquals("M! HH", dateTimeZone0.getID());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("u_@U+8Rm", Integer.MAX_VALUE);
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder0.addCutover(Integer.MAX_VALUE, 'w', Integer.MAX_VALUE, 2006, Integer.MAX_VALUE, false, 2006);
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder0.setFixedSavings(";9TD&wY}u<)2UjH", Integer.MAX_VALUE);
      assertNotNull(dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder3.toDateTimeZone(";9TD&wY}u<)2UjH", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("MM HH", Integer.MIN_VALUE, Integer.MIN_VALUE, 0, 's', 3518, 's', 0, true, 's');
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone("MM HH", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3518 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("UYOEVK`~_d", 2069, 's', 1786, 's', 2, 3518, 3518, true, (-1));
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone("MM HH", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3518 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("y\"p1upn>-h~)", 1798, 1798, 1798, 'u', (-602), 311, (-9), false, (-35));
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      MockFile mockFile0 = new MockFile("lXgR6WW5VVj");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("lXgR6WW5VVj", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("lXgR6WW5VVj", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("lXgR6WW5VVj", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("lXgR6WW5VVj", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("lXgR6WW5VVj", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("lXgR6WW5VVj", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("y\"p1upn>-h~)", (DataOutput) dataOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -602 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("u_@U+8Rm", Integer.MAX_VALUE);
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addCutover((-1274), 'w', 11, 'w', 98, false, 98);
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone(";9TD&wY}u<)2UjH", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 119 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addRecurringSavings("c+Y\"!qqh~", (byte)63, (-1983333892), (-21), '\u021C', (-21), (byte)63, (byte) (-35), true, 2009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: \u021C
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("y\"p1upn>-h~)", (-35));
      assertNotNull(dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addCutover(1, 'u', (-2559), (-1882565930), 2137, true, 1541);
      assertNotNull(dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.toDateTimeZone("!", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2559 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      MockFile mockFile0 = new MockFile("!@W.*.h0i4HTv@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      dateTimeZoneBuilder0.addRecurringSavings("UYOEVK`~_d", 2033, 's', 1786, 's', 2, (-1317), (-1317), false, (-1));
      dateTimeZoneBuilder0.writeTo("Partial cannot be null", (OutputStream) mockPrintStream0);
      assertEquals(52L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("H8'");
      dateTimeZoneBuilder0.writeTo("H8'", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.setFixedSavings("u_@U+8Rm", Integer.MAX_VALUE);
      dateTimeZoneBuilder0.addCutover(Integer.MAX_VALUE, 'w', Integer.MAX_VALUE, 2006, 1066, false, 2006);
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("u_@U+8Rm", Integer.MAX_VALUE);
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder1.toDateTimeZone("u_@U+8Rm", false);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.addCutover(98, 'p', Integer.MAX_VALUE, 'p', Integer.MAX_VALUE, true, Integer.MAX_VALUE);
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder0.toDateTimeZone(";9TD&wY}u<)2UjH", false);
      assertEquals(";9TD&wY}u<)2UjH", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo((String) null, (DataOutput) dataOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("M! HH", 244, 's', 0, 's', (-1317), 2033, 0, true, 2033);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        DateTimeZoneBuilder.readMillis(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      long long0 = DateTimeZoneBuilder.readMillis(dataInputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        DateTimeZoneBuilder.writeMillis(dataOutputStream0, 123456789L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      DateTimeZoneBuilder.writeMillis(dataOutputStream0, 1000L);
      assertEquals("\uFFFD\u0000\u0000\u0000\u0001", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (OutputStream) objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.writeMillis((DataOutput) null, (-12219292800000L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)78);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) dataInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-518), 2577);
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) byteArrayInputStream0, "L");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.addRecurringSavings("UYOEVK`~_d", 2033, 's', 1786, 's', 2, (-1317), (-1317), true, 573);
      dateTimeZoneBuilder0.addCutover((-1970), 's', (-2080), 2, (-32), true, 573);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone("M! HH", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2080 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
