/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:56:28 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YearMonth_ESTest extends YearMonth_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.getReadablePartial();
      assertEquals(2, yearMonth_Property0.get());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      YearMonth.Property yearMonth_Property0 = new YearMonth.Property(yearMonth0, 1);
      assertEquals(2, yearMonth_Property0.get());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.minusMonths(10000);
      assertEquals(10, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      assertEquals(3, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      int[] intArray0 = new int[9];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.year();
      assertEquals(0, yearMonth_Property0.get());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      int[] intArray0 = new int[20];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      Duration duration0 = new Duration((long) 1);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      YearMonth yearMonth2 = yearMonth1.withPeriodAdded(weeks0, 0);
      assertSame(yearMonth2, yearMonth1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-244L));
      int[] intArray0 = new int[3];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth yearMonth2 = yearMonth1.withMonthOfYear(2);
      assertEquals(2, yearMonth2.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-244L));
      YearMonth yearMonth1 = yearMonth0.withMonthOfYear(2);
      assertEquals(2, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(195L);
      int[] intArray0 = new int[9];
      intArray0[1] = (-3135);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.monthOfYear();
      assertEquals((-3135), yearMonth_Property0.get());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      int[] intArray0 = new int[11];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      Duration duration0 = new Duration((long) 1);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      YearMonth yearMonth2 = yearMonth1.minus(weeks0);
      assertNotSame(yearMonth2, yearMonth1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      YearMonth yearMonth1 = yearMonth0.withYear((-64));
      int int0 = yearMonth1.getYear();
      assertEquals((-64), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = new Instant();
      YearMonth yearMonth0 = new YearMonth();
      Chronology chronology0 = instant0.getChronology();
      DateTimeField dateTimeField0 = yearMonth0.getField(0, chronology0);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
      try { 
        yearMonth1.withMonthOfYear(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      // Undeclared exception!
      try { 
        yearMonth0.withFieldAdded(durationFieldType0, (-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-244L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        yearMonth0.withField(dateTimeFieldType0, (-702));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -702 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      // Undeclared exception!
      try { 
        yearMonth0.withField(dateTimeFieldType0, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      // Undeclared exception!
      try { 
        yearMonth0.withChronologyRetainFields(mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      try { 
        yearMonth0.toString("centuries", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        yearMonth0.toLocalDate(2830);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2830 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      int[] intArray0 = new int[11];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.toInterval((DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.toInterval((DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      YearMonth yearMonth1 = yearMonth0.plusYears(2188);
      assertEquals(4202, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        YearMonth.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        YearMonth.parse("org.joda.time.YearMonth", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.YearMonth\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      YearMonth yearMonth0 = YearMonth.now(chronology0);
      // Undeclared exception!
      try { 
        yearMonth0.getFieldType(3637);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3637
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        yearMonth0.getField(0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2529, 2529, 2529);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        YearMonth.fromCalendarFields(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((YearMonth) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((YearMonth) null, chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      YearMonth yearMonth1 = null;
      try {
        yearMonth1 = new YearMonth(yearMonth0, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(2161L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(0, 0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(0, (-622), mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((-1372), (-1372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1372 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-244L));
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(230);
      PeriodType periodType0 = testBaseSingleFieldPeriod_Single0.getPeriodType();
      Period period0 = new Period(yearMonth0, yearMonth0, periodType0);
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(period0, (-702));
      assertNotSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      // Undeclared exception!
      try { 
        yearMonth0.getField(286, (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 286
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      YearMonth yearMonth1 = new YearMonth(yearMonth0, chronology0);
      assertEquals(1970, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      YearMonth yearMonth0 = new YearMonth(chronology0);
      int int0 = yearMonth0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      YearMonth yearMonth0 = new YearMonth(chronology0);
      yearMonth0.toLocalDate(2);
      assertEquals(2557, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      YearMonth yearMonth0 = new YearMonth(1, 1, chronology0);
      assertEquals(0, YearMonth.YEAR);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      int int0 = yearMonth0.getYear();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null, (Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = yearMonth0.getFieldType(0);
      assertEquals("year", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      String string0 = yearMonth0.toString("1<", (Locale) null);
      assertEquals("1<", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      String string0 = yearMonth0.toString((String) null);
      assertEquals("2014-02", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      YearMonth yearMonth1 = yearMonth0.minus((ReadablePeriod) null);
      assertEquals(2014, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      YearMonth yearMonth0 = new YearMonth(chronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths((-827));
      assertEquals(1945, yearMonth1.getYear());
      assertEquals(3, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth0 = new YearMonth(1, 1);
      YearMonth yearMonth1 = yearMonth0.withField(dateTimeFieldType0, 1);
      assertSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth1 = yearMonth0.withField(dateTimeFieldType0, (-888));
      assertEquals((-888), yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2529, 2529, 2529);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      YearMonth yearMonth0 = YearMonth.fromDateFields(date0);
      assertEquals(10, yearMonth0.getMonthOfYear());
      assertEquals(1582, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      YearMonth yearMonth0 = YearMonth.now(chronology0);
      Locale locale0 = Locale.forLanguageTag("Fxlh");
      String string0 = yearMonth0.toString((String) null, locale0);
      assertEquals("2014-02", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) uTCDateTimeZone0);
      assertEquals(0, YearMonth.YEAR);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth_Property0.setCopy("2", (Locale) null);
      assertEquals(2014, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      assertEquals(1970, yearMonth_Property0.get());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(2057);
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((Object) integer0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      assertEquals(2, yearMonth0.getMonthOfYear());
      
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) uTCDateTimeZone0);
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = yearMonth0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      int int0 = yearMonth1.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1311L, (Chronology) null);
      // Undeclared exception!
      try { 
        yearMonth0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      YearMonth yearMonth1 = yearMonth0.minusYears(0);
      assertSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      assertEquals(1, yearMonth0.getMonthOfYear());
      
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(chronology0);
      assertNotSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.parse("2014");
      assertEquals(2014, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.seconds(1);
      YearMonth yearMonth1 = yearMonth0.plus(period0);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2014, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      assertEquals(2, yearMonth0.size());
      
      int int0 = yearMonth0.getMonthOfYear();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      YearMonth yearMonth0 = YearMonth.parse("", dateTimeFormatter0);
      assertEquals(2, yearMonth0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      // Undeclared exception!
      try { 
        yearMonth0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      assertEquals(2014, yearMonth_Property0.get());
      
      YearMonth yearMonth1 = yearMonth_Property0.setCopy(0);
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(0, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      Locale locale0 = Locale.JAPAN;
      String string0 = yearMonth_Property0.getAsShortText(locale0);
      assertEquals("2014", string0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(2014, yearMonth0.getYear());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      YearMonth yearMonth1 = yearMonth_Property0.getYearMonth();
      assertEquals(2014, yearMonth_Property0.get());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy("+i;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"+i;\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}
