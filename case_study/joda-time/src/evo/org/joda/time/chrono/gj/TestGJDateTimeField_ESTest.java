/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:55:04 GMT 2017
 */

package org.joda.time.chrono.gj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.chrono.gj.TestGJDayOfYearField;
import org.joda.time.chrono.gj.TestGJMonthOfYearField;
import org.joda.time.chrono.gj.TestGJWeekyearField;
import org.joda.time.chrono.gj.TestGJYearField;
import org.joda.time.chrono.gj.TestJulianChronology;
import org.joda.time.chrono.gj.TestJulianWeekyearField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestGJDateTimeField_ESTest extends TestGJDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestGJDayOfYearField testGJDayOfYearField0 = new TestGJDayOfYearField(testJulianChronology0);
      long long0 = testGJDayOfYearField0.add(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestGJYearField testGJYearField0 = new TestGJYearField(testJulianChronology0);
      long long0 = testGJYearField0.add(0L, 2983L);
      assertEquals(94136342400000L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology((-7), (-7), (-7));
      TestGJMonthOfYearField testGJMonthOfYearField0 = new TestGJMonthOfYearField(testJulianChronology0);
      long long0 = testGJMonthOfYearField0.add((-2577L), (long) (-7));
      assertEquals((-18316802577L), long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestJulianWeekyearField testJulianWeekyearField0 = new TestJulianWeekyearField(testJulianChronology0);
      long long0 = testJulianWeekyearField0.add((long) 0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestJulianWeekyearField testJulianWeekyearField0 = new TestJulianWeekyearField(testJulianChronology0);
      long long0 = testJulianWeekyearField0.add((long) 1691, 1691);
      assertEquals(53363923201691L, long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(326, (-876), (-2244));
      TestGJMonthOfYearField testGJMonthOfYearField0 = new TestGJMonthOfYearField(testJulianChronology0);
      long long0 = testGJMonthOfYearField0.add(0L, (-2244));
      assertEquals((-5901292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology(1, 1, 1);
      TestGJWeekyearField testGJWeekyearField0 = new TestGJWeekyearField(testJulianChronology0);
      // Undeclared exception!
      try { 
        testGJWeekyearField0.add(0L, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal weekyear: 0
         //
         verifyException("org.joda.time.chrono.gj.TestJulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TestJulianChronology testJulianChronology0 = new TestJulianChronology();
      TestJulianWeekyearField testJulianWeekyearField0 = new TestJulianWeekyearField(testJulianChronology0);
      boolean boolean0 = testJulianWeekyearField0.isLenient();
      assertFalse(boolean0);
  }
}
