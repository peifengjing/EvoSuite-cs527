/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 20:05:52 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestDuration_Basics;
import org.joda.time.Years;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      mutableInterval0.setInterval((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime1);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((-233L), (-233L), mockNullZoneChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      mutableInterval0.setEnd(mutableDateTime0);
      mutableInterval0.setInterval((ReadableInterval) mutableInterval0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1112L, 1112L, mockNullZoneChronology0);
      Months months0 = Months.ZERO;
      mutableInterval0.setPeriodAfterStart(months0);
      assertEquals(1112L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      mutableInterval0.setDurationAfterStart(1129L);
      assertEquals(1129L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, mockNullZoneChronology0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertNotSame(mutableInterval1, mutableInterval0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval(651L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setEndMillis((-55L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      Duration duration0 = new Duration(1118L, (-2002L));
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((-2984L), (-2984L), mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationBeforeEnd((-2984L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.minus(1129L);
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((ReadableDuration) duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Months months0 = Months.SEVEN;
      DateTime dateTime0 = new DateTime((Object) null, mockNullZoneChronology0);
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(months0, dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      MutableInterval mutableInterval0 = new MutableInterval(hours0, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.SEVEN;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, days0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(mockMinguoDate0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, (Chronology) null);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(4444L, 2435L, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1112L, 1112L, mockNullZoneChronology0);
      mutableInterval0.setChronology(mockNullZoneChronology0);
      assertEquals(1112L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(0L);
      DateTime dateTime0 = new DateTime((Chronology) mockNullZoneChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(testDuration_Basics_MockMutableDuration0, dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      MutableInterval mutableInterval1 = (MutableInterval)mutableInterval0.clone();
      assertEquals(1118L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      mutableInterval0.setStartMillis(1029L);
      assertEquals(1029L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, mockNullZoneChronology0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      mutableInterval0.setEndMillis(1129L);
      assertEquals(1129L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(1118L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1113L, 1113L, mockNullZoneChronology0);
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutableInterval0.setPeriodBeforeEnd(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, mockNullZoneChronology0);
      Months months0 = Months.SEVEN;
      // Undeclared exception!
      try { 
        mutableInterval0.setPeriodAfterStart(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, mutableDateTime0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((-18L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      mutableInterval0.setInterval(1129L, 1129L);
      assertEquals(1129L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((-233L), (-233L), mockNullZoneChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      mutableInterval0.setEnd(mutableDateTime0);
      mutableInterval0.setStart(mutableDateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      Duration duration0 = new Duration(1118L, 1664L);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals(572L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Months months0 = Months.SEVEN;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) mockNullZoneChronology0);
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(mutableDateTime0, months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      Years years0 = Years.parseYears((String) null);
      MutableInterval mutableInterval0 = new MutableInterval(years0, mutableDateTime0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertNotSame(mutableInterval1, mutableInterval0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((-233L), (-233L), mockNullZoneChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) mockNullZoneChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setStart(mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1118L, 1118L, mockNullZoneChronology0);
      mutableInterval0.setDurationBeforeEnd(1118L);
      assertEquals(1118L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardDays(8000L);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, duration0);
      assertEquals(2083609281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, (Chronology) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("Rv;/%EP\u0007]XnNj/-`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Rv;\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval(1129L, 1129L, mockNullZoneChronology0);
      Duration duration0 = Duration.ZERO;
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      assertEquals(1129L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(3100L, 3100L);
      assertEquals(3100L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      MutableInterval mutableInterval0 = new MutableInterval((-233L), (-233L), mockNullZoneChronology0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertNotSame(mutableInterval1, mutableInterval0);
  }
}
