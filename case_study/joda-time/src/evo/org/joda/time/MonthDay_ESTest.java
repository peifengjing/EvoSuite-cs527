/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 18:54:04 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonthDay_ESTest extends MonthDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.plusMonths(14);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(4, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.plusDays((-73));
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay1.getMonthOfYear());
      assertEquals(3, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertNotNull(testAbstractPartial_MockPartial0);
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        monthDay0.withField(dateTimeFieldType0, 1262);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1262 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1L));
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(31, monthDay_Property0.get());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay_Property0);
      
      DateTimeField dateTimeField0 = monthDay_Property0.getField();
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(31, monthDay_Property0.get());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(3672L);
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay_Property0.get());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay_Property0);
      
      int int0 = monthDay_Property0.get();
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay_Property0.get());
      assertEquals(1, int0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(5, 5);
      assertEquals(5, monthDay0.getDayOfMonth());
      assertEquals(5, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay0, 1);
      assertEquals(5, monthDay0.getDayOfMonth());
      assertEquals(5, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(5, monthDay_Property0.get());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay_Property0);
      
      MonthDay monthDay1 = monthDay_Property0.setCopy("9", (Locale) null);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(5, monthDay0.getDayOfMonth());
      assertEquals(5, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(5, monthDay_Property0.get());
      assertEquals(9, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(5, monthDay1.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((DateTimeZone) null);
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay_Property0.get());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay_Property0);
      
      MonthDay monthDay1 = monthDay_Property0.setCopy(1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay_Property0.get());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-27L));
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.minusMonths(0);
      assertSame(monthDay0, monthDay1);
      assertSame(monthDay1, monthDay0);
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(12, monthDay1.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2663L);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[4];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      Period period0 = Period.fieldDifference(monthDay1, monthDay1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(period0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(seconds0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(minutes0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      Days days0 = minutes0.toStandardDays();
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(days0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      MonthDay monthDay2 = monthDay1.withPeriodAdded(days0, 1395);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay1, monthDay2);
      assertNotSame(monthDay2, monthDay1);
      assertNotSame(monthDay2, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertTrue(monthDay2.equals((Object)monthDay1));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertEquals(0, monthDay2.getMonthOfYear());
      assertEquals(0, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1041L));
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(31, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertNotNull(testAbstractPartial_MockPartial0);
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      MonthDay monthDay0 = new MonthDay(0L, (Chronology) buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.withDayOfMonth(5);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(5, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-27L));
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      LocalDate localDate0 = monthDay0.toLocalDate(595);
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(3, localDate0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertNotNull(testAbstractPartial_MockPartial0);
      
      DateTimeFieldType dateTimeFieldType0 = testAbstractPartial_MockPartial0.getFieldType(1);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      MonthDay.Property monthDay_Property0 = monthDay0.property(dateTimeFieldType0);
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2, monthDay_Property0.get());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay_Property0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[5];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      MonthDay.Property monthDay_Property0 = monthDay1.monthOfYear();
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, monthDay_Property0.get());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1L);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[8];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      MonthDay monthDay2 = monthDay1.minus((ReadablePeriod) null);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      assertSame(monthDay1, monthDay2);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay2, monthDay0);
      assertSame(monthDay2, monthDay1);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertEquals(0, monthDay2.getMonthOfYear());
      assertEquals(0, monthDay2.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2663L);
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[4];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1);
      assertNotNull(mutablePeriod0);
      
      MonthDay monthDay2 = monthDay1.plus(mutablePeriod0);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay1, monthDay2);
      assertNotSame(monthDay2, monthDay0);
      assertNotSame(monthDay2, monthDay1);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertTrue(monthDay2.equals((Object)monthDay1));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertEquals(0, monthDay2.getMonthOfYear());
      assertEquals(0, monthDay2.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      int int0 = monthDay2.getMonthOfYear();
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay1, monthDay2);
      assertNotSame(monthDay2, monthDay0);
      assertNotSame(monthDay2, monthDay1);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay0.equals((Object)monthDay2));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertTrue(monthDay1.equals((Object)monthDay2));
      assertTrue(monthDay2.equals((Object)monthDay1));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertEquals(0, monthDay2.getMonthOfYear());
      assertEquals(0, monthDay2.getDayOfMonth());
      assertEquals(0, int0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1L));
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Chronology chronology0 = instant0.getChronology();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = monthDay0.getField(1, chronology0);
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[7];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = monthDay1.getDayOfMonth();
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, int0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1, 1);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[3];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      MonthDay.Property monthDay_Property0 = monthDay1.dayOfMonth();
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(0, monthDay1.getDayOfMonth());
      assertEquals(0, monthDay_Property0.get());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay_Property0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-11L));
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single(1);
      assertEquals(1, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertNotNull(testBaseSingleFieldPeriod_Single0);
      
      DurationFieldType durationFieldType0 = testBaseSingleFieldPeriod_Single0.getFieldType();
      assertEquals(1, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      MonthDay monthDay1 = monthDay0.withFieldAdded(durationFieldType0, 5145);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.getValue());
      assertEquals(1, testBaseSingleFieldPeriod_Single0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(2, monthDay1.size());
      assertEquals(21, monthDay1.getDayOfMonth());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2663L);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        monthDay0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        monthDay0.withField(dateTimeFieldType0, 2016);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1L);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      // Undeclared exception!
      try { 
        monthDay0.toString("8:?TBfU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse(".k2_K<'", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        MonthDay.parse("o\"q6T2q", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"o\"q6T2q\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
      
      Period period0 = new Period(0L, 0L);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        monthDay1.minus(period0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertNotNull(testAbstractPartial_MockPartial0);
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      // Undeclared exception!
      try { 
        monthDay0.getFieldType(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((MonthDay) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNotNull(mockNullZoneChronology0);
      
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(1249);
      assertEquals(1249, (int)integer0);
      assertNotNull(integer0);
      
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotNull(testBasePartial_MockPartial0);
      
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertNotNull(chronology0);
      
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((Object) integer0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(0, 1238, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNotNull(mockNullZoneChronology0);
      
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((-1398), (-1398), mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(999999, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 999999 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1L));
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.withPeriodAdded((ReadablePeriod) null, 1);
      assertSame(monthDay0, monthDay1);
      assertSame(monthDay1, monthDay0);
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(12, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(31, monthDay1.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1, 1, (Chronology) null);
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Object) null);
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = null;
      try {
        monthDay1 = new MonthDay(monthDay0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1041L));
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      int int0 = monthDay0.getMonthOfYear();
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(12, int0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      int int0 = monthDay0.getDayOfMonth();
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, int0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      MonthDay monthDay0 = MonthDay.parse("", dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      int int0 = monthDay0.size();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, int0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertNotNull(testAbstractPartial_MockPartial0);
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      MonthDay monthDay0 = new MonthDay(0L, (Chronology) buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      String string0 = monthDay0.toString();
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals("--01-01", string0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(0);
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNotNull(mockNullZoneChronology0);
      
      MonthDay monthDay1 = new MonthDay(monthDay0, (Chronology) mockNullZoneChronology0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals(2, monthDay1.size());
      assertEquals(1, monthDay1.getDayOfMonth());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      try { 
        monthDay0.toString("\".0?DnYAz", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      String string0 = monthDay0.toString((String) null);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals("--02-14", string0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2663L);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(seconds0);
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(minutes0);
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(weeks0);
      
      MonthDay monthDay1 = monthDay0.minus(weeks0);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertTrue(monthDay1.equals((Object)monthDay0));
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(2, monthDay1.size());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(1, monthDay1.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(3672L);
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      Period period0 = new Period(1, 0, 0, 925, 925, 0, 925, (-70));
      assertNotNull(period0);
      
      MonthDay monthDay1 = monthDay0.withPeriodAdded(period0, 0);
      assertSame(monthDay0, monthDay1);
      assertSame(monthDay1, monthDay0);
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(5, 5);
      assertEquals(5, monthDay0.getDayOfMonth());
      assertEquals(5, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      MonthDay monthDay1 = monthDay0.withField(dateTimeFieldType0, 5);
      assertSame(monthDay0, monthDay1);
      assertSame(monthDay1, monthDay0);
      assertEquals(5, monthDay0.getDayOfMonth());
      assertEquals(5, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(2, monthDay1.size());
      assertEquals(5, monthDay1.getDayOfMonth());
      assertEquals(5, monthDay1.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(5, 5);
      assertEquals(5, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(5, monthDay0.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      MonthDay monthDay1 = monthDay0.withField(dateTimeFieldType0, 1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(5, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(5, monthDay0.getDayOfMonth());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(5, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(1, monthDay1.getDayOfMonth());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1L));
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Chronology chronology0 = instant0.getChronology();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(chronology0);
      
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(chronology0);
      assertSame(monthDay0, monthDay1);
      assertSame(monthDay1, monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, monthDay1.size());
      assertEquals(12, monthDay1.getMonthOfYear());
      assertEquals(31, monthDay1.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNotNull(mockNullZoneChronology0);
      
      // Undeclared exception!
      try { 
        MonthDay.now((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertNotNull(uTCDateTimeZone0);
      
      MonthDay monthDay0 = MonthDay.now((DateTimeZone) uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2663L);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = monthDay0.getFieldTypes();
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        MonthDay.parse("zAMB[jChz'*Y0Y!+ z", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Object) null, (Chronology) null);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.plusDays(251);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(22, monthDay1.getDayOfMonth());
      assertEquals(10, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      
      // Undeclared exception!
      try { 
        monthDay0.withDayOfMonth((-1050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1050 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertEquals("", mockNullZoneChronology0.toString());
      assertNotNull(mockNullZoneChronology0);
      
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay((-1L), (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      MonthDay monthDay1 = monthDay0.plusMonths(1);
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(3, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1L);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        monthDay0.withChronologyRetainFields(mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = new Period(monthDay0, monthDay0);
      MonthDay monthDay1 = monthDay0.plus(period0);
      assertNotSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((DateTimeZone) null);
      // Undeclared exception!
      try { 
        monthDay0.toLocalDate(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483645 for year must be in the range [-292275055,292278994]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2105, 2105, 2105, 2105, 2105, 2105);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay monthDay1 = monthDay0.minusDays(2105);
      assertEquals(9, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2368);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      assertEquals(2, monthDay0.getMonthOfYear());
      
      MonthDay monthDay1 = monthDay0.minusMonths((-2253));
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(11, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay0, (-4002));
      // Undeclared exception!
      try { 
        monthDay_Property0.addToCopy((-2555));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -4002
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MonthDay monthDay1 = (MonthDay)monthDay_Property0.getReadablePartial();
      assertEquals(2, monthDay_Property0.get());
      assertEquals(14, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1L));
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      assertEquals(2, monthDay0.size());
      
      MonthDay monthDay1 = monthDay_Property0.addWrapFieldToCopy(1);
      assertEquals(1, monthDay1.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy("org.joda.time.MonthDay");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.MonthDay\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}
