/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Oct 14 18:26:02 GMT 2017
 */

package org.springside.examples.showcase.config;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class JavaSimonConfig_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.springside.examples.showcase.config.JavaSimonConfig"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaSimonConfig_ESTest_scaffolding.class.getClassLoader() ,
      "org.javasimon.source.StopwatchSource",
      "org.javasimon.DisabledManager",
      "org.javasimon.source.CachedStopwatchSource",
      "org.javasimon.EnabledManager",
      "org.springframework.boot.web.servlet.RegistrationBean",
      "org.springframework.boot.context.embedded.ServletContextInitializer",
      "org.aopalliance.intercept.MethodInvocation",
      "org.javasimon.Manager",
      "org.javasimon.callback.CallbackSkeleton",
      "org.javasimon.AttributesSupport",
      "org.javasimon.utils.SystemDebugCallback",
      "org.springframework.boot.web.servlet.ServletContextInitializer",
      "org.springframework.aop.MethodMatcher",
      "org.javasimon.StopwatchSample",
      "org.javasimon.clock.CpuClock",
      "org.javasimon.callback.CompositeCallbackImpl",
      "org.springframework.aop.TrueMethodMatcher",
      "org.springframework.aop.support.AbstractGenericPointcutAdvisor",
      "org.javasimon.source.AbstractStopwatchSource",
      "org.javasimon.source.CachedMonitorSource",
      "org.javasimon.HasAttributes",
      "org.javasimon.Sample",
      "org.springframework.beans.factory.annotation.Autowire",
      "org.springframework.aop.support.AbstractPointcutAdvisor",
      "org.springframework.context.annotation.Configuration",
      "org.javasimon.callback.Callback",
      "org.javasimon.SwitchingManager",
      "org.javasimon.spring.BasicMonitoringInterceptor",
      "org.javasimon.source.AbstractMethodStopwatchSource$1",
      "org.javasimon.Simon",
      "org.javasimon.UnknownSample",
      "org.springframework.core.Ordered",
      "org.javasimon.SimonState",
      "org.javasimon.spring.MonitoredMeasuringPointcut",
      "org.springframework.aop.Pointcut",
      "org.springframework.aop.PointcutAdvisor",
      "org.javasimon.Split",
      "org.springframework.aop.support.DefaultPointcutAdvisor",
      "org.springside.examples.showcase.config.JavaSimonConfig",
      "org.javasimon.Stopwatch",
      "org.aopalliance.intercept.Joinpoint",
      "org.aopalliance.intercept.Interceptor",
      "org.javasimon.spring.SpringStopwatchSource",
      "org.javasimon.ManagerConfiguration",
      "org.springframework.boot.web.servlet.ServletRegistrationBean",
      "org.aopalliance.aop.Advice",
      "org.javasimon.UnknownSimon",
      "org.springframework.aop.Advisor",
      "org.javasimon.clock.Clock$1",
      "org.javasimon.source.MonitorSource",
      "org.javasimon.AbstractSimon",
      "org.javasimon.SimonFilter",
      "org.javasimon.SimonException",
      "org.springframework.boot.context.embedded.ServletRegistrationBean",
      "org.aopalliance.intercept.Invocation",
      "org.springframework.aop.TruePointcut",
      "org.javasimon.CounterSample",
      "org.aopalliance.intercept.MethodInterceptor",
      "org.javasimon.source.CachedMonitorSource$MonitorInformation",
      "org.springframework.stereotype.Component",
      "org.javasimon.SimonManager",
      "org.springframework.aop.ClassFilter",
      "org.javasimon.Counter",
      "org.javasimon.source.AbstractMethodStopwatchSource",
      "org.javasimon.clock.Clock",
      "org.javasimon.callback.CompositeCallback",
      "org.javasimon.spring.MonitoringInterceptor"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaSimonConfig_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.beans.factory.annotation.Autowire",
      "org.springframework.aop.support.AbstractPointcutAdvisor",
      "org.springframework.aop.support.AbstractGenericPointcutAdvisor",
      "org.springframework.aop.support.DefaultPointcutAdvisor",
      "org.springframework.aop.TruePointcut",
      "org.springframework.aop.Pointcut",
      "org.javasimon.spring.BasicMonitoringInterceptor",
      "org.javasimon.spring.MonitoringInterceptor",
      "org.javasimon.clock.Clock",
      "org.javasimon.SimonState",
      "org.javasimon.utils.SystemDebugCallback",
      "org.javasimon.SimonManager",
      "org.javasimon.source.CachedMonitorSource"
    );
  }
}
