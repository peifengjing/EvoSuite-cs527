/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 18:01:42 GMT 2017
 */

package org.springside.examples.bootapi.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.actuate.metrics.CounterService;
import org.springside.examples.bootapi.domain.Account;
import org.springside.examples.bootapi.repository.AccountDao;
import org.springside.examples.bootapi.service.AccountService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AccountService_ESTest extends AccountService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      accountService0.init();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = AccountService.hashPassword("");
      assertEquals("2jmj7l5rSw0yVb/vlWAYkK/YBwk=", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.logout("PjN83f9F8t19Bk>,Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.logout((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccountService.hashPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      // Undeclared exception!
      try { 
        accountService0.getLoginUser("2QFs4BS/ZwvHySr0N5obNDQ9Vs8=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.getLoginUser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.register("`~5\"d[?", "`~5\"d[?", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid parameter
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.register("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid parameter
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.getLoginUser("D{6x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User doesn't login
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      Account account0 = new Account((Long) null);
      account0.hashPassword = "legi?AsUsWr";
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      doReturn(account0).when(accountDao0).findByEmail(anyString());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.login("legi?AsUsWr", "legi?AsUsWr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Password wrong
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      doReturn((Account) null).when(accountDao0).findByEmail(anyString());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.login("2jmj7l5rSw0yVb/vlWAYkK/YBwk=", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User not exist
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      Account account0 = new Account();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      doReturn(account0).when(accountDao0).findByEmail(anyString());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      // Undeclared exception!
      try { 
        accountService0.login("\")", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      accountService0.logout("com.google.common.io.BaseEncoding$DecodingException");
  }
}
