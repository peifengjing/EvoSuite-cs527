/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 18:05:31 GMT 2017
 */

package org.springside.examples.bootapi.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.actuate.metrics.CounterService;
import org.springside.examples.bootapi.api.AccountEndPoint;
import org.springside.examples.bootapi.domain.Account;
import org.springside.examples.bootapi.repository.AccountDao;
import org.springside.examples.bootapi.service.AccountService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AccountEndPoint_ESTest extends AccountEndPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      accountEndPoint0.logout("1");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      // Undeclared exception!
      try { 
        accountEndPoint0.register("D?<.-u8OYz5<bR,eZ", "D?<.-u8OYz5<bR,eZ", "D?<.-u8OYz5<bR,eZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      // Undeclared exception!
      try { 
        accountEndPoint0.logout("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      // Undeclared exception!
      try { 
        accountEndPoint0.login("MANDAGOY", "MANDAGOY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      // Undeclared exception!
      try { 
        accountEndPoint0.register("P6qW^u@!m^T@eh", "P6qW^u@!m^T@eh", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User or name or password empty
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      // Undeclared exception!
      try { 
        accountEndPoint0.register("1", "", "1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User or name or password empty
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      // Undeclared exception!
      try { 
        accountEndPoint0.register((String) null, (String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User or name or password empty
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      // Undeclared exception!
      try { 
        accountEndPoint0.login("e0yS]_2{4", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User or password empty
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      doReturn((Account) null).when(accountDao0).findByEmail(anyString());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      // Undeclared exception!
      try { 
        accountEndPoint0.login("6:jM", "a(.W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User not exist
         //
         verifyException("org.springside.examples.bootapi.service.AccountService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      // Undeclared exception!
      try { 
        accountEndPoint0.login("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User or password empty
         //
         verifyException("org.springside.examples.bootapi.api.AccountEndPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountEndPoint accountEndPoint0 = new AccountEndPoint();
      AccountService accountService0 = new AccountService();
      AccountDao accountDao0 = mock(AccountDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "accountDao", (Object) accountDao0);
      CounterService counterService0 = mock(CounterService.class, new ViolatedAssumptionAnswer());
      Injector.inject(accountService0, (Class<?>) AccountService.class, "counterService", (Object) counterService0);
      Injector.validateBean(accountService0, (Class<?>) AccountService.class);
      Injector.executePostConstruct((Object) accountService0, (Class<?>) AccountService.class);
      Injector.inject(accountEndPoint0, (Class<?>) AccountEndPoint.class, "accountService", (Object) accountService0);
      Injector.validateBean(accountEndPoint0, (Class<?>) AccountEndPoint.class);
      // Undeclared exception!
      try { 
        accountEndPoint0.logout((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
