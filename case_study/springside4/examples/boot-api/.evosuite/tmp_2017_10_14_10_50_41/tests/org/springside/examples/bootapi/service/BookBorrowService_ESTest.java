/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 17:57:21 GMT 2017
 */

package org.springside.examples.bootapi.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springside.examples.bootapi.domain.Account;
import org.springside.examples.bootapi.domain.Book;
import org.springside.examples.bootapi.repository.BookDao;
import org.springside.examples.bootapi.repository.MessageDao;
import org.springside.examples.bootapi.service.BookBorrowService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BookBorrowService_ESTest extends BookBorrowService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Book book0 = new Book();
      book0.status = "idle";
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long(0L);
      Account account0 = new Account();
      // Undeclared exception!
      try { 
        bookBorrowService0.markBookBorrowed(long0, account0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The book is not requesting
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = Long.getLong("#\"{g6@tpg)2;#^", 0L);
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Book book0 = new Book();
      book0.status = "org.springside.examples.bootapi.domain.Book@2[id=<null>,doubanId=<null>,status=<null>,title=<null>,url=<null>,borrowDate=<null>,onboardDate=<null>,borrower=<null>,owner=<null>]";
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Account account0 = new Account((Long) null);
      // Undeclared exception!
      try { 
        bookBorrowService0.applyBorrowRequest(long0, account0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The book is not idle
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bookDao0).findByBorrowerId(anyLong() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long((-1L));
      List<Book> list0 = bookBorrowService0.listMyBorrowedBook(long0, (Pageable) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Vector<Book> vector0 = new Vector<Book>();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(bookDao0).findByBorrowerId(anyLong() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long((-1047L));
      List<Book> list0 = bookBorrowService0.listMyBorrowedBook(long0, (Pageable) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Vector<Book> vector0 = new Vector<Book>();
      vector0.add((Book) null);
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(bookDao0).findByBorrowerId(anyLong() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long(1L);
      PageRequest pageRequest0 = new PageRequest(937, 937);
      List<Book> list0 = bookBorrowService0.listMyBorrowedBook(long0, pageRequest0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Book book0 = new Book();
      book0.status = "org.springside.examples.bootapi.domain.Book@2[id=<null>,doubanId=<null>,status=<null>,title=<null>,url=<null>,borrowDate=<null>,onboardDate=<null>,borrower=<null>,owner=<null>]";
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long(1897L);
      Long long1 = Long.getLong((String) null, long0);
      Account account0 = new Account((Long) null);
      // Undeclared exception!
      try { 
        bookBorrowService0.markBookReturned(long1, account0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The book is not borrowing
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Long long0 = new Long(88);
      // Undeclared exception!
      try { 
        bookBorrowService0.listMyBorrowedBook(long0, (Pageable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Book book0 = new Book();
      book0.status = "org.springside.examples.bootapi.domain.Book@2[id=<null>,doubanId=<null>,status=<null>,title=<null>,url=<null>,borrowDate=<null>,onboardDate=<null>,borrower=<null>,owner=<null>]";
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long(1897L);
      // Undeclared exception!
      try { 
        bookBorrowService0.markBookReturned(long0, book0.borrower);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Book book0 = new Book();
      String string0 = "mG\\uB(t";
      book0.status = string0;
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long(1271L);
      // Undeclared exception!
      try { 
        bookBorrowService0.rejectBorrowRequest(long0, (Account) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Book book0 = new Book();
      book0.status = "idle";
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        bookBorrowService0.markBookBorrowed(long0, book0.borrower);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = Long.getLong("#\"{g6@tpg)2;#^", 0L);
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Book book0 = new Book();
      book0.status = "out";
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      // Undeclared exception!
      try { 
        bookBorrowService0.applyBorrowRequest(long0, (Account) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookBorrowService", e);
      }
  }
}
