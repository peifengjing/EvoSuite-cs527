/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 18:08:48 GMT 2017
 */

package org.springside.examples.bootapi.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springside.examples.bootapi.domain.Account;
import org.springside.examples.bootapi.domain.Book;
import org.springside.examples.bootapi.repository.BookDao;
import org.springside.examples.bootapi.repository.MessageDao;
import org.springside.examples.bootapi.service.BookAdminService;
import org.springside.examples.bootapi.service.BookBorrowService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BookAdminService_ESTest extends BookAdminService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Long long0 = new Long((-1398L));
      Book book0 = new Book(long0);
      Long long1 = new Long((-1398L));
      Account account0 = new Account(long1);
      book0.owner = account0;
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      bookAdminService0.deleteBook(account0.id, long0);
      assertTrue(long0.equals((Object)long1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Stack<Book> stack0 = new Stack<Book>();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(bookDao0).findByOwnerId(anyLong() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      Long long0 = new Long(0L);
      List<Book> list0 = bookAdminService0.listMyBook(long0, (Pageable) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(bookDao0).findAll(any(org.springframework.data.domain.Pageable.class));
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      PageRequest pageRequest0 = new PageRequest(1418, 1418);
      Iterable<Book> iterable0 = bookAdminService0.findAll(pageRequest0);
      assertNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      Book book0 = new Book();
      // Undeclared exception!
      try { 
        bookAdminService0.modifyBook(book0, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        bookAdminService0.listMyBook(long0, (Pageable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      Long long0 = Long.getLong("bFbVCJ()V^", 0L);
      // Undeclared exception!
      try { 
        bookAdminService0.findOne(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Long long0 = new Long((-1398L));
      Book book0 = new Book(long0);
      Account account0 = new Account(long0);
      book0.owner = account0;
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      Long long1 = new Long(1L);
      // Undeclared exception!
      try { 
        bookAdminService0.deleteBook(book0.owner.id, long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User can't delete others book
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        bookAdminService0.deleteBook(long0, (Long) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The Book is not exist
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Long long0 = new Long((-1398L));
      Book book0 = new Book(long0);
      Account account0 = new Account(book0.id);
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      // Undeclared exception!
      try { 
        bookAdminService0.deleteBook(account0.id, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Long long0 = new Long((-1398L));
      Book book0 = new Book(long0);
      Account account0 = new Account(long0);
      book0.owner = account0;
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(book0, (Book) null).when(bookDao0).findOne(anyLong());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      Book book1 = bookAdminService0.findOne(account0.id);
      // Undeclared exception!
      try { 
        bookAdminService0.modifyBook(book1, book0.id);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The Book is not exist
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Long long0 = new Long((-1398L));
      Book book0 = new Book(long0);
      Account account0 = new Account(long0);
      book0.owner = account0;
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      Long long1 = new Long(0L);
      // Undeclared exception!
      try { 
        bookAdminService0.modifyBook(book0, long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User can't modify others book
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      // Undeclared exception!
      try { 
        bookAdminService0.saveBook((Book) null, (Account) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.examples.bootapi.service.BookAdminService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bookDao0).findByOwnerId(anyLong() , any(org.springframework.data.domain.Pageable.class));
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      PageRequest pageRequest0 = new PageRequest(1418, 590);
      Long long0 = new Long(1418);
      List<Book> list0 = bookAdminService0.listMyBook(long0, pageRequest0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BookAdminService bookAdminService0 = new BookAdminService();
      BookBorrowService bookBorrowService0 = new BookBorrowService();
      Page<Book> page0 = (Page<Book>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(page0).toString();
      BookDao bookDao0 = mock(BookDao.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(bookDao0).findAll(any(org.springframework.data.domain.Pageable.class));
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "bookDao", (Object) bookDao0);
      MessageDao messageDao0 = mock(MessageDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(bookBorrowService0, (Class<?>) BookBorrowService.class, "messageDao", (Object) messageDao0);
      Injector.validateBean(bookBorrowService0, (Class<?>) BookBorrowService.class);
      BookDao bookDao1 = bookBorrowService0.bookDao;
      Injector.inject(bookAdminService0, (Class<?>) BookAdminService.class, "bookDao", (Object) bookDao1);
      Injector.validateBean(bookAdminService0, (Class<?>) BookAdminService.class);
      PageRequest pageRequest0 = new PageRequest(1418, 590);
      Iterable<Book> iterable0 = bookAdminService0.findAll(pageRequest0);
      assertNotNull(iterable0);
  }
}
