/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 18:14:54 GMT 2017
 */

package org.springside.examples.bootapi.api.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.examples.bootapi.api.support.ErrorPageController;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ErrorPageController_ESTest extends ErrorPageController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ErrorPageController errorPageController0 = new ErrorPageController();
      // Undeclared exception!
      try { 
        errorPageController0.handle((HttpServletRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ErrorPageController errorPageController0 = new ErrorPageController();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getRemoteAddr();
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest1).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest1).getRemoteAddr();
      errorPageController0.handle(httpServletRequest1);
      errorPageController0.handle(httpServletRequest0);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest2).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest2).getRemoteAddr();
      errorPageController0.handle(httpServletRequest2);
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest3).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest3).getRemoteAddr();
      errorPageController0.handle(httpServletRequest3);
      HttpServletRequest httpServletRequest4 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest4).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest4).getRemoteAddr();
      errorPageController0.handle(httpServletRequest4);
      HttpServletRequest httpServletRequest5 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest5).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest5).getRemoteAddr();
      errorPageController0.handle(httpServletRequest5);
      HttpServletRequest httpServletRequest6 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest6).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest6).getRemoteAddr();
      HttpServletRequest httpServletRequest7 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest7).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest7).getRemoteAddr();
      errorPageController0.handle(httpServletRequest7);
      errorPageController0.handle(httpServletRequest6);
      HttpServletRequest httpServletRequest8 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest8).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest8).getRemoteAddr();
      HttpServletRequest httpServletRequest9 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest9).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest9).getRemoteAddr();
      errorPageController0.handle(httpServletRequest9);
      errorPageController0.handle(httpServletRequest8);
      HttpServletRequest httpServletRequest10 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest10).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest10).getRemoteAddr();
      errorPageController0.handle(httpServletRequest10);
      errorPageController0.getErrorPath();
      HttpServletRequest httpServletRequest11 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest11).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest11).getRemoteAddr();
      HttpServletRequest httpServletRequest12 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest12).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest12).getRemoteAddr();
      errorPageController0.handle(httpServletRequest12);
      errorPageController0.handle(httpServletRequest11);
      HttpServletRequest httpServletRequest13 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest13).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest13).getRemoteAddr();
      errorPageController0.handle(httpServletRequest13);
      HttpServletRequest httpServletRequest14 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest14).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest14).getRemoteAddr();
      errorPageController0.handle(httpServletRequest14);
      HttpServletRequest httpServletRequest15 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest15).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest15).getRemoteAddr();
      errorPageController0.handle(httpServletRequest15);
      errorPageController0.getErrorPath();
      errorPageController0.getErrorPath();
      HttpServletRequest httpServletRequest16 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest16).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest16).getRemoteAddr();
      errorPageController0.handle(httpServletRequest16);
      String string0 = errorPageController0.getErrorPath();
      assertNull(string0);
  }
}
