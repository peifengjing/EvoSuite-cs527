/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:59:03 GMT 2017
 */

package org.springside.modules.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.SortedMap;
import javax.management.RuntimeOperationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.metrics.MetricRegistry;
import org.springside.modules.metrics.exporter.JmxExporter;
import org.springside.modules.metrics.metric.Counter;
import org.springside.modules.metrics.metric.Gauge;
import org.springside.modules.metrics.metric.Histogram;
import org.springside.modules.metrics.metric.Timer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetricRegistry_ESTest extends MetricRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Histogram histogram0 = metricRegistry0.histogram("", doubleArray0);
      assertNotNull(histogram0);
      
      Map<String, Histogram> map0 = metricRegistry0.getHistograms();
      MetricRegistry.getSortedMetrics(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Counter counter0 = metricRegistry0.counter("W[&%fq=4J'4>Dg:RD");
      assertNotNull(counter0);
      
      Map<String, Counter> map0 = metricRegistry0.getCounters();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[0];
      // Undeclared exception!
      try { 
        metricRegistry0.timer("%in\"", doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      // Undeclared exception!
      try { 
        metricRegistry0.registerGauge(", max=", (Gauge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        MetricRegistry.name((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      JmxExporter jmxExporter0 = new JmxExporter("*lu'em1", metricRegistry0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      // Undeclared exception!
      try { 
        metricRegistry0.histogram(", lastReportTime=", doubleArray0);
        fail("Expecting exception: RuntimeOperationsException");
      
      } catch(RuntimeOperationsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      String string0 = "bccM2S4i\"W]";
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2450L);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      // Undeclared exception!
      try { 
        metricRegistry0.INSTANCE.histogram(string0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MetricRegistry.getSortedMetrics((Map<String, Histogram>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      // Undeclared exception!
      try { 
        metricRegistry0.counter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      String string0 = "";
      JmxExporter jmxExporter0 = new JmxExporter(string0, metricRegistry0);
      String string1 = "]]\"\\eZD4Zc/+LWq";
      // Undeclared exception!
      try { 
        metricRegistry0.counter(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      metricRegistry0.INSTANCE.addListener(jmxExporter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "";
      String string0 = MetricRegistry.name("]", stringArray0);
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "p'TQvew@R5!FAd!0U";
      String string0 = MetricRegistry.name("!=8YFpu&w;", stringArray0);
      assertEquals("!=8YFpu&w;.p'TQvew@R5!FAd!0U", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = MetricRegistry.name("", (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      String string0 = "";
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      // Undeclared exception!
      try { 
        metricRegistry0.INSTANCE.clearAll();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[0];
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      metricRegistry0.timer("", doubleArray0);
      metricRegistry0.clearAll();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      String string0 = "";
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      metricRegistry0.histogram("", doubleArray0);
      JmxExporter jmxExporter0 = new JmxExporter(string0, metricRegistry0);
      // Undeclared exception!
      try { 
        metricRegistry0.clearAll();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[5];
      // Undeclared exception!
      try { 
        metricRegistry0.timer("&", doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Timer timer0 = metricRegistry0.INSTANCE.timer("", (Double[]) null);
      assertNotNull(timer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      String string0 = "";
      Double[] doubleArray0 = null;
      Histogram histogram0 = metricRegistry0.histogram(string0, doubleArray0);
      assertNotNull(histogram0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = metricRegistry0.histogram("", doubleArray0);
      Histogram histogram1 = metricRegistry0.histogram("", doubleArray0);
      assertSame(histogram1, histogram0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Double[] doubleArray0 = new Double[3];
      // Undeclared exception!
      try { 
        metricRegistry0.histogram("", doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Counter counter0 = metricRegistry0.counter("W[&%fq=4J'4>Dg:RD");
      Counter counter1 = metricRegistry0.counter("W[&%fq=4J'4>Dg:RD");
      assertSame(counter1, counter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[2];
      metricRegistry0.setDefaultPcts(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Map<String, Histogram> map0 = metricRegistry0.getHistograms();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      String string0 = "";
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(string0, gauge0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Map<String, Counter> map0 = metricRegistry0.getCounters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      metricRegistry0.getTimers();
      Counter counter0 = metricRegistry0.counter("AmtTg$+d[3:");
      assertNotNull(counter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, JmxExporter> hashMap0 = new HashMap<String, JmxExporter>();
      SortedMap<String, JmxExporter> sortedMap0 = MetricRegistry.getSortedMetrics((Map<String, JmxExporter>) hashMap0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Map<String, Gauge> map0 = (Map<String, Gauge>)metricRegistry0.getGauges();
      assertTrue(map0.isEmpty());
  }
}
