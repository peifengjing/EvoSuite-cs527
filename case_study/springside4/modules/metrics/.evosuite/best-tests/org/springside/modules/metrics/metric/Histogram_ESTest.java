/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 21:08:13 GMT 2017
 */

package org.springside.modules.metrics.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.metrics.metric.Histogram;
import org.springside.modules.metrics.metric.HistogramMetric;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Histogram_ESTest extends Histogram_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setSampleRate(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(55.848554226945915);
      doubleArray0[1] = double1;
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      histogram0.update(1);
      histogram0.update(1);
      histogram0.update(1);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
      assertEquals(1.0, histogramMetric0.avg, 0.01);
      assertEquals(1L, histogramMetric0.min);
      assertEquals(1L, histogramMetric0.max);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      Double double1 = new Double(66.8);
      doubleArray0[3] = double1;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(526L);
      histogram0.update(526L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
      assertEquals(526L, histogramMetric0.max);
      assertEquals(526L, histogramMetric0.min);
      assertEquals(526.0, histogramMetric0.avg, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(25.0);
      doubleArray0[0] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update((-3330L));
      histogram0.update((-3330L));
      histogram0.update((-3330L));
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
      assertEquals((-3330L), histogramMetric0.min);
      assertEquals((-3330L), histogramMetric0.max);
      assertEquals((-3330.0), histogramMetric0.avg, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      doubleArray0[0] = double0;
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      // Undeclared exception!
      try { 
        histogram0.update(4447L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.springside.modules.metrics.metric.Histogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      Double[] doubleArray1 = new Double[5];
      histogram0.setPcts(doubleArray1);
      // Undeclared exception!
      try { 
        histogram0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setPcts((Double[]) null);
      // Undeclared exception!
      try { 
        histogram0.calculateMetric();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Histogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Histogram histogram0 = null;
      try {
        histogram0 = new Histogram((Double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Histogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Histogram histogram0 = null;
      try {
        histogram0 = new Histogram((Integer) null, (Double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Histogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.reset();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setSampleRate((-1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(4.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update((-1L));
      histogram0.setPcts((Double[]) null);
      histogram0.update(0L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
      assertEquals((-0.5), histogramMetric0.avg, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(4.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update((-1L));
      histogram0.update((-1089609930));
      histogram0.setPcts((Double[]) null);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
      assertEquals((-5.448049655E8), histogramMetric0.avg, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(22);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
      assertEquals(22.0, histogramMetric0.avg, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      histogram0.update((-1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setSampleRate(1670);
      histogram0.update(0L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      String string0 = histogram0.toString();
      assertEquals("Histogram [latestMetric=HistogramMetric [min=0, max=0, avg=0.0, pcts={}], measurements=[], pcts=[]]", string0);
  }
}
