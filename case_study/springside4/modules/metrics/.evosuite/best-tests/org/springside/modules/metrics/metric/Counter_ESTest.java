/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 21:16:58 GMT 2017
 */

package org.springside.modules.metrics.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import org.springside.modules.metrics.metric.Counter;
import org.springside.modules.metrics.metric.CounterMetric;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Counter_ESTest extends Counter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-674L));
      counter0.calculateMetric();
      System.setCurrentTimeMillis(3997L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
      assertEquals(0L, counterMetric0.latestCount);
      assertEquals(0L, counterMetric0.totalCount);
      assertEquals(0L, counterMetric0.latestRate);
      assertEquals(0L, counterMetric0.avgRate);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-674L));
      counter0.reset();
      counter0.dec(1L);
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
      assertEquals((-1L), counterMetric0.totalCount);
      assertEquals((-1L), counterMetric0.latestCount);
      assertEquals((-1L), counterMetric0.avgRate);
      assertEquals((-1L), counterMetric0.latestRate);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Counter counter0 = new Counter();
      Counter.clock = counter0.clock;
      Counter.clock = null;
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Counter counter0 = new Counter();
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-674L));
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
      assertEquals(0L, counterMetric0.avgRate);
      assertEquals(0L, counterMetric0.totalCount);
      assertEquals(0L, counterMetric0.latestCount);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.dec();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc(943L);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Counter counter0 = new Counter();
      String string0 = counter0.toString();
      assertEquals("Counter [latestMetric=CounterMetric [totalCount=0, avgRate=0, latestCount=0, latestRate=0], counter=0, totalCount=0, startTime=1392409281320, lastReportTime=1392409281320]", string0);
  }
}
