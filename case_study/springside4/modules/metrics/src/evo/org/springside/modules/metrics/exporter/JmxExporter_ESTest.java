/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 21:10:40 GMT 2017
 */

package org.springside.modules.metrics.exporter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.management.RuntimeOperationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.metrics.MetricRegistry;
import org.springside.modules.metrics.exporter.JmxExporter;
import org.springside.modules.metrics.metric.Counter;
import org.springside.modules.metrics.metric.Gauge;
import org.springside.modules.metrics.metric.Histogram;
import org.springside.modules.metrics.metric.Timer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JmxExporter_ESTest extends JmxExporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("DMQw", metricRegistry0);
      Timer timer0 = metricRegistry0.timer("", (Double[]) null);
      jmxExporter0.onTimerAdded("", timer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("bRr.]", metricRegistry0);
      jmxExporter0.onHistogramRemoved("bRr.]");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("6Fe", metricRegistry0);
      jmxExporter0.onHistogramAdded("6Fe", (Histogram) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register {}", metricRegistry0);
      jmxExporter0.onGaugeAdded(", max=", (Gauge) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      jmxExporter0.onCounterRemoved(",");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      metricRegistry0.timer("", doubleArray0);
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      jmxExporter0.initMBeans();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(", avgRate=", gauge0);
      JmxExporter jmxExporter0 = new JmxExporter(", avgRate=", metricRegistry0);
      jmxExporter0.initMBeans();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register already exist mbean:", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerRemoved("Unable to register already exist mbean:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable to register already exist mbean:
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerRemoved("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("Unable to unregister:", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerAdded("Unable to unregister:", (Timer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable to unregister:
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("_r^>PCfYU_h", metricRegistry0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(150.2);
      doubleArray0[0] = double0;
      Timer timer0 = new Timer(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerAdded((String) null, timer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramRemoved((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("=|YnW(5 ] 0Q:ds<", metricRegistry0);
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      Histogram histogram0 = new Histogram(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramAdded("=|YnW(5 ] 0Q:ds<", histogram0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: =|YnW(5 ] 0Q:ds<
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("{&CKJ>B_3(", metricRegistry0);
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramAdded((String) null, histogram0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("fPXE:ahA{b#/Iax", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeRemoved("fPXE:ahA{b#/Iax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: fPXE:ahA{b#/Iax
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeRemoved((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeRemoved("Y8Z&R\"2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("P]Clpa{mO0on)3wi", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeAdded("eZf?Zk", gauge0);
        fail("Expecting exception: RuntimeOperationsException");
      
      } catch(RuntimeOperationsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register:", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterRemoved("Unable to register:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable to register:
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterRemoved("f]cBF_pUO2\"bxt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("uBtMr]G.C1{*VM]eQX", metricRegistry0);
      Counter counter0 = new Counter();
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterAdded("org.springside.modules.metrics.metric.Timer", counter0);
        fail("Expecting exception: RuntimeOperationsException");
      
      } catch(RuntimeOperationsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("6Fe", metricRegistry0);
      Counter counter0 = metricRegistry0.counter("6Fe");
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterAdded((String) null, counter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(100.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[2];
      metricRegistry0.timer("Unable to register {}", doubleArray0);
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register already exist mbean:", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.initMBeans();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable to register already exist mbean:
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge("Unable to register already exist mbean:", gauge0);
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register already exist mbean:", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.destroyMBeans();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable to register already exist mbean:
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge("N&CKJc3(", gauge0);
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.destroyMBeans();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      metricRegistry0.histogram("o<eU6)u}\"a{", doubleArray0);
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.destroyMBeans();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JmxExporter jmxExporter0 = null;
      try {
        jmxExporter0 = new JmxExporter("org.springside.modules.metrics.exporter.JmxExporter", (MetricRegistry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-2527.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      Histogram histogram0 = new Histogram(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramAdded("d_? g g7y", histogram0);
        fail("Expecting exception: RuntimeOperationsException");
      
      } catch(RuntimeOperationsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1788.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      metricRegistry0.timer("", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeAdded((String) null, gauge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register:", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramRemoved("Unable to register:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable to register:
         //
         verifyException("org.springside.modules.metrics.exporter.JmxExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("6Fe", metricRegistry0);
      Counter counter0 = metricRegistry0.counter("6Fe");
      jmxExporter0.onCounterAdded("6Fe", counter0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("_r^>PCfYU_h", metricRegistry0);
      metricRegistry0.counter("_r^>PCfYU_h");
      Double[] doubleArray0 = new Double[1];
      jmxExporter0.destroyMBeans();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge("16SD{m*f32|-HR.", gauge0);
      JmxExporter jmxExporter0 = new JmxExporter("16SD{m*f32|-HR.", metricRegistry0);
      jmxExporter0.destroyMBeans();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      metricRegistry0.timer("", doubleArray0);
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.initMBeans();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("Clp{m30on)3wi", metricRegistry0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        metricRegistry0.histogram("Clp{m30on)3wi", doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("Clp{m30on)3wi", metricRegistry0);
      // Undeclared exception!
      try { 
        metricRegistry0.counter("Clp{m30on)3wi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge("16SD{m*f32|-HR.", gauge0);
      JmxExporter jmxExporter0 = new JmxExporter("16SD{m*f32|-HR.", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.initMBeans();
        fail("Expecting exception: RuntimeOperationsException");
      
      } catch(RuntimeOperationsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("", metricRegistry0);
      jmxExporter0.onGaugeRemoved("\"J!y$&7SJ{_]8>bmu=");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register {}", metricRegistry0);
      jmxExporter0.onTimerRemoved("org.springside.Codules.metrics.exqorter.JmxExporter");
      metricRegistry0.counter("");
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      metricRegistry0.timer("Unable to register {}", doubleArray0);
      jmxExporter0.onTimerRemoved(", avg=");
      metricRegistry0.histogram("o<eU6)u}\"a{", doubleArray0);
      metricRegistry0.addListener(jmxExporter0);
      metricRegistry0.addListener(jmxExporter0);
      JmxExporter jmxExporter1 = new JmxExporter("", metricRegistry0);
      assertFalse(jmxExporter1.equals((Object)jmxExporter0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register {}", metricRegistry0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      metricRegistry0.timer("Unable to register {}", doubleArray0);
      jmxExporter0.destroyMBeans();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("Unable to register {}", metricRegistry0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      metricRegistry0.histogram("o<eU6)u}\"a{", doubleArray0);
      jmxExporter0.destroyMBeans();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("g'SI", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterRemoved((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException("javax.management.ObjectName", e);
      }
  }
}
