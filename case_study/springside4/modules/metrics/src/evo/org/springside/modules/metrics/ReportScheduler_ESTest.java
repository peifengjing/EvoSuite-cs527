/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 21:13:03 GMT 2017
 */

package org.springside.modules.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;
import org.springside.modules.metrics.MetricRegistry;
import org.springside.modules.metrics.ReportScheduler;
import org.springside.modules.metrics.Reporter;
import org.springside.modules.metrics.reporter.ConsoleReporter;
import org.springside.modules.metrics.reporter.GraphiteReporter;
import org.springside.modules.metrics.reporter.Slf4jReporter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReportScheduler_ESTest extends ReportScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      GraphiteReporter graphiteReporter0 = new GraphiteReporter(mockInetSocketAddress0);
      reportScheduler0.addReporter(graphiteReporter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-155.03136750069));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = double0;
      metricRegistry0.timer("iYK31BjvZC*f79t", doubleArray0);
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      System.setCurrentTimeMillis(0L);
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      reportScheduler0.report();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      GraphiteReporter graphiteReporter0 = new GraphiteReporter(mockInetSocketAddress0);
      reportScheduler0.removeReporter(graphiteReporter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReportScheduler reportScheduler0 = new ReportScheduler((MetricRegistry) null, (List<Reporter>) null);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        reportScheduler0.start(0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Reporter[] reporterArray0 = new Reporter[9];
      ConsoleReporter consoleReporter0 = new ConsoleReporter();
      reporterArray0[0] = (Reporter) consoleReporter0;
      Slf4jReporter slf4jReporter0 = new Slf4jReporter();
      reporterArray0[1] = (Reporter) slf4jReporter0;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 80);
      GraphiteReporter graphiteReporter0 = new GraphiteReporter(inetSocketAddress0, "");
      reporterArray0[2] = (Reporter) graphiteReporter0;
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Socket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      ReportScheduler reportScheduler0 = null;
      try {
        reportScheduler0 = new ReportScheduler(metricRegistry0, (Reporter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.ReportScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, (List<Reporter>) null);
      Slf4jReporter slf4jReporter0 = new Slf4jReporter("org.springside.modules.metrics.ReportScheduler");
      // Undeclared exception!
      try { 
        reportScheduler0.addReporter(slf4jReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.ReportScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Reporter[] reporterArray0 = new Reporter[9];
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.ReportScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-155.03136750069));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = double0;
      metricRegistry0.timer("iYK31BjvZC*f79t", doubleArray0);
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-2598.517511));
      doubleArray0[0] = double0;
      metricRegistry0.histogram(", ", doubleArray0);
      reportScheduler0.report();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      metricRegistry0.counter("v H5+HD5");
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      // Undeclared exception!
      try { 
        reportScheduler0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scheduler hadn't been started before
         //
         verifyException("org.springside.modules.metrics.ReportScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, (List<Reporter>) null);
      Slf4jReporter slf4jReporter0 = new Slf4jReporter("ig*'Y");
      // Undeclared exception!
      try { 
        reportScheduler0.removeReporter(slf4jReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.ReportScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Reporter[] reporterArray0 = new Reporter[1];
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      reportScheduler0.start(32, timeUnit0);
      // Undeclared exception!
      try { 
        reportScheduler0.start(32, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scheduler had been started before
         //
         verifyException("org.springside.modules.metrics.ReportScheduler", e);
      }
  }
}
