/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 21:23:37 GMT 2017
 */

package org.springside.modules.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.web.CollectionExtractor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollectionExtractor_ESTest extends CollectionExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      String string0 = CollectionExtractor.convertToString((Collection) linkedList0, "", (String) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = CollectionExtractor.extractToString(linkedList0, "ijh@j3%/nj$S4", "$$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      String string0 = CollectionExtractor.convertToString((Collection) linkedList0, "|<L@");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List list0 = CollectionExtractor.extractToList(linkedList0, "");
      String string0 = CollectionExtractor.convertToString((Collection) list0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString((Collection) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.web.CollectionExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString(linkedList0, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap((Collection) null, "', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.web.CollectionExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(", '");
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap(linkedList0, "", "wn@'r`{v;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList((Collection) null, "3|@4M==e>!m&WQ+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.web.CollectionExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList(linkedList0, "}4p:dv#\"ys");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.convertToString((Collection) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.web.CollectionExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList(linkedList0, "org.springside.modules.utils.reflect.ClassUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [org.springside.modules.utils.reflect.ClassUtil] on target []
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = CollectionExtractor.convertToString((Collection) linkedList0, "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-60));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString(linkedList0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("8LD+ij2");
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap(linkedList0, (String) null, "8LD+ij28LD+ij21'yy*1'yy*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List list0 = CollectionExtractor.extractToList(linkedList0, "");
      Map map0 = CollectionExtractor.extractToMap(list0, "", "");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CollectionExtractor collectionExtractor0 = new CollectionExtractor();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = CollectionExtractor.convertToString((Collection) null, "5RxfZ9;;ZD");
      assertNull(string0);
  }
}
