/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Oct 14 20:45:22 GMT 2017
 */

package org.springside.modules.utils.io;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class FileTreeWalker_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.springside.modules.utils.io.FileTreeWalker"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
    java.lang.System.setProperty("sun.jnu.encoding", "UTF-8"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(FileTreeWalker_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.io.Files$2",
      "com.google.common.collect.ImmutableList$SubList",
      "org.springside.modules.utils.io.FileTreeWalker$FileExtensionFilter",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.PeekingIterator",
      "org.apache.commons.lang3.StringUtils",
      "com.google.common.io.Files$FileByteSink",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.collect.FluentIterable",
      "com.google.common.base.Optional",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "org.springside.modules.utils.io.FileUtil",
      "org.springside.modules.utils.text.MoreStringUtil",
      "com.google.common.collect.SingletonImmutableList",
      "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.collect.Iterators$6",
      "com.google.common.collect.AbstractIterator$1",
      "com.google.common.collect.Platform",
      "com.google.common.base.Function",
      "com.google.common.collect.AbstractIndexedListIterator",
      "org.apache.commons.lang3.JavaVersion",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.collect.Iterators$1",
      "com.google.common.collect.Iterators$2",
      "com.google.common.collect.Iterators$3",
      "com.google.common.collect.Iterators$5",
      "com.google.common.io.ByteSink",
      "com.google.common.collect.TreeTraverser$1",
      "com.google.common.collect.Iterators$10",
      "com.google.common.collect.TreeTraverser$2",
      "com.google.common.collect.AbstractIterator$State",
      "org.springside.modules.utils.io.FileTreeWalker",
      "com.google.common.collect.TreeTraverser$3",
      "com.google.common.collect.Iterators$12",
      "org.springside.modules.utils.base.Platforms",
      "com.google.common.collect.TreeTraverser$4",
      "com.google.common.collect.Iterators$11",
      "com.google.common.base.Predicate",
      "com.google.common.collect.TreeTraverser$PostOrderIterator",
      "com.google.common.base.Present",
      "org.springside.modules.utils.io.FilePathUtil",
      "com.google.common.collect.ImmutableList$Builder",
      "com.google.common.collect.Iterables",
      "com.google.common.collect.Iterables$4",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.collect.RegularImmutableAsList",
      "org.springside.modules.utils.io.FileTreeWalker$AntPathFilter",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.TreeTraverser",
      "org.springside.modules.utils.io.FileTreeWalker$WildcardFileNameFilter",
      "com.google.common.collect.TreeTraverser$PreOrderIterator",
      "com.google.common.collect.ImmutableList",
      "com.google.common.io.Files",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.io.Files$FileByteSource",
      "com.google.common.collect.FluentIterable$1",
      "com.google.common.collect.FluentIterable$2",
      "org.springside.modules.utils.io.FileTreeWalker$RegexFileNameFilter",
      "com.google.common.io.ByteSource",
      "com.google.common.io.Files$FilePredicate$1",
      "com.google.common.io.Files$FilePredicate$2",
      "com.google.common.base.Absent",
      "com.google.common.collect.ObjectArrays",
      "com.google.common.io.Files$FilePredicate",
      "org.apache.commons.lang3.SystemUtils",
      "com.google.common.collect.AbstractIterator",
      "com.google.common.collect.ImmutableList$1",
      "com.google.common.io.LineProcessor",
      "org.springside.modules.utils.text.WildcardMatcher",
      "org.apache.commons.lang3.math.NumberUtils",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.Iterators$MergingIterator",
      "com.google.common.collect.UnmodifiableIterator"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(FileTreeWalker_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.common.io.Files",
      "com.google.common.io.Files$FilePredicate$1",
      "com.google.common.io.Files$FilePredicate$2",
      "com.google.common.io.Files$FilePredicate",
      "org.apache.commons.lang3.math.NumberUtils",
      "org.apache.commons.lang3.JavaVersion",
      "org.apache.commons.lang3.StringUtils",
      "org.apache.commons.lang3.SystemUtils",
      "org.springside.modules.utils.base.Platforms",
      "com.google.common.base.Optional",
      "com.google.common.base.Absent",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.AbstractIterator$State",
      "com.google.common.collect.AbstractIterator$1",
      "com.google.common.collect.ObjectArrays",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.collect.SingletonImmutableList",
      "org.springside.modules.utils.text.WildcardMatcher",
      "com.google.common.collect.ImmutableCollection$Builder"
    );
  }
}
