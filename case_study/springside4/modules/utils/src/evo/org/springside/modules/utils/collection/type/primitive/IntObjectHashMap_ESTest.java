/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:19:30 GMT 2017
 */

package org.springside.modules.utils.collection.type.primitive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.type.primitive.IntObjectHashMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntObjectHashMap_ESTest extends IntObjectHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      Integer integer0 = new Integer(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      intObjectHashMap0.merge(integer0, "p$ D!FbO^fv!o4\"", biFunction0);
      Object object0 = new Object();
      intObjectHashMap0.containsValue(object0);
      intObjectHashMap0.entries();
      Integer integer1 = new Integer(2040);
      intObjectHashMap0.replace(integer1, "p$ D!FbO^fv!o4\"");
      intObjectHashMap0.size();
      intObjectHashMap0.get(553);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      IntObjectHashMap<Integer> intObjectHashMap1 = null;
      try {
        intObjectHashMap1 = new IntObjectHashMap<Integer>((-317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-317) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.keySet();
      intObjectHashMap0.equals(intObjectHashMap0);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(8, 0.5F);
      Set<Integer> set0 = intObjectHashMap1.keySet();
      intObjectHashMap0.equals(set0);
      intObjectHashMap1.entries();
      intObjectHashMap1.putAll(intObjectHashMap0);
      intObjectHashMap1.values();
      IntObjectHashMap<Integer> intObjectHashMap2 = null;
      try {
        intObjectHashMap2 = new IntObjectHashMap<Integer>(0, 0.5F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>();
      Integer integer0 = new Integer((-1093));
      intObjectHashMap0.replace(integer0, integer0);
      Integer integer1 = new Integer((-1776));
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(8);
      intObjectHashMap1.equals(intObjectHashMap0);
      intObjectHashMap1.isEmpty();
      IntObjectHashMap<Object> intObjectHashMap2 = new IntObjectHashMap<Object>();
      intObjectHashMap2.toString();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put(integer1, "{}");
      intObjectHashMap1.putAll(hashMap0);
      Integer integer2 = new Integer(3162277);
      intObjectHashMap2.containsKey((Object) integer2);
      intObjectHashMap0.get(8);
      intObjectHashMap2.values();
      intObjectHashMap1.values();
      intObjectHashMap2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      Object object0 = new Object();
      intObjectHashMap0.put(4082, object0);
      intObjectHashMap0.toString();
      Integer integer0 = new Integer((-867));
      Function<Object, Object> function0 = Function.identity();
      Object object1 = intObjectHashMap0.computeIfAbsent(integer0, function0);
      intObjectHashMap0.put(13, (Object) "{4082=java.lang.Object@774afaa6}");
      IntObjectHashMap<Integer> intObjectHashMap1 = new IntObjectHashMap<Integer>();
      intObjectHashMap1.get(1);
      intObjectHashMap1.get(13);
      intObjectHashMap0.get((-202));
      intObjectHashMap0.get(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(5);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
      intObjectHashMap0.toString();
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(3649);
      Integer integer0 = new Integer(2239);
      intObjectHashMap1.equals(integer0);
      Integer integer1 = new Integer(3649);
      Integer.getInteger("");
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyInt() , any());
      intObjectHashMap1.clear();
      intObjectHashMap1.putIfAbsent((Integer) 8, "{}");
      intObjectHashMap1.compute(integer1, biFunction0);
      intObjectHashMap1.replace((Integer) 8, (String) null, (String) null);
      intObjectHashMap0.putAll(intObjectHashMap1);
      intObjectHashMap1.get(8);
      intObjectHashMap1.hashCode();
      IntObjectHashMap<Integer> intObjectHashMap2 = new IntObjectHashMap<Integer>(8);
      intObjectHashMap1.equals((Object) null);
      intObjectHashMap2.entries();
      intObjectHashMap1.putIfAbsent((Integer) 8, "AB<cz92J-d6L");
      intObjectHashMap2.remove((-1));
      intObjectHashMap1.values();
      intObjectHashMap0.size();
      intObjectHashMap0.clear();
      Integer integer2 = new Integer(8);
      Object object0 = new Object();
      intObjectHashMap0.put(integer2, object0);
      intObjectHashMap0.remove((-322));
      intObjectHashMap0.entries();
      intObjectHashMap1.put(integer2, (String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(13);
      Object object0 = new Object();
      intObjectHashMap0.put(4082, object0);
      intObjectHashMap0.toString();
      Integer integer0 = new Integer((-867));
      Integer integer1 = new Integer(13);
      Integer integer2 = new Integer(40320);
      intObjectHashMap0.remove(4082);
      intObjectHashMap0.put(integer1, (Object) integer2);
      Function<Object, Object> function0 = Function.identity();
      intObjectHashMap0.computeIfAbsent(integer0, function0);
      intObjectHashMap0.put(13, (Object) "{4082=java.lang.Object@177e4db5}");
      IntObjectHashMap<Integer> intObjectHashMap1 = null;
      try {
        intObjectHashMap1 = new IntObjectHashMap<Integer>((-202), 4082);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(4078);
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(10000);
      Integer integer0 = new Integer(8);
      intObjectHashMap1.putIfAbsent(integer0, "");
      // Undeclared exception!
      intObjectHashMap0.putAll(intObjectHashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>(1);
      intObjectHashMap0.entries();
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>();
      intObjectHashMap1.hashCode();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(intObjectHashMap1);
      intObjectHashMap1.putAll(hashMap0);
      IntObjectHashMap<Integer> intObjectHashMap2 = new IntObjectHashMap<Integer>();
      Integer integer0 = new Integer(1);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      intObjectHashMap1.put(1, "/c");
      intObjectHashMap2.merge(integer0, integer0, biFunction0);
      intObjectHashMap0.putAll(intObjectHashMap2);
      intObjectHashMap1.hashCode();
      IntObjectHashMap<Object> intObjectHashMap3 = null;
      try {
        intObjectHashMap3 = new IntObjectHashMap<Object>(0, (-1752.1333F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = Integer.getInteger("", 8);
      Object object0 = new Object();
      intObjectHashMap0.put(integer0, object0);
      intObjectHashMap0.forEach(biConsumer0);
      intObjectHashMap0.containsValue("H3&o~7n#");
      intObjectHashMap0.equals("*");
      intObjectHashMap0.containsKey(4071);
      IntObjectHashMap<Integer> intObjectHashMap1 = new IntObjectHashMap<Integer>(8);
      intObjectHashMap1.toString();
      intObjectHashMap1.values();
      intObjectHashMap0.isEmpty();
      intObjectHashMap0.containsKey(8);
      intObjectHashMap0.putAll(intObjectHashMap1);
      // Undeclared exception!
      try { 
        intObjectHashMap1.get((Object) "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(2991);
      Integer integer0 = new Integer(4075);
      intObjectHashMap0.putIfAbsent(integer0, integer0);
      intObjectHashMap0.toString();
      IntObjectHashMap<Integer> intObjectHashMap1 = new IntObjectHashMap<Integer>();
      intObjectHashMap0.equals(intObjectHashMap1);
      Object object0 = new Object();
      Integer integer1 = new Integer(2006);
      Integer.compareUnsigned(1940, 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(3341);
      intObjectHashMap0.hashCode();
      Integer integer0 = new Integer(8);
      intObjectHashMap0.put(integer0, "com.google.common.math.IntMath");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(3341, 0.5F);
      intObjectHashMap1.equals(intObjectHashMap0);
      intObjectHashMap1.replace((Integer) 8, (Object) intObjectHashMap0, (Object) intObjectHashMap0);
      Integer integer1 = new Integer(3341);
      Integer.remainderUnsigned(8, 3341);
      try { 
        Integer.decode("@[9q2Rk3K-Z ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@[9q2Rk3K-Z \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(8);
      Integer integer0 = Integer.getInteger("]^>w/(/r9#lc'pz:", (Integer) 8);
      hashMap0.put((Integer) 8, integer0);
      intObjectHashMap0.putAll(hashMap0);
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, (Integer) 8);
      intObjectHashMap1.containsKey(0);
      IntObjectHashMap<Object> intObjectHashMap2 = null;
      try {
        intObjectHashMap2 = new IntObjectHashMap<Object>(0, 0.5F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(5);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
      intObjectHashMap0.toString();
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(3649);
      Integer integer0 = new Integer(2239);
      intObjectHashMap1.equals(integer0);
      Integer integer1 = new Integer(3649);
      Integer.getInteger("");
      intObjectHashMap1.putIfAbsent((Integer) 8, "{}");
      intObjectHashMap1.replace((Integer) 8, (String) null, (String) null);
      intObjectHashMap0.putAll(intObjectHashMap1);
      intObjectHashMap1.get(8);
      intObjectHashMap1.hashCode();
      IntObjectHashMap<Integer> intObjectHashMap2 = new IntObjectHashMap<Integer>(8);
      intObjectHashMap1.equals((Object) null);
      intObjectHashMap2.entries();
      intObjectHashMap1.putIfAbsent((Integer) 8, "AB<cz92J-d6L");
      intObjectHashMap2.remove((-1));
      intObjectHashMap1.values();
      intObjectHashMap0.size();
      // Undeclared exception!
      try { 
        intObjectHashMap1.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>(2947);
      Integer integer0 = new Integer(2947);
      Integer integer1 = new Integer(2947);
      intObjectHashMap0.put(integer0, integer1);
      intObjectHashMap0.containsKey(2947);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(1);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap1.new MapEntry(8);
      // Undeclared exception!
      try { 
        intObjectHashMap_MapEntry0.getValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>();
      intObjectHashMap0.hashCode();
      IntObjectHashMap<Object> intObjectHashMap1 = null;
      try {
        intObjectHashMap1 = new IntObjectHashMap<Object>(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2147483647) not representable as an int
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      // Undeclared exception!
      try { 
        intObjectHashMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      Integer integer0 = new Integer(1328);
      intObjectHashMap0.put(integer0, "=V0RM9't6OO[5v5wVe");
      intObjectHashMap0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        intObjectHashMap0.put((Integer) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) 8, intObjectHashMap0);
      intObjectHashMap0.remove((-1412));
      intObjectHashMap0.putAll(hashMap0);
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(8);
      Integer.sum((-1412), 8);
      Integer.getInteger(">VDuiJB :gs/&", integer0);
      Integer.sum((-1404), 8);
      try { 
        Integer.decode(">VDuiJB :gs/&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">VDuiJB :gs/&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>(1, 1);
      intObjectHashMap0.values();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(4);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      intObjectHashMap0.put(integer0, "Unable to insert");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
      intObjectHashMap0.clear();
      intObjectHashMap0.put((-873), (Object) intObjectHashMap_MapEntry0);
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(8);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      Integer integer0 = new Integer(8);
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Object> function2 = function0.andThen((Function<? super Object, ?>) function1);
      Function<Object, Object> function3 = function2.compose((Function<? super Object, ?>) function0);
      intObjectHashMap0.computeIfAbsent(integer0, function3);
      Object object0 = new Object();
      intObjectHashMap0.put((-591), object0);
      intObjectHashMap0.clear();
      intObjectHashMap0.containsValue((Object) null);
      // Undeclared exception!
      try { 
        intObjectHashMap0.get(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Integer
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.values();
      intObjectHashMap0.toString();
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry((-312));
      Map.Entry.comparingByKey();
      // Undeclared exception!
      try { 
        intObjectHashMap_MapEntry0.getKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -312
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(8);
      Integer integer0 = new Integer(8);
      Integer.toUnsignedString(8);
      intObjectHashMap1.values();
      intObjectHashMap1.putIfAbsent(integer0, intObjectHashMap1);
      intObjectHashMap1.toString();
      intObjectHashMap1.putAll(intObjectHashMap0);
      intObjectHashMap1.containsValue((Object) null);
      intObjectHashMap0.isEmpty();
      IntObjectHashMap<Integer> intObjectHashMap2 = new IntObjectHashMap<Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        intObjectHashMap2.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      Integer integer0 = new Integer(8);
      Integer.getInteger("Vm#Cw86AV", 1204);
      intObjectHashMap0.put(0, (Object) integer0);
      intObjectHashMap0.clear();
      // Undeclared exception!
      try { 
        intObjectHashMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      intObjectHashMap0.replaceAll(biFunction0);
      Integer integer0 = new Integer(8);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      Integer integer0 = new Integer(8);
      Integer.getInteger("=dk[ZfQPs", 1);
      intObjectHashMap0.replace(integer0, (Object) "=dk[ZfQPs", (Object) "=dk[ZfQPs");
      intObjectHashMap0.hashCode();
      intObjectHashMap0.get((Object) integer0);
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>();
      intObjectHashMap1.clear();
      intObjectHashMap1.containsKey(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.isEmpty();
      IntObjectHashMap<Integer> intObjectHashMap1 = new IntObjectHashMap<Integer>(8);
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      intObjectHashMap0.equals(object0);
      Integer.getInteger("Sgi.(aP|>R@");
      IntObjectHashMap<Object> intObjectHashMap2 = new IntObjectHashMap<Object>();
      intObjectHashMap0.replace(integer0, "o5!!EEmEMdaNm", "o5!!EEmEMdaNm");
      Object object1 = new Object();
      Integer integer1 = new Integer(0);
      intObjectHashMap1.remove((Object) integer1);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
      intObjectHashMap0.keyToString(0);
      intObjectHashMap1.clear();
      intObjectHashMap0.equals("o5!!EEmEMdaNm");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<Object>((-1548), 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1548) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<Integer>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(171);
      intObjectHashMap0.keyToString((-1601));
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry((-553));
      Integer integer0 = Integer.decode("-1601");
      // Undeclared exception!
      try { 
        intObjectHashMap_MapEntry0.setValue(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -553
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      intObjectHashMap0.size();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      intObjectHashMap0.forEach(biConsumer0);
      intObjectHashMap0.values();
      BiConsumer<Object, String> biConsumer1 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      intObjectHashMap0.remove(1);
      intObjectHashMap0.put(1, "ukm@Sv=J(chD$T");
      intObjectHashMap0.forEach(biConsumer1);
      intObjectHashMap0.entries();
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      Object object0 = new Object();
      intObjectHashMap0.put(4082, object0);
      intObjectHashMap0.toString();
      Integer integer0 = new Integer((-867));
      Function<Object, Object> function0 = Function.identity();
      intObjectHashMap0.computeIfAbsent(integer0, function0);
      intObjectHashMap0.put(13, (Object) "{4082=java.lang.Object@5f564f23}");
      IntObjectHashMap<Integer> intObjectHashMap1 = new IntObjectHashMap<Integer>();
      intObjectHashMap1.get(1);
      intObjectHashMap1.get(13);
      intObjectHashMap0.get((-202));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      intObjectHashMap0.forEach(biConsumer0);
      intObjectHashMap0.values();
      BiConsumer<Object, String> biConsumer1 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      intObjectHashMap0.remove(1);
      Integer integer0 = new Integer(912);
      intObjectHashMap0.equals(integer0);
      intObjectHashMap0.put(1, "ukm@Sv=J(chD$T");
      intObjectHashMap0.forEach(biConsumer1);
      intObjectHashMap0.entries();
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 13;
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(13);
      int int1 = 4082;
      Object object0 = new Object();
      intObjectHashMap0.put(4082, object0);
      Integer integer0 = Integer.valueOf(13);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      intObjectHashMap0.replaceAll(biFunction0);
      intObjectHashMap0.toString();
      Integer integer1 = new Integer((-867));
      Function<Object, Object> function0 = Function.identity();
      Object object1 = intObjectHashMap0.computeIfAbsent(integer1, function0);
      intObjectHashMap0.put(13, (Object) "{4082=13}");
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      intObjectHashMap0.merge((Integer) object1, "{4082=13}", biFunction1);
      intObjectHashMap0.keySet();
      int int2 = (-202);
      intObjectHashMap0.toString();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        intObjectHashMap0.containsKey(object2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Integer
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, String> biConsumer1 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(912);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      Integer integer0 = new Integer(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      intObjectHashMap0.merge(integer0, "p$ D!FbO^fv!o4\"", biFunction0);
      Object object0 = new Object();
      intObjectHashMap0.containsValue(object0);
      intObjectHashMap0.entries();
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(8);
      intObjectHashMap1.hashCode();
      intObjectHashMap1.get(8);
      intObjectHashMap0.size();
      intObjectHashMap1.containsKey(33);
      intObjectHashMap0.get(553);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap1.new MapEntry(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      // Undeclared exception!
      try { 
        intObjectHashMap_MapEntry0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The map entry has been removed
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.values();
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(8);
      Integer integer0 = new Integer(29);
      intObjectHashMap0.clear();
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      intObjectHashMap1.computeIfPresent(integer0, biFunction0);
      intObjectHashMap0.equals(intObjectHashMap1);
      IntObjectHashMap<Object> intObjectHashMap2 = null;
      try {
        intObjectHashMap2 = new IntObjectHashMap<Object>(0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>();
      Integer integer0 = new Integer((-1093));
      intObjectHashMap0.replace(integer0, integer0);
      intObjectHashMap0.replace((Integer) 8, (Integer) 8);
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(8);
      intObjectHashMap1.equals(intObjectHashMap0);
      intObjectHashMap1.isEmpty();
      IntObjectHashMap<Object> intObjectHashMap2 = new IntObjectHashMap<Object>(8);
      intObjectHashMap2.toString();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, "{}");
      // Undeclared exception!
      try { 
        intObjectHashMap1.putAll(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(504);
      intObjectHashMap0.isEmpty();
      IntObjectHashMap<Integer> intObjectHashMap1 = new IntObjectHashMap<Integer>();
      intObjectHashMap1.entries();
      Integer.valueOf(1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<String>(30, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(8);
      Integer integer0 = new Integer(8);
      Integer.toUnsignedString(8);
      intObjectHashMap1.values();
      intObjectHashMap1.putIfAbsent(integer0, (Object) null);
      intObjectHashMap1.toString();
      intObjectHashMap1.putAll(intObjectHashMap0);
      intObjectHashMap1.containsValue((Object) null);
      intObjectHashMap0.isEmpty();
      IntObjectHashMap<Integer> intObjectHashMap2 = new IntObjectHashMap<Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        intObjectHashMap2.remove(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Integer
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(3049);
      Integer integer0 = new Integer(3049);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("<emwi`%mfb").when(biFunction0).apply(any() , any());
      Integer integer1 = Integer.getInteger("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", integer0);
      intObjectHashMap0.compute(integer0, biFunction0);
      intObjectHashMap0.toString();
      Integer.toUnsignedString((-2052));
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      BiFunction<Object, Object, Integer> biFunction2 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer1).when(biFunction2).apply(any() , any());
      intObjectHashMap0.computeIfPresent(integer0, biFunction2);
      intObjectHashMap0.computeIfPresent(integer0, biFunction1);
      intObjectHashMap0.entrySet();
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      IntObjectHashMap<Integer> intObjectHashMap2 = new IntObjectHashMap<Integer>();
      // Undeclared exception!
      try { 
        intObjectHashMap1.remove((Object) intObjectHashMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.IntObjectHashMap cannot be cast to java.lang.Integer
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>(1);
      intObjectHashMap0.entries();
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>();
      intObjectHashMap1.hashCode();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(intObjectHashMap1);
      intObjectHashMap1.putAll(hashMap0);
      IntObjectHashMap<Integer> intObjectHashMap2 = new IntObjectHashMap<Integer>();
      Integer integer0 = new Integer(1);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      intObjectHashMap2.merge(integer0, integer0, biFunction0);
      intObjectHashMap0.putAll(intObjectHashMap2);
      IntObjectHashMap<Object> intObjectHashMap3 = null;
      try {
        intObjectHashMap3 = new IntObjectHashMap<Object>(0, (-1752.1333F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }
}
