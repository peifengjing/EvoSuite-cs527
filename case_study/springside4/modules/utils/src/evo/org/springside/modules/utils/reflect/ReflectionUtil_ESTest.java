/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:02:23 GMT 2017
 */

package org.springside.modules.utils.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;
import org.springside.modules.utils.reflect.ReflectionUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectionUtil_ESTest extends ReflectionUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty(invocationTargetException0, "}B1qPRhB}1hp.A$5U", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty(object0, "java.vm.specification.name", "java.vm.specification.name");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [java.vm.specification.name] on target [java.lang.Object@1dbd961d]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue((Object) null, "Could not find getter method [", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ReflectionUtil.invokeConstructor(class0, (Object[]) null);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue(mockIllegalAccessException0, (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeSetter((Object) null, "R~iJMITb-kM~av2,", "R~iJMITb-kM~av2,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) null, "0", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      Class<NoSuchMethodException>[] classArray0 = (Class<NoSuchMethodException>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod(object0, (String) null, objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) noSuchMethodException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeGetter((Object) null, "Could not find getter method [");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeConstructor(class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such accessible constructor on object: java.lang.Integer
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeConstructor(class0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty((Object) null, "b)Yc-ihT} Btw?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty((Object) "java.awt.graphicsenv", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) null, "1.6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) noSuchMethodException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockRuntimeException0);
      assertSame(runtimeException0, mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("Q>`|B7!u3E");
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) noSuchMethodException0, "Q>`|B7!u3E", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [Q>`|B7!u3E] on target [java.lang.NoSuchMethodException: Q>`|B7!u3E]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue(object0, "g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [g] on target [java.lang.Object@5de99ea3]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockException mockException0 = new MockException();
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockException0);
      assertNotNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(invocationTargetException0);
      assertNotNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("pgt!");
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(noSuchMethodException0);
      assertNotNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockIllegalAccessException0);
      assertNotNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("P");
      MockException mockException0 = new MockException("P", mockRuntimeException0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) mockException0, "P", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [P] on target [org.evosuite.runtime.mock.java.lang.MockThrowable: P]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("y_,D(T^nI5] P10*sN");
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) mockIllegalAccessException0, "y_,D(T^nI5] P10*sN", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [y_,D(T^nI5] P10*sN] on target [org.evosuite.runtime.mock.java.lang.MockThrowable: y_,D(T^nI5] P10*sN]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty(mockIllegalAccessException0, (String) null, mockIllegalAccessException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue("z9eDYV*aaIJP<@v", "z9eDYV*aaIJP<@v", invocationTargetException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [z9eDYV*aaIJP<@v] on target [z9eDYV*aaIJP<@v]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty(object0, "I]qZ_gua_ 6UQ8yl9?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [I]qZ_gua_ 6UQ8yl9?] on target [java.lang.Object@3b5055c1]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeSetter("JAVA_0_9", "JAVA_0_9", mockIllegalAccessException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [JAVA_0_9] on target [JAVA_0_9]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(277);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeGetter((Object) integer0, "R.]_(=5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [R.]_(=5] on target [277]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) mockRuntimeException0, (Method) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ReflectionUtil reflectionUtil0 = new ReflectionUtil();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) reflectionUtil0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        ReflectionUtil.setField(object0, (Field) null, mockIllegalAccessException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeConstructor(class0, objectArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue(object0, (Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
}
