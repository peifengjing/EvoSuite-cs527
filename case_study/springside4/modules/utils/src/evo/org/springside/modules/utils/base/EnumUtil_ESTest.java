/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:53:59 GMT 2017
 */

package org.springside.modules.utils.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EnumSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.base.EnumUtil;
import org.springside.modules.utils.base.EnumUtilTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnumUtil_ESTest extends EnumUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<EnumUtilTest.Options> class0 = EnumUtilTest.Options.class;
      EnumUtilTest.Options[] enumUtilTest_OptionsArray0 = new EnumUtilTest.Options[0];
      long long0 = EnumUtil.generateBits(class0, enumUtilTest_OptionsArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<EnumUtilTest.Options> class0 = EnumUtilTest.Options.class;
      EnumUtilTest.Options[] enumUtilTest_OptionsArray0 = new EnumUtilTest.Options[1];
      EnumUtilTest.Options enumUtilTest_Options0 = EnumUtilTest.Options.D;
      enumUtilTest_OptionsArray0[0] = enumUtilTest_Options0;
      long long0 = EnumUtil.generateBits(class0, enumUtilTest_OptionsArray0);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<EnumUtilTest.Options> class0 = EnumUtilTest.Options.class;
      EnumSet<EnumUtilTest.Options> enumSet0 = EnumUtil.processBits(class0, 0L);
      long long0 = EnumUtil.generateBits(class0, (Iterable<? extends EnumUtilTest.Options>) enumSet0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtil.processBits((Class<EnumUtilTest.Options>) null, 1339L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // EnumClass must be defined.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<EnumUtilTest.Options> class0 = EnumUtilTest.Options.class;
      // Undeclared exception!
      try { 
        EnumUtil.generateBits(class0, (EnumUtilTest.Options[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<EnumUtilTest.Options> class0 = EnumUtilTest.Options.class;
      // Undeclared exception!
      try { 
        EnumUtil.generateBits(class0, (Iterable<? extends EnumUtilTest.Options>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<EnumUtilTest.Options> class0 = EnumUtilTest.Options.class;
      EnumUtilTest.Options[] enumUtilTest_OptionsArray0 = new EnumUtilTest.Options[3];
      // Undeclared exception!
      try { 
        EnumUtil.generateBits(class0, enumUtilTest_OptionsArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EnumUtil enumUtil0 = new EnumUtil();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<EnumUtilTest.Options> class0 = EnumUtilTest.Options.class;
      EnumSet<EnumUtilTest.Options> enumSet0 = EnumUtil.processBits(class0, 1209L);
      long long0 = EnumUtil.generateBits(class0, (Iterable<? extends EnumUtilTest.Options>) enumSet0);
      assertEquals(9L, long0);
  }
}
