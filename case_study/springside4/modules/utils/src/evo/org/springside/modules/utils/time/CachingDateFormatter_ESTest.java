/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:22:06 GMT 2017
 */

package org.springside.modules.utils.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.time.CachingDateFormatter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CachingDateFormatter_ESTest extends CachingDateFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FastDateFormat fastDateFormat0 = mock(FastDateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(fastDateFormat0).format(anyLong());
      doReturn("SSS").when(fastDateFormat0).getPattern();
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(fastDateFormat0);
      cachingDateFormatter0.format((-1921L));
      String string0 = cachingDateFormatter0.format(0L);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter("SSS");
      String string0 = cachingDateFormatter0.format((-307L));
      assertNotNull(string0);
      assertEquals("693", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = null;
      try {
        cachingDateFormatter0 = new CachingDateFormatter((FastDateFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.time.CachingDateFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = null;
      try {
        cachingDateFormatter0 = new CachingDateFormatter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = null;
      try {
        cachingDateFormatter0 = new CachingDateFormatter("rn|SLs55w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FastDateFormat fastDateFormat0 = mock(FastDateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fastDateFormat0).format(anyLong());
      doReturn("SSS").when(fastDateFormat0).getPattern();
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(fastDateFormat0);
      cachingDateFormatter0.format(0L);
      String string0 = cachingDateFormatter0.format(0L);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FastDateFormat fastDateFormat0 = mock(FastDateFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fastDateFormat0).format(anyLong());
      doReturn("pattern must not be null").when(fastDateFormat0).getPattern();
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(fastDateFormat0);
      String string0 = cachingDateFormatter0.format(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter("");
      String string0 = cachingDateFormatter0.format((-20L));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CachingDateFormatter.CachedTime cachingDateFormatter_CachedTime0 = new CachingDateFormatter.CachedTime(0L, "+H>_cOJt2:");
  }
}
