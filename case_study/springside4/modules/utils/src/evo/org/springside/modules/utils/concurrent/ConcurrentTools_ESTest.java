/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:50:57 GMT 2017
 */

package org.springside.modules.utils.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.RateLimiter;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.concurrent.ConcurrentTools;
import org.springside.modules.utils.concurrent.jsr166e.LongAdder;
import org.springside.modules.utils.concurrent.throttle.Sampler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentTools_ESTest extends ConcurrentTools_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RateLimiter rateLimiter0 = ConcurrentTools.rateLimiter(41);
      assertNotNull(rateLimiter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.sampler(807.2033003486);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid selectPercent value: 807.2033003486
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.cyclicBarrier((-2791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CyclicBarrier", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.countDownLatch((-2234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count < 0
         //
         verifyException("java.util.concurrent.CountDownLatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConcurrentTools concurrentTools0 = new ConcurrentTools();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CyclicBarrier cyclicBarrier0 = ConcurrentTools.cyclicBarrier(41);
      assertNotNull(cyclicBarrier0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Sampler sampler0 = ConcurrentTools.sampler(41);
      assertNotNull(sampler0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CountDownLatch countDownLatch0 = ConcurrentTools.countDownLatch(41);
      assertNotNull(countDownLatch0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LongAdder longAdder0 = ConcurrentTools.longAdder();
      assertEquals(0.0F, longAdder0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.rateLimiter((-1074));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rate must be positive
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
