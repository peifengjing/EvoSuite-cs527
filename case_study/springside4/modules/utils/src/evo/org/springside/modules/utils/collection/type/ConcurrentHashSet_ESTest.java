/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:13:55 GMT 2017
 */

package org.springside.modules.utils.collection.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.type.ConcurrentHashSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentHashSet_ESTest extends ConcurrentHashSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = concurrentHashSet0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer(0);
      concurrentHashSet0.add(integer0);
      Object[] objectArray0 = concurrentHashSet0.toArray();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      concurrentHashSet0.add("K{#6Dn.Zzg0Fj]T(");
      int int0 = concurrentHashSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap$CollectionView", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      concurrentHashSet0.add("5o0cy-e].");
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        concurrentHashSet0.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("java.util.concurrent.ConcurrentHashMap$CollectionView", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap$CollectionView", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap$CollectionView", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      ConcurrentHashSet<String> concurrentHashSet1 = new ConcurrentHashSet<String>();
      boolean boolean0 = concurrentHashSet0.containsAll(concurrentHashSet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      boolean boolean0 = concurrentHashSet0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet0.add("5o0cy-e].");
      boolean boolean1 = concurrentHashSet0.contains("5o0cy-e].");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      Integer integer0 = new Integer((-3077));
      ConcurrentHashSet<Integer> concurrentHashSet1 = new ConcurrentHashSet<Integer>();
      boolean boolean0 = concurrentHashSet1.add(integer0);
      boolean boolean1 = concurrentHashSet0.containsAll(concurrentHashSet1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      boolean boolean0 = concurrentHashSet0.equals("5o0cy-e].");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.equals(concurrentHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = concurrentHashSet0.add(integer0);
      assertTrue(boolean0);
      
      boolean boolean1 = concurrentHashSet0.add(integer0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(18);
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      boolean boolean0 = concurrentHashSet0.add(integer0);
      boolean boolean1 = concurrentHashSet0.remove(integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Integer integer0 = new Integer(1);
      boolean boolean0 = concurrentHashSet0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer(0);
      concurrentHashSet0.add(integer0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      concurrentHashSet1.add(integer0);
      boolean boolean0 = concurrentHashSet1.removeAll(concurrentHashSet0);
      assertEquals(0, concurrentHashSet1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Stream<Object> stream0 = concurrentHashSet0.stream();
      ConcurrentHashSet<Integer> concurrentHashSet1 = new ConcurrentHashSet<Integer>();
      concurrentHashSet0.add(stream0);
      boolean boolean0 = concurrentHashSet0.retainAll(concurrentHashSet1);
      assertEquals(0, concurrentHashSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      boolean boolean0 = concurrentHashSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      assertTrue(concurrentHashSet0.isEmpty());
      
      Integer integer0 = new Integer(3158);
      concurrentHashSet0.add(integer0);
      boolean boolean0 = concurrentHashSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.removeAll(concurrentHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      concurrentHashSet0.clear();
      assertEquals(0, concurrentHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      ConcurrentHashSet<String> concurrentHashSet1 = new ConcurrentHashSet<String>();
      boolean boolean0 = concurrentHashSet1.retainAll(concurrentHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      String string0 = concurrentHashSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      Iterator<String> iterator0 = concurrentHashSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      String[] stringArray0 = new String[5];
      String[] stringArray1 = concurrentHashSet0.toArray(stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Object[] objectArray0 = concurrentHashSet0.toArray();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      int int0 = concurrentHashSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      concurrentHashSet0.hashCode();
  }
}
