/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:35:51 GMT 2017
 */

package org.springside.modules.utils.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.mapper.XmlMapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlMapper_ESTest extends XmlMapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Collection<?>) null, (String) null, class0, "L.wV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Collection<?>) null, "uqf_LjlRd*", (Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Collection<?>) null, (String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) "H4R78X%0}-.0+fcJ}O", "H4R78X%0}-.0+fcJ}O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      JAXBContext jAXBContext0 = XmlMapper.getJaxbContext(class0);
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) jAXBContext0, "4y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate JAXBContext for class [class com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl]: 1 counts of IllegalAnnotationExceptions
         //
         verifyException("org.springside.modules.utils.mapper.XmlMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) null, class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // obj parameter must not be null
         //
         verifyException("javax.xml.bind.helpers.AbstractMarshallerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Instance must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.getJaxbContext((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        XmlMapper.fromXml("5Ce!A[", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.fromXml(" rXsZId3W4?J", (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.createUnmarshaller((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.createMarshaller((Class) null, "uqf_LjlRd*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      Marshaller marshaller0 = XmlMapper.createMarshaller(class0, "");
      assertNotNull(marshaller0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = XmlMapper.toXml((Collection<?>) null, "s,b`.-=j).1bK6P", class0, "");
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<s,b`.-=j).1bK6P/>\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlMapper.CollectionWrapper xmlMapper_CollectionWrapper0 = new XmlMapper.CollectionWrapper();
      Class<XmlMapper.CollectionWrapper> class0 = XmlMapper.CollectionWrapper.class;
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) xmlMapper_CollectionWrapper0, (Class) class0, "^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      Marshaller marshaller0 = XmlMapper.createMarshaller(class0, "uqf_LjlRd*");
      assertNotNull(marshaller0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlMapper xmlMapper0 = new XmlMapper();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<JAXBContext> class0 = JAXBContext.class;
      JAXBContext jAXBContext0 = XmlMapper.getJaxbContext(class0);
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) jAXBContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate JAXBContext for class [class com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl]: 1 counts of IllegalAnnotationExceptions
         //
         verifyException("org.springside.modules.utils.mapper.XmlMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Unmarshaller unmarshaller0 = XmlMapper.createUnmarshaller(class0);
      assertNotNull(unmarshaller0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        XmlMapper.fromXml((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) null, "'clazz' must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Instance must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = XmlMapper.toXml((Collection<?>) null, "'s Parameterized Type: ", class0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<'s Parameterized Type: />\n", string0);
  }
}
