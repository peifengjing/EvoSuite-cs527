/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:15:11 GMT 2017
 */

package org.springside.modules.utils.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.event.EventRecodingLogger;
import org.slf4j.event.SubstituteLoggingEvent;
import org.slf4j.helpers.NOPLogger;
import org.slf4j.helpers.SubstituteLogger;
import org.springside.modules.utils.log.ThrottledSlf4jLogger;
import org.springside.modules.utils.time.ClockUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThrottledSlf4jLogger_ESTest extends ThrottledSlf4jLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 5715L, timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, ";{Ra7", (Object) throttledSlf4jLogger0, (Object) timeUnit0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-2388L), timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn((Marker) null, "cIxTn:}gRKs`{|Of8", object0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("%(=1/", linkedList0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1479L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("ItsCHNmu", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("%(=1/", linkedList0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1479L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=8|ffv<D[Hv", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-2388L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-4272L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("|TL1+BjKh4glF%0P", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1489L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 17L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-2388L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-4272L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, linkedList0, true);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2001L, timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
      assertEquals("NOP", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-2324L), timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "YwcHp|^vy}w^V9c", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("WNeN", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      substituteLogger0.debug((Marker) null, "", (Object) mockJapaneseDate0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "WNeN", (Object) "5$riMEPC", (Object) "5$riMEPC");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1183L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "", (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TreeSet<SubstituteLoggingEvent> treeSet0 = new TreeSet<SubstituteLoggingEvent>();
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>((Collection<? extends SubstituteLoggingEvent>) treeSet0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.warn("");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, ",");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("`<");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("`<", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 2105L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((String) null, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1212L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 2679L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("org.springside.modules.utils.time.ClockUtil", object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TreeSet<SubstituteLoggingEvent> treeSet0 = new TreeSet<SubstituteLoggingEvent>();
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>((Collection<? extends SubstituteLoggingEvent>) treeSet0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.debug((Marker) null, "", (Object) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(".:/cZY", priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "6r>w?~iMi-krbZ9", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 636L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 3116L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "", object0, (Object) substituteLoggingEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "+`Pi(\\]A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 3177L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("rBtt{r9uS;", (Object) timeUnit0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 0L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Marker marker0 = substituteLoggingEvent0.getMarker();
      throttledSlf4jLogger0.info((Marker) null, "", (Object) "", (Object) "");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("", (Object) null, (Object) marker0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1898L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TreeSet<SubstituteLoggingEvent> treeSet0 = new TreeSet<SubstituteLoggingEvent>();
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>((SortedSet<? extends SubstituteLoggingEvent>) treeSet0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger("/`O-4u>iJ5V?te<", priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1233L, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, "/`O-4u>iJ5V?te<", (Object) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("/`O-4u>iJ5V?te<", object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-463L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isWarnEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isTraceEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isInfoEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1291L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isErrorEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 3120L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isDebugEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "D-dxb{*EBAVe,D!(", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("p?,vMcz[ZK)e", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-2397L), timeUnit0);
      substituteLogger0.warn((String) null);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "p?,vMcz[ZK)e", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1800L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, ":aQ", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("|.t0cnibDl&cf", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-3191L), timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, "");
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "org.springside.modules.utils.time.ClockUtil", object0, (Object) timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1406L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "H}pNDTAnn-z^", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=v2zCyB`'ZCsn", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.trace("=v2zCyB`'ZCsn", objectArray0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "=v2zCyB`'ZCsn", (Object) substituteLoggingEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "-itI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 3399L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("yogto_z?&o", (Object) "yogto_z?&o", (Object) "yogto_z?&o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("?}vl>-2*!JS", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, "?}vl>-2*!JS", (Object) priorityQueue0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("?}vl>-2*!JS");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "sdu+E]P^8-~29y", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 2770L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "qPFA", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 2321L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "", (Object) substituteLoggingEvent0, (Object) substituteLoggingEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "L", (Object) "L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "@aeg:GZBR Vp", object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 490L, timeUnit0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("o", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-59L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("org.springside.modules.utils.time.ClockUtil", (Object) "org.springside.modules.utils.time.ClockUtil", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("", (Object) "O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 923L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "dfqJ_8[L2z1quFvApvn", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", (Queue<SubstituteLoggingEvent>) null, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, (Queue<SubstituteLoggingEvent>) null);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-954L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "Ky'MA(JDm", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("org.springside.modules.utils.time.ClockUtil", (Throwable) null);
      substituteLogger0.error("");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "Iie)Mjz w,7;tqu", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 2105L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "org.springside.modules.utils.time.ClockUtil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("org.springside.modules.utils.time.ClockUtil", (Throwable) null);
      throttledSlf4jLogger0.debug((Marker) null, "Iie)Mjz w,7;tqu", (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "Iie)Mjz w,7;tqu");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 930L, timeUnit0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("@EPTaU6/0%yl", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", (Queue<SubstituteLoggingEvent>) null, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, (Queue<SubstituteLoggingEvent>) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1119L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("}Az<*EORH*Qc2yVIp");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("}Az<*EORH*Qc2yVIp", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1060L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("", (Object) "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = null;
      try {
        throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2087L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("pxMkcz[ZK)e", priorityQueue0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-2397L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.trace((Marker) null, "#Bz;>", (Throwable) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2001L, timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.info("", objectArray0);
      throttledSlf4jLogger0.trace((Marker) null, "", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(".:/cZY", priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.trace((Marker) null, "6r>w?~iMi-krbZ9", objectArray0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("k4$?k'tjz(y:Q$F)L", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2205L, timeUnit0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.info((Marker) null, "1.Tae'[~_[,", (Object) mockJapaneseDate0, (Object) timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.trace((Marker) null, "k4$?k'tjz(y:Q$F)L", objectArray0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-5L), timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.trace((Marker) null, "org.springside.modules.utils.time.ClockUtil", object0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2001L, timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.info("", objectArray0);
      throttledSlf4jLogger0.trace((Marker) null, "", (Object) "", (Object) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1888L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, (String) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      throttledSlf4jLogger0.trace((Marker) null, (String) null, (Object) mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2001L, timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.info("", objectArray0);
      throttledSlf4jLogger0.trace((Marker) null, "@_+2?Vdw<b;");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1291L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("@%$1?ZXpEmkFR+O4", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2465L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.info("", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.trace("5B6E/+6U1hra,1S^", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 232L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("n", (Throwable) null);
      throttledSlf4jLogger0.error((Marker) null, "", (Throwable) mockThrowable0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.trace("r:G<0?#6gk?~", objectArray0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("%(=1/", linkedList0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1479L), timeUnit0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.trace("", (Object) mockJapaneseDate0, (Object) substituteLogger0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-5L), timeUnit0);
      throttledSlf4jLogger0.trace((String) null, (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2465L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.info("", (Throwable) mockThrowable0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      throttledSlf4jLogger0.trace("", (Object) mockMinguoDate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-2388L), timeUnit0);
      throttledSlf4jLogger0.trace("D;/tS/SlWGf");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 232L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("n", (Throwable) null);
      throttledSlf4jLogger0.error((Marker) null, "", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.trace("");
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("qF4j]?zB2KQ&hBui:", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1240L, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Object[]) null);
      throttledSlf4jLogger0.error((Marker) null, "org.springside.modules.utils.time.ClockUtil", (Throwable) null);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("pxMkcz[ZK)e", priorityQueue0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-2397L), timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.error((Marker) null, "VB`%#kq:#dyZ9G/@=;", objectArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2001L, timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.info("", objectArray0);
      throttledSlf4jLogger0.error((Marker) null, ",3+", objectArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 5715L, timeUnit0);
      Object[] objectArray0 = new Object[6];
      throttledSlf4jLogger0.trace("org.springside.modules.utils.time.ClockUtil", objectArray0);
      throttledSlf4jLogger0.error((Marker) null, ";{Ra7", objectArray0[0], objectArray0[5]);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("qF4j]?zB2KQ&hBui:", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1240L, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Object[]) null);
      throttledSlf4jLogger0.error((Marker) null, (String) null, (Object) null);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2087L, timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, "JHL", (Object) nOPLogger0);
      throttledSlf4jLogger0.error((Marker) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      System.setCurrentTimeMillis(1923L);
      throttledSlf4jLogger0.error("", (Throwable) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-2388L), timeUnit0);
      throttledSlf4jLogger0.error("1'ZcvO", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 232L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("n", (Throwable) null);
      throttledSlf4jLogger0.error((Marker) null, "", (Throwable) mockThrowable0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.error("", objectArray0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 5715L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.warn((Marker) null, "", (Throwable) mockThrowable0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>(1553);
      SubstituteLogger substituteLogger0 = new SubstituteLogger(" f `$V#Z58Z", arrayDeque0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, arrayDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1553, timeUnit0);
      Object[] objectArray0 = new Object[2];
      throttledSlf4jLogger0.debug((Marker) null, " f `$V#Z58Z", objectArray0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Throwable) mockThrowable0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("k4$?k'tjz(y:Q$F)L", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2205L, timeUnit0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.info((Marker) null, "1.Tae'[~_[,", (Object) mockJapaneseDate0, (Object) timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.warn((Marker) null, "-Cx,+(", objectArray0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "h9Hp35`Y.&ymE/d3Yb", (Object) timeUnit0, (Object) timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("k4$?k'tjz(y:Q$F)L", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2205L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.info((Marker) null, "1.Tae'[~_[,", (Object) mockJapaneseDate0, (Object) timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, "-Cx,+(", (Object) substituteLoggingEvent0, (Object) "-Cx,+(");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("qF4j]?zB2KQ&hBui:", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1240L, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Object[]) null);
      throttledSlf4jLogger0.warn((Marker) null, "qF4j]?zB2KQ&hBui:", (Object) "J_c&:");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1888L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, (String) null);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("K]IvGtaq");
      throttledSlf4jLogger0.warn("", (Throwable) mockThrowable0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 17L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("K]IvGtaq");
      throttledSlf4jLogger0.debug((Marker) null, (String) null, (Object) timeUnit0);
      throttledSlf4jLogger0.warn("", (Throwable) mockThrowable0);
      assertEquals("K]IvGtaq", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>(1553);
      SubstituteLogger substituteLogger0 = new SubstituteLogger(" f `$V#Z58Z", arrayDeque0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, arrayDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1553, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object[] objectArray0 = new Object[2];
      throttledSlf4jLogger0.debug((Marker) null, " f `$V#Z58Z", objectArray0);
      throttledSlf4jLogger0.warn(" f `$V#Z58Z", objectArray0[1], (Object) substituteLoggingEvent0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("pxMkcz[ZK)e", priorityQueue0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-2397L), timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.warn("a}4^]mGdJu.`7J\"St", objectArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>(1553);
      SubstituteLogger substituteLogger0 = new SubstituteLogger(" f `$V#Z58Z", arrayDeque0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, arrayDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1553, timeUnit0);
      Object[] objectArray0 = new Object[2];
      throttledSlf4jLogger0.debug((Marker) null, " f `$V#Z58Z", objectArray0);
      throttledSlf4jLogger0.warn("", objectArray0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("Kx><SV|ok");
      throttledSlf4jLogger0.info((Marker) null, "Kx><SV|ok", (Throwable) mockThrowable0);
      assertEquals("Kx><SV|ok", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("k4$?k'tjz(y:Q$F)L", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2205L, timeUnit0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.info((Marker) null, "1.Tae'[~_[,", (Object) mockJapaneseDate0, (Object) timeUnit0);
      throttledSlf4jLogger0.info((Marker) null, "", (Throwable) null);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("p?,vMcz[ZK)e", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-2397L), timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.info((Marker) null, "p?,vMcz[ZK)e", objectArray0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 232L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("n", (Throwable) null);
      throttledSlf4jLogger0.error((Marker) null, "", (Throwable) mockThrowable0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.info((Marker) null, "", objectArray0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("qF4j]?zB2KQ&hBui:", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1240L, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Object[]) null);
      throttledSlf4jLogger0.info((Marker) null, "J_c&:", (Object) null, (Object) null);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=v2zCyB`'ZCsn", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.info((Marker) null, "=v2zCyB`'ZCsn", (Object) substituteLoggingEvent0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1682L), timeUnit0);
      throttledSlf4jLogger0.warn("!=", (Object) "!=", (Object) null);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      ClockUtil.useDummyClock(18L);
      throttledSlf4jLogger0.info((Marker) null, "i=+", (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-4272L), timeUnit0);
      throttledSlf4jLogger0.info((Marker) null, "uV]a!8-f#");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>(1553);
      SubstituteLogger substituteLogger0 = new SubstituteLogger(" f `$V#Z58Z", arrayDeque0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, arrayDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1553, timeUnit0);
      Object[] objectArray0 = new Object[2];
      throttledSlf4jLogger0.debug((Marker) null, " f `$V#Z58Z", objectArray0);
      throttledSlf4jLogger0.info((Marker) null, " f `$V#Z58Z");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1682L), timeUnit0);
      throttledSlf4jLogger0.warn("!=", (Object) "!=", (Object) null);
      ClockUtil.useDummyClock(18L);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.info("", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 232L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("n", (Throwable) null);
      throttledSlf4jLogger0.error((Marker) null, "", (Throwable) mockThrowable0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.info("", objectArray0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("%(=1/", linkedList0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1479L), timeUnit0);
      throttledSlf4jLogger0.error("g6r9", (Object) "%(=1/", (Object) timeUnit0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2465L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.info("", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.error("\"G*", (Object) timeUnit0, (Object) nOPLogger0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=8|ffv<D[Hv", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.error("#K;}1f@U?BwvPk", (Object) mockJapaneseDate0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      System.setCurrentTimeMillis(1923L);
      throttledSlf4jLogger0.error("zwRJ#F9ngy_BJW?[M!q", (Object) timeUnit0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2001L, timeUnit0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.info("", objectArray0);
      throttledSlf4jLogger0.error("");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 2679L, timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn("org.springside.modules.utils.time.ClockUtil", object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      throttledSlf4jLogger0.trace("vb7`(", (Object) null, (Object) mockMinguoDate0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2087L, timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, "JHL", (Object) nOPLogger0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn("", object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("k4$?k'tjz(y:Q$F)L", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2205L, timeUnit0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.info((Marker) null, "1.Tae'[~_[,", (Object) mockJapaneseDate0, (Object) timeUnit0);
      throttledSlf4jLogger0.warn("9$tHK/ZDUP(");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-5L), timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.info("", (Object) substituteLogger0, object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 232L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("n", (Throwable) null);
      throttledSlf4jLogger0.error((Marker) null, "", (Throwable) mockThrowable0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      throttledSlf4jLogger0.info("", (Object) "", (Object) mockHijrahDate0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=8|ffv<D[Hv", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.info("=8|ffv<D[Hv", (Object) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1682L), timeUnit0);
      throttledSlf4jLogger0.warn("!=", (Object) "!=", (Object) null);
      ClockUtil.useDummyClock(18L);
      throttledSlf4jLogger0.info("i=+", (Object) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("%(=1/", linkedList0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1479L), timeUnit0);
      throttledSlf4jLogger0.info("%(=1/");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("qF4j]?zB2KQ&hBui:", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1240L, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Object[]) null);
      throttledSlf4jLogger0.info(")Wqk[yY");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("org.springside.modules.utils.time.ClockUtil", (Throwable) null);
      throttledSlf4jLogger0.debug((Marker) null, "Iie)Mjz w,7;tqu", (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("", (Throwable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1888L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, (String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.debug((Marker) null, (String) null, (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 923L, timeUnit0);
      throttledSlf4jLogger0.error((String) null);
      Object[] objectArray0 = new Object[2];
      throttledSlf4jLogger0.debug((Marker) null, (String) null, objectArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2087L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.debug((Marker) null, "org.springside.modules.utils.time.ClockUtil", (Object) null, (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2087L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.error((Marker) null, "JHL", (Object) nOPLogger0);
      throttledSlf4jLogger0.debug((Marker) null, "org.springside.modules.utils.time.ClockUtil", (Object) null, (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, (String) null, (Object) timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("k4$?k'tjz(y:Q$F)L", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2205L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      throttledSlf4jLogger0.info((Marker) null, "1.Tae'[~_[,", (Object) mockJapaneseDate0, (Object) timeUnit0);
      throttledSlf4jLogger0.debug((Marker) null, "", (Object) substituteLoggingEvent0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-2388L), timeUnit0);
      throttledSlf4jLogger0.debug((Marker) null, "2RCzZ<5i])l+5,^vR6G");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.debug("", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1392409281320L, timeUnit0);
      throttledSlf4jLogger0.debug("", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("@EPTaU6/0%yl", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 930L, timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.debug("@EPTaU6/0%yl", objectArray0);
      throttledSlf4jLogger0.debug("@EPTaU6/0%yl", objectArray0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1254L), timeUnit0);
      throttledSlf4jLogger0.debug("&;v&3?", (Object) timeUnit0, (Object) nOPLogger0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      System.setCurrentTimeMillis((-3458L));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-587L), timeUnit0);
      throttledSlf4jLogger0.debug("", (Object) null, (Object) "C");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 5715L, timeUnit0);
      throttledSlf4jLogger0.debug(";{Ra7", (Object) substituteLogger0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.time.ClockUtil", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 5715L, timeUnit0);
      Object[] objectArray0 = new Object[6];
      throttledSlf4jLogger0.trace("org.springside.modules.utils.time.ClockUtil", objectArray0);
      throttledSlf4jLogger0.debug(";{Ra7", objectArray0[0]);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-4272L), timeUnit0);
      throttledSlf4jLogger0.debug("");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1888L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, (String) null);
      throttledSlf4jLogger0.debug("");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1888L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, (String) null);
      throttledSlf4jLogger0.debug((Marker) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("k4$?k'tjz(y:Q$F)L", arrayDeque0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2205L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-2388L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isInfoEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isErrorEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("@EPTaU6/0%yl", linkedList0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 930L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1888L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 232L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-5L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 2088L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isTraceEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 236L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isWarnEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }
}
