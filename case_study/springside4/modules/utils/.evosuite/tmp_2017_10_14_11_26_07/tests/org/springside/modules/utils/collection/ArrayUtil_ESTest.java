/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:42:16 GMT 2017
 */

package org.springside.modules.utils.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.ArrayUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayUtil_ESTest extends ArrayUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[6];
      List<Long> list0 = ArrayUtil.longAsList(longArray0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MockRandom mockRandom0 = new MockRandom(0L);
      String[] stringArray1 = ArrayUtil.shuffle(stringArray0, (Random) mockRandom0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtil.shuffle(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = ArrayUtil.newArray(class0, 0);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(1745L);
      Long[] longArray0 = new Long[8];
      Long[] longArray1 = ArrayUtil.concat(long0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.shuffle((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ArrayUtil.newArray(class0, (-1537));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        ArrayUtil.asList(integer0, (Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = ArrayUtil.concat(stringArray0, "YA(>=aDFQ7A#Y1t&uX");
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.shuffle((Double[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long(0L);
      Long[] longArray0 = new Long[4];
      List<Long> list0 = ArrayUtil.asList(long0, longArray0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayUtil arrayUtil0 = new ArrayUtil();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      List<Double> list0 = ArrayUtil.doubleAsList(doubleArray0);
      Class<Double> class0 = Double.class;
      Double[] doubleArray1 = ArrayUtil.toArray(list0, class0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      List<Integer> list0 = ArrayUtil.intAsList(intArray0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        ArrayUtil.concat(long0, (Long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.longAsList((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = ArrayUtil.shuffle(stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = ArrayUtil.newArray(class0, 2200);
      List<Object> list0 = ArrayUtil.asList((Object[]) integerArray0);
      assertEquals(2200, list0.size());
  }
}
