/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:46:07 GMT 2017
 */

package org.springside.modules.utils.number;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.number.MathUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtil_ESTest extends MathUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      long long0 = MathUtil.sqrt((long) 1751, roundingMode0);
      assertEquals(42L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = MathUtil.sqrt(206, roundingMode0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = MathUtil.previousPowerOfTwo(1876L);
      assertEquals(1024L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = MathUtil.pow((long) 1432, 1436);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = MathUtil.pow(1386L, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = MathUtil.pow((long) 206, 20);
      assertEquals((-806920856036966400L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = MathUtil.pow(4096, 4096);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = MathUtil.pow(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = MathUtil.modByPowerOfTwo(0, (-69));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = MathUtil.modByPowerOfTwo((-492), (-492));
      assertEquals((-496), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = MathUtil.mod((-1576L), 2582L);
      assertEquals(1006L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = MathUtil.mod(316227766016L, 206);
      assertEquals(164L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = MathUtil.mod(144, 6);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo((-907L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo(256);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = MathUtil.gcd(1386L, 316L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = MathUtil.gcd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      long long0 = MathUtil.divide(0L, (-3270L), roundingMode0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      long long0 = MathUtil.divide((long) 1, (long) 1, roundingMode0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      long long0 = MathUtil.divide(316227766L, (-1251L), roundingMode0);
      assertEquals((-252780L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = MathUtil.divide(0, 2994, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = MathUtil.divide(65536, (-1086), roundingMode0);
      assertEquals((-60), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      // Undeclared exception!
      try { 
        MathUtil.sqrt((-3984L), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-3984) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        MathUtil.sqrt((long) 2048, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.sqrt(588, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      // Undeclared exception!
      try { 
        MathUtil.sqrt((-2206), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-2206) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        MathUtil.sqrt(139, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.previousPowerOfTwo((-1528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1528) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.pow(1265, (-1598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1598) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.nextPowerOfTwo((-980L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-980) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.nextPowerOfTwo((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.mod((long) (-496), (-925L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus must be positive
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.mod(1L, (-2669));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus must be positive
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.mod((-2706), (-2706));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus -2706 must be > 0
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.gcd((-3099L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a (-3099) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.gcd((-3373), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a (-3373) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      // Undeclared exception!
      try { 
        MathUtil.divide(1L, 0L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        MathUtil.divide((long) 324, (long) 256, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.divide(2326, 2326, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      // Undeclared exception!
      try { 
        MathUtil.divide(1087, 0, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo(329);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.previousPowerOfTwo(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = MathUtil.previousPowerOfTwo(588);
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = MathUtil.nextPowerOfTwo(50);
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = MathUtil.gcd(0, 512);
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = MathUtil.nextPowerOfTwo(316L);
      assertEquals(512L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = MathUtil.modByPowerOfTwo(1308, (-3228));
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = MathUtil.sqrt(0, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = MathUtil.gcd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = MathUtil.mod(0L, 512);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = MathUtil.mod(206, 560);
      assertEquals(206, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = MathUtil.mod((long) 1366, (long) 1366);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = MathUtil.divide(65536, 2114, roundingMode0);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = MathUtil.pow(31, 31);
      assertEquals((-2010103841), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.pow((long) 0, (-1086));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1086) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.divide((-1377L), (-1377L), (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo((long) 64);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      long long0 = MathUtil.sqrt(0L, roundingMode0);
      assertEquals(0L, long0);
  }
}
