/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:08:20 GMT 2017
 */

package org.springside.modules.utils.number;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.number.NumberUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumberUtil_ESTest extends NumberUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toInt32((-9223372036854775807L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Int -9223372036854775807 out of range
         //
         verifyException("org.springside.modules.utils.number.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long(851L);
      String string0 = NumberUtil.toString(long0);
      assertEquals("851", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long long1 = NumberUtil.hexToLongObject("0", long0);
      Long long2 = NumberUtil.toLongObject("NMXo`fJJMH", long1);
      assertEquals(0L, (long)long2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = Long.decode("65");
      Long long1 = NumberUtil.toLongObject("EX`_q", long0);
      assertEquals(65L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject("851");
      assertEquals(851L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject("-1809");
      assertEquals((-1809L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes(0.0);
      long long0 = NumberUtil.toLong(byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes(4028.500423509);
      long long0 = NumberUtil.toLong(byteArray0);
      assertEquals(4661077181190019740L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes((-983.130732));
      long long0 = NumberUtil.toLong(byteArray0);
      assertEquals((-4571513111664130989L), long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtil.toLong("V", 4661077181190019740L);
      assertEquals(4661077181190019740L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = NumberUtil.toLong("v9!4L=ge", (-1071L));
      assertEquals((-1071L), long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = NumberUtil.toLong("1266");
      assertEquals(1266L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = NumberUtil.toLong("-253");
      assertEquals((-253L), long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject("0x_Z7a:aiOL].d2Q", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = new Integer((-1175));
      Integer integer1 = NumberUtil.toIntObject("Zcc}eN9", integer0);
      assertEquals((-1175), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(2435);
      Integer integer1 = NumberUtil.toIntObject("", integer0);
      assertEquals(2435, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject("-253");
      assertEquals((-253), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject("2");
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject("2464");
      assertEquals(2464, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = NumberUtil.toInt32(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtil.toInt32(3135L);
      assertEquals(3135, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = NumberUtil.toInt(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      int int0 = NumberUtil.toInt(byteArray0);
      assertEquals(1392508928, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = NumberUtil.toInt("dh]9", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtil.toInt("", (-773));
      assertEquals((-773), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = NumberUtil.toInt("mzmZ!5Dn}JI)^!");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = NumberUtil.toInt("2");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject("0x", (Double) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double double1 = NumberUtil.toDoubleObject("0xz[\"l{;pKLb4oHSl$N", double0);
      assertEquals(Double.NaN, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double double0 = new Double(1244.1829273291785);
      Double double1 = NumberUtil.toDoubleObject("dh]9", double0);
      assertEquals(1244.1829273291785, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double(0);
      Double double1 = NumberUtil.toDoubleObject("", double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject("0.0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject("4218.59");
      assertEquals(4218.59, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject("-266.226324052");
      assertEquals((-266.226324052), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes((long) 0);
      double double0 = NumberUtil.toDouble(byteArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      double double0 = NumberUtil.toDouble(byteArray0);
      assertEquals(3.4730605460704336E-164, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = NumberUtil.toDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = NumberUtil.toDouble((String) null, (-2650.262547));
      assertEquals((-2650.262547), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = NumberUtil.toDouble("$~");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = NumberUtil.toDouble("-30561911");
      assertEquals((-3.0561911E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtil.isNumber("0.00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject("Windows 98", (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = NumberUtil.hexToLongObject("", long0);
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long((-781L));
      Long long1 = NumberUtil.hexToLongObject("wt]~", long0);
      assertEquals((-781L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject(";4p]?^\fC");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject("3520");
      assertEquals(3520L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject("", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((-3114));
      Integer integer1 = NumberUtil.hexToIntObject("", integer0);
      assertEquals((-3114), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = NumberUtil.hexToIntObject("100.00", integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject("101");
      assertEquals(101, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject("-3319");
      assertEquals((-3319), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject("-1089");
      assertEquals((-1089), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toString((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.number.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toString((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.number.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toLong((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toInt((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Ints", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        NumberUtil.toInt(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array too small: 1 < 4
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toDouble((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtil.toDouble(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array too small: 0 < 8
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.isHexNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long((-1765L));
      Long long1 = NumberUtil.hexToLongObject("xv", long0);
      assertEquals((-1765L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(2435);
      Integer integer1 = NumberUtil.hexToIntObject("", integer0);
      assertEquals(2435, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = NumberUtil.hexToIntObject("2", integer0);
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = NumberUtil.toDoubleObject(" out of range", double0);
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long long1 = NumberUtil.toLongObject("lnfs}#t9\"IXp}WS", long0);
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject("", (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = NumberUtil.toIntObject(";4p]?^\fC", integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        NumberUtil.toLong(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array too small: 7 < 8
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = NumberUtil.toInt32((-2448L));
      assertEquals((-2448), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toInt32(4611686018427387904L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Int 4611686018427387904 out of range
         //
         verifyException("org.springside.modules.utils.number.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = new Long(851L);
      Long long1 = NumberUtil.hexToLongObject("", long0);
      assertEquals(851L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = new Double((-2448));
      Double double1 = NumberUtil.toDoubleObject("", double0);
      assertEquals((-2448.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject("Minimum abbreviation width with offset is 7");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber("#-253");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber("0X-3910.6201974657");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber("0xnN>G+u@/%f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber("-253");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer((-253));
      String string0 = NumberUtil.toString(integer0);
      assertEquals("-253", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NumberUtil numberUtil0 = new NumberUtil();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = NumberUtil.to2DigitString((-2448));
      assertEquals("-2448.00", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject("-");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = new Double(1570.5317735479);
      String string0 = NumberUtil.toString(double0);
      assertEquals("1570.5317735479", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject("-253");
      assertEquals((-253L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtil.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = NumberUtil.toInt("UHCV6", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes((-58.061593486));
      double double0 = NumberUtil.toDouble(byteArray0);
      assertEquals((-58.061593486), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toString((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.number.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = NumberUtil.toLong("0.0", (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = NumberUtil.toDouble("4560");
      assertEquals(4560.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes((-58.061593486));
      int int0 = NumberUtil.toInt(byteArray0);
      assertEquals((-1068693534), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = NumberUtil.toString(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = NumberUtil.toDouble("Int ", 100.0);
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = NumberUtil.toString(0.0);
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes((-253));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = NumberUtil.toString(4560);
      assertEquals("4560", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = NumberUtil.toLong("o/KU`v$@SBi.mJ");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = NumberUtil.toInt("-83617762");
      assertEquals((-83617762), int0);
  }
}
