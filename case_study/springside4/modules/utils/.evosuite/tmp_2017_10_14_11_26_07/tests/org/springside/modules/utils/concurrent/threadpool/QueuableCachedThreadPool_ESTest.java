/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:39:16 GMT 2017
 */

package org.springside.modules.utils.concurrent.threadpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.springside.modules.utils.concurrent.threadpool.QueuableCachedThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueuableCachedThreadPool_ESTest extends QueuableCachedThreadPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1282);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1282, 1347, 1347, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      assertEquals(0, queuableCachedThreadPool0.getSubmittedCount());
      
      ThreadGroup threadGroup0 = new ThreadGroup("_Ca$7vC%=-.d1");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      boolean boolean0 = queuableCachedThreadPool_ControllableQueue0.offer((Runnable) mockThread0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(382);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(382, 382, 382, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      MockThread mockThread0 = new MockThread();
      queuableCachedThreadPool0.execute((Runnable) mockThread0, (long) 382, timeUnit0);
      int int0 = queuableCachedThreadPool0.getSubmittedCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(178);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = null;
      try {
        queuableCachedThreadPool0 = new QueuableCachedThreadPool(178, 178, 178, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(512);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = null;
      try {
        queuableCachedThreadPool0 = new QueuableCachedThreadPool(0, 0, 2880L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(382);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(382, 382, 382, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      int int0 = queuableCachedThreadPool0.getSubmittedCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      MockThread mockThread0 = new MockThread("oZ#");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(775, 775, 775, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      boolean boolean0 = queuableCachedThreadPool_ControllableQueue0.force((Runnable) mockThread0, (long) 775, timeUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(382);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(382, 382, 382, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      MockThread mockThread0 = new MockThread();
      boolean boolean0 = queuableCachedThreadPool_ControllableQueue0.force((Runnable) mockThread0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1953);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Thread thread0 = MockThread.currentThread();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(thread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(0, 1953, 1953, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      // Undeclared exception!
      try { 
        queuableCachedThreadPool0.execute((Runnable) thread0, (long) 0, timeUnit0);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(172);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(0, 172, 0L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable0 = new MockThrowable("\"g:`{dDXxi`F5up");
      queuableCachedThreadPool0.afterExecute(runnable0, mockThrowable0);
      assertEquals((-1), queuableCachedThreadPool0.getSubmittedCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      MockThread mockThread0 = new MockThread("oZ#");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(mockThread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(775, 775, 775, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      queuableCachedThreadPool0.execute((Runnable) mockThread0);
      assertEquals(1, queuableCachedThreadPool0.getSubmittedCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1159);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(829, 829, 1159, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, rejectedExecutionHandler0);
      queuableCachedThreadPool_ControllableQueue0.setParent(queuableCachedThreadPool0);
      assertEquals(0, queuableCachedThreadPool0.getSubmittedCount());
  }
}
