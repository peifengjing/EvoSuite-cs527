/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:54:04 GMT 2017
 */

package org.springside.modules.utils.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Stack;
import java.util.TreeSet;
import java.util.concurrent.CopyOnWriteArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.ListUtil;
import org.springside.modules.utils.collection.MapUtilTest;
import org.springside.modules.utils.collection.type.SortedArrayList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ListUtil_ESTest extends ListUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = ListUtil.singletonList(object0);
      ArrayList<Object> arrayList0 = ListUtil.newArrayList((Iterable<Object>) list0);
      arrayList0.add(object0);
      Object object1 = ListUtil.getLast((List<Object>) arrayList0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<Object> sortedArrayList0 = ListUtil.createSortedArrayList((Comparator<? super Object>) comparator0);
      List<Object> list0 = ListUtil.synchronizedList((List<Object>) sortedArrayList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayList<Object> arrayList0 = ListUtil.newArrayList(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListUtil.sortReverse((List<Object>) arrayList0, (Comparator<? super Object>) comparator0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = ListUtil.newArrayList();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ListUtil.sortReverse(list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(0);
      LinkedList<String> linkedList0 = ListUtil.newLinkedList((Iterable<? extends String>) arrayDeque0);
      MockRandom mockRandom0 = new MockRandom();
      ListUtil.shuffle((List<?>) linkedList0, (Random) mockRandom0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      CopyOnWriteArrayList<Integer> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(integerArray0);
      List<Integer> list0 = ListUtil.union((List<? extends Integer>) copyOnWriteArrayList0, (List<? extends Integer>) copyOnWriteArrayList0);
      assertEquals(9, copyOnWriteArrayList0.size());
      assertEquals(18, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<String> list0 = ListUtil.singletonList("1");
      LinkedList<String> linkedList0 = ListUtil.newLinkedList((Iterable<? extends String>) list0);
      List<String> list1 = ListUtil.reverse((List<String>) linkedList0);
      List<String> list2 = ListUtil.reverse(list1);
      assertTrue(list2.equals((Object)list1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapUtilTest.EnumA[] mapUtilTest_EnumAArray0 = new MapUtilTest.EnumA[0];
      CopyOnWriteArrayList<Object> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList((Object[]) mapUtilTest_EnumAArray0);
      assertEquals(0, copyOnWriteArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapUtilTest.EnumA[] mapUtilTest_EnumAArray0 = new MapUtilTest.EnumA[0];
      ArrayList<MapUtilTest.EnumA> arrayList0 = ListUtil.newArrayList(mapUtilTest_EnumAArray0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<MapUtilTest.EnumA> arrayList0 = new ArrayList<MapUtilTest.EnumA>();
      TreeSet<MapUtilTest.EnumA> treeSet0 = new TreeSet<MapUtilTest.EnumA>(arrayList0);
      ArrayList<MapUtilTest.EnumA> arrayList1 = ListUtil.newArrayList((Iterable<MapUtilTest.EnumA>) treeSet0);
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Object> arrayList0 = ListUtil.newArrayList();
      arrayList0.add((Object) null);
      List<Object> list0 = ListUtil.emptyListIfNull((List<Object>) arrayList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Object> list0 = ListUtil.emptyList();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.C;
      List<MapUtilTest.EnumA> list1 = ListUtil.singletonList(mapUtilTest_EnumA0);
      List<Object> list2 = ListUtil.disjoint((List<?>) list0, (List<?>) list1);
      assertEquals(1, list2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<MapUtilTest.EnumA> arrayList0 = new ArrayList<MapUtilTest.EnumA>();
      List<MapUtilTest.EnumA> list0 = ListUtil.difference((List<? extends MapUtilTest.EnumA>) arrayList0, (List<? extends MapUtilTest.EnumA>) arrayList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SortedArrayList<MapUtilTest.EnumA> sortedArrayList0 = ListUtil.createSortedArrayList();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.B;
      sortedArrayList0.add(mapUtilTest_EnumA0);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      int int0 = ListUtil.binarySearch((List<?>) sortedArrayList0, object0, (Comparator<? super Object>) comparator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = ListUtil.newArrayList();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = ListUtil.binarySearch((List<?>) arrayList0, (Object) "v2&", (Comparator<? super Object>) comparator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "XP_:";
      CopyOnWriteArrayList<String> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(stringArray0);
      int int0 = ListUtil.binarySearch((List<? extends Comparable<? super String>>) copyOnWriteArrayList0, "XP_:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "XP_:";
      CopyOnWriteArrayList<String> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(stringArray0);
      int int0 = ListUtil.binarySearch((List<? extends Comparable<? super String>>) copyOnWriteArrayList0, "XP_:");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<MapUtilTest.EnumA> arrayList0 = ListUtil.newArrayList();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.C;
      int int0 = ListUtil.binarySearch((List<? extends Comparable<? super MapUtilTest.EnumA>>) arrayList0, mapUtilTest_EnumA0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.unmodifiableList((List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.sortReverse((List<MapUtilTest.EnumA>) null, (Comparator<? super MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(hashSet0);
      List<Integer> list0 = ListUtil.unmodifiableList((List<? extends Integer>) linkedList0);
      // Undeclared exception!
      try { 
        ListUtil.sort(list0, (Comparator<? super Integer>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtil.sort((List<Object>) null, (Comparator<? super Object>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapUtilTest.EnumA[] mapUtilTest_EnumAArray0 = new MapUtilTest.EnumA[5];
      CopyOnWriteArrayList<MapUtilTest.EnumA> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(mapUtilTest_EnumAArray0);
      // Undeclared exception!
      try { 
        ListUtil.sort((List<MapUtilTest.EnumA>) copyOnWriteArrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.reverse((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newLinkedList((Iterable<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newCopyOnWriteArrayList((Locale.LanguageRange[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CopyOnWriteArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newArrayListWithCapacity((-1416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1416
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newArrayList((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newArrayList((Iterable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.intersection((List<? extends MapUtilTest.EnumA>) null, (List<? extends MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.ListUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.disjoint((List<? extends Locale.LanguageRange>) null, (List<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.ListUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<MapUtilTest.EnumA> list0 = ListUtil.emptyList();
      // Undeclared exception!
      try { 
        ListUtil.difference((List<?>) null, (List<?>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.A;
      Comparator<MapUtilTest.EnumA> comparator0 = (Comparator<MapUtilTest.EnumA>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtil.binarySearch((List<? extends MapUtilTest.EnumA>) null, mapUtilTest_EnumA0, (Comparator<? super MapUtilTest.EnumA>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      List<String> list0 = ListUtil.singletonList(",e~?PrZd<$/S");
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ListUtil.binarySearch((List<?>) list0, (Object) integer0, (Comparator<? super Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = ListUtil.singletonList(object0);
      boolean boolean0 = ListUtil.isEmpty(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CopyOnWriteArrayList<Integer> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList();
      boolean boolean0 = ListUtil.isEmpty(copyOnWriteArrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<String> list0 = ListUtil.emptyList();
      List<String> list1 = ListUtil.union((List<? extends String>) list0, (List<? extends String>) list0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = ListUtil.singletonList(object0);
      ArrayList<Object> arrayList0 = ListUtil.newArrayList((Iterable<Object>) list0);
      String[] stringArray0 = new String[2];
      CopyOnWriteArrayList<String> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(stringArray0);
      List<Object> list1 = ListUtil.difference((List<?>) copyOnWriteArrayList0, (List<?>) arrayList0);
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = ListUtil.singletonList(object0);
      ArrayList<Object> arrayList0 = ListUtil.newArrayList((Iterable<Object>) list0);
      arrayList0.add(object0);
      List<Object> list1 = ListUtil.intersection((List<?>) arrayList0, (List<?>) list0);
      assertEquals(2, arrayList0.size());
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      List<Integer> list0 = ListUtil.emptyListIfNull((List<Integer>) null);
      // Undeclared exception!
      try { 
        ListUtil.union((List<? extends Integer>) list0, (List<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.ListUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Object> arrayList0 = ListUtil.newArrayList();
      List<Object> list0 = ListUtil.emptyListIfNull((List<Object>) arrayList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = ListUtil.getFirst((List<Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = ListUtil.singletonList(object0);
      LinkedList<Object> linkedList0 = ListUtil.newLinkedList((Iterable<?>) list0);
      ArrayList<Object> arrayList0 = ListUtil.newArrayList((Iterable<Object>) linkedList0);
      Object object1 = ListUtil.getFirst((List<Object>) arrayList0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      boolean boolean0 = ListUtil.isNotEmpty(stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = ListUtil.singletonList(object0);
      ArrayList<Object> arrayList0 = ListUtil.newArrayList((Iterable<Object>) list0);
      boolean boolean0 = ListUtil.isNotEmpty(arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = ListUtil.isNotEmpty((List<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      List<MapUtilTest.EnumA> list0 = ListUtil.emptyList();
      ListUtil.getLast(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = ListUtil.isEmpty((List<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ArrayList<Object> arrayList0 = ListUtil.newArrayList(objectArray0);
      ListUtil.shuffle((List<?>) arrayList0);
      assertEquals(4, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      List<String> list0 = ListUtil.emptyList();
      List<Object> list1 = ListUtil.unmodifiableList((List<?>) list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtil.sortReverse(list1, (Comparator<? super Object>) comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Integer> linkedList0 = ListUtil.newLinkedList();
      List<Integer> list0 = ListUtil.intersection((List<? extends Integer>) linkedList0, (List<? extends Integer>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ArrayList<Object> arrayList0 = ListUtil.newArrayList(objectArray0);
      Integer integer0 = new Integer(1829);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      int int0 = ListUtil.binarySearch((List<?>) arrayList0, (Object) integer0, (Comparator<? super Object>) comparator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CopyOnWriteArrayList<Integer> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList();
      ListUtil.sort((List<Integer>) copyOnWriteArrayList0);
      assertEquals(0, copyOnWriteArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        ListUtil.shuffle((List<?>) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(hashSet0);
      ListUtil.sort((List<Integer>) linkedList0, (Comparator<? super Integer>) null);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ListUtil listUtil0 = new ListUtil();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SortedArrayList<MapUtilTest.EnumA> sortedArrayList0 = ListUtil.createSortedArrayList();
      List<MapUtilTest.EnumA> list0 = ListUtil.unmodifiableList((List<? extends MapUtilTest.EnumA>) sortedArrayList0);
      // Undeclared exception!
      try { 
        ListUtil.sort(list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<Object> sortedArrayList0 = ListUtil.createSortedArrayList((Comparator<? super Object>) comparator0);
      List<Object> list0 = ListUtil.reverse((List<Object>) sortedArrayList0);
      List<Object> list1 = ListUtil.reverse(list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayList<String> arrayList0 = ListUtil.newArrayListWithCapacity(0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CopyOnWriteArrayList<String> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(stringArray0);
      // Undeclared exception!
      try { 
        ListUtil.sortReverse((List<String>) copyOnWriteArrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$ReverseComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.synchronizedList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      List<String> list0 = ListUtil.emptyList();
      List<String> list1 = ListUtil.disjoint((List<? extends String>) list0, (List<? extends String>) list0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CopyOnWriteArrayList<String> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(stringArray0);
      // Undeclared exception!
      try { 
        ListUtil.binarySearch((List<? extends Comparable<? super String>>) copyOnWriteArrayList0, "XP_:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
