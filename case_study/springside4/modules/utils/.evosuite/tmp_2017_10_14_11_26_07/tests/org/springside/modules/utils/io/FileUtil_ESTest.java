/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:35:46 GMT 2017
 */

package org.springside.modules.utils.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springside.modules.utils.io.FileUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileUtil_ESTest extends FileUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempDir();
      FileUtil.moveDir(file0, file1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" to a subdirectory of itself: ");
      mockFile0.createNewFile();
      FileUtil.copyFile(mockFile0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = FileUtil.createTempFile("R3Jzg=", "rl-j_=hM&N");
      File file1 = FileUtil.createTempFile();
      FileUtil.moveFile(file0, file1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = FileUtil.createTempFile("B}i0CA{+0[ErBftv\"", "B}i0CA{+0[ErBftv\"");
      FileUtil.deleteFile(file0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" to a subdirectory of itself: ");
      mockFile0.createNewFile();
      FileUtil.copy(mockFile0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/Kj<Qu%s(ti");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("Kj<Qu%s(ti", "");
      FileUtil.toLines(mockFile0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtil.createTempFile("R8mx`R}5", "cXqI-%V|b>p");
      FileUtil.append("R8mx`R}5", file0);
      FileUtil.toByteArray(file0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileUtil.asBufferedWriter("org.springside.modules.utils.base.Platforms");
      FileUtil.isFileExists("org.springside.modules.utils.base.Platforms");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileUtil.getFileName("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/m#O_^/");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileUtil.getFileExtension("Y1,%(:tsACpBB1");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("q\",n|lo", "Y1,%(:tsACpBB1");
      FileUtil.getFileExtension((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileUtil.createTempFile(":nJ`ngIKl3'`m{\"F\"", "sT~vCo1%s5vs#sEI");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      System.setCurrentTimeMillis((-1959L));
      FileUtil.createTempFile("user.region", "NF8L_;-mDC");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileUtil.createTempFile(".tmp", ".tmp");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-1.tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "%r{jlQZeOiI^nNe");
      FileUtil.createTempFile();
      File file0 = FileUtil.createTempFile();
      FileUtil.toString(file0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileUtil.createTempFile();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      System.setCurrentTimeMillis((-1959L));
      FileUtil.createTempFile();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileUtil.createTempFile();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      System.setCurrentTimeMillis((-331L));
      FileUtil.createTempDir();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.mkdir();
      FileUtil.moveDir(file0, file0);
      FileUtil.createTempDir();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("q\",n|lo", "Y1,%(:tsACpBB1");
      FileUtil.asOututStream((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileUtil.asOututStream(" is not exist or not a file");
      FileUtil.asBufferedReader(" is not exist or not a file");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.write("maxWith cannot be negative", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.write("tmp", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      MockFile mockFile0 = new MockFile(file0, "NvwVFt(+M9.)^6");
      try { 
        FileUtil.write("NvwVFt(+M9.)^6", mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.touch("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.touch("VALUES");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtil.createTempFile("Windows Server 2008", "JAVA_1_6");
      MockFile mockFile0 = new MockFile(file0, "Zwi5+guHsy3AyI");
      try { 
        FileUtil.touch((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to update modification time of /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/Windows Server 20080JAVA_1_6/Zwi5+guHsy3AyI
         //
         verifyException("com.google.common.io.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.toString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = FileUtil.createTempFile();
      try { 
        FileUtil.toString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      try { 
        FileUtil.toString(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.toLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.toLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.toByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.toByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      MockFile mockFile0 = new MockFile(file0, "Windows 7");
      try { 
        FileUtil.toByteArray(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fo'%2p#s,K^CyyA%", "fo'%2p#s,K^CyyA%");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'p'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      File file1 = FileUtil.createTempFile(":nJ`ngIKl3'`m{\"F\"", "sT~vCo1%s5vs#sEI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.moveFile(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B[$Qs%7:LZ{", "B[$Qs%7:LZ{");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(mockFile0, mockFile0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '7'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%aSONy((", "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/m#O_^");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(mockFile0, mockFile0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%a'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(mockFile0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.makesureParentDirExists((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(".tmp", ".tmp");
      try { 
        FileUtil.makesureParentDirExists(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.makesureDirExists("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.makesureDirExists((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.moveDir(file0, file0);
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0 is not exist or not a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.createTempFile("0X", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.createTempFile("9gUv(/16Gc;VDM=F}&|", "1.1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.createTempFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertTrue(boolean0);
      
      // Undeclared exception!
      FileUtil.createTempDir();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Windows");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("Windows", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("Windows", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Windows", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("Windows", mockFile0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = mockFile0.setWritable(false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Windows", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("Windows", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(boolean1);
      
      try { 
        FileUtil.copyFile(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = FileUtil.createTempFile("CBQzzs447TFl%]", "CBQzzs447TFl%]");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/CBQzzs447TFl%]0CBQzzs447TFl%]", file0.toString());
      assertEquals("CBQzzs447TFl%]0CBQzzs447TFl%]", file0.getName());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ']'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = FileUtil.createTempFile("%gBo]rC0", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/%gBo]rC00p{InCombiningDiacriticalMarks}+", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("%gBo]rC00p{InCombiningDiacriticalMarks}+", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%g'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertEquals("1392409281320-0", file0.getName());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}%I\"VDc", "R8mx`R}5");
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/}%I\"VDc", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("R8mx`R}5", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/}%I\"VDc/R8mx`R}5", mockFile0.toString());
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtil.copy(mockFile0, mockFile0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'I'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.copy((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" to a subdirectory of itself: ");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(" to a subdirectory of itself: ", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(" to a subdirectory of itself: ", mockFile0.getName());
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(" to a subdirectory of itself: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(" to a subdirectory of itself: ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        FileUtil.copy(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asOututStream("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        FileUtil.asOututStream("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asOututStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedWriter("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4C}Kc=:B_s8,X--1#", "4C}Kc=:B_s8,X--1#");
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/4C}Kc=:B_s8,X--1#/4C}Kc=:B_s8,X--1#", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/4C}Kc=:B_s8,X--1#", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("4C}Kc=:B_s8,X--1#", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      FileUtil.append("4C}Kc=:B_s8,X--1#", mockFile0);
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/4C}Kc=:B_s8,X--1#/4C}Kc=:B_s8,X--1#", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(17L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/4C}Kc=:B_s8,X--1#", mockFile0.getParent());
      assertEquals("4C}Kc=:B_s8,X--1#", mockFile0.getName());
      
      try { 
        FileUtil.asBufferedWriter("4C}Kc=:B_s8,X--1#");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("tmp-0.tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtil.append((CharSequence) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("cXqI{-%V|b>p");
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("cXqI{-%V|b>p", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("cXqI{-%V|b>p", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      try { 
        FileUtil.append("R8mx`R}5", mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":9It4", "fA/bHR");
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("bHR", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/:9It4/fA/bHR", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/:9It4/fA", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      FileUtil.makesureDirExists((File) mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("bHR", mockFile0.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/:9It4/fA/bHR", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/:9It4/fA", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      try { 
        FileUtil.append(":9It4", mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6h7X$cU\"r");
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("J6h7X$cU\"r", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("J6h7X$cU\"r", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtil.isFileExists((File) mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("J6h7X$cU\"r", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("J6h7X$cU\"r", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("tmp-0.tmp", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtil.isFileExists(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("tmp-0.tmp", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtil.isFileExists(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp-0.tmp", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "Windows 7");
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp-0.tmp", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp/Windows 7", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals("Windows 7", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtil.isDirExists((File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp-0.tmp", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp/Windows 7", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals("Windows 7", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(boolean0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtil.isDirExists(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp-0.tmp", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtil.isDirExists(file0);
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp-0.tmp", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileUtil.isDirExists((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("1392409281320-0", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      FileUtil.deleteDir(file0);
      assertEquals(0L, file0.lastModified());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("1392409281320-0", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile("AR~Z~O)P04{nM", "AR~Z~O)P04{nM");
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("AR~Z~O)P04{nM", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/AR~Z~O)P04{nM", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM", mockFile0.getParent());
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("AR~Z~O)P04{nM", "/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0//private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("AR~Z~O)P04{nM", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/AR~Z~O)P04{nM", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM", mockFile0.getParent());
      assertEquals("-372-0", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/AR~Z~O)P04{nM/AR~Z~O)P04{nM0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/AR~Z~O)P04{nM/AR~Z~O)P04{nM0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0", file0.toString());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/AR~Z~O)P04{nM/AR~Z~O)P04{nM0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0 and destination /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/AR~Z~O)P04{nM/AR~Z~O)P04{nM0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0/private/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/-372-0 must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      FileUtil.copyDir(file0, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("tmp-0.tmp", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp and destination /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileUtil.isFileExists((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("1392409281320-0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      FileUtil.makesureDirExists(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("1392409281320-0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/Kj<Qu%s(ti");
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        FileUtil.makesureDirExists("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/Kj<Qu%s(ti");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // There is a file exists /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/Kj<Qu%s(ti
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      boolean boolean0 = file0.setWritable(false);
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("1392409281320-0", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(boolean0);
      
      try { 
        FileUtil.moveDir(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to delete original directory '/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0' after copy to '/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0'
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, "com.google.common.io.CharStreams$NullWriter");
      try { 
        FileUtil.moveDir(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0 to a subdirectory of itself: /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0/com.google.common.io.CharStreams$NullWriter
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtil.createTempFile("TPUF0 is exist but it is a file", "TPUF0 is exist but it is a file");
      file0.delete();
      File file1 = FileUtil.createTempDir();
      FileUtil.moveDir(file1, file0);
      assertFalse(file1.exists());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = FileUtil.createTempFile("TPUF0 is exist but it is a file", "TPUF0 is exist but it is a file");
      File file1 = FileUtil.createTempDir();
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/TPUF0 is exist but it is a file0TPUF0 is exist but it is a file is exist but it is a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp and destination /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempFile("vn,$\"<t:'V|lQ2k", "vn,$\"<t:'V|lQ2k");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0 is  exist but it is a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp is exist but it is a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile("?e:~DO_?cpYC_;bG1");
      FileUtil.copyDir(file0, mockFile0);
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.copy(file0, file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = FileUtil.createTempFile("R8mx`R}5", "cXqI{-%V|b>p");
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/R8mx`R}50cXqI{-%V|b>p and destination /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/R8mx`R}50cXqI{-%V|b>p must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        FileUtil.asInputStream("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/AR~Z~O)P04{nM/m#Ou_^");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      FileUtil.toString(file0);
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
      assertEquals("tmp-0.tmp", file0.getName());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileUtil.isDirExists("Y1,%(:tsACpBB1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtil.createTempFile("R8mx`R}5", "cXqI{-%V|b>p");
      FileUtil.toByteArray(file0);
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/R8mx`R}50cXqI{-%V|b>p", file0.toString());
      assertEquals("R8mx`R}50cXqI{-%V|b>p", file0.getName());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileUtil.makesureDirExists("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/Kj<Qu%s(ti");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = FileUtil.getFileName(".tmp");
      assertEquals(".tmp", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        FileUtil.asBufferedReader("user.region");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/1392409281320-0 is not exist or not a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      FileUtil.write("tmp", file0);
      assertEquals("tmp-0.tmp", file0.getName());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/tmp-0.tmp", file0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = FileUtil.createTempFile("R8mx`R}5", "cXqI{-%V|b>p");
      FileUtil.makesureParentDirExists(file0);
      assertEquals("R8mx`R}50cXqI{-%V|b>p", file0.getName());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/R8mx`R}50cXqI{-%V|b>p", file0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtil.createTempFile("R8mx`R}5", "cXqI{-%V|b>p");
      FileUtil.toLines(file0);
      assertEquals("R8mx`R}50cXqI{-%V|b>p", file0.getName());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/R8mx`R}50cXqI{-%V|b>p", file0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = FileUtil.createTempFile("CBQzzs447TFl%]", "CBQzzs447TFl%]");
      InputStream inputStream0 = FileUtil.asInputStream(file0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = FileUtil.createTempFile("Windows Server 2008", "JAVA_1_6");
      FileUtil.touch(file0);
      assertEquals("Windows Server 20080JAVA_1_6", file0.getName());
      assertEquals("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/Windows Server 20080JAVA_1_6", file0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = FileUtil.getFileExtension("user.region");
      assertEquals("region", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileUtil.asBufferedWriter("VALUES");
      InputStream inputStream0 = FileUtil.asInputStream("VALUES");
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileUtil.touch("VALUES");
      MockFile mockFile0 = new MockFile("VALUES");
      try { 
        FileUtil.makesureDirExists((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // There is a file exists VALUES
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileUtil.isFileExists("R8mx`R}5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      try { 
        FileUtil.asOututStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      String string0 = FileUtil.getFileExtension(file0);
      assertEquals("tmp", string0);
  }
}
