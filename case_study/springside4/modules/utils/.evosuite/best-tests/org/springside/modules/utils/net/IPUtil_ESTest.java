/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:18:47 GMT 2017
 */

package org.springside.modules.utils.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.net.IPUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IPUtil_ESTest extends IPUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String("com.google.common.base.CharMatcher$Invisible");
      assertNull(inet4Address0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = IPUtil.intToIpv4String((-50));
      assertEquals("255.255.255.206", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt((-1));
      int int0 = IPUtil.toInt(inet4Address0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = IPUtil.ipv4StringToInt("255.255.255.255");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String("224.0.0.0");
      assertNotNull(inet4Address0);
      assertEquals("224.0.0.0", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String("230.84.107.100");
      assertNotNull(inet4Address0);
      assertEquals("230.84.107.100", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String("0.0.0.0");
      assertNotNull(inet4Address0);
      assertTrue(inet4Address0.isAnyLocalAddress());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString("224.0.0.0");
      assertEquals("/224.0.0.0", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString("230.84.107.100");
      assertFalse(inetAddress0.isSiteLocalAddress());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString("127.0.0.1");
      assertFalse(inetAddress0.isMCGlobal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString("0.0.0.0");
      int int0 = IPUtil.toInt(inetAddress0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt((-536870912));
      assertEquals("/224.0.0.0", inet4Address0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt((-430675100));
      assertEquals("230.84.107.100", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt(Integer.MAX_VALUE);
      assertEquals("/127.255.255.255", inet4Address0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt(0);
      assertTrue(inet4Address0.isAnyLocalAddress());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.toString((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.toInt((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.fromIpString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.fromIpString("#&X<}F>qJV:.msWg|n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // '#&X<}F>qJV:.msWg|n' is not an IP string literal.
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.fromIpString("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String((String) null);
      assertNull(inet4Address0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = IPUtil.ipv4StringToInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = IPUtil.ipv4StringToInt("0.0.1.18");
      assertEquals(274, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String("127.0.0.1");
      assertNotNull(inet4Address0);
      assertEquals("/127.0.0.1", inet4Address0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IPUtil iPUtil0 = new IPUtil();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt(274);
      String string0 = IPUtil.toString((InetAddress) inet4Address0);
      assertEquals("0.0.1.18", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt(274);
      int int0 = IPUtil.toInt(inet4Address0);
      assertEquals(274, int0);
  }
}
