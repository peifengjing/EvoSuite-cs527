/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:57:31 GMT 2017
 */

package org.springside.modules.utils.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ConcurrentHashMultiset;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.MapDifference;
import com.google.common.collect.SortedSetMultimap;
import com.google.common.collect.TreeRangeMap;
import com.google.common.util.concurrent.AtomicLongMap;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ServiceLoader;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.apache.commons.lang3.mutable.MutableInt;
import org.apache.commons.lang3.mutable.MutableLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.MapUtil;
import org.springside.modules.utils.collection.MapUtilTest;
import org.springside.modules.utils.collection.type.primitive.IntObjectHashMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapUtil_ESTest extends MapUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeMap<MutableInt, String> treeMap0 = MapUtil.newSortedMap((Comparator<Object>) null);
      SortedMap<MutableInt, String> sortedMap0 = MapUtil.unmodifiableSortedMap((SortedMap<MutableInt, ? extends String>) treeMap0);
      MapDifference<MutableInt, Object> mapDifference0 = MapUtil.difference((Map<? extends MutableInt, ?>) sortedMap0, (Map<? extends MutableInt, ?>) treeMap0);
      assertTrue(mapDifference0.areEqual());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MutableLong mutableLong0 = new MutableLong((Number) (byte)120);
      ImmutableListMultimap<Integer, MutableLong> immutableListMultimap0 = ImmutableListMultimap.of(integer0, mutableLong0, integer0, mutableLong0, integer0, mutableLong0, integer0, mutableLong0);
      ImmutableList<MutableLong> immutableList0 = immutableListMultimap0.get(integer0);
      Vector<MutableInt> vector0 = new Vector<MutableInt>();
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<MutableLong>) immutableList0, (List<MutableInt>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 4 but values.size is 0
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        MapUtil.newHashMap(objectArray0, integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys.length is 7 but values.length is 2
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentMap<String, Integer> concurrentMap0 = MapUtil.newConcurrentHashMap();
      Integer integer0 = new Integer((-394));
      Integer integer1 = MapUtil.putIfAbsentWithFinalValue(concurrentMap0, "#\"", integer0);
      assertEquals((-394), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentHashMap<MapUtilTest.EnumA, Integer> concurrentHashMap0 = new ConcurrentHashMap<MapUtilTest.EnumA, Integer>();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.A;
      MutableInt mutableInt0 = new MutableInt((Number) (byte)118);
      Integer integer0 = mutableInt0.getValue();
      concurrentHashMap0.put(mapUtilTest_EnumA0, integer0);
      Integer integer1 = new Integer(1065);
      Integer integer2 = MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<MapUtilTest.EnumA, Integer>) concurrentHashMap0, mapUtilTest_EnumA0, integer1);
      assertEquals(118, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentMap<String, Object> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(1467, 1467);
      assertTrue(concurrentMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      HashMap<Object, Object> hashMap0 = MapUtil.newHashMap(objectArray0, objectArray0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<MapUtilTest.EnumA> class0 = MapUtilTest.EnumA.class;
      EnumMap<MapUtilTest.EnumA, MutableInt> enumMap0 = MapUtil.newEnumMap(class0);
      assertEquals(0, enumMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, MapUtilTest.EnumA> hashMap0 = new HashMap<String, MapUtilTest.EnumA>();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.A;
      hashMap0.put((String) null, mapUtilTest_EnumA0);
      Map<String, MapUtilTest.EnumA> map0 = MapUtil.emptyMapIfNull((Map<String, MapUtilTest.EnumA>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<MutableInt, MutableInt> hashMap0 = MapUtil.createMutableIntValueHashMap(123, (float) 123);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayListMultimap<Object, MapUtilTest.EnumA> arrayListMultimap0 = MapUtil.createListValueMap(1284, 5897);
      assertNotNull(arrayListMultimap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ConcurrentHashMultiset<Object> concurrentHashMultiset0 = MapUtil.createConcurrentMapCounter((Iterable<?>) serviceLoader0);
      assertNotNull(concurrentHashMultiset0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.unmodifiableSortedMap((SortedMap<String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.unmodifiableMap((Map<? extends MapUtilTest.EnumA, ? extends MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-223));
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.B;
      // Undeclared exception!
      try { 
        MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<MutableInt, MapUtilTest.EnumA>) null, mutableInt0, mapUtilTest_EnumA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      Integer integer0 = mutableInt0.toInteger();
      ConcurrentMap<String, Integer> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(0, 19);
      // Undeclared exception!
      try { 
        MapUtil.putIfAbsentWithFinalValue(concurrentMap0, (String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentSkipListMap<Object, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Integer>();
      Integer integer0 = Integer.getInteger("keys.length is ", (-1));
      MutableLong mutableLong0 = new MutableLong((-1L));
      concurrentSkipListMap0.put(mutableLong0, integer0);
      // Undeclared exception!
      try { 
        MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<Object, Integer>) concurrentSkipListMap0, (Object) concurrentSkipListMap0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ConcurrentSkipListMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.newHashMapWithCapacity((-1), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2147483648
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        MapUtil.newHashMap(integerArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<MapUtilTest.EnumA> arrayList0 = new ArrayList<MapUtilTest.EnumA>();
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<MapUtilTest.EnumA>) arrayList0, (List<MutableInt>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.difference((Map<? extends Integer, ?>) null, (Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createWeakValueConcurrentHashMap(1487, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      MapUtil.createWeakKeyConcurrentHashMap(0, 78721);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createWeakKeyConcurrentHashMap(0, (-2059));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createMutableLongValueHashMap(0, (float) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createIntObjectHashMap(947, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentSkipListMap<String, Integer> concurrentSkipListMap0 = MapUtil.newConcurrentSortedMap();
      // Undeclared exception!
      try { 
        MapUtil.createIfAbsent((ConcurrentMap<String, Integer>) concurrentSkipListMap0, "", (MapUtil.ValueCreator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Map<Object, MapUtilTest.EnumA> map0 = MapUtil.emptyMapIfNull((Map<Object, MapUtilTest.EnumA>) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = MapUtil.newHashMapWithCapacity(19, (float) 19);
      Map<Integer, Integer> map0 = MapUtil.emptyMapIfNull((Map<Integer, Integer>) hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<Object>) stack0, (List<String>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 0 but values.size is 1
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<String> vector1 = new Vector<String>(19, 441);
      HashMap<Object, String> hashMap0 = MapUtil.newHashMap((List<Object>) vector0, (List<String>) vector1);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableLong[] mutableLongArray0 = new MutableLong[4];
      MapUtilTest.EnumA[] mapUtilTest_EnumAArray0 = new MapUtilTest.EnumA[7];
      // Undeclared exception!
      try { 
        MapUtil.newHashMap(mutableLongArray0, mapUtilTest_EnumAArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys.length is 4 but values.length is 7
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      HashMap<Object, MutableInt> hashMap0 = MapUtil.newHashMap(objectArray0, mutableIntArray0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConcurrentMap<String, MutableInt> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(3, 4);
      MapUtil.ValueCreator<MutableInt> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<MutableInt>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(mapUtil_ValueCreator0).get();
      // Undeclared exception!
      try { 
        MapUtil.createIfAbsent(concurrentMap0, " but values.size is ", (MapUtil.ValueCreator<? extends MutableInt>) mapUtil_ValueCreator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConcurrentSkipListMap<Object, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, String>();
      Integer integer0 = new Integer(13);
      concurrentSkipListMap0.put(integer0, "");
      String string0 = MapUtil.createIfAbsent((ConcurrentMap<Object, String>) concurrentSkipListMap0, (Object) integer0, (MapUtil.ValueCreator<? extends String>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = MapUtil.newHashMap();
      Map<Integer, String> map0 = MapUtil.emptyMap();
      hashMap0.put(map0, map0);
      boolean boolean0 = MapUtil.isNotEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConcurrentMap<Integer, String> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(5453, 5453);
      MapUtil.isNotEmpty(concurrentMap0);
      // Undeclared exception!
      MapUtil.isNotEmpty(concurrentMap0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = MapUtil.isNotEmpty((Map<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = MapUtil.newHashMap();
      Map<Integer, String> map0 = MapUtil.emptyMap();
      hashMap0.put(map0, map0);
      boolean boolean0 = MapUtil.isEmpty(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentHashMap<MapUtilTest.EnumA, Object> concurrentHashMap0 = new ConcurrentHashMap<MapUtilTest.EnumA, Object>();
      boolean boolean0 = MapUtil.isEmpty(concurrentHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = MapUtil.isEmpty((Map<?, ?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createLongObjectHashMap((-1), (float) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SortedSetMultimap<Object, String> sortedSetMultimap0 = MapUtil.createSortedSetValueMap();
      assertNotNull(sortedSetMultimap0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = MapUtil.createIntObjectHashMap(8, 1.0F);
      assertEquals(8, IntObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentMap<Integer, String> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(5453, 5453);
      Map<Integer, String> map0 = MapUtil.unmodifiableMap((Map<? extends Integer, ? extends String>) concurrentMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TreeRangeMap<Integer, MutableLong> treeRangeMap0 = MapUtil.createRangeMap();
      assertNotNull(treeRangeMap0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createConcurrentMapCounter((Iterable<? extends MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableLong mutableLong0 = new MutableLong((long) 0);
      HashMap<Integer, Object> hashMap0 = MapUtil.newHashMap(integer0, (Object) mutableLong0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.newEnumMap((Class<MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createMutableIntValueHashMap(1467, (-260.26477F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -260.26477
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      MapUtil.createWeakValueConcurrentHashMap((int) 120, 24943);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Map<Integer, Object> map0 = MapUtil.singletonMap(integer0, (Object) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeMap<MutableLong, Integer> treeMap0 = MapUtil.newSortedMap();
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createListValueMap(0, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedValuesPerKey cannot be negative but was: -2147483648
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Object, MutableLong> hashMap0 = MapUtil.createMutableLongValueHashMap(0, 318.6934F);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MapUtil mapUtil0 = new MapUtil();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConcurrentMap<Integer, Object> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(1, 1);
      ConcurrentSkipListMap<Object, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Object>();
      Object object0 = new Object();
      concurrentSkipListMap0.put(concurrentMap0, object0);
      MapUtil.ValueCreator<String> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<String>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtil.createIfAbsent((ConcurrentMap<Object, Object>) concurrentSkipListMap0, (Object) concurrentMap0, (MapUtil.ValueCreator<?>) mapUtil_ValueCreator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.MapMakerInternalMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AtomicLongMap<Object> atomicLongMap0 = MapUtil.createConcurrentMapCounter();
      Vector<String> vector0 = new Vector<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) atomicLongMap0);
      vector0.addElement("");
      HashMap<String, Object> hashMap0 = MapUtil.newHashMap((List<String>) vector0, (List<Object>) arrayList0);
      assertFalse(hashMap0.isEmpty());
  }
}
