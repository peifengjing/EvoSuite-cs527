/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:51:42 GMT 2017
 */

package org.springside.modules.utils.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springside.modules.utils.base.PropertiesUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertiesUtil_ESTest extends PropertiesUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils/Load property from ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.springside.modules.utils.base.PropertiesUtil");
      Properties properties0 = PropertiesUtil.loadFromFile("Load property from ");
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("Sd_*8S(3d%pR@] 2}#");
      String string0 = PropertiesUtil.getString(properties0, "Sd_*8S(3d%pR@] 2}#", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("");
      String string0 = PropertiesUtil.getString(properties0, " fail ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("&X>8Y%L|~U6-5e");
      Long long0 = PropertiesUtil.getLong(properties0, "&X>8Y%L|~U6-5e", (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("org.springside.modules.utils.io.type.StringBuilderWriter");
      Long long0 = new Long(2531L);
      Long long1 = PropertiesUtil.getLong(properties0, "", long0);
      assertEquals(2531L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("IOException thrown while closing Closeable.");
      Long long0 = new Long(0L);
      Long long1 = PropertiesUtil.getLong(properties0, "IOException thrown while closing Closeable.", long0);
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("]B");
      Long long0 = new Long((-963L));
      Long long1 = PropertiesUtil.getLong(properties0, "org.springside.modules.utils.io.type.StringBuilderWriter", long0);
      assertEquals((-963L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("kUBL}lVN!)wT=Qh8");
      Integer integer0 = PropertiesUtil.getInt(properties0, "kUBL}lVN!)wT=Qh8", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("kUBL}lVN!)wT=Qh8");
      Integer integer0 = new Integer(2597);
      Integer integer1 = PropertiesUtil.getInt(properties0, "kUBL}lVN!)wT=Qh8", integer0);
      assertEquals(2597, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("&X>8Y%L|~U6-5e");
      Integer integer0 = new Integer((-21));
      Integer integer1 = PropertiesUtil.getInt(properties0, "&X>8Y%L|~U6-5e", integer0);
      assertEquals((-21), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("Sc@P#(9~l%q''");
      Double double0 = new Double(0.0);
      Double double1 = PropertiesUtil.getDouble(properties0, "Sc@P#(9~l%q''", double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("&X>8Y%L|~U6-5e");
      Double double0 = new Double(1.2294591632194196);
      Double double1 = PropertiesUtil.getDouble(properties0, "&X>8Y%L|~U6-5e", double0);
      assertEquals(1.2294591632194196, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("\tvA;`Rb{h");
      Double double0 = new Double((-869.2));
      Double double1 = PropertiesUtil.getDouble(properties0, "", double0);
      assertEquals((-869.2), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("Lad property fom ");
      Boolean boolean0 = PropertiesUtil.getBoolean(properties0, "Lad property fom ", (Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "ve7@\\u2D$xiX6nk|2k,";
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed \\uxxxx encoding.
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromFile("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("");
      // Undeclared exception!
      try { 
        PropertiesUtil.getString(properties0, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("Sc@P#(9~l%q''");
      // Undeclared exception!
      try { 
        PropertiesUtil.getLong(properties0, (String) null, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("Sd_*8S(3d%pR@] 2}#");
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        PropertiesUtil.getInt(properties0, (String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        PropertiesUtil.getDouble((Properties) null, "rR|eU@k8R gBNBW4", double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.PropertiesUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("Load property from ");
      // Undeclared exception!
      try { 
        PropertiesUtil.getBoolean(properties0, (String) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("gBS5kQ]/<kGj7^g{nA_");
      Boolean boolean0 = PropertiesUtil.getBoolean(properties0, "7{QgrU43it8K.l*", (Boolean) true);
      Boolean boolean1 = PropertiesUtil.getBoolean(properties0, "gBS5kQ]/<kGj7^g{nA_", boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("Lad property from ");
      Double double0 = PropertiesUtil.getDouble(properties0, "Lad property from ", (Double) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertiesUtil propertiesUtil0 = new PropertiesUtil();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("");
      String string0 = PropertiesUtil.getString(properties0, ">", "org.springside.modules.utils.base.PropertiesUtil");
      assertEquals("org.springside.modules.utils.base.PropertiesUtil", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("l[");
      Integer integer0 = new Integer(0);
      Integer integer1 = PropertiesUtil.getInt(properties0, "l[", integer0);
      assertEquals(0, (int)integer1);
  }
}
