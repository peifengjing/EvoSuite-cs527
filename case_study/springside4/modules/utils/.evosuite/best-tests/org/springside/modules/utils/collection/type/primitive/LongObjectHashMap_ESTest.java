/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:23:42 GMT 2017
 */

package org.springside.modules.utils.collection.type.primitive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.type.primitive.LongObjectHashMap;
import org.springside.modules.utils.collection.type.primitive.LongObjectMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LongObjectHashMap_ESTest extends LongObjectHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      String string0 = hashMap0.put(long1, "QK");
      assertNull(string0);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.put(long0, "QK");
      assertNull(string1);
      assertFalse(long0.equals((Object)long1));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      Long long3 = Long.getLong("The map entry has been removed", (-1912L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-1912L), (long)long3);
      
      String string2 = hashMap0.put(long2, "The map entry has been removed");
      assertNull(string2);
      assertFalse(long2.equals((Object)long3));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      longObjectHashMap0.putAll(hashMap0);
      assertEquals(3, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string3 = longObjectHashMap0.put(1L, "The map entry has been removed");
      assertNull(string3);
      assertEquals(4, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap1.containsKey(0L);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap1.new MapEntry(61);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string4 = longObjectHashMap0.replace(long3, "Rz+ypaBBE|+BZRZB>");
      assertNull(string4);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(4, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string5 = longObjectHashMap0.toString();
      assertNotNull(string5);
      assertEquals(4, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals("{-1=QK, 0=The map entry has been removed, 8=QK, 1=The map entry has been removed}", string5);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long4 = new Long((-1747L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertEquals((-1747L), (long)long4);
      
      Object object0 = longObjectHashMap2.put(0L, (Object) long4);
      assertNull(object0);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertEquals(1, longObjectHashMap2.size());
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Object> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<Object>((-121), (-0.6977041F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Long long2 = Long.getLong("The map entry has been removed", (-1912L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1912L), (long)long2);
      
      String string0 = longObjectHashMap0.toString();
      assertNotNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      longObjectHashMap0.putAll(hashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string1 = longObjectHashMap0.put(1L, "The map entry has been removed");
      assertNull(string1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean0 = longObjectHashMap1.containsKey(0L);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap1.new MapEntry(61);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      longObjectHashMap1.clear();
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string2 = longObjectHashMap0.replace(long2, "Rz+ypaBBE|+BZRZB>");
      assertNull(string2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string3 = longObjectHashMap0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals("{1=The map entry has been removed}", string3);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Object> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Object>((-121), (-0.6977041F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(822);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Long long1 = Long.getLong("", (long) 822);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(822L, (long)long1);
      
      Integer integer0 = new Integer(822);
      assertNotNull(integer0);
      assertEquals(822, (int)integer0);
      
      long long2 = Long.remainderUnsigned((-1581L), 822);
      assertEquals(397L, long2);
      
      String string0 = longObjectHashMap0.putIfAbsent(long0, "5zf[%Dj(^2");
      assertNull(string0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long3 = new Long((-1418L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-1418L), (long)long3);
      
      boolean boolean0 = longObjectHashMap0.replace(long3, "]X#;0", "od<L8;3z");
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string1 = longObjectHashMap0.get((long) 822);
      assertNull(string1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string2 = longObjectHashMap0.toString();
      assertNotNull(string2);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals("{8=5zf[%Dj(^2}", string2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer1 = new Integer(8);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(8, (int)integer1);
      
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      assertNotNull(iterable0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = longObjectHashMap0.containsValue(object0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertFalse(boolean1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      longObjectHashMap0.hashCode();
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean2 = longObjectHashMap0.containsValue(integer0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertFalse(boolean2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean3 = longObjectHashMap0.containsKey((Object) long0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertFalse(long0.equals((Object)long3));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertTrue(boolean3);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1257);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(655L);
      assertNotNull(long0);
      assertEquals(655L, (long)long0);
      
      String string0 = longObjectHashMap0.putIfAbsent(long0, "");
      assertNull(string0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      longObjectHashMap1.hashCode();
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Integer integer0 = new Integer((-3652));
      assertNotNull(integer0);
      assertEquals((-3652), (int)integer0);
      
      BiFunction<Long, Integer, Integer> biFunction0 = (BiFunction<Long, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyLong() , anyInt());
      Long long0 = new Long((-2192L));
      assertNotNull(long0);
      assertEquals((-2192L), (long)long0);
      
      Integer integer1 = new Integer(64);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(64, (int)integer1);
      
      String string0 = Long.toUnsignedString((-1L));
      assertNotNull(string0);
      assertEquals("18446744073709551615", string0);
      
      BiFunction<Integer, Object, Integer> biFunction1 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap0.merge(long0, (Integer) 8, biFunction1);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, (int)integer2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer3 = longObjectHashMap0.compute(long0, biFunction0);
      assertNotNull(integer3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals((-3652), (int)integer3);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer4 = new Integer((-3652));
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals((-3652), (int)integer4);
      
      Integer integer5 = longObjectHashMap0.put((-1280L), integer4);
      assertNull(integer5);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Set<Map.Entry<Long, Integer>> set0 = (Set<Map.Entry<Long, Integer>>)longObjectHashMap0.entrySet();
      assertNotNull(set0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(8);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        longObjectHashMap2.remove(object0, (Object) integer2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(65536);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      // Undeclared exception!
      longObjectHashMap0.containsValue("2vgI/\"%)Q ");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = Long.getLong("*d", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Integer integer0 = new Integer(2948);
      assertNotNull(integer0);
      assertEquals(2948, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.putIfAbsent(long0, integer0);
      assertNull(integer1);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      Integer integer2 = new Integer(7);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(7, (int)integer2);
      
      Integer integer3 = longObjectHashMap0.put((-1L), integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(2948, (int)integer3);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      Integer integer4 = longObjectHashMap0.getOrDefault(long2, integer0);
      assertNotNull(integer4);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(2948, (int)integer4);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long3 = Long.getLong("b");
      assertNull(long3);
      
      Integer integer5 = new Integer(8);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(8, (int)integer5);
      
      Integer integer6 = longObjectHashMap0.put(long1, integer5);
      assertNull(integer6);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<String> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<String>(8, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Object object0 = longObjectHashMap0.putIfAbsent(long0, "");
      assertNull(object0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean0 = longObjectHashMap0.containsValue("");
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertTrue(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(25);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = longObjectHashMap0.put((-1L), (Object) longObjectHashMap0);
      assertNull(object0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string0 = longObjectHashMap0.toString();
      assertNotNull(string0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals("{-1=(this Map)}", string0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap2.new MapEntry(8);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(2168);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(8);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean0 = longObjectHashMap1.containsValue((Object) null);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Integer integer0 = new Integer(123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      Object object0 = longObjectHashMap0.compute(long0, biFunction0);
      assertNotNull(object0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(123, object0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer1 = new Integer(2168);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2168, (int)integer1);
      
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap0.containsKey((long) 8);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertTrue(boolean1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean2 = longObjectHashMap1.containsKey((long) 8);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string0 = longObjectHashMap1.toString();
      assertNotNull(string0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals("{}", string0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(2192);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = longObjectHashMap0.equals(object0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(8);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean1 = longObjectHashMap1.containsValue((Object) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(2192);
      assertNotNull(long0);
      assertEquals(2192L, (long)long0);
      
      Integer integer0 = new Integer(2192);
      assertNotNull(integer0);
      assertEquals(2192, (int)integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      Object object1 = longObjectHashMap0.compute(long0, biFunction0);
      assertNotNull(object1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2192, object1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer1 = new Integer(43);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(43, (int)integer1);
      
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = longObjectHashMap0.containsKey((long) 8);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertFalse(boolean2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean3 = longObjectHashMap1.containsKey((long) 8);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean3);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string0 = longObjectHashMap1.toString();
      assertNotNull(string0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals("{}", string0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object2 = longObjectHashMap0.get((Object) long0);
      assertNotNull(object2);
      assertFalse(object2.equals((Object)integer1));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2192, object2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Integer> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Integer>((-2545), 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      String string0 = hashMap0.put(long0, "The map entry has been removed");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      longObjectHashMap0.putAll(hashMap0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap0.isEmpty();
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(2192);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = longObjectHashMap0.equals(object0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Iterable<LongObjectMap.PrimitiveEntry<Object>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Object>>)longObjectHashMap0.entries();
      assertNotNull(iterable0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(8);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean1 = longObjectHashMap1.containsValue((Object) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(2192);
      assertNotNull(long0);
      assertEquals(2192L, (long)long0);
      
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = longObjectHashMap2.put((-2203L), integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, longObjectHashMap2.size());
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer3 = longObjectHashMap2.merge(long0, integer0, biFunction0);
      assertNotNull(integer3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(2, longObjectHashMap2.size());
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(43, (int)integer3);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      longObjectHashMap2.hashCode();
      assertEquals(2, longObjectHashMap2.size());
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean2 = longObjectHashMap0.containsKey((long) 8);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertFalse(boolean2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean3 = longObjectHashMap1.containsKey((long) 2192);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean3);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Set<Long> set0 = longObjectHashMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      BiConsumer<Long, Object> biConsumer0 = (BiConsumer<Long, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = longObjectHashMap0.replace(long0, object0, object0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertFalse(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = Long.getLong("*d", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Integer integer0 = new Integer(2948);
      assertNotNull(integer0);
      assertEquals(2948, (int)integer0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(1010);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      longObjectHashMap0.putAll(longObjectHashMap1);
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertNotSame(longObjectHashMap1, longObjectHashMap0);
      assertTrue(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer1 = longObjectHashMap0.putIfAbsent(long0, integer0);
      assertNull(integer1);
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertFalse(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      Integer integer2 = longObjectHashMap0.put(long1, integer0);
      assertNull(integer2);
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertFalse(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertFalse(long1.equals((Object)long0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      Integer integer3 = longObjectHashMap0.getOrDefault(long2, integer0);
      assertNotNull(integer3);
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertFalse(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertEquals(2948, (int)integer3);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Integer integer4 = new Integer(8);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(8, (int)integer4);
      
      Integer integer5 = longObjectHashMap0.put(long1, integer4);
      assertNotNull(integer5);
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertFalse(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertFalse(long1.equals((Object)long2));
      assertFalse(long1.equals((Object)long0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertEquals(2948, (int)integer5);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<String> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<String>(8, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = Long.getLong("*d", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Integer integer0 = new Integer(2948);
      assertNotNull(integer0);
      assertEquals(2948, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.putIfAbsent(long0, integer0);
      assertNull(integer1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      int int0 = Long.compareUnsigned(8, 2948);
      assertEquals((-1), int0);
      
      Integer integer2 = longObjectHashMap0.getOrDefault(long2, integer0);
      assertNotNull(integer2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2948, (int)integer2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Integer integer3 = longObjectHashMap0.put(long1, (Integer) 8);
      assertNull(integer3);
      assertFalse(long1.equals((Object)long2));
      assertFalse(long1.equals((Object)long0));
      assertEquals(2, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals(0L, (long)long3);
      
      Integer integer4 = new Integer(977);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(977, (int)integer4);
      
      Integer integer5 = longObjectHashMap0.put(long3, integer4);
      assertNull(integer5);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(3, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<String> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<String>(8, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(18);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long((-1589L));
      assertNotNull(long0);
      assertEquals((-1589L), (long)long0);
      
      Integer integer0 = new Integer(2221);
      assertNotNull(integer0);
      assertEquals(2221, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.put(long0, integer0);
      assertNull(integer1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      int int0 = longObjectHashMap0.size();
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, int0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      // Undeclared exception!
      try { 
        longObjectHashMap1.replaceAll((BiFunction<? super Long, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = new Long((-1589L));
      assertNotNull(long0);
      assertEquals((-1589L), (long)long0);
      
      String string0 = hashMap0.put(long0, "{}|vv}y");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.put(long1, "The map entry has been removed");
      assertNull(string1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      longObjectHashMap0.putAll(hashMap0);
      assertEquals(2, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap1.containsKey(0L);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = Long.getLong("*d", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      long long1 = Long.divideUnsigned(8, (-1L));
      assertEquals(0L, long1);
      
      Integer integer0 = new Integer(2948);
      assertNotNull(integer0);
      assertEquals(2948, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.putIfAbsent(long0, integer0);
      assertNull(integer1);
      assertFalse(long0.equals((Object)long1));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long2 = new Long(8);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(8L, (long)long2);
      
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(0L, (long)long3);
      
      long long4 = Long.max(2948, 8);
      assertFalse(long4 == long1);
      assertEquals(2948L, long4);
      
      Integer integer2 = longObjectHashMap0.getOrDefault(long3, integer0);
      assertNotNull(integer2);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long4));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2948, (int)integer2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer3 = new Integer(8);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(8, (int)integer3);
      
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer4 = longObjectHashMap0.put(long2, integer3);
      assertNull(integer4);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long4));
      assertFalse(long2.equals((Object)long3));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(2, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Object> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Object>(8, (-395.92F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = Long.getLong("*", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Integer integer0 = longObjectHashMap0.putIfAbsent(long0, (Integer) 8);
      assertNull(integer0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long1 = new Long((-41L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-41L), (long)long1);
      
      Integer integer1 = longObjectHashMap0.getOrDefault(long1, (Integer) 8);
      assertNotNull(integer1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, (int)integer1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer2 = new Integer(8);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(8, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      String string0 = hashMap0.put(long0, "The map entry has been removed");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      longObjectHashMap0.putAll(hashMap0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean0 = longObjectHashMap1.containsKey(0L);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string1 = longObjectHashMap1.keyToString(1L);
      assertNotNull(string1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals("1", string1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(2192);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = longObjectHashMap0.equals(object0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Iterable<LongObjectMap.PrimitiveEntry<Object>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Object>>)longObjectHashMap0.entries();
      assertNotNull(iterable0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(8);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean1 = longObjectHashMap1.containsValue((Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(2192);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(2192);
      assertNotNull(long0);
      assertEquals(2192L, (long)long0);
      
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = longObjectHashMap2.merge(long0, integer0, biFunction0);
      assertNotNull(integer1);
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(1, longObjectHashMap2.size());
      assertEquals(43, (int)integer1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      longObjectHashMap2.hashCode();
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(1, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean2 = longObjectHashMap0.containsKey((long) 8);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertFalse(boolean2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean3 = longObjectHashMap1.containsKey((long) 8);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean3);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>(1);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      String string0 = hashMap0.put(long0, "The map entry has been removed");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      longObjectHashMap0.putAll(hashMap0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap1.containsKey(0L);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string1 = longObjectHashMap0.get(0L);
      assertNotNull(string1);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals("The map entry has been removed", string1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = null;
      try {
        longObjectHashMap0 = new LongObjectHashMap<Object>(Integer.MAX_VALUE, 1.0F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2147483647) not representable as an int
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Long long1 = longObjectHashMap0.put(long0, long0);
      assertNull(long1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap1);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      longObjectHashMap1.putAll(longObjectHashMap0);
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertNotSame(longObjectHashMap1, longObjectHashMap0);
      assertTrue(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      longObjectHashMap0.putAll(longObjectHashMap1);
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertNotSame(longObjectHashMap1, longObjectHashMap0);
      assertTrue(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Collection<Long> collection0 = longObjectHashMap1.values();
      assertNotNull(collection0);
      assertNotSame(longObjectHashMap1, longObjectHashMap0);
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = Long.getLong("*d", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Integer integer0 = new Integer(2948);
      assertNotNull(integer0);
      assertEquals(2948, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.putIfAbsent(long0, integer0);
      assertNull(integer1);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Integer integer2 = longObjectHashMap0.getOrDefault(long1, integer0);
      assertNotNull(integer2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(2948, (int)integer2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer3 = new Integer(8);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(8, (int)integer3);
      
      Integer integer4 = longObjectHashMap0.put(long0, integer3);
      assertNotNull(integer4);
      assertFalse(long0.equals((Object)long1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(2948, (int)integer4);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<String>(8, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1416);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      long long1 = Long.max(8, 8);
      assertEquals(8L, long1);
      
      Object object0 = longObjectHashMap0.remove((Object) long0);
      assertNull(object0);
      assertTrue(long0.equals((Object)long1));
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long2 = new Long(1416);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(1416L, (long)long2);
      
      Object object1 = longObjectHashMap0.put(long0, (Object) long0);
      assertNull(object1);
      assertTrue(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long3 = longObjectHashMap_MapEntry0.getKey();
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8L, (long)long3);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(3115);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Collection<Integer> collection0 = longObjectHashMap1.values();
      assertNotNull(collection0);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.forEach((BiConsumer<? super Long, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      BiConsumer<Long, Object> biConsumer0 = (BiConsumer<Long, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Object object0 = longObjectHashMap0.put(0L, (Object) null);
      assertNull(object0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Object object1 = longObjectHashMap0.get(102L);
      assertNull(object1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean0 = longObjectHashMap0.isEmpty();
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertTrue(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = Long.getLong("p");
      assertNull(long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.put((Long) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.containsKey((Object) longObjectHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.put(long0, integer0);
      assertNull(integer1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Integer integer2 = longObjectHashMap0.remove(1L);
      assertNotNull(integer2);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, (int)integer2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Set<Long> set0 = longObjectHashMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Set<Map.Entry<Long, Object>> set1 = (Set<Map.Entry<Long, Object>>)longObjectHashMap1.entrySet();
      assertNotNull(set1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long1 = new Long(970L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(970L, (long)long1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int int0 = Long.compareUnsigned(8, 0);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        longObjectHashMap2.getOrDefault(set1, ".Cwu6cJB\u0001_+>O");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$EntrySet cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string0 = longObjectHashMap0.toString();
      assertNotNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Collection<Object> collection0 = longObjectHashMap1.values();
      assertNotNull(collection0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = longObjectHashMap1.merge(long0, "", biFunction0);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)string0));
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals("", object0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long1 = new Long((-526L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-526L), (long)long1);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = longObjectHashMap0.merge(long1, integer0, biFunction1);
      assertNotNull(integer1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, (int)integer1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Object object1 = longObjectHashMap1.remove((Object) long0);
      assertNotNull(object1);
      assertFalse(long0.equals((Object)long1));
      assertFalse(object1.equals((Object)string0));
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals("", object1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Collection<Object> collection1 = longObjectHashMap1.values();
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      assertFalse(collection1.equals((Object)collection0));
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.remove((Object) null, (Object) longObjectHashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      long long1 = Long.min((-3472L), 1L);
      assertEquals((-3472L), long1);
      
      Object object0 = longObjectHashMap0.getOrDefault(long0, integer0);
      assertNotNull(object0);
      assertFalse(long0.equals((Object)long1));
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(1, object0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>(123);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      // Undeclared exception!
      try { 
        longObjectHashMap1.remove((Object) longObjectHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = null;
      try {
        longObjectHashMap0 = new LongObjectHashMap<Long>(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2147483647) not representable as an int
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1416);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      long long1 = Long.max(8, 8);
      assertEquals(8L, long1);
      
      Object object0 = longObjectHashMap0.remove((Object) long0);
      assertNull(object0);
      assertTrue(long0.equals((Object)long1));
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long2 = new Long(1416);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(1416L, (long)long2);
      
      try { 
        Long.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long(2036L);
      assertNotNull(long0);
      assertEquals(2036L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = longObjectHashMap0.getOrDefault(long0, object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string0 = longObjectHashMap1.compute(long0, biFunction0);
      assertNull(string0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      // Undeclared exception!
      try { 
        longObjectHashMap1.putAll((Map<? extends Long, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      longObjectHashMap0.clear();
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(3811);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Long long0 = new Long((-2216L));
      assertNotNull(long0);
      assertEquals((-2216L), (long)long0);
      
      String string0 = longObjectHashMap0.get((Object) long0);
      assertNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long((-4440L));
      assertNotNull(long0);
      assertEquals((-4440L), (long)long0);
      
      boolean boolean0 = longObjectHashMap0.containsKey((Object) long0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertFalse(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(25);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = longObjectHashMap0.put((-1L), (Object) null);
      assertNull(object0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string0 = longObjectHashMap0.toString();
      assertNotNull(string0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals("{-1=null}", string0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string1 = longObjectHashMap1.keyToString(25);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals("25", string1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string0 = longObjectHashMap0.toString();
      assertNotNull(string0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals("{}", string0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = longObjectHashMap0.put(655L, (Object) null);
      assertNull(object0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string1 = longObjectHashMap0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals("{655=null}", string1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer0 = new Integer(25);
      assertNotNull(integer0);
      assertEquals(25, (int)integer0);
      
      Integer integer1 = longObjectHashMap1.put(3084L, integer0);
      assertNull(integer1);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string2 = longObjectHashMap1.keyToString(25);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals("25", string2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>(125);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Set<Long> set0 = longObjectHashMap2.keySet();
      assertNotNull(set0);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Collection<String> collection0 = longObjectHashMap2.values();
      assertNotNull(collection0);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Object object0 = longObjectHashMap0.putIfAbsent(long0, "");
      assertNull(object0);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      boolean boolean0 = longObjectHashMap0.remove((Object) long1, (Object) "");
      assertTrue(long1.equals((Object)long0));
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertTrue(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      boolean boolean1 = longObjectHashMap0.containsValue("");
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertFalse(boolean1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = Long.getLong("*d", (-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Integer integer0 = new Integer(2948);
      assertNotNull(integer0);
      assertEquals(2948, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.putIfAbsent(long0, integer0);
      assertNull(integer1);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      Integer integer2 = longObjectHashMap0.getOrDefault(long2, integer0);
      assertNotNull(integer2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(2948, (int)integer2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap0.replaceAll(biFunction0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Integer integer3 = new Integer(8);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(8, (int)integer3);
      
      Integer integer4 = longObjectHashMap0.put(long1, integer3);
      assertNull(integer4);
      assertFalse(long1.equals((Object)long2));
      assertFalse(long1.equals((Object)long0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(822);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      long long1 = Long.max((-2796L), 1L);
      assertEquals(1L, long1);
      
      long long2 = Long.remainderUnsigned((-1589L), 822);
      assertFalse(long2 == long1);
      assertEquals(389L, long2);
      
      String string0 = longObjectHashMap0.putIfAbsent(long0, "5zf[%Dj(^2");
      assertNull(string0);
      assertFalse(long0.equals((Object)long2));
      assertFalse(long0.equals((Object)long1));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Long long3 = new Long((-1418L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-1418L), (long)long3);
      
      boolean boolean0 = longObjectHashMap0.replace(long3, "]X#;0", "od<L8;3z");
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(boolean0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string1 = longObjectHashMap0.get((long) 822);
      assertNull(string1);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      String string2 = longObjectHashMap0.toString();
      assertNotNull(string2);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals("{8=5zf[%Dj(^2}", string2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      boolean boolean1 = longObjectHashMap0.containsValue(integer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(boolean1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      assertNotNull(iterable0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = longObjectHashMap0.containsValue(object0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(boolean2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string0 = longObjectHashMap0.toString();
      assertNotNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Object object0 = longObjectHashMap0.put(655L, (Object) null);
      assertNull(object0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string1 = longObjectHashMap0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals("{655=null}", string1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Integer integer0 = new Integer(25);
      assertNotNull(integer0);
      assertEquals(25, (int)integer0);
      
      Integer integer1 = longObjectHashMap1.put(3084L, integer0);
      assertNull(integer1);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertFalse(boolean0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string2 = longObjectHashMap1.keyToString(25);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals("25", string2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      int int0 = 125;
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>(125);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Set<Long> set0 = longObjectHashMap2.keySet();
      assertNotNull(set0);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Collection<String> collection0 = longObjectHashMap2.values();
      assertNotNull(collection0);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      LongObjectHashMap<Long> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<Long>(8, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Collection<String> collection0 = longObjectHashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      Set<Long> set0 = longObjectHashMap1.keySet();
      assertNotNull(set0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(8);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      
      Integer integer0 = new Integer(995);
      assertNotNull(integer0);
      assertEquals(995, (int)integer0);
      
      LongObjectHashMap<Integer> longObjectHashMap3 = new LongObjectHashMap<Integer>(8);
      assertNotNull(longObjectHashMap3);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      
      String string0 = longObjectHashMap3.toString();
      assertNotNull(string0);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals("{}", string0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      hashMap0.put(long1, "QK");
      Long long2 = new Long(0L);
      Long long3 = Long.getLong("The map entry has been removed", (-1912L));
      hashMap0.put(long2, "The map entry has been removed");
      longObjectHashMap0.putAll(hashMap0);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      longObjectHashMap1.put(long2, long3);
      longObjectHashMap0.put(1L, "The map entry has been removed");
      longObjectHashMap1.containsKey(0L);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap1.new MapEntry(61);
      longObjectHashMap0.replace(long3, "Rz+ypaB?Bh|+BZRZB>");
      longObjectHashMap0.toString();
      LongObjectHashMap<Object> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Object>((-121), (-0.6977041F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(1);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      longObjectHashMap0.putAll(hashMap0);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>();
      longObjectHashMap1.containsKey(0L);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap1.new MapEntry(4);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.setValue("The map entry has been removed");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The map entry has been removed
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.clear();
      BiFunction<Object, Object, Long> biFunction0 = (BiFunction<Object, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.replaceAll(biFunction0);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      longObjectHashMap1.equals(longObjectHashMap0);
      Long long0 = new Long(519L);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      Map.Entry.comparingByValue();
      Object object0 = new Object();
      LongObjectHashMap<Object> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = Long.getLong("*d", (-1L));
      Integer integer0 = new Integer(2948);
      longObjectHashMap0.putIfAbsent(long0, integer0);
      Long long1 = new Long(8);
      Long long2 = new Long(0L);
      longObjectHashMap0.getOrDefault(long2, integer0);
      Integer integer1 = new Integer(8);
      longObjectHashMap0.put(long1, integer1);
      LongObjectHashMap<String> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<String>(8, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      longObjectHashMap1.hashCode();
      Integer integer0 = new Integer((-3652));
      BiFunction<Long, Integer, Integer> biFunction0 = (BiFunction<Long, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyLong() , anyInt());
      Long long0 = new Long((-2192L));
      Integer integer1 = new Integer(64);
      Long.toUnsignedString((-1L));
      BiFunction<Integer, Object, Integer> biFunction1 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.merge(long0, (Integer) 8, biFunction1);
      longObjectHashMap0.compute(long0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      Integer integer2 = new Integer((-3652));
      longObjectHashMap0.entrySet();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(8);
      LongObjectHashMap<String> longObjectHashMap3 = new LongObjectHashMap<String>();
      longObjectHashMap3.entries();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      longObjectHashMap2.equals("");
      longObjectHashMap3.remove((-2192L));
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap3.new MapEntry(125);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      longObjectHashMap0.toString();
      Long long0 = new Long(8);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8, 0.5F);
      longObjectHashMap0.replace(long0, (Object) longObjectHashMap2);
      longObjectHashMap0.putAll(longObjectHashMap1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap2.new MapEntry(8);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>(123);
      longObjectHashMap0.putAll(longObjectHashMap3);
      LongObjectHashMap<String> longObjectHashMap4 = new LongObjectHashMap<String>(8, 1.0F);
      longObjectHashMap4.size();
      LongObjectHashMap<Integer> longObjectHashMap5 = new LongObjectHashMap<Integer>(8, 0.5F);
      int int0 = (-2364);
      BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap5.forEach(biConsumer0);
      Integer integer0 = new Integer((-2364));
      // Undeclared exception!
      try { 
        longObjectHashMap5.get((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }
}
