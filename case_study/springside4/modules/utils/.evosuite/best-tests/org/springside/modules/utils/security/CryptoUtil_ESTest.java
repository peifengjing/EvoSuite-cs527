/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:53:14 GMT 2017
 */

package org.springside.modules.utils.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidParameterException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.security.CryptoUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CryptoUtil_ESTest extends CryptoUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateHmacSha1Key();
      byte[] byteArray1 = new byte[5];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray1, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.crypto.spec.IvParameterSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = CryptoUtil.generateIV();
      byte[] byteArray2 = CryptoUtil.aesEncrypt(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      byte[] byteArray1 = CryptoUtil.aesEncrypt(byteArray0, byteArray0);
      boolean boolean0 = CryptoUtil.isMacValid(byteArray0, byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = CryptoUtil.aesEncrypt(byteArray0, byteArray0);
      String string0 = CryptoUtil.aesDecrypt(byteArray1, byteArray0);
      assertEquals("\u0017\uFFFD\uFFFDT\u0001\uFFFD*\uFFFD`\uFFFD\uFFFD\u0012\uFFFD\tn", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.isMacValid((byte[]) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.hmacSha1((byte[]) null, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.generateAesKey(2);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.crypto.spec.IvParameterSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray0, byteArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrong IV length: must be 16 bytes long
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey(128);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = CryptoUtil.hmacSha1(byteArray0, byteArray0);
      boolean boolean0 = CryptoUtil.isMacValid(byteArray1, byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = CryptoUtil.aesEncrypt(byteArray0, byteArray0, byteArray0);
      String string0 = CryptoUtil.aesDecrypt(byteArray1, byteArray0, byteArray0);
      assertEquals("\uFFFD\uFFFDX?HK\uFFFD=3\uFFFD\uFFFD\u0010f\u001E9C", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CryptoUtil cryptoUtil0 = new CryptoUtil();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid AES key length: 8 bytes
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid AES key length: 4 bytes
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }
}
