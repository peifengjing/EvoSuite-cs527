/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:46:52 GMT 2017
 */

package org.springside.modules.utils.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.text.MoreStringUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MoreStringUtil_ESTest extends MoreStringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd("0(Mf;VITQ',iy2ev&", 'I');
      assertEquals("0(Mf;VITQ',iy2ev&", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.startWith("0(Mf;VITQ',iy2ev&", 'I');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = MoreStringUtil.replaceFirst("G$r;M3|>Ei;uF", ';', 'K');
      assertEquals("G$rKM3|>Ei;uF", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = MoreStringUtil.replaceLast("", 'f', 'f');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = MoreStringUtil.replaceFirst("", 'X', 'X');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd((String) null, 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      MoreStringUtil.split("9ai.ne![V\"k3;KkmVX2", '$', Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreStringUtil.split("%M[+!dsrG&v", '@', (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.endWith("", '4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = MoreStringUtil.utf8EncodedLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = MoreStringUtil.utf8EncodedLength("0(Mf;VITQ',iy2ev&");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd("lY[%'+}>]15C)/mw0", '0');
      assertEquals("lY[%'+}>]15C)/mw", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("gH");
      boolean boolean0 = MoreStringUtil.endWith(stringBuffer0, 'C');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd("", 'e');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      stringBuilder0.insert(0, 'D');
      boolean boolean0 = MoreStringUtil.endWith(stringBuilder0, 'D');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.startWith("m6", '3');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.startWith((CharSequence) null, 'f');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.startWith("B", 'B');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = MoreStringUtil.replaceLast("G$r;M3|>Ei;uF", ';', 'X');
      assertEquals("G$r;M3|>EiXuF", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = MoreStringUtil.replaceLast((String) null, 'f', 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = MoreStringUtil.replaceFirst((String) null, 'O', 'O');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split("Bf9G", 'B', '.');
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split("0(Mf;VITQ',iy2ev&", '&', 17);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split("", 'J', 0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split((String) null, 'f', (-10));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split("B", 'B', '.');
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MoreStringUtil moreStringUtil0 = new MoreStringUtil();
  }
}
