/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:31:52 GMT 2017
 */

package org.springside.modules.utils.io.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.io.type.StringBuilderWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringBuilderWriter_ESTest extends StringBuilderWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      stringBuilderWriter0.append('c');
      String string0 = stringBuilderWriter0.toString();
      assertEquals("c", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        stringBuilderWriter0.write(charArray0, 3034, 2603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuilderWriter0.append((CharSequence) stringBuffer0, (-2656), 782);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -2656, end 782, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter((StringBuilder) null);
      stringBuilderWriter0.write("", 0, 0);
      assertEquals("", stringBuilderWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter((StringBuilder) null);
      stringBuilderWriter0.write((char[]) null, 0, 0);
      assertEquals("", stringBuilderWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter((StringBuilder) null);
      stringBuilderWriter0.write("");
      assertEquals("", stringBuilderWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      stringBuilderWriter0.write((String) null);
      assertEquals("", stringBuilderWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(stringBuilder0);
      assertEquals("", stringBuilderWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      stringBuilderWriter0.close();
      assertEquals("", stringBuilderWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter((StringBuilder) null);
      Writer writer0 = stringBuilderWriter0.append((CharSequence) null, 0, 0);
      assertEquals("", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      String string0 = stringBuilderWriter0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = null;
      try {
        stringBuilderWriter0 = new StringBuilderWriter((-1256));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      StringBuilder stringBuilder0 = stringBuilderWriter0.getBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      stringBuilderWriter0.flush();
      assertEquals("", stringBuilderWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter((StringBuilder) null);
      Writer writer0 = stringBuilderWriter0.append((CharSequence) null);
      assertSame(stringBuilderWriter0, writer0);
  }
}
