/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:34:54 GMT 2017
 */

package org.springside.modules.utils.concurrent.threadpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatFlagsException;
import java.util.List;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.concurrent.threadpool.ThreadPoolUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThreadPoolUtil_ESTest extends ThreadPoolUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadFactory threadFactory0 = ThreadPoolUtil.buildThreadFactory(".qB.\">^P7T?|X");
      assertNotNull(threadFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.safeRunnable((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("m@GN^A=5-\"HzV/%tu ", true);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'tu'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("!YbD{#wIN_v?Sv-%", true);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-%
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("-%d", true);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("S% ", false);
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '- '
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("%fdK78VpPav", false);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.Integer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory(";evU4@&m%(Hg8", false);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = h, Flags = (
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("r1%.a2p1yG&");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '.'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("pJoWjs_`-iWN%");
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-%
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("z-(4@F%#");
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '-#'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("eVnIk@!%eST9a1*");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != java.lang.Integer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("aU7?k%+oAS{$=na");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = o, Flags = +
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorService executorService0 = mock(ExecutorService.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(executorService0).awaitTermination(anyLong() , any(java.util.concurrent.TimeUnit.class));
      doReturn(false).when(executorService0).isTerminated();
      doReturn((List) null).when(executorService0).shutdownNow();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown(executorService0, (-4060), timeUnit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) null, 0, timeUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutorService executorService0 = mock(ExecutorService.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(executorService0).awaitTermination(anyLong() , any(java.util.concurrent.TimeUnit.class));
      doReturn(false).when(executorService0).isTerminated();
      doReturn((List) null).when(executorService0).shutdownNow();
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown(executorService0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) null, 231);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Runnable runnable1 = ThreadPoolUtil.safeRunnable(runnable0);
      runnable1.run();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadFactory threadFactory0 = ThreadPoolUtil.buildThreadFactory("", false);
      assertNotNull(threadFactory0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Runnable runnable1 = ThreadPoolUtil.safeRunnable(runnable0);
      ThreadPoolUtil.SafeRunnable threadPoolUtil_SafeRunnable0 = new ThreadPoolUtil.SafeRunnable(runnable1);
      assertFalse(threadPoolUtil_SafeRunnable0.equals((Object)runnable1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory("-%d");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreadPoolUtil threadPoolUtil0 = new ThreadPoolUtil();
  }
}
