/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:26:40 GMT 2017
 */

package org.springside.modules.utils.concurrent.threadpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.concurrent.threadpool.QueuableCachedThreadPool;
import org.springside.modules.utils.concurrent.threadpool.ThreadPoolBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThreadPoolBuilder_ESTest extends ThreadPoolBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = new ThreadPoolBuilder.ScheduledThreadPoolBuilder();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      QueuableCachedThreadPool queuableCachedThreadPool0 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.build();
      assertEquals(0, queuableCachedThreadPool0.getSubmittedCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_CachedThreadPoolBuilder0.build();
      ThreadPoolExecutor threadPoolExecutor1 = threadPoolBuilder_CachedThreadPoolBuilder0.build();
      assertFalse(threadPoolExecutor1.equals((Object)threadPoolExecutor0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_FixedThreadPoolBuilder0.build();
      assertNotNull(threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setPoolSize(919);
      assertSame(threadPoolBuilder_FixedThreadPoolBuilder1, threadPoolBuilder_FixedThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      // Undeclared exception!
      try { 
        threadPoolBuilder_FixedThreadPoolBuilder0.setPoolSize((-598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = ThreadPoolBuilder.scheduledPool();
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder1 = threadPoolBuilder_ScheduledThreadPoolBuilder0.setPoolSize(0);
      assertSame(threadPoolBuilder_ScheduledThreadPoolBuilder1, threadPoolBuilder_ScheduledThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = ThreadPoolBuilder.scheduledPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder1 = threadPoolBuilder_ScheduledThreadPoolBuilder0.setThreadFactory(threadFactory0);
      assertSame(threadPoolBuilder_ScheduledThreadPoolBuilder0, threadPoolBuilder_ScheduledThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = ThreadPoolBuilder.scheduledPool();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = threadPoolBuilder_ScheduledThreadPoolBuilder0.build();
      assertNotNull(scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setMaxSize(0);
      assertSame(threadPoolBuilder_QueuableCachedThreadPoolBuilder0, threadPoolBuilder_QueuableCachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = new ThreadPoolBuilder.QueuableCachedThreadPoolBuilder();
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setMinSize(0);
      assertSame(threadPoolBuilder_QueuableCachedThreadPoolBuilder1, threadPoolBuilder_QueuableCachedThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setQueueSize((-310));
      assertSame(threadPoolBuilder_QueuableCachedThreadPoolBuilder1, threadPoolBuilder_QueuableCachedThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = new ThreadPoolBuilder.QueuableCachedThreadPoolBuilder();
      Boolean boolean0 = new Boolean("");
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setDaemon(boolean0);
      assertSame(threadPoolBuilder_QueuableCachedThreadPoolBuilder0, threadPoolBuilder_QueuableCachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setThreadNamePrefix("Queue capacity is full.");
      assertSame(threadPoolBuilder_QueuableCachedThreadPoolBuilder0, threadPoolBuilder_QueuableCachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = new ThreadPoolBuilder.QueuableCachedThreadPoolBuilder();
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setKeepAliveSecs(0);
      assertSame(threadPoolBuilder_QueuableCachedThreadPoolBuilder0, threadPoolBuilder_QueuableCachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setRejectHanlder(rejectedExecutionHandler0);
      QueuableCachedThreadPool queuableCachedThreadPool0 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.build();
      assertEquals(0, queuableCachedThreadPool0.getSubmittedCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setKeepAliveSecs(0);
      assertSame(threadPoolBuilder_CachedThreadPoolBuilder0, threadPoolBuilder_CachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setDaemon((Boolean) null);
      assertSame(threadPoolBuilder_CachedThreadPoolBuilder1, threadPoolBuilder_CachedThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setMinSize((-24));
      assertSame(threadPoolBuilder_CachedThreadPoolBuilder0, threadPoolBuilder_CachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setThreadNamePrefix("org.springside.modules.utils.concurrent.threadpool.ThreadPoolBuilder");
      assertSame(threadPoolBuilder_CachedThreadPoolBuilder0, threadPoolBuilder_CachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setMaxSize(3045);
      assertSame(threadPoolBuilder_CachedThreadPoolBuilder1, threadPoolBuilder_CachedThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setRejectHanlder(rejectedExecutionHandler0);
      assertSame(threadPoolBuilder_CachedThreadPoolBuilder0, threadPoolBuilder_CachedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setThreadFactory(threadFactory0);
      assertSame(threadPoolBuilder_CachedThreadPoolBuilder1, threadPoolBuilder_CachedThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setRejectHanlder(rejectedExecutionHandler0);
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_FixedThreadPoolBuilder1.build();
      assertNotNull(threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setThreadNamePrefix("");
      assertSame(threadPoolBuilder_FixedThreadPoolBuilder1, threadPoolBuilder_FixedThreadPoolBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setThreadFactory(threadFactory0);
      assertSame(threadPoolBuilder_FixedThreadPoolBuilder0, threadPoolBuilder_FixedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = new ThreadPoolBuilder.FixedThreadPoolBuilder();
      Boolean boolean0 = new Boolean(false);
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setDaemon(boolean0);
      assertSame(threadPoolBuilder_FixedThreadPoolBuilder0, threadPoolBuilder_FixedThreadPoolBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      threadPoolBuilder_FixedThreadPoolBuilder0.setQueueSize(919);
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_FixedThreadPoolBuilder0.build();
      assertNotNull(threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = ThreadPoolBuilder.scheduledPool();
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder1 = threadPoolBuilder_ScheduledThreadPoolBuilder0.setThreadNamePrefix("");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = threadPoolBuilder_ScheduledThreadPoolBuilder1.build();
      assertNotNull(scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = ThreadPoolBuilder.cachedPool();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setThreadNamePrefix("IPz^KN'}3");
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_CachedThreadPoolBuilder1.build();
      assertNotNull(threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreadPoolBuilder threadPoolBuilder0 = new ThreadPoolBuilder();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setThreadFactory(threadFactory0);
      assertSame(threadPoolBuilder_QueuableCachedThreadPoolBuilder0, threadPoolBuilder_QueuableCachedThreadPoolBuilder1);
  }
}
