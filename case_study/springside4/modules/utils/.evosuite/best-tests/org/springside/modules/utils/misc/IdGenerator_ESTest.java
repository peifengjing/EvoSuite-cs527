/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:50:13 GMT 2017
 */

package org.springside.modules.utils.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.misc.IdGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IdGenerator_ESTest extends IdGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = IdGenerator.randomBase64(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      IdGenerator.randomBase64(46340);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        IdGenerator.randomBase64((-2159));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.misc.IdGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = IdGenerator.randomBase64(4073);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long long0 = IdGenerator.randomLong();
      assertEquals(3707861904843289705L, long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = IdGenerator.uuid2();
      assertEquals("00000000010040008200000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IdGenerator idGenerator0 = new IdGenerator();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = IdGenerator.uuid();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }
}
