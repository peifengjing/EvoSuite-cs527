/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:45:22 GMT 2017
 */

package org.springside.modules.utils.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.TreeTraverser;
import java.io.File;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.springside.modules.utils.io.FileTreeWalker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileTreeWalker_ESTest extends FileTreeWalker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithWildcardFileName((File) null, "DGY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E$8t0!9`1ou", "E$8t0!9`1ou");
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName(mockFile0, "i;;`[a$d6Y{g6tf");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 14
         // i;;`[a$d6Y{g6tf
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName((File) null, "6D:[M@b&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithExtension(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithExtension((File) null, "9dWFE|Vj ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithAntPath((File) null, "Locale must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listAll((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VF#]w@Z6G", "VF#]w@Z6G");
      MockFile.createTempFile("VF#]w@Z6G", "VF#]w@Z6G", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithAntPath(mockFile0, "");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VF#]w@Z6G", "VF#]w@Z6G");
      List<File> list0 = FileTreeWalker.listFileWithAntPath(mockFile0, "");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VF#]w@Z6G", "VF#]w@Z6G");
      List<File> list0 = FileTreeWalker.listFileWithExtension(mockFile0, "");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "qW:");
      List<File> list0 = FileTreeWalker.listFileWithExtension(mockFile1, "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/springside4/modules/utils");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"df9j,ol]?jM&h4n");
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, "\"df9j,ol]?jM&h4n");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("...");
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, "Q5v<@OmF#Tt");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("`$5Ev~&d)", "", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithWildcardFileName(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.WildcardMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("...");
      List<File> list0 = FileTreeWalker.listFileWithRegexFileName(mockFile0, "...");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile(" KLyE@>`I", "", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithRegexFileName(mockFile0, "");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileTreeWalker fileTreeWalker0 = new FileTreeWalker();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeTraverser<File> treeTraverser0 = FileTreeWalker.fileTreeTraverser();
      assertNotNull(treeTraverser0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      List<File> list0 = FileTreeWalker.listFileWithExtension(mockFile0, (String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      List<File> list0 = FileTreeWalker.listAll(mockFile0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, (String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      List<File> list0 = FileTreeWalker.listFile(mockFile0);
      assertTrue(list0.isEmpty());
  }
}
