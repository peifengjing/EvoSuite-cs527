/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Oct 14 20:40:07 GMT 2017
 */

package org.springside.modules.utils.collection;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SetUtil_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.springside.modules.utils.collection.SetUtil"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SetUtil_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.base.Joiner$1",
      "com.google.common.collect.Sets$CartesianSet",
      "com.google.common.base.Joiner$2",
      "com.google.common.collect.Sets$SubSet",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableEnumMap",
      "com.google.common.collect.Collections2",
      "com.google.common.base.JdkPattern",
      "com.google.common.collect.PeekingIterator",
      "org.apache.commons.lang3.StringUtils",
      "com.google.common.collect.Sets$FilteredSet",
      "com.google.common.collect.ImmutableEnumSet",
      "com.google.common.collect.ForwardingNavigableSet",
      "com.google.common.math.IntMath",
      "com.google.common.collect.Sets$2",
      "com.google.common.collect.Sets$3",
      "org.springside.modules.utils.collection.type.ConcurrentHashSet",
      "com.google.common.collect.Sets$1",
      "com.google.common.base.Converter",
      "com.google.common.collect.Iterators$6",
      "com.google.common.collect.BiMap",
      "com.google.common.collect.AbstractIterator$1",
      "com.google.common.collect.Maps$6",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.base.Function",
      "com.google.common.collect.ImmutableMap",
      "com.google.common.collect.AbstractIndexedListIterator",
      "org.apache.commons.lang3.JavaVersion",
      "com.google.common.collect.Range",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.collect.Iterators$1",
      "com.google.common.collect.MultitransformedIterator",
      "com.google.common.collect.Iterators$2",
      "com.google.common.base.Predicates$NotPredicate",
      "com.google.common.collect.Iterators$3",
      "com.google.common.collect.Sets$DescendingSet",
      "com.google.common.collect.Sets",
      "com.google.common.collect.SortedMapDifference",
      "com.google.common.primitives.Ints$IntConverter",
      "com.google.common.base.CommonPattern",
      "com.google.common.collect.Iterators$5",
      "com.google.common.collect.Iterators$10",
      "com.google.common.collect.AbstractIterator$State",
      "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
      "com.google.common.collect.Iterators$12",
      "org.springside.modules.utils.base.Platforms",
      "com.google.common.collect.Iterators$11",
      "com.google.common.collect.ForwardingSet",
      "com.google.common.collect.ForwardingSortedSet",
      "com.google.common.base.Predicate",
      "com.google.common.collect.Sets$PowerSet",
      "com.google.common.base.Joiner",
      "com.google.common.collect.Iterators$ConcatenatedIterator",
      "com.google.common.collect.ForwardingObject",
      "com.google.common.collect.Multiset",
      "com.google.common.collect.Sets$SetView",
      "com.google.common.collect.Sets$4$1",
      "com.google.common.collect.Collections2$FilteredCollection",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.base.Predicates",
      "com.google.common.collect.ForwardingCollection",
      "com.google.common.collect.ConsumingQueueIterator",
      "org.springside.modules.utils.collection.MapUtil",
      "com.google.common.collect.Sets$4",
      "com.google.common.collect.Maps$BiMapConverter",
      "org.apache.commons.lang3.SystemUtils",
      "com.google.common.collect.AbstractIterator",
      "com.google.common.base.Joiner$MapJoiner",
      "com.google.common.collect.Sets$UnmodifiableNavigableSet",
      "com.google.common.collect.Sets$FilteredNavigableSet",
      "com.google.common.collect.Maps",
      "com.google.common.primitives.Ints",
      "com.google.common.collect.Iterators$ConcatenatedIterator$1",
      "com.google.common.collect.MapDifference",
      "com.google.common.collect.Maps$EntryTransformer",
      "com.google.common.collect.Sets$FilteredSortedSet",
      "org.apache.commons.lang3.math.NumberUtils",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.Iterators$MergingIterator",
      "org.springside.modules.utils.collection.SetUtil",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.base.Predicates$InPredicate"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.Comparator", false, SetUtil_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SetUtil_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.common.collect.Collections2",
      "com.google.common.collect.Maps",
      "com.google.common.base.Predicates",
      "com.google.common.base.Predicates$InPredicate",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.AbstractIterator$State",
      "com.google.common.collect.AbstractIterator$1",
      "com.google.common.base.Predicates$NotPredicate",
      "org.springside.modules.utils.collection.type.ConcurrentHashSet",
      "org.apache.commons.lang3.math.NumberUtils",
      "org.apache.commons.lang3.JavaVersion",
      "org.apache.commons.lang3.StringUtils",
      "org.apache.commons.lang3.SystemUtils",
      "org.springside.modules.utils.base.Platforms",
      "com.google.common.primitives.Ints",
      "com.google.common.math.IntMath"
    );
  }
}
