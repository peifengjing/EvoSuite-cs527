/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:48:40 GMT 2017
 */

package org.springside.modules.utils.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.CollectionUtil;
import org.springside.modules.utils.collection.MapUtilTest;
import org.springside.modules.utils.collection.type.Pair;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollectionUtil_ESTest extends CollectionUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add(" yjjT");
      vector0.add("Qf");
      vector0.add("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4247), 7, (-3139)).when(comparator0).compare(any() , any());
      Pair<Object, Object> pair0 = CollectionUtil.minAndMax((Collection<?>) vector0, (Comparator<? super Object>) comparator0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add(" yjjT");
      vector0.add("Qf");
      vector0.add("");
      vector0.add("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 7, 1650, 0).when(comparator0).compare(any() , any());
      Pair<Object, Object> pair0 = CollectionUtil.minAndMax((Collection<?>) vector0, (Comparator<? super Object>) comparator0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add(" yjjT");
      vector0.add("");
      vector0.add("");
      Pair<String, String> pair0 = CollectionUtil.minAndMax((Collection<? extends String>) vector0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add(" yjjT");
      vector0.add("Qf");
      vector0.add("");
      Pair<String, String> pair0 = CollectionUtil.minAndMax((Collection<? extends String>) vector0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<MapUtilTest.EnumA> stack0 = new Stack<MapUtilTest.EnumA>();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.C;
      stack0.add(mapUtilTest_EnumA0);
      stack0.add(mapUtilTest_EnumA0);
      MapUtilTest.EnumA mapUtilTest_EnumA1 = CollectionUtil.getLast((Collection<MapUtilTest.EnumA>) stack0);
      assertEquals(MapUtilTest.EnumA.C, mapUtilTest_EnumA1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<MapUtilTest.EnumA> linkedList0 = new LinkedList<MapUtilTest.EnumA>();
      Comparator<MapUtilTest.EnumA> comparator0 = (Comparator<MapUtilTest.EnumA>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<MapUtilTest.EnumA> list0 = CollectionUtil.topN((Iterable<MapUtilTest.EnumA>) linkedList0, 650, (Comparator<? super MapUtilTest.EnumA>) comparator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.addElement((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = CollectionUtil.min((Collection<?>) stack0, (Comparator<? super Object>) comparator0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<MapUtilTest.EnumA> stack0 = new Stack<MapUtilTest.EnumA>();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.B;
      stack0.add(mapUtilTest_EnumA0);
      MapUtilTest.EnumA mapUtilTest_EnumA1 = CollectionUtil.min((Collection<? extends MapUtilTest.EnumA>) stack0, (Comparator<? super MapUtilTest.EnumA>) null);
      assertSame(mapUtilTest_EnumA1, mapUtilTest_EnumA0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<MapUtilTest.EnumA> stack0 = new Stack<MapUtilTest.EnumA>();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.B;
      stack0.add(mapUtilTest_EnumA0);
      MapUtilTest.EnumA mapUtilTest_EnumA1 = CollectionUtil.min((Collection<? extends MapUtilTest.EnumA>) stack0);
      assertEquals(MapUtilTest.EnumA.B, mapUtilTest_EnumA1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Locale> vector0 = new Vector<Locale>();
      vector0.add((Locale) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale locale0 = CollectionUtil.max((Collection<? extends Locale>) vector0, (Comparator<? super Locale>) comparator0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("-");
      Object object0 = CollectionUtil.max((Collection<?>) priorityQueue0, (Comparator<? super Object>) null);
      assertEquals("-", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("0/qEi&:_)Z:");
      String string0 = CollectionUtil.max((Collection<? extends String>) arrayList0);
      assertEquals("0/qEi&:_)Z:", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<MapUtilTest.EnumA> stack0 = new Stack<MapUtilTest.EnumA>();
      HashSet<MapUtilTest.EnumA> hashSet0 = new HashSet<MapUtilTest.EnumA>(stack0);
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.B;
      stack0.add(mapUtilTest_EnumA0);
      boolean boolean0 = CollectionUtil.elementsEqual(hashSet0, stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) null, 0, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue<MapUtilTest.EnumA> priorityQueue0 = new PriorityQueue<MapUtilTest.EnumA>((Comparator<? super MapUtilTest.EnumA>) null);
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<MapUtilTest.EnumA>) priorityQueue0, 88, (Comparator<? super MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<MapUtilTest.EnumA>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<String>) arrayDeque0, (-2263));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -2263
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends Locale.LanguageRange>) stack0, (Comparator<? super Locale.LanguageRange>) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<MapUtilTest.EnumA> stack0 = new Stack<MapUtilTest.EnumA>();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.C;
      stack0.add(mapUtilTest_EnumA0);
      stack0.add(mapUtilTest_EnumA0);
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends MapUtilTest.EnumA>) stack0, (Comparator<? super MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.CollectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(stack0);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<String> list0 = CollectionUtil.bottomN((Iterable<String>) serviceLoader0, 2010, (Comparator<? super String>) comparator0);
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.CollectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<MapUtilTest.EnumA> linkedHashSet0 = new LinkedHashSet<MapUtilTest.EnumA>(0);
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.C;
      linkedHashSet0.add(mapUtilTest_EnumA0);
      Comparator<MapUtilTest.EnumA> comparator0 = (Comparator<MapUtilTest.EnumA>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<MapUtilTest.EnumA> list0 = CollectionUtil.bottomN((Iterable<MapUtilTest.EnumA>) linkedHashSet0, 0, (Comparator<? super MapUtilTest.EnumA>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends MapUtilTest.EnumA>) list0, (Comparator<? super MapUtilTest.EnumA>) comparator1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Integer>) null, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashSet<MapUtilTest.EnumA> hashSet0 = new HashSet<MapUtilTest.EnumA>(0);
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.A;
      hashSet0.add(mapUtilTest_EnumA0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<MapUtilTest.EnumA> list0 = CollectionUtil.bottomN((Iterable<MapUtilTest.EnumA>) hashSet0, 0, (Comparator<? super MapUtilTest.EnumA>) comparator0);
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends MapUtilTest.EnumA>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PriorityQueue<MapUtilTest.EnumA> priorityQueue0 = new PriorityQueue<MapUtilTest.EnumA>(895);
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.A;
      priorityQueue0.add(mapUtilTest_EnumA0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<MapUtilTest.EnumA> list0 = CollectionUtil.bottomN((Iterable<MapUtilTest.EnumA>) priorityQueue0, 0, (Comparator<? super MapUtilTest.EnumA>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends MapUtilTest.EnumA>) list0, (Comparator<? super MapUtilTest.EnumA>) comparator1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<?>) null, (Comparator<? super Object>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("");
      List<String> list0 = CollectionUtil.bottomN((Iterable<String>) priorityQueue0, 0);
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<List<String>> stack0 = new Stack<List<String>>();
      List<List<String>> list0 = stack0.subList(0, 0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      stack0.add((List<String>) arrayList0);
      // Undeclared exception!
      try { 
        CollectionUtil.elementsEqual(list0, list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.elementsEqual((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<MapUtilTest.EnumA> comparator0 = (Comparator<MapUtilTest.EnumA>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<MapUtilTest.EnumA>) null, 0, (Comparator<? super MapUtilTest.EnumA>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.B;
      EnumSet<MapUtilTest.EnumA> enumSet0 = EnumSet.of(mapUtilTest_EnumA0, mapUtilTest_EnumA0, mapUtilTest_EnumA0, mapUtilTest_EnumA0);
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<MapUtilTest.EnumA>) enumSet0, 720, (Comparator<? super MapUtilTest.EnumA>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<MapUtilTest.EnumA> class0 = MapUtilTest.EnumA.class;
      ServiceLoader<MapUtilTest.EnumA> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<MapUtilTest.EnumA>) serviceLoader0, (-529), (Comparator<? super MapUtilTest.EnumA>) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -529
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) null, (-1843));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) hashSet0, (-921210296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -921210296
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = CollectionUtil.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashSet<MapUtilTest.EnumA> hashSet0 = new HashSet<MapUtilTest.EnumA>(0);
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.A;
      hashSet0.add(mapUtilTest_EnumA0);
      boolean boolean0 = CollectionUtil.isEmpty(hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      boolean boolean0 = CollectionUtil.isEmpty(stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      vector0.add("");
      Pair<String, String> pair0 = CollectionUtil.minAndMax((Collection<? extends String>) vector0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayDeque<MapUtilTest.EnumA> arrayDeque0 = new ArrayDeque<MapUtilTest.EnumA>();
      MapUtilTest.EnumA mapUtilTest_EnumA0 = MapUtilTest.EnumA.B;
      arrayDeque0.add(mapUtilTest_EnumA0);
      MapUtilTest.EnumA mapUtilTest_EnumA1 = CollectionUtil.getLast((Collection<MapUtilTest.EnumA>) arrayDeque0);
      assertSame(mapUtilTest_EnumA1, mapUtilTest_EnumA0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Locale locale0 = Locale.JAPANESE;
      priorityQueue0.add(locale0);
      Locale locale1 = (Locale)CollectionUtil.getFirst((Collection<Object>) priorityQueue0);
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("-");
      boolean boolean0 = CollectionUtil.isNotEmpty(priorityQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      boolean boolean0 = CollectionUtil.isNotEmpty(priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = CollectionUtil.isNotEmpty((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      String string0 = CollectionUtil.getFirst((Collection<String>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = CollectionUtil.getFirst((Collection<String>) linkedList0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = CollectionUtil.getLast((Collection<Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashSet<MapUtilTest.EnumA> hashSet0 = new HashSet<MapUtilTest.EnumA>(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<MapUtilTest.EnumA> list0 = CollectionUtil.bottomN((Iterable<MapUtilTest.EnumA>) hashSet0, 0, (Comparator<? super MapUtilTest.EnumA>) comparator0);
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends MapUtilTest.EnumA>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<MapUtilTest.EnumA> class0 = MapUtilTest.EnumA.class;
      EnumSet<MapUtilTest.EnumA> enumSet0 = EnumSet.allOf(class0);
      List<MapUtilTest.EnumA> list0 = CollectionUtil.topN((Iterable<MapUtilTest.EnumA>) enumSet0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends MapUtilTest.EnumA>) list0, (Comparator<? super MapUtilTest.EnumA>) comparator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector<Locale> vector0 = new Vector<Locale>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends Locale>) vector0, (Comparator<? super Locale>) comparator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CollectionUtil collectionUtil0 = new CollectionUtil();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = CollectionUtil.elementsEqual(arrayList0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<?>) stack0, (Comparator<? super Object>) comparator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Stack<MapUtilTest.EnumA> stack0 = new Stack<MapUtilTest.EnumA>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<MapUtilTest.EnumA>) stack0, (-404), (Comparator<? super MapUtilTest.EnumA>) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -404
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) vector0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }
}
