/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:06:54 GMT 2017
 */

package org.springside.modules.utils.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.springside.modules.utils.concurrent.BasicFutureTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicFuture_ESTest extends BasicFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicFutureTest.MyFuture<Integer> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<Integer>();
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<String>();
      // Undeclared exception!
      try { 
        basicFutureTest_MyFuture1.failed((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.concurrent.BasicFutureTest$MyFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<String>();
      basicFutureTest_MyFuture0.onCancelled();
      basicFutureTest_MyFuture0.onCancelled();
      basicFutureTest_MyFuture0.cancel(false);
      MockException mockException0 = new MockException();
      basicFutureTest_MyFuture0.onFailed(mockException0);
      basicFutureTest_MyFuture0.get();
      basicFutureTest_MyFuture0.get();
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<Object>();
      Object object0 = new Object();
      basicFutureTest_MyFuture1.onCompleted(object0);
      basicFutureTest_MyFuture1.onCancelled();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<String>();
      basicFutureTest_MyFuture0.onCancelled();
      basicFutureTest_MyFuture0.onCancelled();
      basicFutureTest_MyFuture0.cancel(true);
      basicFutureTest_MyFuture0.failed((Exception) null);
      basicFutureTest_MyFuture0.onCompleted("Time unit");
      basicFutureTest_MyFuture0.onCancelled();
      basicFutureTest_MyFuture0.isCancelled();
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<Object>();
      basicFutureTest_MyFuture1.onCancelled();
      basicFutureTest_MyFuture1.onCompleted(basicFutureTest_MyFuture0);
      // Undeclared exception!
      try { 
        basicFutureTest_MyFuture1.onFailed((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.concurrent.BasicFutureTest$MyFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<Object>();
      basicFutureTest_MyFuture0.onCancelled();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      basicFutureTest_MyFuture0.onCancelled();
      try { 
        basicFutureTest_MyFuture0.get((-478L), timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.concurrent.BasicFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<Object>();
      Object object0 = new Object();
      basicFutureTest_MyFuture0.completed(object0);
      basicFutureTest_MyFuture0.get();
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<String>();
      basicFutureTest_MyFuture1.isDone();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<Object>();
      basicFutureTest_MyFuture0.onCancelled();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      basicFutureTest_MyFuture0.cancel(true);
      basicFutureTest_MyFuture0.get(0L, timeUnit0);
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<String>();
      basicFutureTest_MyFuture1.completed("onCancelled");
      basicFutureTest_MyFuture1.onCancelled();
      basicFutureTest_MyFuture1.completed("");
      basicFutureTest_MyFuture1.onCompleted("");
      basicFutureTest_MyFuture0.isDone();
      MockException mockException0 = new MockException();
      basicFutureTest_MyFuture1.onFailed(mockException0);
      Exception exception0 = null;
      basicFutureTest_MyFuture1.failed((Exception) null);
      BasicFutureTest.MyFuture<Integer> basicFutureTest_MyFuture2 = new BasicFutureTest.MyFuture<Integer>();
      basicFutureTest_MyFuture2.isCancelled();
      MockException mockException1 = new MockException((Throwable) null);
      // Undeclared exception!
      try { 
        mockException1.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<String>();
      MockThrowable mockThrowable0 = new MockThrowable("haha");
      MockException mockException0 = new MockException(mockThrowable0);
      basicFutureTest_MyFuture0.failed(mockException0);
      basicFutureTest_MyFuture0.onCancelled();
      BasicFutureTest.MyFuture<Integer> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<Integer>();
      Integer integer0 = new Integer(195);
      basicFutureTest_MyFuture1.completed(integer0);
      basicFutureTest_MyFuture1.onCompleted(integer0);
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture2 = new BasicFutureTest.MyFuture<Object>();
      basicFutureTest_MyFuture2.failed(mockException0);
      mockThrowable0.fillInStackTrace();
      MockThrowable.replacement_getStackTrace(mockException0);
      Integer integer1 = new Integer(195);
      basicFutureTest_MyFuture0.onCompleted("");
      basicFutureTest_MyFuture1.onCompleted(integer1);
      basicFutureTest_MyFuture2.onCancelled();
      boolean boolean0 = false;
      basicFutureTest_MyFuture0.cancel(false);
      Integer integer2 = new Integer((-1));
      basicFutureTest_MyFuture1.onCompleted(integer2);
      basicFutureTest_MyFuture1.failed(mockException0);
      try { 
        basicFutureTest_MyFuture0.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: haha
         //
         verifyException("org.springside.modules.utils.concurrent.BasicFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<String>();
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<Object>();
      MockException mockException0 = new MockException();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]&zlch2xpUApVxnhL");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "]&zlch2xpUApVxnhL";
      objectArray0[2] = (Object) mockException0;
      objectArray0[3] = (Object) basicFutureTest_MyFuture1;
      objectArray0[4] = (Object) basicFutureTest_MyFuture0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("should fail before", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockException0.printStackTrace((PrintWriter) mockPrintWriter1);
      basicFutureTest_MyFuture1.onFailed(mockException0);
      basicFutureTest_MyFuture1.onCancelled();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<Object>();
      basicFutureTest_MyFuture0.onCompleted("");
      basicFutureTest_MyFuture0.onCompleted("");
      basicFutureTest_MyFuture0.isDone();
      BasicFutureTest.MyFuture<String> basicFutureTest_MyFuture1 = new BasicFutureTest.MyFuture<String>();
      basicFutureTest_MyFuture1.isDone();
      BasicFutureTest.MyFuture<Integer> basicFutureTest_MyFuture2 = new BasicFutureTest.MyFuture<Integer>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      try { 
        basicFutureTest_MyFuture2.get(0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.concurrent.BasicFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicFutureTest.MyFuture<Object> basicFutureTest_MyFuture0 = new BasicFutureTest.MyFuture<Object>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = basicFutureTest_MyFuture0.completed(integer0);
      assertTrue(basicFutureTest_MyFuture0.isDone());
      assertTrue(boolean0);
  }
}
