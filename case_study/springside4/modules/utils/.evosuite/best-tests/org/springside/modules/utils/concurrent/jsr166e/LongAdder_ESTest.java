/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 20:00:49 GMT 2017
 */

package org.springside.modules.utils.concurrent.jsr166e;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.concurrent.jsr166e.LongAdder;
import org.springside.modules.utils.concurrent.jsr166e.Striped64;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LongAdder_ESTest extends LongAdder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.base = 232L;
      longAdder0.decrement();
      long long0 = longAdder0.sumThenReset();
      assertEquals((byte)0, longAdder0.byteValue());
      assertEquals(231L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[20];
      longAdder0.retryUpdate(594L, intArray0, true);
      longAdder0.increment();
      float float0 = longAdder0.floatValue();
      assertEquals(595, longAdder0.intValue());
      assertEquals(595.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 232L;
      long long0 = longAdder0.sumThenReset();
      assertEquals(0L, longAdder0.longValue());
      assertEquals(232L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      long long0 = longAdder0.sum();
      assertEquals((-1L), longAdder0.longValue());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      long long0 = longAdder0.longValue();
      assertEquals((-1L), longAdder0.sum());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 232L;
      int int0 = longAdder0.intValue();
      assertEquals(232.0F, longAdder0.floatValue(), 0.01F);
      assertEquals(232, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      int int0 = longAdder0.intValue();
      assertEquals((-1L), longAdder0.sum());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn(594L, 0);
      assertEquals(594L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn((-1L), (-1L));
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[20];
      longAdder0.retryUpdate(594L, intArray0, true);
      float float0 = longAdder0.floatValue();
      assertEquals((byte)82, longAdder0.byteValue());
      assertEquals(594.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      float float0 = longAdder0.floatValue();
      assertEquals((short) (-1), longAdder0.shortValue());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.casBusy();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      longAdder0.cells = striped64_CellArray0;
      // Undeclared exception!
      longAdder0.decrement();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.sum();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[7];
      longAdder0.retryUpdate(1L, intArray0, false);
      longAdder0.add(1L);
      assertEquals((byte)2, longAdder0.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.retryUpdate(1L, (int[]) null, false);
      longAdder0.add(1L);
      assertEquals((byte)2, longAdder0.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.add(45L);
      double double0 = longAdder0.doubleValue();
      assertEquals("45", longAdder0.toString());
      assertEquals(45.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.add(0L);
      assertEquals(0.0F, longAdder0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.sumThenReset();
      assertEquals((short)0, longAdder0.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.retryUpdate(1L, (int[]) null, false);
      long long0 = longAdder0.sum();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.retryUpdate(1L, (int[]) null, false);
      longAdder0.decrement();
      assertEquals(0.0, longAdder0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.decrement();
      assertEquals((-1L), longAdder0.sum());
      
      long long0 = longAdder0.sumThenReset();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      float float0 = longAdder0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int int0 = longAdder0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      String string0 = longAdder0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.reset();
      assertEquals(0.0, longAdder0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      double double0 = longAdder0.doubleValue();
      assertEquals((-1L), longAdder0.sum());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      double double0 = longAdder0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.increment();
      long long0 = longAdder0.longValue();
      assertEquals(1, longAdder0.intValue());
      assertEquals(1L, long0);
  }
}
