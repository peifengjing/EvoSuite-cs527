/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:59:10 GMT 2017
 */

package edu.illinois.starts.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.illinois.starts.asm.AnnotationVisitor;
import edu.illinois.starts.asm.Attribute;
import edu.illinois.starts.asm.ByteVector;
import edu.illinois.starts.asm.ClassReader;
import edu.illinois.starts.asm.ClassWriter;
import edu.illinois.starts.asm.Frame;
import edu.illinois.starts.asm.Handle;
import edu.illinois.starts.asm.Item;
import edu.illinois.starts.asm.Label;
import edu.illinois.starts.asm.MethodVisitor;
import edu.illinois.starts.asm.MethodWriter;
import edu.illinois.starts.asm.TypePath;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      assertEquals(2, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      String string0 = typePath0.toString();
      assertEquals(2, typePath0.getLength());
      assertEquals("331", string0);
      assertNotNull(string0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      methodWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      TypePath typePath1 = TypePath.fromString("aXBM,al");
      assertFalse(typePath1.equals((Object)typePath0));
      assertEquals(0, typePath1.getLength());
      assertNotNull(typePath1);
      assertNotSame(typePath1, typePath0);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "nA33M=L~d{H1\"?d";
      methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(0, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("nA33M=L~d{H1\"?d");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(2, "WAmC");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "j2n-i+v\"]!=");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(1, (-4851));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(2);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putLong(980L);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dTq~<ra", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitParameter("RuntimeVisibleParameterAnnotations", 30);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("zzhG");
      assertEquals(0, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      methodWriter0.visitVarInsn(3, 30);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("UdpPI", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      label1.line = (-1229);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      Label[] labelArray0 = new Label[0];
      int[] intArray0 = new int[8];
      intArray0[0] = 73;
      intArray0[1] = (int) (byte) (-103);
      intArray0[2] = (int) (byte) (-103);
      intArray0[3] = (-1229);
      intArray0[4] = 1;
      intArray0[5] = 16777218;
      intArray0[6] = (-1229);
      intArray0[7] = 16777218;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitLocalVariableAnnotation((byte) (-98), (TypePath) null, labelArray0, labelArray0, intArray0, "G8_A %", false);
      assertArrayEquals(new int[] {73, (-103), (-103), (-1229), 1, 16777218, (-1229), 16777218}, intArray0);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-98);
      boolean boolean0 = label1.resolve(methodWriter0, (byte) (-103), byteArray0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-103), (byte) (-98)}, byteArray0);
      assertFalse(boolean0);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray1 = new Label[0];
      assertFalse(labelArray1.equals((Object)labelArray0));
      
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-1885));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1885
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      int int0 = classWriter0.newUTF8("LineNumberTable");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LineNumberTable");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitParameter("S+2OQ.cS ", 59);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitParameter("yb+}>RehBT", (-379));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn((-379), "LineNumberTable", "WtsG5b}-*2l", "InnerClasses", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(59, (-379), stringArray0, (-379), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = TypePath.fromString("LineNumberTable");
      assertEquals(0, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitTryCatchAnnotation(1, typePath0, "F.B;j@{oeJ7'i`", false);
      assertEquals(0, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn((-2), 188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5e8X)IX,O+1#4q";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLdcInsn("G8_A %");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("5e8X)IX,O+1#4q", (byte) (-98));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitIincInsn(2299, 13);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5e8X)IX,O+1#4q";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      classWriter0.version = 262144;
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("5e8X)IX,O+1#4q", (byte) (-98));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      // Undeclared exception!
      try { 
        methodWriter0.visitIincInsn((byte) (-98), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -98
         //
         verifyException("edu.illinois.starts.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code");
      assertFalse(boolean0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTableSwitchInsn(1, 166, label0, labelArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("G8_A %");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTryCatchBlock(label1, label1, label1, "G8_A %");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 128;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(40, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation((-16776961), (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putLong((byte) (-103));
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dTq~<ra", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFieldInsn(185, "G8_A %", "L", "L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("xJA.M~=)#V;]?J,{`[A", (-1451));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(3, "LineNumberTable", "LineNumberTable", "1})Cfz#gEZYl2csvs");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(68, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code");
      assertFalse(boolean0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTableSwitchInsn(1, 166, label0, labelArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("G8_A %");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, label1, (Label) null, "G8_A %");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code");
      assertFalse(boolean0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("G8_A %");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      TypePath typePath0 = TypePath.fromString("G8_A %");
      assertEquals(1, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitTypeAnnotation((-1722809877), typePath0, "RuntimeVisibleAnnotations", false);
      assertEquals(1, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTableSwitchInsn(1, 166, label0, labelArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn((-255), "5e8X)IX,O+1#4q", "G8_A %", "F:iiL1");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "G8_A %";
      methodWriter0.visitFrame(2299, (-1007), stringArray0, 2, objectArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code");
      assertFalse(boolean0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTableSwitchInsn(1, 166, label0, labelArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, label1, (Label) null, "G8_A %");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      Label[] labelArray0 = new Label[6];
      labelArray0[0] = label0;
      labelArray0[1] = label1;
      labelArray0[2] = label1;
      labelArray0[3] = label1;
      labelArray0[4] = label0;
      labelArray0[5] = label0;
      methodWriter0.visitTableSwitchInsn((-1885), 2, label1, labelArray0);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray1 = new Label[0];
      assertFalse(labelArray1.equals((Object)labelArray0));
      
      int int0 = methodWriter0.getSize();
      assertEquals(100, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), (-19));
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      ByteVector byteVector3 = byteVector2.putLong(980L);
      assertNotNull(byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector2);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dTq~<ra", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitParameter("RuntimeVisilearameternnotations", 100);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn((-2058368157), 100);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 128;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotation("Signature", true);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(52, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777257);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 73);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dTq~<ra", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitParameter("5e8X)IX,O+1#4q", 30);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn((-2058368141), 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2058368141
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777257);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte) (-98), "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(48, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Handle handle0 = new Handle(2023, "G8_A %", "LocalVariableTable", "XhS>8b2[6");
      assertEquals("XhS>8b2[6", handle0.getDesc());
      assertEquals("LocalVariableTable", handle0.getName());
      assertEquals("G8_A %", handle0.getOwner());
      assertEquals(2023, handle0.getTag());
      assertNotNull(handle0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "G8_A %";
      objectArray0[1] = (Object) "XhS>8b2[6";
      // Undeclared exception!
      try { 
        methodWriter0.visitInvokeDynamicInsn("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", handle0, objectArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code");
      assertFalse(boolean0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTableSwitchInsn(1, 166, label0, labelArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("G8_A %");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, label1, (Label) null, "G8_A %");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 128;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(40, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      int int1 = methodWriter0.getSize();
      assertFalse(int1 == int0);
      assertEquals(51, int1);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[16];
      intArray0[0] = 4379;
      intArray0[1] = 4379;
      intArray0[2] = 0;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 4379, 4379);
      assertEquals(0, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = 1317;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.version = 128;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signatue", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("Signatue", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signatue", 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(0, 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(40, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(177);
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        MethodWriter.readShort((byte[]) null, 292552704);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5e8X)IX,O+1#4q";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "5e8X)IX,O+1#4q";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte)109, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(2, 13);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTableSwitchInsn(90, 13, label0, labelArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("xJA.M~=)#V;]?J,{`[A", (-1451));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(62, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[3];
      methodWriter0.visitIincInsn(1, (-543));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(76, labelArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      label1.successor = label0;
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      label0.status = 16777218;
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(16777218, 2022);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(185, "pE[RG$}{<}B4+?", "AnnotationDefault", "C_", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber((-1885), label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(2299, 13);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      ByteVector byteVector2 = byteVector1.put11(1, (byte) (-103));
      assertNotNull(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      
      ByteVector byteVector3 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector3);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      
      methodWriter0.visitLocalVariable("Class file too large!", "LocalVariableTable", ")V", label0, label0, 19);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber((-1885), label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      label0.info = (Object) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), (-41));
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put11(1, (byte) (-103));
      assertNotNull(byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      
      ByteVector byteVector3 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector3);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      
      methodWriter0.visitLocalVariable("Class file too large!", "LocalVariableTable", "LocalVariableTable", label0, label0, 19);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      label1.successor = label0;
      methodWriter0.visitLineNumber(2299, label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(16777218, 2022);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(2, (-1643563951));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn(integer0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(0, 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(42, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        MethodWriter.readShort((byte[]) null, 292552704);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777204);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(2299, 13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = new ByteVector(73);
      assertFalse(byteVector2.equals((Object)byteVector0));
      assertFalse(byteVector2.equals((Object)byteVector1));
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector1.put12((-1885), 19);
      assertFalse(byteVector0.equals((Object)byteVector2));
      assertFalse(byteVector1.equals((Object)byteVector2));
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertNotNull(byteVector3);
      assertSame(byteVector0, byteVector3);
      assertNotSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertNotSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector3);
      assertNotSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      
      methodWriter0.visitLookupSwitchInsn(label1, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      Label label2 = label1.next;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, label0, (String) null);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(2299, 13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put11(1, (byte) (-103));
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      ByteVector byteVector3 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(955, "DMR", (String) null, "'Mi8z^)&r!PJ3Tq9 K", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(248);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "of3y(z 6fCU[bQd*l";
      stringArray0[3] = "";
      stringArray0[4] = "of3y(z 6fCU[bQd*l";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "of3y(z 6fCU[bQd*l", "", "", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Handle handle0 = new Handle(248, "", "", "");
      assertEquals(248, handle0.getTag());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertEquals("", handle0.getDesc());
      assertNotNull(handle0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      methodWriter0.exceptionCount = (-3690);
      methodWriter0.signature = "";
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.classReaderOffset = 1;
      objectArray0[1] = (Object) "";
      methodWriter0.visitInvokeDynamicInsn("", "", handle0, objectArray0);
      assertEquals(248, handle0.getTag());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertEquals("", handle0.getDesc());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(6, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(1, "", "", "StackMapTable", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("of3y(z 6fCU[bQd*l", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertTrue(int1 == int0);
      assertEquals(6, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable("", "BootstrapMethods", "@T", (Label) null, (Label) null, 248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      int int0 = classWriter0.newUTF8("LineNumberTable");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn((-379), "LineNumberTable", "WtsG5b}-*2l", "InnerClasses", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable("?whf}k`qesS}%", "F53m", (String) null, (Label) null, (Label) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777257);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      TypePath typePath0 = new TypePath((byte[]) null, 185);
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitTryCatchAnnotation(16777257, typePath0, "RuntimeInvisibleParameterAnnotations", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2616));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RuntimeVisibleAnnotations";
      stringArray0[1] = "edu.illinois.starts.asm.ClassWriter";
      stringArray0[2] = "RuntimeVisibleAnnotations";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "x078]c*,0";
      stringArray0[5] = "RuntimeVisibleAnnotations";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2359, "x078]c*,0", "x078]c*,0", "RuntimeVisibleAnnotations", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = new TypePath((byte[]) null, 2359);
      assertNotNull(typePath0);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsnAnnotation(2, typePath0, "edu.illinois.starts.asm.ClassWriter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_**5a$NU";
      stringArray0[1] = "_**5a$NU";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleTypeAnnotations", "RuntimeVisibleTypeAnnotations", "_**5a$NU", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLocalVariable("RuntimeVisibleTypeAnnotations", "RuntimeVisibleTypeAnnotations", "_**5a$NU", label1, label0, (-235));
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(2, 378);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)51;
      short short0 = MethodWriter.readShort(byteArray0, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)44, (byte)3, (byte)51}, byteArray0);
      assertEquals((short)11267, short0);
      
      ByteVector byteVector0 = classWriter0.bootstrapMethods;
      assertNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLineNumber((-103), label0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter((-2616));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RuntimeVisibleAnnotations";
      stringArray0[1] = "edu.illinois.starts.asm.ClassWriter";
      stringArray0[2] = "RuntimeVisibleAnnotations";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "x078]c*,0";
      stringArray0[5] = "RuntimeVisibleAnnotations";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2359, "x078]c*,0", "x078]c*,0", "RuntimeVisibleAnnotations", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = new TypePath((byte[]) null, 2359);
      assertNotNull(typePath0);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.exceptionCount = (-4606);
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(16, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RuntimeVisibleTypeAnnotations";
      classWriter0.version = 2739;
      stringArray0[1] = "_**5a$NU";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleTypeAnnotations", "Ghort", "_**5a$NU", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLocalVariable("Ghort", "Ghort", "_**5a$NU", label1, label0, (-253));
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-1047), 11, stringArray0, 1086, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = label1.toString();
      assertEquals("L14", string0);
      assertNotNull(string0);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1047);
      intArray0[1] = 1086;
      intArray0[2] = (-253);
      label1.info = (Object) 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      Label[] labelArray0 = new Label[7];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      Label label2 = label0.successor;
      assertNull(label2);
      
      labelArray0[2] = null;
      labelArray0[3] = label0;
      labelArray0[4] = label1;
      labelArray0[5] = label1;
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1086, 4, labelArray0, 1499, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2341, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-1885));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1885
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      assertEquals(2, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      String string0 = typePath0.toString();
      assertEquals(2, typePath0.getLength());
      assertEquals("331", string0);
      assertNotNull(string0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "nA33M=L~d{H1\"?d";
      methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(0, 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      methodWriter0.visitFrame(3, (-16776983), objectArray1, 115, labelArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      assertEquals(2, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      String string0 = typePath0.toString();
      assertEquals(2, typePath0.getLength());
      assertEquals("331", string0);
      assertNotNull(string0);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      methodWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "nA33M=L~d{H1\"?d";
      methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(0, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(2, 2336, stringArray0, 1038, objectArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2616));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RuntimeVisibleAnnotations";
      stringArray0[1] = "edu.illinois.starts.asm.ClassWriter";
      stringArray0[2] = "RuntimeVisibleAnnotations";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "x078]c*,0";
      stringArray0[5] = "RuntimeVisibleAnnotations";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2359, "x078]c*,0", "x078]c*,0", "RuntimeVisibleAnnotations", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = new TypePath((byte[]) null, 2359);
      assertNotNull(typePath0);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitTypeAnnotation(2, typePath0, "java/lang/invoke/MethodType", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_**5a$NU";
      stringArray0[1] = "_**5a$NU";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleTypeAnnotations", "short", "_**5a$NU", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("RuntimeVisibleTypeAnnotations", "FNh'K", "_**5a$NU", label0, label0, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLocalVariable("short", "short", "_**5a$NU", label1, label0, (-235));
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "float";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-103);
      TypePath typePath0 = new TypePath(byteArray0, (-274));
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-103), (byte) (-23), (byte) (-98), (byte) (-103), (byte) (-103), (byte) (-103), (byte) (-103)}, byteArray0);
      assertNotNull(typePath0);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitTryCatchAnnotation(2299, typePath0, "G8_A %", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -274
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_**5a$NU";
      stringArray0[1] = "_**5a$NU";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleTypeAnnotations", "short", "_**5a$NU", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-13);
      boolean boolean0 = label1.resolve(methodWriter0, 1, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)125, (byte) (-128), (byte) (-13)}, byteArray0);
      assertFalse(boolean0);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLocalVariable("short", "short", "_**5a$NU", label1, label0, (-235));
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)125;
      byteArray0[0] = (byte) (-21);
      byteArray0[5] = (byte) (-21);
      byteArray0[7] = (byte)0;
      int int0 = MethodWriter.readUnsignedShort(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)0, (byte)0, (byte)125, (byte)0, (byte) (-21), (byte)0, (byte)0}, byteArray0);
      assertEquals(60160, int0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("edu.illinois.starts.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777257);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      int[] intArray0 = new int[13];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 19);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      methodWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777218, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMultiANewArrayInsn((String) null, 3728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      assertEquals(2, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      String string0 = typePath0.toString();
      assertEquals(2, typePath0.getLength());
      assertEquals("331", string0);
      assertNotNull(string0);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      methodWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "nA33M=L~d{H1\"?d";
      methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(0, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(1, "331");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLineNumber(2, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      assertEquals(2, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      String string0 = typePath0.toString();
      assertEquals(2, typePath0.getLength());
      assertEquals("331", string0);
      assertNotNull(string0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "nA33M=L~d{H1\"?d";
      methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(0, 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(248);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "of3y(z 6fCU[bQd*l";
      stringArray0[3] = "";
      stringArray0[4] = "of3y(z 6fCU[bQd*l";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "of3y(z 6fCU[bQd*l", "", "", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Handle handle0 = new Handle(248, "", "", "");
      assertEquals("", handle0.getName());
      assertEquals("", handle0.getOwner());
      assertEquals(248, handle0.getTag());
      assertEquals("", handle0.getDesc());
      assertNotNull(handle0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      methodWriter0.signature = "";
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      objectArray0[1] = (Object) "";
      methodWriter0.visitParameter("", 248);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInvokeDynamicInsn("", "", handle0, objectArray0);
      assertEquals("", handle0.getName());
      assertEquals("", handle0.getOwner());
      assertEquals(248, handle0.getTag());
      assertEquals("", handle0.getDesc());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(74, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(1, "", "", "StackMapTable", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("of3y(z 6fCU[bQd*l", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-2251), "LineNumberTable", "", "?=e;4\"f:vd{", stringArray0);
      assertFalse(methodVisitor0.equals((Object)methodWriter0));
      assertNotNull(methodVisitor0);
      assertNotSame(methodVisitor0, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable("", "BootstrapMethods", "@T", (Label) null, (Label) null, 248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(16777218, 2022);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(76, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = MethodWriter.getNewOffset(intArray0, intArray0, (byte) (-98), 141);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(239, int1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-98);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-103), (byte) (-105), (byte)109, (byte) (-98)}, byteArray0);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      TypePath typePath0 = new TypePath(byteArray0, (byte) (-103));
      assertArrayEquals(new byte[] {(byte)109, (byte) (-103), (byte) (-105), (byte)109, (byte) (-98)}, byteArray0);
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitTypeAnnotation(73, typePath0, "5e8X)IX,O+1#4q", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -103
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(70, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitParameter((String) null, (-2032));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(76);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ak6:tSD!x)";
      stringArray0[1] = "/^J42@aQ))[d,]Py";
      stringArray0[2] = "/^J42@aQ))[d,]Py";
      stringArray0[3] = "ak6:tSD!x)";
      stringArray0[4] = "ak6:tSD!x)";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1920, "/^J42@aQ))[d,]Py", "/^J42@aQ))[d,]Py", "ak6:tSD!x)", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newLong(76);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitTypeAnnotation(76, (TypePath) null, "/^J42@aQ))[d,]Py", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[4];
      labelArray0[0] = null;
      labelArray0[1] = null;
      labelArray0[2] = null;
      labelArray0[3] = null;
      // Undeclared exception!
      try { 
        methodWriter0.visitTableSwitchInsn((-3440), 1, (Label) null, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("m1>6}`lDU'=qZc.-", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = new TypePath((byte[]) null, 2);
      assertNotNull(typePath0);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariableAnnotation((byte)109, typePath0, labelArray0, labelArray0, intArray0, "LocalVariableTable", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      assertEquals(2, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      String string0 = typePath0.toString();
      assertEquals(2, typePath0.getLength());
      assertEquals("331", string0);
      assertNotNull(string0);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, typePath0.getLength());
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "nA33M=L~d{H1\"?d";
      methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(0, 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(113, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2616));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RuntieVishleAnnotatios";
      stringArray0[1] = "edu.illinois.starts.asm.ClassWriter";
      stringArray0[2] = "RuntieVishleAnnotatios";
      stringArray0[3] = "RuntieVishleAnnotatios";
      stringArray0[4] = "x078]c*,0";
      stringArray0[5] = "RuntieVishleAnnotatios";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2359, "x078]c*,0", "x078]c*,0", "RuntieVishleAnnotatios", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("RuntieVishleAnnotatios");
      assertEquals(0, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitTypeAnnotation(2, typePath0, "java/lang/invoke/MethodType", false);
      assertEquals(0, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      
      methodWriter0.visitMultiANewArrayInsn("NWo=uhsbF", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Exceptions", "Exceptions", "vJGWVrN~@xT", (String[]) null, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.successor;
      assertNull(label1);
      
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "dpv\u0006S");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addType("Exceptions");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("vJGWVrN~@xT", 2396);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = new byte[1];
      methodWriter0.visitFrame(2, (-138), (Object[]) null, 0, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitIntInsn(31, (-1174));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@fc7a80d
         //
         verifyException("edu.illinois.starts.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(248);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "of3y(z 6fCU[bQd*l";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "of3y(z 6fCU[bQd*l", "", "", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Handle handle0 = new Handle(248, "", "", "");
      assertEquals("", handle0.getDesc());
      assertEquals(248, handle0.getTag());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertNotNull(handle0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      methodWriter0.signature = "";
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      objectArray0[1] = (Object) "";
      methodWriter0.visitInvokeDynamicInsn("", "", handle0, objectArray0);
      assertEquals("", handle0.getDesc());
      assertEquals(248, handle0.getTag());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(63, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(1, "", "", "StackMapTable", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("of3y(z 6fCU[bQd*l", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newInteger(248);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort((byte[]) null, 248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.version = 128;
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(40, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertFalse(boolean0);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(378, "z$zhG", "", "8nfC#Ak{", false);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        MethodWriter.readShort((byte[]) null, 292552704);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(248);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "of3y(z 6fCU[bQd*l";
      stringArray0[3] = "";
      stringArray0[4] = "of3y(z 6fCU[bQd*l";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "of3y(z 6fCU[bQd*l", "", "", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Handle handle0 = new Handle(248, "", "", "");
      assertEquals("", handle0.getDesc());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertEquals(248, handle0.getTag());
      assertNotNull(handle0);
      
      String string0 = handle0.toString();
      assertEquals("", handle0.getDesc());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertEquals(248, handle0.getTag());
      assertEquals(". (248)", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      methodWriter0.signature = "";
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = handle0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("", handle0.getDesc());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertEquals(248, handle0.getTag());
      assertEquals(". (248)", string1);
      assertNotNull(string1);
      
      objectArray0[1] = (Object) "";
      methodWriter0.visitInvokeDynamicInsn("", "", handle0, objectArray0);
      assertEquals("", handle0.getDesc());
      assertEquals("", handle0.getOwner());
      assertEquals("", handle0.getName());
      assertEquals(248, handle0.getTag());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(63, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(1, "", "", "StackMapTable", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("of3y(z 6fCU[bQd*l", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(268, 248);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable("", "BootstrapMethods", "@T", (Label) null, (Label) null, 248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 128;
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitLineNumber(1960, label0);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitFieldInsn(0, (String) null, "@+eV2:O]yC9gPR#CN", "Signature");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65280);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zQ}Jy/m";
      stringArray0[1] = "qu^F1y'DthM";
      stringArray0[2] = "zrjj-X,3(";
      stringArray0[3] = "qu^F1y'DthM";
      stringArray0[4] = "qu^F1y'DthM";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 65280, "qu^F1y'DthM", "B", "B", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(65280, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(59, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(2308, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 128;
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)125;
      TypePath typePath0 = new TypePath(byteArray0, 170);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)109, (byte) (-17), (byte) (-1), (byte) (-32), (byte) (-16), (byte) (-128), (byte)6, (byte)125}, byteArray0);
      assertNotNull(typePath0);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitInsnAnnotation(100, typePath0, "Signature", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 170
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?6GC+LSfN+v";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "?6GC+LSfN+v";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 73, "?6GC+LSfN+v", "?6GC+LSfN+v", "?6GC+LSfN+v", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[1];
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTableSwitchInsn(1, 166, label0, labelArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("G8_A %");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, label1, (Label) null, "G8_A %");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3300);
      intArray0[1] = 3566;
      intArray0[2] = (-1997066143);
      intArray0[3] = 1960;
      intArray0[4] = 21;
      intArray0[5] = 3980;
      intArray0[6] = 4733;
      intArray0[7] = 187;
      intArray0[8] = 60;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3566;
      // Undeclared exception!
      try { 
        MethodWriter.getNewOffset(intArray0, intArray1, 3566, 1960);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1583);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 83, "AnnotationDefault", "9lLuazu?s3x#{Ots", "ZG5,)R>JIMM}U[*<x{", (String[]) null, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Handle handle0 = new Handle(1, "{wY-09+nUVh=N", (String) null, "yL|bnia\"NDt)+");
      assertEquals("{wY-09+nUVh=N", handle0.getOwner());
      assertEquals(1, handle0.getTag());
      assertEquals("yL|bnia\"NDt)+", handle0.getDesc());
      assertNull(handle0.getName());
      assertNotNull(handle0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInvokeDynamicInsn("AnnotationDefault", "{wY-09+nUVh=N", handle0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Handle", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1885));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn((-103), 16777218);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 18;
      intArray0[1] = 2122;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 460, 2341);
      assertArrayEquals(new int[] {18, 2122, 0}, intArray0);
      assertEquals(4003, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-574), (-301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("edu.illinois.starts.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-416);
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, (-416), (-416));
      assertArrayEquals(new int[] {(-416)}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodWriter.readInt((byte[]) null, (-1282));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2112));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "yL|bnia\"NDt)+";
      stringArray0[1] = "yL|bnia\"NDt)+";
      classWriter0.version = (-2112);
      stringArray0[2] = "yL|bnia\"NDt)+";
      stringArray0[3] = "yL|bnia\"NDt)+";
      stringArray0[4] = "yL|bnia\"NDt)+";
      stringArray0[5] = "yL|bnia\"NDt)+";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2112), "yL|bnia\"NDt)+", "yL|bnia\"NDt)+", "yL|bnia\"NDt)+", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(0, 2, stringArray0, 28, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2345;
      intArray0[1] = 0;
      intArray0[2] = 3821;
      intArray0[3] = 1138;
      intArray0[4] = 1174;
      // Undeclared exception!
      try { 
        MethodWriter.getNewOffset(intArray0, intArray0, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">]$1JlhB|++!,-$@-";
      stringArray0[1] = ";$Gp-u&`M$O";
      stringArray0[2] = ">]$1JlhB|++!,-$@-";
      stringArray0[3] = ";$Gp-u&`M$O";
      stringArray0[4] = ";$Gp-u&`M$O";
      stringArray0[5] = ">]$1JlhB|++!,-$@-";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2839), ">]$1JlhB|++!,-$@-", "Mo'elCOS{", ";$Gp-u&`M$O", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(2, (-1077));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodWriter.getNewOffset((int[]) null, (int[]) null, (-3502), (-3502));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2122);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<init>";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 2, "<init>", "':T", "<init>", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, 3334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3334
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)4;
      // Undeclared exception!
      try { 
        MethodWriter.writeShort(byteArray0, (byte) (-74), (-676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -74
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BfNK,)";
      stringArray0[1] = "BfNK,)";
      stringArray0[2] = "BfNK,)";
      stringArray0[3] = "BfNK,)";
      stringArray0[4] = "BfNK,)";
      stringArray0[5] = "(";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "c#E`ZMUHD{[x", "BfNK,)", "c#E`ZMUHD{[x", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-30);
      short short0 = MethodWriter.readShort(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-80), (byte)4, (byte)67, (byte) (-30)}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        MethodWriter.readInt(byteArray0, (byte) (-88));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -88
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      short short0 = MethodWriter.readShort(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)3, (byte)47, (byte)0, (byte)3, (byte)0}, byteArray0);
      assertEquals((short)815, short0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 1, "", (String) null, "", stringArray0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      int int0 = MethodWriter.readInt(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)68, (byte)0, (byte)0}, byteArray0);
      assertEquals(17408, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5e8X)IX,O+1#4q";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber(16777218, label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitIincInsn(2299, 13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(19);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11(2299, 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12(2, 19);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Label offset position has not been resolved yet";
      stringArray0[1] = null;
      stringArray0[2] = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[4] = null;
      ClassWriter classWriter0 = new ClassWriter(191);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      Attribute attribute0 = new Attribute(stringArray0[2]);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-1);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (byte) (-1), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("edu.illinois.starts.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(156);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 156, "VL;$,f)<K", "VL;$,f)<K", (String) null, (String[]) null, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn(24117248, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("xJA.M~=)#V;]?J,{`[A", (-1451));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(2, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(65, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[3];
      int[] intArray0 = new int[2];
      intArray0[0] = (-301);
      intArray0[1] = (-301);
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {(-301), (-301)}, intArray0);
      
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      methodWriter0.visitTableSwitchInsn((-784), (-4223), label0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = TypePath.fromString("e`&+!oagL");
      assertEquals(0, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariableAnnotation((-4223), typePath0, labelArray0, labelArray0, intArray0, "A7R0]Nu5K|:cq{*bk2", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-301));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LineNumberTable";
      stringArray0[1] = "LineNumberTable";
      stringArray0[2] = "LineNumberTable";
      stringArray0[3] = "LineNumberTable";
      stringArray0[4] = "LineNumberTable";
      stringArray0[5] = "LineNumberTable";
      int int0 = classWriter0.newUTF8("LineNumberTable");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LineNumberTable");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stringArray0[6] = "xJA.M~=)#V;]?J,{`[A";
      stringArray0[7] = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "xJA.M~=)#V;]?J,{`[A", "xJA.M~=)#V;]?J,{`[A", "LineNumberTable", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitParameter("yb+}>RehBT", (-379));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn((-379), "LineNumberTable", "WtsG5b}-*2l", "InnerClasses", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn((-2), 188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.version = 128;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitLocalVariable("`xkWK:dnX", "`xkWK:dnX", "/.%eZSQzK9vd#\"!Hx", label0, label0, 5);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(76, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.version = 128;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(0, (-46));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(0, 76);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitLocalVariable("`EkWK:dnX", "`EkWK:dnX", "/.%eZSQzK9vd#\"!Hx", label0, label0, 5);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(76, int0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = label0.resolve(methodWriter1, 57, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A]'";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A]'";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1161), "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A]'", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      label1.successor = label0;
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[16];
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putLong(988L);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dTq~<ra", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(185, "G8_A]'", "L", "L");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitParameter("RuntimeVisibleParameterAnnotations", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("dTq~<ra");
      assertEquals(0, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariableAnnotation((-1161), typePath0, labelArray0, labelArray0, intArray0, ",=", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(2);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putLong(980L);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dTq~<ra", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(185, "G8_A %", "L", "L");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitParameter("RuntimeVisibleParameterAnnotations", 30);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("zzhG");
      assertEquals(0, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitLocalVariableAnnotation(2299, typePath0, labelArray0, labelArray0, intArray0, ",=", false);
      assertArrayEquals(new int[] {3}, intArray0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(0, typePath0.getLength());
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      
      methodWriter0.visitVarInsn(3, 30);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777257);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 13, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      int int0 = methodWriter0.getSize();
      assertEquals(30, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {0, (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      assertNotNull(byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dTq~GLy<ra", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitParameter("RuntimeVisiblePyrameInrAnnxtatbons", 30);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn((-2058368141), 30);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(1, 1474);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitTypeInsn(16777257, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777178);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      label0.successor = label1;
      label1.line = (-81);
      label1.successor = label0;
      methodWriter0.visitLineNumber((-1885), label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertSame(label0, label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(16777178, 2022);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      TypePath typePath0 = TypePath.fromString("edu.illinois.starts.asm.MethodWriter");
      assertEquals(4, typePath0.getLength());
      assertNotNull(typePath0);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      
      Label[] labelArray1 = new Label[9];
      assertFalse(labelArray1.equals((Object)labelArray0));
      
      labelArray1[0] = label1.successor;
      labelArray1[1] = label1;
      labelArray1[2] = label1.successor;
      labelArray1[3] = label0.successor;
      labelArray1[4] = label1.successor;
      labelArray1[5] = label0.successor;
      labelArray1[6] = label0;
      labelArray1[7] = label1.successor;
      labelArray1[8] = label0.successor;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitLocalVariableAnnotation(2022, typePath0, labelArray0, labelArray1, intArray0, "G8_A %", true);
      assertArrayEquals(new int[] {(-103), (-103)}, intArray0);
      assertFalse(labelArray1.equals((Object)labelArray0));
      assertFalse(labelArray0.equals((Object)labelArray1));
      assertEquals(4, typePath0.getLength());
      assertNotNull(annotationVisitor0);
      assertNotSame(labelArray1, labelArray0);
      assertNotSame(labelArray0, labelArray1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5e8X)IX,O+1#4q";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      methodWriter0.visitLineNumber((-1885), label1);
      methodWriter0.visitMultiANewArrayInsn("5e8X)IX,O+1#4q", (byte) (-98));
      Label[] labelArray0 = new Label[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 2299;
      intArray0[1] = 16777218;
      intArray0[2] = 73;
      intArray0[3] = 2299;
      intArray0[4] = (int) (byte)109;
      intArray0[5] = 16777218;
      intArray0[6] = (int) (byte) (-98);
      intArray0[7] = 2299;
      intArray0[8] = (int) (byte)109;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      methodWriter0.visitIincInsn(2299, 13);
      methodWriter0.visitInsn((-1885));
      TypePath typePath0 = TypePath.fromString("ysa[uzpT[ek-");
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitLocalVariableAnnotation(16777228, typePath0, labelArray0, labelArray0, intArray0, "gU6hyMx1E", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5e8X)IX,O+1#4q";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      int int0 = (-1885);
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      Frame frame0 = new Frame();
      Label label2 = label0.next;
      label1.successor = null;
      methodWriter0.visitMultiANewArrayInsn("5e8X)IX,O+1#4q", (byte) (-98));
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTypeInsn((byte) (-98), "G8_A %");
      methodWriter0.visitTryCatchBlock(label0, label0, (Label) null, "pV3M+1G Dj>bw");
      methodWriter0.visitIincInsn(2299, 13);
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-1885));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777257);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte) (-98), "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, true, false);
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      methodWriter0.visitLineNumber((-1885), label1);
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitAnnotationDefault();
      methodWriter0.getSize();
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      methodWriter0.put(byteVector2);
      methodWriter0.put(byteVector0);
      Handle handle0 = new Handle(2023, "G8_A %", "LocalVariableTable", "XhS>8b2[6");
      Object[] objectArray0 = new Object[2];
      Object object0 = label0.info;
      objectArray0[0] = null;
      objectArray0[1] = (Object) "XhS>8b2[6";
      // Undeclared exception!
      try { 
        methodWriter0.visitInvokeDynamicInsn("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", handle0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("edu.illinois.starts.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ghort";
      stringArray0[1] = "_**5a$NU";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleTypeAnnotations", "Ghort", "_**5a$NU", stringArray0, false, false);
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      methodWriter0.visitLocalVariable("Ghort", "Ghort", "_**5a$NU", label1, label0, (-253));
      methodWriter0.visitFrame((-1047), 11, stringArray0, 1086, stringArray0);
      label1.toString();
      int[] intArray0 = new int[6];
      label0.info = (Object) (-1047);
      intArray0[1] = 1086;
      intArray0[2] = (-253);
      label1.info = (Object) 2;
      intArray0[4] = 2;
      Label[] labelArray0 = new Label[7];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      Label label2 = label0.getFirst();
      labelArray0[2] = label2;
      labelArray0[3] = label0;
      labelArray0[4] = label1;
      labelArray0[5] = label1;
      labelArray0[6] = label0;
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label1, intArray0, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      typePath0.toString();
      methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", false);
      methodWriter0.visitEnd();
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      TypePath.fromString("aXBM,al");
      Label label0 = frame0.owner;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "nA33M=L~d{H1\"?d";
      methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
      methodWriter0.visitIincInsn(0, 0);
      methodWriter0.visitLdcInsn("nA33M=L~d{H1\"?d");
      methodWriter0.visitTypeInsn(168, "WAmC");
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "j2n-i+v\"]!=");
      methodWriter0.visitMultiANewArrayInsn("nA33M=L~d{H1\"?d", 930);
      methodWriter0.visitVarInsn(1, (-4851));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nA33M=L~d{H1\"?d";
      stringArray0[1] = "nA33M=L~d{H1\"?d";
      stringArray0[2] = "nA33M=L~d{H1\"?d";
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      stringArray0[4] = "nA33M=L~d{H1\"?d";
      stringArray0[5] = "nA33M=L~d{H1\"?d";
      stringArray0[6] = "nA33M=L~d{H1\"?d";
      stringArray0[7] = "nA33M=L~d{H1\"?d";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", "nA33M=L~d{H1\"?d", stringArray0, false, false);
      TypePath typePath0 = TypePath.fromString("nA33M=L~d{H1\"?d");
      typePath0.toString();
      methodWriter0.visitInsnAnnotation(3, typePath0, "l\"v.#P/It|1T{", false);
      methodWriter0.visitTryCatchAnnotation(90, typePath0, "nA33M=L~d{H1\"?d", true);
      methodWriter0.visitEnd();
      Label[] labelArray0 = new Label[5];
      Frame frame0 = new Frame();
      TypePath.fromString("aXBM,al");
      Object[] objectArray0 = new Object[1];
      stringArray0[3] = "nA33M=L~d{H1\"?d";
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 1, objectArray0, 0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 166;
      intArray0[1] = 284;
      intArray0[2] = 28;
      MethodWriter.getNewOffset(intArray0, intArray0, 166, (-16776961));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte)14;
      MethodWriter.readInt(byteArray0, 4);
      ClassWriter classWriter0 = new ClassWriter(2300);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'B";
      stringArray0[1] = "'B";
      stringArray0[2] = "'B";
      stringArray0[3] = "'B";
      stringArray0[4] = "'B";
      stringArray0[5] = "'B";
      stringArray0[6] = "'B";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (byte)27, "'B", "'B", "'B", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(211);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "of3y(z 6fCU[bQd*l";
      stringArray0[3] = "";
      stringArray0[4] = "of3y(z 6fCU[bQd*l";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "of3y(z 6fCU[bQd*l", "", "", stringArray0, false, false);
      Handle handle0 = new Handle(211, "", "", "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      methodWriter0.signature = "";
      methodWriter0.visitAnnotationDefault();
      objectArray0[1] = (Object) "";
      methodWriter0.visitInvokeDynamicInsn("", "", handle0, objectArray0);
      methodWriter0.getSize();
      methodWriter0.visitInsnAnnotation(2, (TypePath) null, "", false);
      Item[] itemArray0 = new Item[3];
      Item item0 = classWriter0.key;
      itemArray0[0] = item0;
      Item item1 = new Item((-2));
      itemArray0[1] = item0;
      Item item2 = classWriter0.key;
      itemArray0[2] = item2;
      classWriter0.typeTable = itemArray0;
      methodWriter0.visitMethodInsn(1, "", "", "StackMapTable", false);
      methodWriter0.visitMultiANewArrayInsn("of3y(z 6fCU[bQd*l", 2);
      methodWriter0.visitIincInsn(2, 211);
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable("", "BootstrapMethods", "@T", (Label) null, (Label) null, 211);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)0;
      MethodWriter.readUnsignedShort(byteArray0, (byte)0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.version = 128;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      methodWriter0.visitIntInsn(0, (-46));
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      methodWriter0.visitMaxs(0, 76);
      Label label0 = new Label();
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.getSize();
      label0.resolve(methodWriter1, 57, (byte[]) null);
      label0.status = 1143;
      methodWriter0.visitLabel(label0);
      methodWriter0.visitJumpInsn(12, label0);
      methodWriter0.visitFrame(128, 2, stringArray0, 292552704, stringArray0);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-46), "z$zhG", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("edu.illinois.starts.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.version = 121;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      classWriter0.index = 0;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "z$zhG", "z$zhG", "Signature", stringArray0, false, false);
      methodWriter0.visitMultiANewArrayInsn("Signature", 1);
      methodWriter0.visitIntInsn(0, (-46));
      classWriter0.visitInnerClass("/.%eZSQzK9vd#\"!Hx", "", "Signature", 0);
      methodWriter0.visitMaxs(0, 76);
      Label label0 = new Label();
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(121, " (", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("edu.illinois.starts.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVarableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, false);
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      methodWriter0.visitLineNumber((-1885), label1);
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.getSize();
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      methodWriter0.visitInsn((-1885));
      ByteVector byteVector0 = new ByteVector(19);
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      ByteVector byteVector2 = byteVector1.put12((-1885), 19);
      methodWriter0.put(byteVector2);
      methodWriter0.visitTableSwitchInsn(1, 194, label0, labelArray0);
      methodWriter0.visitFieldInsn((-255), "5e8X)IX,O+1#4q", "G8_A %", "F:iiL1");
      TypePath typePath0 = TypePath.fromString("LineNumberTable");
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitTypeAnnotation((-103), typePath0, "G8_A %", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wvd8/' I4t";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "wvd8/' I4t";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2299, "5e8X)IX,O+#4q", "5e8X)IX,O+#4q", "wvd8/' I4t", stringArray0, true, false);
      Label label0 = new Label();
      label0.line = 1;
      Label label1 = label0.getFirst();
      methodWriter0.visitLineNumber(1, label1);
      Label[] labelArray0 = new Label[0];
      methodWriter0.getSize();
      methodWriter0.visitInsn(73);
      TypePath typePath0 = TypePath.fromString("ConstantValue");
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitInsnAnnotation((-3), typePath0, "i@2)S+m}6FA;A*;L)fO", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      String[] stringArray0 = new String[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";xVv0'<bH[UUmi g2");
      stringArray0[0] = "G8_A %";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "G8_A %";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2290, "5e8X)IX,O+1#4q", "5e8X)IX,O+1#4q", "G8_A %", stringArray0, false, true);
      Label label0 = new Label();
      methodWriter0.visitLineNumber((-1885), label0);
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-103);
      Label[] labelArray0 = new Label[0];
      methodWriter0.getSize();
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      methodWriter0.visitInsn((-1885));
      ByteVector byteVector0 = new ByteVector(27);
      ByteVector byteVector1 = byteVector0.put11((-1885), 10);
      byteVector1.put11((-98), (byte) (-103));
      ByteVector byteVector2 = byteVector1.put12((-1885), 27);
      methodWriter0.put(byteVector2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      MethodWriter.writeShort(byteArray0, 1, (-98));
      // Undeclared exception!
      try { 
        MethodWriter.writeShort((byte[]) null, 10, (byte)109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[16];
      intArray0[0] = 4379;
      intArray0[1] = 193;
      MethodWriter.getNewOffset(intArray0, intArray0, 193, 4379);
      Label label0 = new Label();
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("edu.illinois.starts.asm.MethodWriter", e);
      }
  }
}
