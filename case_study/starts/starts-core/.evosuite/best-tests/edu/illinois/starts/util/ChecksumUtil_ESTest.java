/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:23:46 GMT 2017
 */

package edu.illinois.starts.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.illinois.starts.util.ChecksumUtil;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.ekstazi.data.RegData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChecksumUtil_ESTest extends ChecksumUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChecksumUtil.StartsStorer checksumUtil_StartsStorer0 = new ChecksumUtil.StartsStorer(false);
      Set<RegData> set0 = checksumUtil_StartsStorer0.load("wo]S2", "wo]S2", "wo]S2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChecksumUtil.writeChecksumFile("ue", set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChecksumUtil.StartsStorer checksumUtil_StartsStorer0 = new ChecksumUtil.StartsStorer(false);
      Set<RegData> set0 = checksumUtil_StartsStorer0.load("", "", "");
      ChecksumUtil.writeChecksumFile("", set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChecksumUtil.writeChecksumFile("4,o2cs'WgW%x=_", (Set<RegData>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<RegData> linkedHashSet0 = new LinkedHashSet<RegData>();
      RegData regData0 = new RegData("F)JN|MOMR bZGolyQk", (String) null);
      linkedHashSet0.add(regData0);
      // Undeclared exception!
      try { 
        ChecksumUtil.writeChecksumFile("F)JN|MOMR bZGolyQk", linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChecksumUtil.toClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.util.ChecksumUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChecksumUtil.saveCheckSums((Map<String, Set<RegData>>) null, "3foyGaSZFSg_\"-G9z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.util.ChecksumUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChecksumUtil.isWellKnownUrl((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.util.ChecksumUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChecksumUtil checksumUtil0 = new ChecksumUtil(false);
      // Undeclared exception!
      try { 
        checksumUtil0.getCheckSum((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChecksumUtil checksumUtil0 = new ChecksumUtil(false);
      // Undeclared exception!
      try { 
        checksumUtil0.computeSingleCheckSum((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChecksumUtil checksumUtil0 = new ChecksumUtil(true);
      MockFile mockFile0 = new MockFile("", "/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        checksumUtil0.computeChecksumRegData(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChecksumUtil.StartsStorer checksumUtil_StartsStorer0 = new ChecksumUtil.StartsStorer(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s:EJr~Yu4#Yk3}");
      Set<RegData> set0 = checksumUtil_StartsStorer0.load("s:EJr~Yu4#Yk3}", "9gG3_99er}Z", "} @|p}o+)9Z");
      checksumUtil_StartsStorer0.save((FileOutputStream) mockFileOutputStream0, set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChecksumUtil checksumUtil0 = new ChecksumUtil(false);
      URL uRL0 = MockURL.getHttpExample();
      String string0 = checksumUtil0.getCheckSum(uRL0);
      assertNotNull(string0);
      
      RegData regData0 = checksumUtil0.computeChecksumRegData(uRL0);
      assertEquals("-1", regData0.getHash());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Set<RegData>> hashMap0 = new HashMap<String, Set<RegData>>();
      LinkedHashSet<RegData> linkedHashSet0 = new LinkedHashSet<RegData>(7);
      hashMap0.put("dmmx!'_M*p", linkedHashSet0);
      ChecksumUtil.saveCheckSums(hashMap0, "G.Xf C1Y*1wV@;7;");
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = ChecksumUtil.isWellKnownUrl("/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = ChecksumUtil.isWellKnownUrl("lx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = ChecksumUtil.isWellKnownUrl("!/org/hamcrest");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = ChecksumUtil.isWellKnownUrl("!/junit");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = ChecksumUtil.isWellKnownUrl("!/org/apache/maven");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = ChecksumUtil.isWellKnownUrl("!/org/junit");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HashMap<String, Set<String>> hashMap0 = new HashMap<String, Set<String>>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("I");
      // Undeclared exception!
      try { 
        ChecksumUtil.makeCheckSumMap(classLoader0, hashMap0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HashMap<String, Set<String>> hashMap0 = new HashMap<String, Set<String>>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Map<String, Set<RegData>> map0 = ChecksumUtil.makeCheckSumMap(classLoader0, hashMap0, linkedHashSet0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = ChecksumUtil.makeCheckSumPath("Incorrect argument: ", (String) null);
      assertEquals("nullIncorrect argument: .clz", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ChecksumUtil.toClassName("-1");
      assertEquals("-1.class", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ChecksumUtil checksumUtil0 = new ChecksumUtil(false);
      URL uRL0 = MockURL.getHttpExample();
      RegData regData0 = checksumUtil0.computeChecksumRegData(uRL0);
      assertEquals("-1", regData0.getHash());
      
      String string0 = checksumUtil0.getCheckSum(uRL0);
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChecksumUtil checksumUtil0 = new ChecksumUtil(false);
      URL uRL0 = MockURL.getHttpExample();
      String string0 = checksumUtil0.computeSingleCheckSum(uRL0);
      assertEquals("-1", string0);
  }
}
