/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:12:02 GMT 2017
 */

package edu.illinois.starts.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.illinois.starts.asm.AnnotationVisitor;
import edu.illinois.starts.asm.AnnotationWriter;
import edu.illinois.starts.asm.ByteVector;
import edu.illinois.starts.asm.ClassWriter;
import edu.illinois.starts.asm.Item;
import edu.illinois.starts.asm.Type;
import edu.illinois.starts.asm.TypePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(327680);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteVector byteVector1 = byteVector0.putUTF8(" Z(]H$x}PpAu]8");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      AnnotationWriter annotationWriter1 = (AnnotationWriter)annotationWriter0.visitArray(" Z(]H$x}PpAu]8");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter1);
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter1);
      assertNotSame(annotationWriter1, annotationWriter0);
      
      annotationWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter1);
      
      int int0 = annotationWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertEquals(21, int0);
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter1);
      
      AnnotationWriter annotationWriter2 = (AnnotationWriter)annotationWriter1.visitArray(" Z(]H$x}PpAu]8");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter2);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      assertFalse(annotationWriter2.equals((Object)annotationWriter0));
      assertFalse(annotationWriter2.equals((Object)annotationWriter1));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter2);
      assertNotSame(annotationWriter0, annotationWriter1);
      assertNotSame(annotationWriter1, annotationWriter2);
      assertNotSame(annotationWriter1, annotationWriter0);
      assertNotSame(annotationWriter2, annotationWriter0);
      assertNotSame(annotationWriter2, annotationWriter1);
      
      AnnotationWriter[] annotationWriterArray0 = new AnnotationWriter[9];
      annotationWriterArray0[0] = annotationWriter0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      annotationWriterArray0[1] = annotationWriter1;
      AnnotationWriter annotationWriter3 = annotationWriter1.next;
      assertNull(annotationWriter3);
      
      annotationWriterArray0[2] = null;
      annotationWriterArray0[0].next = annotationWriter0;
      annotationWriterArray0[3] = annotationWriter1;
      annotationWriterArray0[4] = annotationWriter1;
      annotationWriterArray0[5] = annotationWriter1;
      annotationWriterArray0[6] = annotationWriter1;
      annotationWriterArray0[7] = annotationWriter0;
      annotationWriterArray0[8] = annotationWriter0;
      // Undeclared exception!
      AnnotationWriter.put(annotationWriterArray0, 8, byteVector1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      AnnotationWriter annotationWriter1 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 19);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter1);
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      
      annotationWriter0.prev = annotationWriter1;
      annotationWriter0.visitEnum("7MLFP+0u4", "7MLFP+0u4", "7MLFP+0u4");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertNotSame(annotationWriter0, annotationWriter1);
      
      annotationWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertNotSame(annotationWriter0, annotationWriter1);
      
      AnnotationWriter annotationWriter2 = annotationWriter0.next;
      assertNull(annotationWriter2);
      
      annotationWriter0.av = (AnnotationVisitor) null;
      TypePath typePath0 = TypePath.fromString("");
      assertNull(typePath0);
      
      AnnotationVisitor annotationVisitor0 = annotationWriter0.visitAnnotation("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertFalse(annotationVisitor0.equals((Object)annotationWriter1));
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertNotSame(annotationWriter0, annotationVisitor0);
      assertNotSame(annotationWriter0, annotationWriter1);
      assertNotSame(annotationVisitor0, annotationWriter1);
      assertNotSame(annotationVisitor0, annotationWriter0);
      
      annotationVisitor0.visitEnum("", "K$Oe~ujj3.-E]", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationVisitor0));
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertFalse(annotationVisitor0.equals((Object)annotationWriter1));
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertNotSame(annotationWriter0, annotationVisitor0);
      assertNotSame(annotationWriter0, annotationWriter1);
      assertNotSame(annotationVisitor0, annotationWriter1);
      assertNotSame(annotationVisitor0, annotationWriter0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      byte[] byteArray0 = new byte[1];
      byteVector0.data = byteArray0;
      long long0 = Short.toUnsignedLong((byte)0);
      assertEquals(0L, long0);
      
      long long1 = Short.toUnsignedLong((short) (-3));
      assertFalse(long1 == long0);
      assertEquals(65533L, long1);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", short0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(327680);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8(" Z(]H$x}PpAu]8");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      AnnotationWriter annotationWriter1 = (AnnotationWriter)annotationWriter0.visitArray(" Z(]H$x}PpAu]8");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter1);
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter1);
      assertNotSame(annotationWriter1, annotationWriter0);
      
      annotationWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter1);
      
      int int0 = annotationWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertEquals(21, int0);
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter1);
      
      AnnotationWriter annotationWriter2 = (AnnotationWriter)annotationWriter1.visitArray(" Z(]H$x}PpAu]8");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter2);
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      assertFalse(annotationWriter2.equals((Object)annotationWriter0));
      assertFalse(annotationWriter2.equals((Object)annotationWriter1));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter2);
      assertNotSame(annotationWriter0, annotationWriter1);
      assertNotSame(annotationWriter1, annotationWriter2);
      assertNotSame(annotationWriter1, annotationWriter0);
      assertNotSame(annotationWriter2, annotationWriter0);
      assertNotSame(annotationWriter2, annotationWriter1);
      
      AnnotationWriter[] annotationWriterArray0 = new AnnotationWriter[9];
      annotationWriterArray0[0] = annotationWriter0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      annotationWriterArray0[1] = annotationWriter1;
      AnnotationWriter annotationWriter3 = annotationWriter1.next;
      assertNull(annotationWriter3);
      
      annotationWriterArray0[2] = null;
      annotationWriterArray0[3] = annotationWriter1;
      annotationWriterArray0[4] = annotationWriter1;
      annotationWriterArray0[5] = annotationWriter1;
      annotationWriterArray0[3].next = annotationWriter0;
      annotationWriterArray0[6] = annotationWriter1;
      annotationWriterArray0[7] = annotationWriter0;
      annotationWriterArray0[8] = annotationWriter0;
      AnnotationWriter.put(annotationWriterArray0, 8, byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      TypePath typePath0 = TypePath.fromString("#hU,Muw>");
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertNotNull(typePath0);
      assertEquals(0, typePath0.getLength());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#hU,Muw>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AnnotationWriter.put(annotationWriterArray0, 2, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      AnnotationWriter.putTarget((-1718), typePath0, byteVector0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(0, typePath0.getLength());
      assertSame(byteVector0, byteVector1);
      
      annotationWriter1.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationWriter2));
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
      assertFalse(annotationWriter1.equals((Object)annotationWriter2));
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationWriter2);
      assertNotSame(annotationWriter0, annotationWriter1);
      assertNotSame(annotationWriter1, annotationWriter2);
      assertNotSame(annotationWriter1, annotationWriter0);
      
      AnnotationWriter.put(annotationWriterArray0, 64, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      // Undeclared exception!
      try { 
        annotationWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      annotationWriter0.visitEnum("7MLFP+0u4", "7MLFP+0u4", "7MLFP+0u4");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      annotationWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = TypePath.fromString("");
      assertNull(typePath0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitTypeAnnotation(19, (TypePath) null, "", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertNotSame(annotationVisitor0, annotationWriter0);
      
      AnnotationVisitor annotationVisitor1 = annotationVisitor0.visitAnnotation("edu.illinois.starts.asm.Label", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertFalse(annotationVisitor1.equals((Object)annotationWriter0));
      assertNotSame(annotationVisitor0, annotationWriter0);
      assertNotSame(annotationVisitor0, annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertNotSame(annotationVisitor1, annotationWriter0);
      
      annotationVisitor1.visitEnum("edu.illinois.starts.asm.Label", "K$Oe~ujj3.-E]", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertFalse(annotationVisitor0.equals((Object)annotationVisitor1));
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertFalse(annotationVisitor1.equals((Object)annotationWriter0));
      assertNotSame(annotationVisitor0, annotationWriter0);
      assertNotSame(annotationVisitor0, annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertNotSame(annotationVisitor1, annotationWriter0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      byte[] byteArray0 = new byte[1];
      byteVector0.data = byteArray0;
      long long0 = Short.toUnsignedLong((byte)0);
      assertEquals(0L, long0);
      
      long long1 = Short.toUnsignedLong((byte) (-89));
      assertFalse(long1 == long0);
      assertEquals(65447L, long1);
      
      long long2 = Short.toUnsignedLong((short) (-3));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(65533L, long2);
      
      // Undeclared exception!
      try { 
        annotationVisitor1.visitAnnotation("", "yToPEYldpA");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      annotationWriter0.visitEnum("7MLFP+0u4", "7MLFP+0u4", "7MLFP+0u4");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      annotationWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      TypePath typePath0 = TypePath.fromString("");
      assertNull(typePath0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitTypeAnnotation(19, (TypePath) null, "", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertNotSame(annotationVisitor0, annotationWriter0);
      
      AnnotationVisitor annotationVisitor1 = annotationVisitor0.visitAnnotation("edu.illinois.starts.asm.Label", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertFalse(annotationVisitor1.equals((Object)annotationWriter0));
      assertNotSame(annotationVisitor0, annotationVisitor1);
      assertNotSame(annotationVisitor0, annotationWriter0);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertNotSame(annotationVisitor1, annotationWriter0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      long long0 = Short.toUnsignedLong((short)75);
      assertEquals(75L, long0);
      
      byte[] byteArray0 = new byte[1];
      TypePath typePath1 = TypePath.fromString("");
      assertNull(typePath1);
      
      byteArray0[0] = (byte) (-89);
      byteVector0.data = byteArray0;
      long long1 = Short.toUnsignedLong((byte) (-89));
      assertFalse(long1 == long0);
      assertEquals(65447L, long1);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visitArray(" (");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(679);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put12(2, 1545);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.putLong((-75L));
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      ByteVector byteVector3 = byteVector0.putInt(679);
      assertNotNull(byteVector3);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector2, byteVector3, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      AnnotationWriter[] annotationWriterArray0 = new AnnotationWriter[3];
      annotationWriterArray0[0] = annotationWriter0;
      annotationWriterArray0[0].next = annotationWriter0;
      annotationWriterArray0[1] = annotationWriter0;
      annotationWriterArray0[2] = annotationWriter0;
      AnnotationWriter.put(annotationWriterArray0, 679, byteVector0);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      
      annotationWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      annotationWriter0.visit("4m", boolean0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      
      // Undeclared exception!
      annotationWriter0.getSize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(115);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, (ByteVector) null, (ByteVector) null, (-1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visitEnum("6i#!p_iv:", (String) null, "t?h(yt#vImF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, (ByteVector) null, (ByteVector) null, 64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visitEnum(">", "", ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, (ByteVector) null, (ByteVector) null, 64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visitAnnotation("java/lang/Class", "java/lang/Class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(327680);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8(" Z(]H$x}PpAu]8");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      AnnotationVisitor annotationVisitor0 = annotationWriter0.visitArray(" Z(]H$x}PpAu]8");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationVisitor0);
      assertNotSame(annotationVisitor0, annotationWriter0);
      
      // Undeclared exception!
      try { 
        AnnotationWriter.put((AnnotationWriter[]) null, 20, byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, (ByteVector) null, (ByteVector) null, 64);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2002);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(0);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.put12(2, 0);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      byteVector0.length = 0;
      ByteVector byteVector3 = byteVector0.put12(83, 0);
      assertNotNull(byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      
      ByteVector byteVector4 = byteVector0.put12(1, 192);
      assertNotNull(byteVector4);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector1);
      assertSame(byteVector4, byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector4, byteVector0, 2002);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      byteVector4.length = 192;
      Item item0 = classWriter0.newFieldItem(";_dc+BnY&mJWD(", "9w?PldP", ";_dc+BnY&mJWD(");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newMethodItem(";_dc+BnY&mJWD(", ";_dc+BnY&mJWD(", "U18Mk&<RXGR", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visitEnum("$9T1 d2;pPlre=8_", "I", (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(327680);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8(" Z(]H$x}PpAu]8");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      annotationWriter0.visitEnum(" Z(]H$x}PpAu]8", "B=%lq)>", "ConstantValue");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(byteVector0, byteVector1);
      
      AnnotationVisitor annotationVisitor0 = annotationWriter0.visitArray(" Z(]H$x}PpAu]8");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationVisitor0);
      assertNotSame(annotationVisitor0, annotationWriter0);
      
      annotationWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationVisitor0));
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationVisitor0);
      
      int int0 = annotationWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationWriter0.equals((Object)annotationVisitor0));
      assertEquals(24, int0);
      assertSame(byteVector0, byteVector1);
      assertNotSame(annotationWriter0, annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnnotationWriter[] annotationWriterArray0 = new AnnotationWriter[1];
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      AnnotationWriter.put(annotationWriterArray0, 825, byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-757));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, (-757));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visitEnd();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -757
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      TypePath typePath0 = new TypePath(byteArray0, 825);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertNotNull(typePath0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      
      TypePath typePath1 = TypePath.fromString(",37()R.`(An9");
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertNotNull(typePath1);
      assertFalse(typePath1.equals((Object)typePath0));
      assertEquals(3, typePath1.getLength());
      assertNotSame(typePath1, typePath0);
      
      // Undeclared exception!
      try { 
        AnnotationWriter.putTarget(16777227, typePath0, byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 825
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypePath typePath0 = TypePath.fromString(".s.IFJDCS");
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertNotNull(typePath0);
      assertEquals(2, typePath0.getLength());
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      AnnotationWriter.putTarget(16, typePath0, byteVector0);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(2, typePath0.getLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypePath typePath0 = TypePath.fromString("Exceptions");
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertNotNull(typePath0);
      assertEquals(0, typePath0.getLength());
      
      String string0 = typePath0.toString();
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertNotNull(string0);
      assertEquals(0, typePath0.getLength());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        AnnotationWriter.putTarget((-1450), typePath0, (ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnnotationWriter[] annotationWriterArray0 = new AnnotationWriter[15];
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        AnnotationWriter.put(annotationWriterArray0, (-1566), byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1566
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(108);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, (ByteVector) null, (ByteVector) null, 55);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, (ByteVector) null, (ByteVector) null, 64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visitArray("I8[As3cV7EmnOu'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteVector byteVector0 = null;
      ClassWriter classWriter0 = new ClassWriter(1509950724);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, (ByteVector) null, (ByteVector) null, 1304);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.visit("O", character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TypePath typePath0 = new TypePath(byteArray0, 1509950678);
      assertEquals(0, TypePath.ARRAY_ELEMENT);
      assertEquals(1, TypePath.INNER_TYPE);
      assertEquals(2, TypePath.WILDCARD_BOUND);
      assertEquals(3, TypePath.TYPE_ARGUMENT);
      assertNotNull(typePath0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ByteVector byteVector0 = null;
      // Undeclared exception!
      try { 
        AnnotationWriter.putTarget(1509950678, typePath0, (ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(66);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 66);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationWriter0);
      
      int int0 = annotationWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, int0);
      
      ByteVector byteVector1 = byteVector0.put11(0, (-1885));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      // Undeclared exception!
      try { 
        annotationWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("edu.illinois.starts.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, (ByteVector) null, (ByteVector) null, 64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationWriter0);
      
      annotationWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      TypePath.fromString("");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitTypeAnnotation(19, (TypePath) null, "7MLFP+0u4", false);
      AnnotationVisitor annotationVisitor1 = annotationVisitor0.visitAnnotation("edu.illinois.starts.asm.Label", "");
      byte[] byteArray0 = new byte[1];
      Byte byte0 = new Byte((byte) (-89));
      annotationVisitor0.visit("", byte0);
      byteArray0[0] = (byte) (-89);
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter.putTarget(0, (TypePath) null, byteVector0);
      annotationVisitor1.visit("", byteArray0);
      assertFalse(annotationVisitor0.equals((Object)annotationVisitor1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2);
      annotationWriter0.visitEnum("7MLFP+0u4", "7MLFP+0u4", "7MLFP+0u4");
      annotationWriter0.put(byteVector0);
      TypePath.fromString("");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitTypeAnnotation(19, (TypePath) null, "", false);
      annotationVisitor0.visitEnum("", "K$Oe~ujj3.-E]", "");
      Short short0 = new Short((short)0);
      byte[] byteArray0 = new byte[1];
      byteVector0.data = byteArray0;
      Short.toUnsignedLong((byte)0);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", short0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(679);
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2);
      annotationWriter0.visitEnd();
      String string0 = "4m";
      Boolean boolean0 = new Boolean(true);
      annotationWriter0.visit("4m", boolean0);
      annotationWriter0.visitAnnotation("4m", "4m");
      annotationWriter0.visitArray("4m");
      annotationWriter0.visit("4m", "4m");
      // Undeclared exception!
      try { 
        annotationWriter0.visit("4m", annotationWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value edu.illinois.starts.asm.AnnotationWriter@8
         //
         verifyException("edu.illinois.starts.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(679);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(2, 1);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector1, 2);
      String string0 = "Am";
      Boolean boolean0 = new Boolean(false);
      annotationWriter0.visit("Am", boolean0);
      Type type0 = Type.BYTE_TYPE;
      annotationWriter0.visit("Am", type0);
      String string1 = "rV'";
      String string2 = "=,37()R.`(An9";
      // Undeclared exception!
      try { 
        annotationWriter0.visit("=,37()R.`(An9", annotationWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value edu.illinois.starts.asm.AnnotationWriter@8
         //
         verifyException("edu.illinois.starts.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(327680);
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1);
      AnnotationWriter annotationWriter1 = (AnnotationWriter)annotationWriter0.visitArray(" Z(]H$x}PpAu]8");
      annotationWriter0.visitEnd();
      annotationWriter0.getSize();
      AnnotationWriter[] annotationWriterArray0 = new AnnotationWriter[9];
      annotationWriterArray0[0] = annotationWriter0;
      annotationWriterArray0[1] = annotationWriter1;
      AnnotationWriter annotationWriter2 = annotationWriter1.next;
      annotationWriterArray0[3] = annotationWriter1;
      annotationWriterArray0[4] = annotationWriter1;
      annotationWriterArray0[7] = annotationWriter0;
      TypePath typePath0 = TypePath.fromString("#hU,Muw>");
      AnnotationWriter.put(annotationWriterArray0, 2, byteVector0);
      AnnotationWriter.putTarget(1, typePath0, byteVector0);
      annotationWriter1.visitEnd();
      assertFalse(annotationWriter0.equals((Object)annotationWriter1));
  }
}
