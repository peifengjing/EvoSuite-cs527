/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:35:43 GMT 2017
 */

package edu.illinois.starts.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.illinois.starts.asm.TypeReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeReference_ESTest extends TypeReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeReference(18);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(71, TypeReference.CAST);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(68, TypeReference.NEW);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(301989888, typeReference0.getValue());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(18, typeReference0.getSort());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeReference(676);
      assertEquals(71, TypeReference.CAST);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(68, TypeReference.NEW);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals((-1543503872), typeReference0.getValue());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(164, typeReference0.getSort());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterReference((-1), (-1));
      assertEquals(71, TypeReference.CAST);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(68, TypeReference.NEW);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(65280, typeReference0.getExceptionIndex());
      assertEquals(255, typeReference0.getSort());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(255, typeReference0.getTypeParameterIndex());
      assertEquals(65280, typeReference0.getTryCatchBlockIndex());
      assertEquals(255, typeReference0.getFormalParameterIndex());
      assertEquals((-256), typeReference0.getSuperTypeIndex());
      assertEquals((-65536), typeReference0.getValue());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterReference(0, 0);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(68, TypeReference.NEW);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(0, typeReference0.getValue());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getSort());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterReference(20, 285212416);
      assertEquals(68, TypeReference.NEW);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(255, typeReference0.getSort());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals((-16777216), typeReference0.getValue());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterBoundReference((-2409), (-2409), (-2409));
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(68, TypeReference.NEW);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(63383, typeReference0.getExceptionIndex());
      assertEquals(255, typeReference0.getSort());
      assertEquals(247, typeReference0.getTypeParameterIndex());
      assertEquals(151, typeReference0.getTypeParameterBoundIndex());
      assertEquals((-2153), typeReference0.getSuperTypeIndex());
      assertEquals(247, typeReference0.getFormalParameterIndex());
      assertEquals((-551168), typeReference0.getValue());
      assertEquals(63383, typeReference0.getTryCatchBlockIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterBoundReference(1, 71, 1);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(71, TypeReference.CAST);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(68, TypeReference.NEW);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(71, typeReference0.getFormalParameterIndex());
      assertEquals(18177, typeReference0.getExceptionIndex());
      assertEquals(71, typeReference0.getTypeParameterIndex());
      assertEquals(1, typeReference0.getSort());
      assertEquals(1, typeReference0.getTypeParameterBoundIndex());
      assertEquals(21430528, typeReference0.getValue());
      assertEquals(18177, typeReference0.getSuperTypeIndex());
      assertEquals(18177, typeReference0.getTryCatchBlockIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeArgumentReference(72, (-46));
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(68, TypeReference.NEW);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(210, typeReference0.getTypeArgumentIndex());
      assertEquals(255, typeReference0.getTypeParameterBoundIndex());
      assertEquals((-46), typeReference0.getValue());
      assertEquals(255, typeReference0.getTypeParameterIndex());
      assertEquals((-1), typeReference0.getSuperTypeIndex());
      assertEquals(65535, typeReference0.getTryCatchBlockIndex());
      assertEquals(255, typeReference0.getSort());
      assertEquals(65535, typeReference0.getExceptionIndex());
      assertEquals(255, typeReference0.getFormalParameterIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeArgumentReference(1113, 1113);
      assertEquals(71, TypeReference.CAST);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(68, TypeReference.NEW);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(4, typeReference0.getTypeParameterBoundIndex());
      assertEquals(4, typeReference0.getTryCatchBlockIndex());
      assertEquals(1493173337, typeReference0.getValue());
      assertEquals(4, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(4, typeReference0.getSuperTypeIndex());
      assertEquals(89, typeReference0.getSort());
      assertEquals(89, typeReference0.getTypeArgumentIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTryCatchReference(67);
      assertEquals(71, TypeReference.CAST);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(68, TypeReference.NEW);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(67, typeReference0.getTypeParameterBoundIndex());
      assertEquals(67, typeReference0.getTryCatchBlockIndex());
      assertEquals(1107313408, typeReference0.getValue());
      assertEquals(67, typeReference0.getSuperTypeIndex());
      assertEquals(66, typeReference0.getSort());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(67, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTryCatchReference(0);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(68, TypeReference.NEW);
      assertEquals(71, TypeReference.CAST);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(66, typeReference0.getSort());
      assertEquals(1107296256, typeReference0.getValue());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newExceptionReference(0);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(68, TypeReference.NEW);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(23, typeReference0.getSort());
      assertEquals(385875968, typeReference0.getValue());
      assertNotNull(typeReference0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newSuperTypeReference(65535);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(68, TypeReference.NEW);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(255, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(65535, typeReference0.getTryCatchBlockIndex());
      assertEquals(255, typeReference0.getFormalParameterIndex());
      assertEquals(65535, typeReference0.getExceptionIndex());
      assertEquals(16, typeReference0.getSort());
      assertEquals(255, typeReference0.getTypeParameterIndex());
      assertEquals(285212416, typeReference0.getValue());
      assertEquals((-1), typeReference0.getSuperTypeIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getValue();
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(68, TypeReference.NEW);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(255, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(65535, typeReference0.getTryCatchBlockIndex());
      assertEquals(255, typeReference0.getFormalParameterIndex());
      assertEquals(65535, typeReference0.getExceptionIndex());
      assertEquals(16, typeReference0.getSort());
      assertEquals(255, typeReference0.getTypeParameterIndex());
      assertEquals(285212416, typeReference0.getValue());
      assertEquals((-1), typeReference0.getSuperTypeIndex());
      assertEquals(285212416, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterBoundReference((-2597), 0, 70);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(68, TypeReference.NEW);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(70, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals((-620739072), typeReference0.getValue());
      assertEquals(70, typeReference0.getSuperTypeIndex());
      assertEquals(219, typeReference0.getSort());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(70, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(70, typeReference0.getExceptionIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getValue();
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(68, TypeReference.NEW);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(70, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals((-620739072), typeReference0.getValue());
      assertEquals(70, typeReference0.getSuperTypeIndex());
      assertEquals(219, typeReference0.getSort());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(70, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(70, typeReference0.getExceptionIndex());
      assertEquals((-620739072), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newExceptionReference((-1072));
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(255, typeReference0.getSort());
      assertEquals(64464, typeReference0.getExceptionIndex());
      assertEquals(208, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(251, typeReference0.getFormalParameterIndex());
      assertEquals((-274432), typeReference0.getValue());
      assertEquals(64464, typeReference0.getTryCatchBlockIndex());
      assertEquals((-1072), typeReference0.getSuperTypeIndex());
      assertEquals(251, typeReference0.getTypeParameterIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getTypeParameterIndex();
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(255, typeReference0.getSort());
      assertEquals(64464, typeReference0.getExceptionIndex());
      assertEquals(208, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(251, typeReference0.getFormalParameterIndex());
      assertEquals((-274432), typeReference0.getValue());
      assertEquals(64464, typeReference0.getTryCatchBlockIndex());
      assertEquals((-1072), typeReference0.getSuperTypeIndex());
      assertEquals(251, typeReference0.getTypeParameterIndex());
      assertEquals(251, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newFormalParameterReference(0);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(369098752, typeReference0.getValue());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(22, typeReference0.getSort());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getTypeParameterBoundIndex();
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(369098752, typeReference0.getValue());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(22, typeReference0.getSort());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeReference typeReference0 = new TypeReference(2522);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(68, TypeReference.NEW);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(9, typeReference0.getTypeParameterBoundIndex());
      assertEquals(218, typeReference0.getTypeArgumentIndex());
      assertEquals(9, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(9, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getSort());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(2522, typeReference0.getValue());
      assertEquals(9, typeReference0.getSuperTypeIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getTypeArgumentIndex();
      assertEquals(19, TypeReference.FIELD);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(68, TypeReference.NEW);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(9, typeReference0.getTypeParameterBoundIndex());
      assertEquals(218, typeReference0.getTypeArgumentIndex());
      assertEquals(9, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(9, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, typeReference0.getSort());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(2522, typeReference0.getValue());
      assertEquals(9, typeReference0.getSuperTypeIndex());
      assertEquals(218, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newSuperTypeReference(0);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(68, TypeReference.NEW);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(16, typeReference0.getSort());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(268435456, typeReference0.getValue());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getTryCatchBlockIndex();
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(68, TypeReference.NEW);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(71, TypeReference.CAST);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(16, typeReference0.getSort());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(268435456, typeReference0.getValue());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newFormalParameterReference(0);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(369098752, typeReference0.getValue());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(22, typeReference0.getSort());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getSuperTypeIndex();
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(0, typeReference0.getSuperTypeIndex());
      assertEquals(369098752, typeReference0.getValue());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(0, typeReference0.getTypeParameterBoundIndex());
      assertEquals(22, typeReference0.getSort());
      assertEquals(0, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getTryCatchBlockIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newExceptionReference(87);
      assertEquals(71, TypeReference.CAST);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(68, TypeReference.NEW);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(23, typeReference0.getSort());
      assertEquals(87, typeReference0.getTypeParameterBoundIndex());
      assertEquals(87, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(87, typeReference0.getTryCatchBlockIndex());
      assertEquals(87, typeReference0.getSuperTypeIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(385898240, typeReference0.getValue());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getSuperTypeIndex();
      assertEquals(71, TypeReference.CAST);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(68, TypeReference.NEW);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(23, typeReference0.getSort());
      assertEquals(87, typeReference0.getTypeParameterBoundIndex());
      assertEquals(87, typeReference0.getExceptionIndex());
      assertEquals(0, typeReference0.getFormalParameterIndex());
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(87, typeReference0.getTryCatchBlockIndex());
      assertEquals(87, typeReference0.getSuperTypeIndex());
      assertEquals(0, typeReference0.getTypeParameterIndex());
      assertEquals(385898240, typeReference0.getValue());
      assertEquals(87, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newExceptionReference((-2489));
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(255, typeReference0.getSort());
      assertEquals((-637184), typeReference0.getValue());
      assertEquals(246, typeReference0.getFormalParameterIndex());
      assertEquals(246, typeReference0.getTypeParameterIndex());
      assertEquals(63047, typeReference0.getExceptionIndex());
      assertEquals(71, typeReference0.getTypeParameterBoundIndex());
      assertEquals(63047, typeReference0.getTryCatchBlockIndex());
      assertEquals((-2489), typeReference0.getSuperTypeIndex());
      assertNotNull(typeReference0);
      
      int int0 = typeReference0.getSort();
      assertEquals(16, TypeReference.CLASS_EXTENDS);
      assertEquals(64, TypeReference.LOCAL_VARIABLE);
      assertEquals(17, TypeReference.CLASS_TYPE_PARAMETER_BOUND);
      assertEquals(67, TypeReference.INSTANCEOF);
      assertEquals(21, TypeReference.METHOD_RECEIVER);
      assertEquals(20, TypeReference.METHOD_RETURN);
      assertEquals(65, TypeReference.RESOURCE_VARIABLE);
      assertEquals(72, TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT);
      assertEquals(1, TypeReference.METHOD_TYPE_PARAMETER);
      assertEquals(69, TypeReference.CONSTRUCTOR_REFERENCE);
      assertEquals(74, TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT);
      assertEquals(22, TypeReference.METHOD_FORMAL_PARAMETER);
      assertEquals(18, TypeReference.METHOD_TYPE_PARAMETER_BOUND);
      assertEquals(0, TypeReference.CLASS_TYPE_PARAMETER);
      assertEquals(19, TypeReference.FIELD);
      assertEquals(23, TypeReference.THROWS);
      assertEquals(73, TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT);
      assertEquals(70, TypeReference.METHOD_REFERENCE);
      assertEquals(68, TypeReference.NEW);
      assertEquals(66, TypeReference.EXCEPTION_PARAMETER);
      assertEquals(71, TypeReference.CAST);
      assertEquals(75, TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT);
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(255, typeReference0.getSort());
      assertEquals((-637184), typeReference0.getValue());
      assertEquals(246, typeReference0.getFormalParameterIndex());
      assertEquals(246, typeReference0.getTypeParameterIndex());
      assertEquals(63047, typeReference0.getExceptionIndex());
      assertEquals(71, typeReference0.getTypeParameterBoundIndex());
      assertEquals(63047, typeReference0.getTryCatchBlockIndex());
      assertEquals((-2489), typeReference0.getSuperTypeIndex());
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTryCatchReference((-1));
      int int0 = typeReference0.getFormalParameterIndex();
      assertEquals(255, int0);
      assertEquals((-256), typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterBoundReference(0, 0, 0);
      int int0 = typeReference0.getExceptionIndex();
      assertEquals(0, typeReference0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newExceptionReference((-4620));
      int int0 = typeReference0.getExceptionIndex();
      assertEquals((-1182720), typeReference0.getValue());
      assertEquals(60916, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newSuperTypeReference(65535);
      int int0 = typeReference0.getTypeParameterBoundIndex();
      assertEquals(0, typeReference0.getTypeArgumentIndex());
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newExceptionReference((-4620));
      int int0 = typeReference0.getSuperTypeIndex();
      assertEquals((-4620), int0);
      assertEquals((-1182720), typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeReference typeReference0 = new TypeReference(0);
      int int0 = typeReference0.getSort();
      assertEquals(0, int0);
      assertEquals(0, typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newFormalParameterReference((-3780));
      int int0 = typeReference0.getTryCatchBlockIndex();
      assertEquals(15360, int0);
      assertEquals((-147062784), typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeArgumentReference(0, 0);
      int int0 = typeReference0.getTypeArgumentIndex();
      assertEquals(0, typeReference0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newFormalParameterReference((-1392));
      assertEquals((-24117248), typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeReference typeReference0 = new TypeReference(2522);
      int int0 = typeReference0.getFormalParameterIndex();
      assertEquals(0, int0);
      assertEquals(2522, typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeReference(268435456);
      int int0 = typeReference0.getTypeParameterIndex();
      assertEquals(0, int0);
      assertEquals(0, typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeReference typeReference0 = new TypeReference(0);
      int int0 = typeReference0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newTypeParameterReference(23, 22);
      assertEquals(387317760, typeReference0.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeReference typeReference0 = TypeReference.newSuperTypeReference(21);
      assertEquals(268440832, typeReference0.getValue());
  }
}
