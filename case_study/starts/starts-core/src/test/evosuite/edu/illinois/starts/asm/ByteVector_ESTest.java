/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:18:16 GMT 2017
 */

package edu.illinois.starts.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.illinois.starts.asm.ByteVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteVector_ESTest extends ByteVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        byteVector0.putByteArray(byteArray0, (byte)96, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("`n}Cc$=^r !>k");
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector0.encodeUTF8("`n}Cc$=^r !>k", (byte)0, 64);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put12((-1417), (-1417));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector1.encodeUTF8("", 1, 691);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.encodeUTF8("&5CjL?z{yQ%*W", 0, 41);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("5S*h%V5SgsE2rDz9OH");
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector1.put12(0, 0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector1.putByte(0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertNotNull(byteVector3);
      
      ByteVector byteVector4 = byteVector3.putShort((-3086));
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector4);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector3, byteVector4);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector0);
      assertSame(byteVector4, byteVector1);
      assertNotNull(byteVector4);
      
      ByteVector byteVector5 = byteVector4.put12(0, (-3086));
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector5);
      assertSame(byteVector1, byteVector4);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector3, byteVector4);
      assertSame(byteVector3, byteVector5);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector5);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector0);
      assertSame(byteVector4, byteVector1);
      assertSame(byteVector5, byteVector0);
      assertSame(byteVector5, byteVector1);
      assertSame(byteVector5, byteVector4);
      assertSame(byteVector5, byteVector2);
      assertSame(byteVector5, byteVector3);
      assertNotNull(byteVector5);
      
      ByteVector byteVector6 = byteVector5.putInt(0);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector6);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector6);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector5);
      assertSame(byteVector1, byteVector4);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector3, byteVector4);
      assertSame(byteVector3, byteVector5);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector6);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector5);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector0);
      assertSame(byteVector4, byteVector6);
      assertSame(byteVector4, byteVector1);
      assertSame(byteVector5, byteVector0);
      assertSame(byteVector5, byteVector1);
      assertSame(byteVector5, byteVector4);
      assertSame(byteVector5, byteVector2);
      assertSame(byteVector5, byteVector3);
      assertSame(byteVector5, byteVector6);
      assertSame(byteVector6, byteVector3);
      assertSame(byteVector6, byteVector0);
      assertSame(byteVector6, byteVector2);
      assertSame(byteVector6, byteVector4);
      assertSame(byteVector6, byteVector1);
      assertSame(byteVector6, byteVector5);
      assertNotNull(byteVector6);
      
      ByteVector byteVector7 = byteVector0.putLong(0);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector7);
      assertSame(byteVector0, byteVector6);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector7, byteVector3);
      assertSame(byteVector7, byteVector6);
      assertSame(byteVector7, byteVector0);
      assertSame(byteVector7, byteVector2);
      assertSame(byteVector7, byteVector4);
      assertSame(byteVector7, byteVector5);
      assertSame(byteVector7, byteVector1);
      assertNotNull(byteVector7);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt((-1782));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector1.putByte(0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector0.put11(0, 0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertNotNull(byteVector3);
      
      byte[] byteArray0 = new byte[8];
      byteVector3.data = byteArray0;
      ByteVector byteVector4 = byteVector3.put12(0, 0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector4);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector4, byteVector1);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector0);
      assertNotNull(byteVector4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(2047);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByte(2047);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      byte[] byteArray0 = new byte[3];
      byteVector1.data = byteArray0;
      ByteVector byteVector2 = byteVector0.putShort(2047);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      byteVector0.length = 42;
      ByteVector byteVector1 = byteVector0.putLong(42);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector0.putLong(42);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector2.putInt(62);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertNotNull(byteVector3);
      
      ByteVector byteVector4 = byteVector2.put11(1606, 1606);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector4);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector1);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector0);
      assertNotNull(byteVector4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(1);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByte(32);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(3293);
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        byteVector0.putUTF8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(1);
      assertNotNull(byteVector0);
      
      byteVector0.length = (-1);
      // Undeclared exception!
      try { 
        byteVector0.putUTF8("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(24);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByteArray((byte[]) null, 24, 24);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      byteVector1.data = null;
      // Undeclared exception!
      try { 
        byteVector0.putShort((-1411));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11(4, (-2364));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector1.putInt(4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      
      byte[] byteArray0 = new byte[2];
      byteVector1.data = byteArray0;
      // Undeclared exception!
      try { 
        byteVector2.putShort((-736));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("`n}Cc$=^r !>k");
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      byteVector1.data = null;
      // Undeclared exception!
      try { 
        byteVector0.putLong(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      byteVector0.length = (-893);
      // Undeclared exception!
      try { 
        byteVector0.putLong(1686L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -893
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByteArray((byte[]) null, 16, 0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      byteVector1.data = null;
      // Undeclared exception!
      try { 
        byteVector0.putInt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putLong(338);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      byteVector1.length = 194;
      // Undeclared exception!
      try { 
        byteVector0.putInt(194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putLong((-3071));
      byteVector1.data = null;
      // Undeclared exception!
      try { 
        byteVector0.putByteArray((byte[]) null, 4032, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(16, 0);
      byteVector1.data = null;
      // Undeclared exception!
      try { 
        byteVector0.putByte(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = (-3620);
      // Undeclared exception!
      try { 
        byteVector0.putByte(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3620
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = (-2619);
      // Undeclared exception!
      try { 
        byteVector0.put12(3, 920);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2619
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putShort(0);
      byteVector1.data = null;
      // Undeclared exception!
      try { 
        byteVector1.put11(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        byteVector0.encodeUTF8(":?,7ldwp[", (-1644), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      // Undeclared exception!
      try { 
        byteVector0.encodeUTF8((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-757));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        byteVector0.putByteArray(byteArray0, (byte)0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putInt(222);
      ByteVector byteVector2 = byteVector0.encodeUTF8("", 0, 0);
      assertSame(byteVector2, byteVector1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(1);
      // Undeclared exception!
      try { 
        byteVector0.encodeUTF8("", 402, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putInt(1435);
      byteVector1.data = null;
      // Undeclared exception!
      try { 
        byteVector0.put12((-2499), 503);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      byteVector0.put12(0, 0);
      ByteVector byteVector1 = byteVector0.put12(0, (byte)31);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.encodeUTF8("kLcWEBq}.1v[cC<7.", 1, 4623);
      ByteVector byteVector2 = byteVector1.putLong(4623);
      ByteVector byteVector3 = byteVector2.putShort(4623);
      assertSame(byteVector3, byteVector2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.put11(0, 0);
      byteVector1.length = 1706;
      // Undeclared exception!
      try { 
        byteVector1.encodeUTF8("", 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1704
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putByte(2047);
      byteVector1.length = (-1848);
      // Undeclared exception!
      try { 
        byteVector1.put11(2061, (-60));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1848
         //
         verifyException("edu.illinois.starts.asm.ByteVector", e);
      }
  }
}
