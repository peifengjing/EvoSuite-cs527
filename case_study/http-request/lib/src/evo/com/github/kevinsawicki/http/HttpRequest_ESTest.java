/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 09 08:16:59 GMT 2017
 */

package com.github.kevinsawicki.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.kevinsawicki.http.HttpRequest;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.security.KeyRep;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.PseudoColumnUsage;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.Month;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import javafx.application.ConditionalFeature;
import javafx.application.Preloader;
import javafx.css.StyleOrigin;
import javafx.geometry.HPos;
import javafx.geometry.NodeOrientation;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.geometry.Side;
import javafx.geometry.VerticalDirection;
import javafx.print.Collation;
import javafx.print.PageOrientation;
import javafx.print.PrintColor;
import javafx.print.PrintQuality;
import javafx.print.PrintSides;
import javafx.print.PrinterJob;
import javafx.scene.CacheHint;
import javafx.scene.DepthTest;
import javax.servlet.DispatcherType;
import javax.smartcardio.CardTerminals;
import javax.swing.JTable;
import javax.swing.SortOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpRequest_ESTest extends HttpRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      HttpRequest httpRequest1 = httpRequest0.userAgent("Expires");
      HttpRequest httpRequest2 = httpRequest1.useCaches(false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_7@dw%*iwg44k", "OPTIONS", 117, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("charset", "GET", sQLNonTransientConnectionException0);
      try { 
        httpRequest2.form((Object) null, (Object) sQLSyntaxErrorException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("TRACE");
      try { 
        httpRequest0.receive((OutputStream) mockPrintStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("}W");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("}W", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals("}W", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      boolean boolean1 = mockFile0.setReadable(false, false);
      assertFalse(boolean1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("}W", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals("}W", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "OPTIONS");
      assertNotNull(mockFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("}W", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals("}W", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals("OPTIONS", mockFile1.getName());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URL uRL0 = mockFile1.toURL();
      assertNotNull(uRL0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("}W", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals("}W", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals("OPTIONS", mockFile1.getName());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      String string0 = MockURL.toString(uRL0);
      assertNotNull(string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("file:/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", string0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("}W", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals("}W", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals("OPTIONS", mockFile1.getName());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      HashMap<RoundingMode, RoundingMode> hashMap0 = new HashMap<RoundingMode, RoundingMode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<RoundingMode, RoundingMode> hashMap1 = new HashMap<RoundingMode, RoundingMode>(hashMap0);
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      HttpRequest httpRequest0 = HttpRequest.post((CharSequence) "file:/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", (Map<?, ?>) hashMap1, false);
      assertNotNull(httpRequest0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      httpRequest0.getParam(";]E\"hg<X7+S~s'0R&", "boundary");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.charset();
      httpRequest0.accept((String) null);
      HttpRequest httpRequest1 = httpRequest0.trustAllCerts();
      byte[] byteArray0 = new byte[0];
      MockFile mockFile0 = new MockFile((String) null, "");
      try { 
        httpRequest1.send((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("}W");
      mockFile0.setReadable(false, false);
      MockFile mockFile1 = new MockFile(mockFile0, "OPTIONS");
      URL uRL0 = mockFile1.toURL();
      MockURL.toString(uRL0);
      HashMap<RoundingMode, RoundingMode> hashMap0 = new HashMap<RoundingMode, RoundingMode>();
      HashMap<RoundingMode, RoundingMode> hashMap1 = new HashMap<RoundingMode, RoundingMode>(hashMap0);
      HttpRequest httpRequest0 = HttpRequest.post((CharSequence) "file:/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", (Map<?, ?>) hashMap1, false);
      // Undeclared exception!
      try { 
        httpRequest0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 14);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.close();
      httpRequest2.copy(sequenceInputStream0, pipedOutputStream0);
      HttpRequest httpRequest3 = httpRequest1.uncompress(true);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest5.parameters("j7giq Zx");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      HttpRequest httpRequest6 = httpRequest4.headers(map0);
      httpRequest6.stream();
      httpRequest4.charset();
      Byte byte1 = new Byte((byte)11);
      HttpRequest.head(uRL0);
      httpRequest3.body();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 14);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      httpRequest2.copy(sequenceInputStream0, pipedOutputStream0);
      HttpRequest httpRequest3 = httpRequest1.uncompress(true);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest5.parameters("j7giq Zx");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      HttpRequest httpRequest6 = httpRequest4.headers(map0);
      httpRequest6.stream();
      httpRequest4.charset();
      Byte byte1 = new Byte((byte)11);
      HttpRequest.head(uRL0);
      MockFile mockFile0 = new MockFile("Cache-Control");
      httpRequest6.receive((File) mockFile0);
      httpRequest4.getParam("The connection has already been created. This method must be called before reading or writing to the request.", "Accept");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      Byte byte1 = new Byte((byte)11);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      httpRequest0.parameter("j7giq Zx", "Content-Length");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)7;
      mockFile0.delete();
      mockFile1.getAbsoluteFile();
      byteArray0[7] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        httpRequest0.writer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      // Undeclared exception!
      try { 
        httpRequest0.reader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      try { 
        httpRequest0.ok();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("+3", "+3", 532, "SUBSTR", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.acceptJson();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boundary");
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "fly1NljJ");
      // Undeclared exception!
      try { 
        httpRequest0.openOutput();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: fly1NljJ
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.parameters("OPTIONS");
      HttpRequest httpRequest1 = httpRequest0.header("Accept-Charset", "Accept-Charset");
      HttpRequest httpRequest2 = httpRequest0.ifNoneMatch("Proxy-Authorization");
      httpRequest2.byteStream();
      int[] intArray0 = new int[4];
      httpRequest2.acceptEncoding("POST");
      intArray0[0] = 201;
      httpRequest0.contentEncoding();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[eIy40", "&c:^qC#", 201, batchUpdateException0);
      httpRequest1.acceptCharset("Content-Length");
      // Undeclared exception!
      try { 
        httpRequest1.part("application/x-www-form-urlencoded", "GET");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      HttpRequest httpRequest3 = httpRequest2.contentType("Last-Modified", "Date");
      byte byte0 = ObjectStreamConstants.TC_BASE;
      httpRequest0.dateHeader("7,8rswbFm{IRTs");
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest5.parameters("j7giq Zx");
      HttpRequest httpRequest6 = httpRequest4.headers(map0);
      Object[] objectArray0 = new Object[0];
      HttpRequest.append((CharSequence) "Authorization", objectArray0);
      httpRequest6.trustAllHosts();
      httpRequest4.charset();
      Byte byte1 = new Byte((byte)112);
      httpRequest2.isBodyEmpty();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      // Undeclared exception!
      try { 
        httpRequest0.lastModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      httpRequest0.getParams("Accept-Charset");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Content-Encoding");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic("*}7fdeQc~&,(a+a", "");
      httpRequest0.closeOutput();
      httpRequest1.trustAllHosts();
      try { 
        httpRequest0.bufferedReader(">+T7TV)4Y5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: >+T7TV)4Y5
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "charset");
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.part("TRACE", "U8", "Authorization");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 14);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      httpRequest2.copy(sequenceInputStream0, pipedOutputStream0);
      HttpRequest httpRequest3 = httpRequest1.uncompress(true);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest5.parameters("j7giq Zx");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      HttpRequest httpRequest6 = httpRequest4.headers(map0);
      httpRequest6.stream();
      httpRequest4.charset();
      Byte byte1 = new Byte((byte)11);
      HttpRequest.head(uRL0);
      httpRequest4.bytes();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1^l", "1^l");
      MockFile mockFile1 = new MockFile(mockFile0, ":V4ds%n");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      httpRequest0.getParam(":V4ds%n", "1^l");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "If-None-Match");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"If-None-Match\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      HttpRequest.trace(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      HttpRequest httpRequest2 = httpRequest1.uncompress(false);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest3 = httpRequest2.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest4 = httpRequest2.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest4.parameters("j7giq Zx");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      HttpRequest httpRequest5 = httpRequest3.headers(map0);
      httpRequest5.stream();
      httpRequest3.charset();
      Byte byte1 = new Byte((byte)11);
      HttpRequest.head(uRL0);
      MockFile mockFile0 = new MockFile("HEAD", "Proxy-Authorization");
      try { 
        httpRequest4.part("Authorization", (File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        httpRequest0.badRequest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("Accept-Charset");
      HttpRequest.trace(uRL0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      stack0.toString();
      Object[] objectArray0 = new Object[0];
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("Cache-Control");
      try { 
        httpRequest0.badRequest();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("UTF-8");
      httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.basic("alw]{7", (String) null);
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      PrintQuality printQuality0 = PrintQuality.HIGH;
      AbstractMap.SimpleEntry<Component.BaselineResizeBehavior, PrintQuality> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Component.BaselineResizeBehavior, PrintQuality>(component_BaselineResizeBehavior0, printQuality0);
      try { 
        httpRequest1.form((Map.Entry<?, ?>) abstractMap_SimpleEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)7;
      mockFile1.getAbsoluteFile();
      byteArray0[7] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        httpRequest0.date();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("UTF-8");
      httpRequest0.headers("alw]{7");
      httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.basic("alw]{7", "Content-Length");
      httpRequest1.date();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      stack0.toString();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "G{{LV! fPE");
      // Undeclared exception!
      try { 
        httpRequest0.accept("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: G{{LV! fPE
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Msil?n<%?4>");
      HashMap<Proxy.Type, StandardProtocolFamily> hashMap0 = new HashMap<Proxy.Type, StandardProtocolFamily>();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic("charset", "Msil?n<%?4>");
      HttpRequest httpRequest2 = httpRequest1.connectTimeout(1956);
      try { 
        httpRequest2.part("OPTIONS", "User-Agent", "-T\")mI?^sN[ltxq`aC", "Content-Type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.stream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)7;
      mockFile1.getAbsoluteFile();
      byteArray0[7] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockFile1.setReadOnly();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload((-1L), 1L);
      // Undeclared exception!
      try { 
        httpRequest0.useCaches(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      httpRequest0.getParams("Accept-Charset");
      // Undeclared exception!
      try { 
        httpRequest0.proxyBasic("*}7fdeQc~&,(a+a", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.bufferedReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      httpRequest1.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      httpRequest2.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      // Undeclared exception!
      try { 
        httpRequest2.form((Map<?, ?>) null, "j7giq Zx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockURI mockURI0 = new MockURI();
      mockURI0.getMockedClassName();
      HashMap<CacheHint, Character.UnicodeScript> hashMap0 = new HashMap<CacheHint, Character.UnicodeScript>();
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) null, (Map<?, ?>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      httpRequest1.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest3 = httpRequest2.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      httpRequest1.header((String) null);
      HttpRequest httpRequest4 = httpRequest2.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest4.parameters("j7giq Zx");
      HttpRequest httpRequest5 = httpRequest3.headers(map0);
      httpRequest4.trustAllHosts();
      try { 
        httpRequest5.stream();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("WkzqPuB&SSSL", "qf/c7bl^J3Er", 11, "WkzqPuB&SSSL", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      Float float0 = new Float(1.0);
      // Undeclared exception!
      try { 
        httpRequest1.part((String) null, "Proxy-Authorization", (Number) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      linkedList0.toString();
      HashMap<SQLWarning, Month> hashMap0 = new HashMap<SQLWarning, Month>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[9];
      intArray0[0] = 47;
      intArray0[1] = 47;
      intArray0[2] = 47;
      intArray0[3] = 47;
      intArray0[4] = 47;
      intArray0[5] = 47;
      intArray0[6] = 0;
      intArray0[7] = 47;
      intArray0[8] = 47;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("56P?F");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("56P?F", "[|j~44)~bd./", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[|j~44)~bd./", "[]", sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("Parsing URI >failed", "Parsing URI >failed", 47, batchUpdateException0);
      Month month0 = Month.FEBRUARY;
      hashMap0.put(sQLWarning0, month0);
      SQLWarning sQLWarning1 = new SQLWarning("Parsing URI >failed", "[|j~44)~bd./");
      Month month1 = Month.JANUARY;
      hashMap0.put(sQLWarning1, month1);
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "[]", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: []?java.sql.SQLWarning@0000000001=JANUARY&java.sql.SQLWarning@0000000002=FEBRUARY
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      httpRequest1.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      httpRequest2.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest3 = httpRequest2.form((Map<?, ?>) hashMap0, "j7giq Zx");
      httpRequest3.parameters("j7giq Zx");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      try { 
        httpRequest2.send((Reader) inputStreamReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      try { 
        httpRequest0.code();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.charset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpRequest0.accept((String) null);
      httpRequest0.authorization("#|?GvCYx|\"x\"%d%4W");
      byte[] byteArray0 = new byte[0];
      HttpRequest.append((CharSequence) "Location", (Object[]) null);
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, 24, 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have offset of 24 and length of 24 with array of length 0
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) null, true, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      httpRequest1.followRedirects(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 14);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest3 = httpRequest2.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest4 = httpRequest2.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest4.parameters("j7giq Zx");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      HttpRequest httpRequest5 = httpRequest3.headers(map0);
      httpRequest5.stream();
      httpRequest3.charset();
      Byte byte1 = new Byte((byte)11);
      HttpRequest.head(uRL0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.reader("4[q^Rl9~y]#}>dX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(25);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringBuilder0;
      objectArray0[1] = (Object) charArray0;
      objectArray0[2] = (Object) charArray0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringBuilder0;
      objectArray0[5] = (Object) stringBuilder0;
      objectArray0[6] = (Object) charArray0;
      objectArray0[7] = (Object) stringBuilder0;
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) stringBuilder1, true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: (?([]=(&[C@31ac4c2=java.lang.Object@23a2638d&(=(&[C@31ac4c2=(
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)7;
      // Undeclared exception!
      try { 
        httpRequest0.receive((File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      httpRequest1.accept("If-None-Match");
      HttpRequest httpRequest2 = httpRequest0.disconnect();
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest3 = httpRequest2.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest4 = httpRequest2.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest4.parameters("j7giq Zx");
      HttpRequest httpRequest5 = httpRequest3.headers(map0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("d|FdoD}bjv", "");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      httpRequest2.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
      httpRequest5.trustAllHosts();
      httpRequest3.charset();
      Byte byte1 = new Byte((byte)11);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      httpRequest1.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest3 = HttpRequest.head(uRL0);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest4 = httpRequest2.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest4.parameters("j7giq Zx");
      HttpRequest httpRequest5 = httpRequest3.headers(map0);
      try { 
        httpRequest5.bufferedReader();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.userAgent("application/json");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-84);
      HttpRequest.Base64.encodeBytes(byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "rA==", false, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("boundary", "charset", 29, "charset", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.chunk(5828);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("Accept-Charset");
      httpRequest0.header("Accept-Charset", "Accept-Charset");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      try { 
        httpRequest0.writer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)2;
      HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<MultipleGradientPaint.ColorSpaceType, SortOrder> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, SortOrder>();
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      SortOrder sortOrder0 = SortOrder.UNSORTED;
      HttpRequest.setConnectionFactory((HttpRequest.ConnectionFactory) null);
      hashMap0.put(multipleGradientPaint_ColorSpaceType0, sortOrder0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      Object object0 = new Object();
      Integer integer0 = new Integer(430);
      try { 
        httpRequest0.form(object0, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      httpRequest0.getParams("UTF-8");
      httpRequest0.header("Authorization", "Authorization");
      HttpRequest.post(uRL0);
      try { 
        httpRequest0.reader("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      HttpRequest.put(uRL0);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)7;
      mockFile1.getAbsoluteFile();
      byteArray0[7] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        httpRequest0.notModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.parameters("OPTIONS");
      httpRequest0.header("Accept-Charset", "Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch("Proxy-Authorization");
      httpRequest1.byteStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        httpRequest1.message();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      try { 
        httpRequest0.notModified();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.header("Accept-Charset", "Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch("Proxy-Authorization");
      httpRequest1.byteStream();
      int[] intArray0 = new int[1];
      intArray0[0] = 201;
      httpRequest0.method();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      httpRequest1.cacheControl();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[eIy40", "&c:^qC#", 201, batchUpdateException0);
      try { 
        httpRequest0.form((Object) sQLInvalidAuthorizationSpecException0, (Object) httpRequest1, "PUT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("Accept-Charset");
      httpRequest0.header("Accept-Charset", "Accept-Charset");
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      stack0.toString();
      Object[] objectArray0 = new Object[0];
      try { 
        httpRequest0.startPart();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.headers((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload((-1897L), (-3606L));
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      HttpRequest httpRequest1 = httpRequest0.disconnect();
      HttpRequest httpRequest2 = httpRequest1.acceptJson();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("Class");
      try { 
        httpRequest2.part("User-Agent", "EY9Kfs|/6\"", "", (File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      httpRequest0.location();
      httpRequest0.getParams("Accept-Charset");
      httpRequest0.header("Accept-Charset", "Accept-Charset");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.toExternalForm(uRL0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "http://www.someFakeButWellFormedURL.org/fooExample");
      StringBuilder stringBuilder2 = stringBuilder1.insert(10, false);
      HttpRequest.post((CharSequence) stringBuilder2);
      URI uRI0 = MockURI.URI("http://www.someFakeButWellFormedURL.org/fooExample", "", "", 10, "", "DELETE", "HEAD");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      try { 
        httpRequest2.reader();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("dp.e(8>>nq*Z*be", "", 9, "", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest.put(uRL0);
      HashMap<Locale.FilteringMode, DispatcherType> hashMap0 = new HashMap<Locale.FilteringMode, DispatcherType>();
      httpRequest0.form((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        httpRequest0.isBodyEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.proxyAuthorization("TRACE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      HttpRequest httpRequest3 = httpRequest1.uncompress(true);
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
      
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      assertNotNull(httpRequest4);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      assertNotNull(httpRequest5);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest4);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      
      Map<String, String> map0 = httpRequest5.parameters("j7giq Zx");
      assertNotNull(map0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest4);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest6 = httpRequest4.headers(map0);
      assertNotNull(httpRequest6);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest6);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest6);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest6);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest6, httpRequest3);
      assertSame(httpRequest6, httpRequest4);
      assertSame(httpRequest6, httpRequest0);
      assertSame(httpRequest6, httpRequest2);
      assertSame(httpRequest6, httpRequest5);
      assertSame(httpRequest6, httpRequest1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(httpRequest6.ignoreCloseExceptions());
      assertEquals(8192, httpRequest6.bufferSize());
      
      HttpRequest httpRequest7 = httpRequest6.trustAllHosts();
      assertNotNull(httpRequest7);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest7);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest6);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest7);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest7);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest6);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest7);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest6);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest7);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest6, httpRequest7);
      assertSame(httpRequest6, httpRequest3);
      assertSame(httpRequest6, httpRequest4);
      assertSame(httpRequest6, httpRequest0);
      assertSame(httpRequest6, httpRequest2);
      assertSame(httpRequest6, httpRequest5);
      assertSame(httpRequest6, httpRequest1);
      assertSame(httpRequest7, httpRequest2);
      assertSame(httpRequest7, httpRequest5);
      assertSame(httpRequest7, httpRequest1);
      assertSame(httpRequest7, httpRequest0);
      assertSame(httpRequest7, httpRequest6);
      assertSame(httpRequest7, httpRequest3);
      assertSame(httpRequest7, httpRequest4);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(httpRequest6.ignoreCloseExceptions());
      assertEquals(8192, httpRequest6.bufferSize());
      assertEquals(8192, httpRequest7.bufferSize());
      assertTrue(httpRequest7.ignoreCloseExceptions());
      
      String string0 = httpRequest4.charset();
      assertNull(string0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest7);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest6);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest7);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest7);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest6);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest7);
      assertSame(httpRequest4, httpRequest3);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      httpRequest3.intHeader("Date", (int) (byte)112);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      httpRequest0.getParams("Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      Proxy proxy0 = Proxy.NO_PROXY;
      httpRequest_ConnectionFactory0.create(uRL0);
      httpRequest1.cacheControl();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      HttpRequest httpRequest2 = httpRequest1.useCaches(true);
      try { 
        httpRequest2.openOutput();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("GET");
      httpRequest1.followRedirects(false);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      Byte byte1 = new Byte((byte)11);
      try { 
        httpRequest0.notFound();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      httpRequest0.getParams("Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      Proxy proxy0 = Proxy.NO_PROXY;
      httpRequest1.getConnection();
      httpRequest0.dateHeader("u JB'`e`z", (-1L));
      httpRequest1.cacheControl();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("Accept-Charset");
      httpRequest0.header("Accept-Charset", "Accept-Charset");
      try { 
        httpRequest0.bytes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.created();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<DepthTest, DepthTest> hashMap0 = new HashMap<DepthTest, DepthTest>();
      DepthTest depthTest0 = DepthTest.INHERIT;
      hashMap0.put(depthTest0, depthTest0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) null, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.notFound();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.partHeader("TRACE", "To");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Class");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      Object object2 = new Object();
      MockFile mockFile0 = new MockFile("Class");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      httpRequest0.bufferSize();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      httpRequest0.closeOutputQuietly();
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      HttpRequest httpRequest3 = httpRequest2.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      HttpRequest httpRequest4 = httpRequest2.form((Map<?, ?>) hashMap0, "j7giq Zx");
      Map<String, String> map0 = httpRequest4.parameters("j7giq Zx");
      HttpRequest httpRequest5 = httpRequest3.headers(map0);
      httpRequest5.trustAllHosts();
      httpRequest3.charset();
      Byte byte1 = new Byte((byte)11);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.acceptGzipEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("UTF-8");
      httpRequest0.header("Authorization", "Authorization");
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      HttpRequest.trace(uRL0);
      try { 
        httpRequest0.serverError();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "BOOLEAN");
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.header("Accept-Charset", "Accept-Charset");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Double.BYTES;
      try { 
        httpRequest1.part("", "PUT", (Number) 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)3;
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, (-1183), (byte)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative offset: -1183
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "boundary");
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        httpRequest0.copy(dataInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "boundary");
      HashMap<Dialog.ModalityType, ConditionalFeature> hashMap0 = new HashMap<Dialog.ModalityType, ConditionalFeature>();
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      ConditionalFeature conditionalFeature0 = ConditionalFeature.SWING;
      hashMap0.put(dialog_ModalityType0, conditionalFeature0);
      try { 
        httpRequest0.form((Map<?, ?>) hashMap0, "Ticks");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: boundary
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      httpRequest1.useCaches(true);
      int int0 = Byte.BYTES;
      // Undeclared exception!
      try { 
        httpRequest1.writePartHeader("Authorization", "Expires");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.parameters("OPTIONS");
      httpRequest0.header("Accept-Charset", "Accept-Charset");
      httpRequest0.ifNoneMatch("Proxy-Authorization");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        httpRequest0.useProxy("}[i/CY", 73);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The connection has already been created. This method must be called before reading or writing to the request.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.contentType("PUT", "DELETE");
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      stack0.toString();
      Object[] objectArray0 = new Object[0];
      HttpRequest httpRequest2 = httpRequest1.useCaches(false);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("Cache-Control");
      try { 
        httpRequest2.body(atomicReference0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      try { 
        httpRequest0.receive((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.parameters("OPTIONS");
      HttpRequest httpRequest1 = httpRequest0.header("Accept-Charset", "Accept-Charset");
      HttpRequest httpRequest2 = httpRequest0.ifNoneMatch("Proxy-Authorization");
      httpRequest2.byteStream();
      int[] intArray0 = new int[1];
      intArray0[0] = 201;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[eIy40", "&c:^qC#", 201, batchUpdateException0);
      httpRequest1.toString();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) httpRequest0;
      objectArray0[1] = (Object) httpRequest0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) httpRequest0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) httpRequest0;
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "application/x-www-form-urlencoded", false, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      httpRequest0.getParams("Accept-Charset");
      httpRequest0.closeOutput();
      httpRequest0.url();
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      Proxy proxy0 = Proxy.NO_PROXY;
      try { 
        httpRequest_ConnectionFactory0.create(uRL0, proxy0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.authorization("application/json");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.headers();
      httpRequest0.intHeader((String) null);
      try { 
        httpRequest0.created();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.getParams("UTF-8");
      try { 
        httpRequest0.part("Server", "Accept-Charset", "gzip", "Server");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      httpRequest1.acceptJson();
      HttpRequest httpRequest2 = httpRequest1.useCaches(true);
      httpRequest2.referer("Accept-Charset");
      try { 
        httpRequest1.noContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      stack0.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stack0;
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) "[]";
      objectArray0[3] = (Object) stack0;
      objectArray0[4] = (Object) "[]";
      objectArray0[5] = (Object) stack0;
      objectArray0[6] = (Object) "[]";
      stack0.setSize(98);
      objectArray0[7] = (Object) stack0;
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "[]", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: []?[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null][]=&[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      // Undeclared exception!
      try { 
        httpRequest1.part((String) null, "boundary", (String) null, "BYTE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      // Undeclared exception!
      try { 
        httpRequest0.contentLength("PUT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"PUT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest.put((URL) null);
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.part("charset", (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) charset0;
      Locale locale0 = Locale.JAPAN;
      charset0.displayName(locale0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.connectTimeout((-540));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Msil?n<%?4>");
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.connectTimeout((-83));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "boundary");
      assertNotNull(httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      HttpRequest httpRequest1 = httpRequest0.copy(dataInputStream0, (OutputStream) null);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HashMap<ConditionalFeature, NodeOrientation> hashMap0 = new HashMap<ConditionalFeature, NodeOrientation>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest2 = httpRequest1.form((Map<?, ?>) hashMap0, "Content-Type");
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      try { 
        httpRequest2.dateHeader("Expires");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: boundary
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
      
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      Map<String, String> map0 = httpRequest0.getParams("U2");
      assertNotNull(map0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest0.acceptEncoding("5T~");
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      long long0 = httpRequest2.dateHeader("HEAD");
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals((-1L), long0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("B");
      assertNotNull(atomicReference0);
      assertEquals("B", atomicReference0.toString());
      
      try { 
        httpRequest2.body(atomicReference0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest2);
      assertNotSame(httpRequest2, httpRequest0);
      assertNotSame(httpRequest2, httpRequest1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.equals((Object)httpRequest0));
      assertFalse(httpRequest2.equals((Object)httpRequest1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 14);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-125)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-32), byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-125)}, byteArray0);
      assertNotNull(sequenceInputStream0);
      assertEquals((-32), byteArrayInputStream0.available());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpRequest httpRequest3 = httpRequest2.copy(sequenceInputStream0, pipedOutputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-125)}, byteArray0);
      assertNotNull(httpRequest3);
      assertNotSame(httpRequest2, httpRequest0);
      assertNotSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest3);
      assertNotSame(httpRequest3, httpRequest1);
      assertNotSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest2);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertEquals((-32), byteArrayInputStream0.available());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertFalse(httpRequest2.equals((Object)httpRequest0));
      assertFalse(httpRequest2.equals((Object)httpRequest1));
      assertFalse(httpRequest3.equals((Object)httpRequest1));
      assertFalse(httpRequest3.equals((Object)httpRequest0));
      
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)11);
      assertNotNull(byte0);
      assertEquals((byte)11, (byte)byte0);
      
      HttpRequest httpRequest4 = HttpRequest.head(uRL0);
      assertNotNull(httpRequest4);
      assertNotSame(httpRequest4, httpRequest1);
      assertNotSame(httpRequest4, httpRequest0);
      assertNotSame(httpRequest4, httpRequest2);
      assertNotSame(httpRequest4, httpRequest3);
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertFalse(httpRequest4.equals((Object)httpRequest1));
      assertFalse(httpRequest4.equals((Object)httpRequest0));
      assertFalse(httpRequest4.equals((Object)httpRequest2));
      assertFalse(httpRequest4.equals((Object)httpRequest3));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        httpRequest0.copy(bufferedInputStream0, (OutputStream) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest1.useCaches(true);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      HttpRequest httpRequest3 = httpRequest2.referer("Accept-Charset");
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest3);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      
      int int0 = Short.BYTES;
      assertEquals(2, int0);
      
      HttpRequest httpRequest4 = httpRequest2.ignoreCloseExceptions(true);
      assertNotNull(httpRequest4);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest3);
      assertSame(httpRequest2, httpRequest4);
      assertSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-26);
      try { 
        httpRequest1.send(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest2.send((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.contentEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("AAA8AAAAAAAA", string0);
      
      HashMap<MultipleGradientPaint.ColorSpaceType, SortOrder> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, SortOrder>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) byteArray0;
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "AAACAAAAAAAA", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: AAACAAAAAAAA?null[]=0&null[]=0&null[]=2&null[]=0&null[]=0&null[]=0&null[]=0&null[]=0&null[]=0
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest1.useCaches(true);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      try { 
        httpRequest2.partHeader("Content-Length", "ETag");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "To", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: To?null=
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("~jfr=b", "", 31, "}", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("}", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(31, uRL0.getPort());
      assertEquals(":31", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("~jfr=b", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("}", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.toString());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("}", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals(31, uRL0.getPort());
      assertEquals(":31", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("~jfr=b", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("}", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("Date");
      assertNotNull(atomicReference0);
      assertEquals("Date", atomicReference0.toString());
      
      // Undeclared exception!
      try { 
        httpRequest0.body(atomicReference0, "zYL$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      String string0 = httpRequest0.cacheControl();
      assertNull(string0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      try { 
        httpRequest0.buffer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[6] = object2;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Expires");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        httpRequest0.receive((PrintStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Map<String, String> map0 = httpRequest0.getParams("Accept-Charset");
      assertNotNull(map0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.header("Accept-Charset", "Accept-Charset");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      String string0 = httpRequest1.contentType();
      assertNull(string0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest0.uncompress(true);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.contentType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpRequest.keepAlive(false);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.part("Content-Type", "Content-Encoding");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      Map<String, String> map0 = httpRequest0.getParams("UTF-8");
      assertNotNull(map0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      try { 
        httpRequest0.header("Authorization", "Authorization");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      
      URL uRL1 = MockURL.URL(uRL0, "charset");
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/charset", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/charset", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/charset", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/charset", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      try { 
        httpRequest0.body("charset");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.message();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpRequest.keepAlive(false);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.acceptCharset("Accept-Encoding");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      Map<String, String> map0 = httpRequest0.getParams("Accept-Charset");
      assertNotNull(map0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.header("Accept-Charset", "Accept-Charset");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      boolean boolean0 = httpRequest1.isBodyEmpty();
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertFalse(boolean0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest1.authorization("pq3@eu:@D/&m{{/");
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      String string0 = MockURL.toExternalForm(uRL0);
      assertNotNull(string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", string0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.options((CharSequence) "http://www.someFakeButWellFormedURL.org/fooExample");
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("J}haSIBinGtQ*)d");
      assertNotNull(atomicReference0);
      assertEquals("J}haSIBinGtQ*)d", atomicReference0.toString());
      
      try { 
        httpRequest0.body(atomicReference0, "J}haSIBinGtQ*)d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Map<String, String> map0 = httpRequest0.getParams("Accept-Charset");
      assertNotNull(map0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.header("Accept-Charset", "Accept-Charset");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      try { 
        httpRequest1.noContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(886);
      assertNotNull(atomicInteger0);
      assertEquals(886.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)886, atomicInteger0.shortValue());
      assertEquals(886, atomicInteger0.get());
      assertEquals(886, atomicInteger0.intValue());
      assertEquals(886.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)118, atomicInteger0.byteValue());
      assertEquals(886L, atomicInteger0.longValue());
      assertEquals("886", atomicInteger0.toString());
      
      // Undeclared exception!
      try { 
        httpRequest0.code(atomicInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(54);
      assertNotNull(atomicInteger0);
      assertEquals(54, atomicInteger0.get());
      assertEquals(54.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(54, atomicInteger0.intValue());
      assertEquals((byte)54, atomicInteger0.byteValue());
      assertEquals("54", atomicInteger0.toString());
      assertEquals((short)54, atomicInteger0.shortValue());
      assertEquals(54.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(54L, atomicInteger0.longValue());
      
      try { 
        httpRequest0.code(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.parameters("E\"'5Yx]g;d'8n(l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      assertNotNull(httpRequest_UploadProgress0);
      
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest1.referer("charset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("}W");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("}W", mockFile0.getName());
      assertEquals("}W", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      
      boolean boolean1 = mockFile0.setReadable(false, false);
      assertFalse(boolean1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("}W", mockFile0.getName());
      assertEquals("}W", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "OPTIONS");
      assertNotNull(mockFile1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("}W", mockFile0.getName());
      assertEquals("}W", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("OPTIONS", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URL uRL0 = mockFile1.toURL();
      assertNotNull(uRL0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("}W", mockFile0.getName());
      assertEquals("}W", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("OPTIONS", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      String string0 = MockURL.toString(uRL0);
      assertNotNull(string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("file:/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", string0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("}W", mockFile0.getName());
      assertEquals("}W", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("OPTIONS", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      HashMap<RoundingMode, RoundingMode> hashMap0 = new HashMap<RoundingMode, RoundingMode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<RoundingMode, RoundingMode> hashMap1 = new HashMap<RoundingMode, RoundingMode>(hashMap0);
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      RoundingMode roundingMode1 = RoundingMode.DOWN;
      hashMap1.put(roundingMode0, roundingMode1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(roundingMode0, roundingMode1);
      assertNotSame(roundingMode1, roundingMode0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(roundingMode0.equals((Object)roundingMode1));
      assertFalse(roundingMode1.equals((Object)roundingMode0));
      
      HttpRequest httpRequest0 = HttpRequest.post((CharSequence) "file:/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", (Map<?, ?>) hashMap1, false);
      assertNotNull(httpRequest0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      assertNotNull(mockFileWriter0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("}W", mockFile0.getName());
      assertEquals("}W", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("OPTIONS", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 9);
      assertNotNull(bufferedWriter0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("}W", mockFile0.getName());
      assertEquals("}W", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("OPTIONS", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/}W/OPTIONS", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      // Undeclared exception!
      try { 
        httpRequest0.receive((Appendable) bufferedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.accept("Parsing URI failed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "z8fGiyu", 41, "z8fGiyu", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("z8fGiyu:41", uRL0.getAuthority());
      assertEquals("z8fGiyu", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("z8fGiyu", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("z8fGiyu", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(41, uRL0.getPort());
      assertEquals("", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("z8fGiyu:41", uRL0.getAuthority());
      assertEquals("z8fGiyu", uRL0.getHost());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("z8fGiyu", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("z8fGiyu", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(41, uRL0.getPort());
      assertEquals("", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.trustAllHosts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        HttpRequest.trace((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)68;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-1), (byte)60, (byte) (-97), (byte)79, (byte) (-18), (byte)68}, byteArray0);
      assertFalse(boolean0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "boundary", 109, "boundary", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals(109, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("boundary", uRL0.getFile());
      assertEquals("boundary:109", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getProtocol());
      assertEquals("boundary", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("boundary", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertEquals(109, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("boundary", uRL0.getFile());
      assertEquals("boundary:109", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getProtocol());
      assertEquals("boundary", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("boundary", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.contentLength((int) (byte) (-97));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      HttpRequest httpRequest3 = httpRequest1.uncompress(true);
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
      
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      assertNotNull(httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest2);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      assertNotNull(httpRequest5);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest2);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      
      String string0 = httpRequest4.charset();
      assertNull(string0);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest2);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      HttpRequest httpRequest6 = httpRequest3.contentLength((int) (byte)11);
      assertNotNull(httpRequest6);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest6);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest6, httpRequest1);
      assertSame(httpRequest6, httpRequest4);
      assertSame(httpRequest6, httpRequest2);
      assertSame(httpRequest6, httpRequest3);
      assertSame(httpRequest6, httpRequest5);
      assertSame(httpRequest6, httpRequest0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertEquals(8192, httpRequest6.bufferSize());
      assertTrue(httpRequest6.ignoreCloseExceptions());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest1.useCaches(true);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      try { 
        httpRequest2.stream();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("application/x-www-form-urlencoded");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        httpRequest0.body("com.github.kevinsawicki.http.HttpRequest$ConnectionFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "lkFG");
      assertFalse(boolean0);
      
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.append((CharSequence) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) null, true, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.header("Cannot have offset of %d and length of %d with array of length %d", "Cannot have offset of %d and length of %d with array of length %d");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest0.progress((HttpRequest.UploadProgress) null);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      ByteArrayOutputStream byteArrayOutputStream0 = httpRequest0.byteStream();
      assertNotNull(byteArrayOutputStream0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.options((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) null, false, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      try { 
        httpRequest0.body();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.acceptEncoding("E\"'5Yx]g;d'8n(l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest1 = httpRequest0.acceptGzipEncoding();
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "z8fGiyu", 41, "z8fGiyu", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("z8fGiyu:41", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(41, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("z8fGiyu", uRL0.getHost());
      assertEquals("z8fGiyu", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("z8fGiyu", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("z8fGiyu:41", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(41, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("z8fGiyu", uRL0.getHost());
      assertEquals("z8fGiyu", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("z8fGiyu", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.trustAllCerts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        httpRequest0.send((InputStream) pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("OPTIONS", "OPTIONS", 3163, "SHORT", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals(3163, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("OPTIONS", uRL0.getHost());
      assertEquals("SHORT", uRL0.getPath());
      assertEquals("options", uRL0.getProtocol());
      assertEquals("SHORT", uRL0.getFile());
      assertEquals("OPTIONS:3163", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      assertNotNull(httpRequest0);
      assertEquals(3163, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("OPTIONS", uRL0.getHost());
      assertEquals("SHORT", uRL0.getPath());
      assertEquals("options", uRL0.getProtocol());
      assertEquals("SHORT", uRL0.getFile());
      assertEquals("OPTIONS:3163", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.writePartHeader("To", "+?ApYq1@X", "^%<S2fJXElss:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string0 = charset0.displayName();
      assertNotNull(string0);
      assertEquals("UTF-8", string0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "UTF-8";
      objectArray0[1] = (Object) charset0;
      objectArray0[2] = (Object) "UTF-8";
      objectArray0[3] = (Object) "UTF-8";
      objectArray0[4] = (Object) "UTF-8";
      objectArray0[5] = (Object) "UTF-8";
      objectArray0[6] = (Object) charset0;
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "UTF-8", false, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("z+ncx");
      assertNotNull(stringBuilder0);
      assertEquals("z+ncx", stringBuilder0.toString());
      
      HashMap<HPos, Collation> hashMap0 = new HashMap<HPos, Collation>(138, 138);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) stringBuilder0, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: z+ncx
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Hm");
      assertNotNull(stringBuffer0);
      assertEquals("Hm", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) "Hm";
      objectArray0[3] = (Object) "Hm";
      objectArray0[4] = (Object) stringBuffer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "Hm";
      // Undeclared exception!
      try { 
        HttpRequest.append((CharSequence) stringBuffer0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.receive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("%2B", "%2B", 2251, "%2B", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("%2B", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("%2B:2251", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("%2B", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals(2251, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("%2B", uRL0.getFile());
      assertEquals("%2b", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("%2B", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("%2B:2251", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("%2B", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals(2251, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("%2B", uRL0.getFile());
      assertEquals("%2b", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.contentType("Must specify an even number of parameter names/values");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<CardTerminals.State, RoundingMode> hashMap0 = new HashMap<CardTerminals.State, RoundingMode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) null, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)122, (byte)0, (byte)0, (byte)4}, byteArray0);
      assertNotNull(string0);
      assertEquals("kAoAAAQ=", string0);
      
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest0.followRedirects(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuilder1.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.replace(0, 0, "7&hvSl@dD?tn_");
      assertNotNull(stringBuffer1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(13, stringBuffer0.length());
      assertEquals(13, stringBuffer1.length());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuffer0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals(13, stringBuffer0.length());
      
      StringBuilder stringBuilder3 = stringBuilder1.append((CharSequence) stringBuilder2);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals(13, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) stringBuilder1, true, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 7&hvSl@dD?tn_7&hvSl@dD?tn_
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      
      String string0 = MockURI.getRawSchemeSpecificPart(uRI0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      
      try { 
        HttpRequest.head((CharSequence) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes((byte[]) null, 438, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot serialize a null array.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        httpRequest0.part("]", (InputStream) sequenceInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 293);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        httpRequest0.part("", "\n=========\nBasedir: ", "STRUCT", (InputStream) pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      HttpRequest.setConnectionFactory(httpRequest_ConnectionFactory0);
      AtomicInteger atomicInteger0 = new AtomicInteger(1961);
      assertNotNull(atomicInteger0);
      assertEquals("1961", atomicInteger0.toString());
      assertEquals(1961, atomicInteger0.get());
      assertEquals((byte) (-87), atomicInteger0.byteValue());
      assertEquals(1961, atomicInteger0.intValue());
      assertEquals((short)1961, atomicInteger0.shortValue());
      assertEquals(1961.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1961L, atomicInteger0.longValue());
      assertEquals(1961.0, atomicInteger0.doubleValue(), 0.01);
      
      String string0 = atomicInteger0.toString();
      assertNotNull(string0);
      assertEquals("1961", string0);
      assertEquals("1961", atomicInteger0.toString());
      assertEquals(1961, atomicInteger0.get());
      assertEquals((byte) (-87), atomicInteger0.byteValue());
      assertEquals(1961, atomicInteger0.intValue());
      assertEquals((short)1961, atomicInteger0.shortValue());
      assertEquals(1961.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1961L, atomicInteger0.longValue());
      assertEquals(1961.0, atomicInteger0.doubleValue(), 0.01);
      
      Object[] objectArray0 = new Object[1];
      atomicInteger0.set(0);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      
      objectArray0[0] = (Object) httpRequest_ConnectionFactory0;
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "1961", false, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("application/x-www-form-urlencoded");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        httpRequest0.receive((Writer) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest((URL) null, "P>Kq(HA+Eexx6OKRA");
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      assertNotNull(httpRequest_UploadProgress0);
      
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest0.uncompress(true);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      // Undeclared exception!
      try { 
        httpRequest2.eTag();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("File ");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("File ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: File ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      assertNotNull(mockIOException0);
      assertEquals("File ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: File ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("File ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: File ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      mockIOException0.printStackTrace();
      assertEquals("File ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: File ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      assertNotNull(httpRequest_HttpRequestException0);
      assertEquals("File ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: File ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
      assertNotNull(iOException0);
      assertSame(mockIOException0, iOException0);
      assertSame(iOException0, mockIOException0);
      assertEquals("File ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: File ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      assertNotNull(httpRequest_UploadProgress0);
      
      httpRequest_UploadProgress0.onUpload(0L, (-1L));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 8, "=+<m/ `6", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("=+<m/ `6", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(":8", uRL0.getAuthority());
      assertEquals("=+<m/ `6", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(8, uRL0.getPort());
      assertEquals("", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("=+<m/ `6", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals(":8", uRL0.getAuthority());
      assertEquals("=+<m/ `6", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(8, uRL0.getPort());
      assertEquals("", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      PrinterJob.JobStatus printerJob_JobStatus0 = PrinterJob.JobStatus.CANCELED;
      PageOrientation pageOrientation0 = PageOrientation.PORTRAIT;
      AbstractMap.SimpleEntry<PrinterJob.JobStatus, PageOrientation> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<PrinterJob.JobStatus, PageOrientation>(printerJob_JobStatus0, pageOrientation0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      PageOrientation pageOrientation1 = abstractMap_SimpleEntry0.setValue(pageOrientation0);
      assertSame(pageOrientation0, pageOrientation1);
      assertSame(pageOrientation1, pageOrientation0);
      assertEquals(PageOrientation.PORTRAIT, pageOrientation1);
      
      // Undeclared exception!
      try { 
        httpRequest0.form((Map.Entry<?, ?>) abstractMap_SimpleEntry0, "=+<m/ `6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-116);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-110), (byte)34, (byte)29, (byte) (-72), (byte) (-65), (byte)0, (byte)35, (byte) (-116)}, byteArray0);
      assertNotNull(string0);
      assertEquals("A5IiAbi/A8OM", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(":KA8+<ZF;}[&");
      assertNotNull(string0);
      assertEquals("fzpAQTgrPFpAO31bJg==", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest1.followRedirects(false);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      HttpRequest httpRequest3 = httpRequest1.uncompress(true);
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
      
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      assertNotNull(httpRequest4);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest2);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      assertNotNull(httpRequest5);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest5.bufferSize());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      
      Map<String, String> map0 = httpRequest5.parameters("j7giq Zx");
      assertNotNull(map0);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest5.bufferSize());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HttpRequest httpRequest6 = httpRequest4.headers(map0);
      assertNotNull(httpRequest6);
      assertSame(httpRequest0, httpRequest6);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest6);
      assertSame(httpRequest4, httpRequest2);
      assertSame(httpRequest5, httpRequest6);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest6, httpRequest2);
      assertSame(httpRequest6, httpRequest4);
      assertSame(httpRequest6, httpRequest3);
      assertSame(httpRequest6, httpRequest1);
      assertSame(httpRequest6, httpRequest5);
      assertSame(httpRequest6, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest5.bufferSize());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(httpRequest6.ignoreCloseExceptions());
      assertEquals(8192, httpRequest6.bufferSize());
      
      HttpRequest httpRequest7 = httpRequest6.trustAllHosts();
      assertNotNull(httpRequest7);
      assertSame(httpRequest0, httpRequest6);
      assertSame(httpRequest0, httpRequest7);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest7);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest7);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest7);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest6);
      assertSame(httpRequest4, httpRequest2);
      assertSame(httpRequest5, httpRequest6);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest7);
      assertSame(httpRequest6, httpRequest2);
      assertSame(httpRequest6, httpRequest4);
      assertSame(httpRequest6, httpRequest3);
      assertSame(httpRequest6, httpRequest1);
      assertSame(httpRequest6, httpRequest5);
      assertSame(httpRequest6, httpRequest7);
      assertSame(httpRequest6, httpRequest0);
      assertSame(httpRequest7, httpRequest2);
      assertSame(httpRequest7, httpRequest5);
      assertSame(httpRequest7, httpRequest0);
      assertSame(httpRequest7, httpRequest1);
      assertSame(httpRequest7, httpRequest3);
      assertSame(httpRequest7, httpRequest4);
      assertSame(httpRequest7, httpRequest6);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest5.bufferSize());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(httpRequest6.ignoreCloseExceptions());
      assertEquals(8192, httpRequest6.bufferSize());
      assertTrue(httpRequest7.ignoreCloseExceptions());
      assertEquals(8192, httpRequest7.bufferSize());
      
      String string0 = httpRequest4.charset();
      assertNull(string0);
      assertSame(httpRequest0, httpRequest6);
      assertSame(httpRequest0, httpRequest7);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest7);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest7);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest7);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest6);
      assertSame(httpRequest4, httpRequest2);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      AbstractMap.SimpleImmutableEntry<Authenticator.RequestorType, ClientInfoStatus> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Authenticator.RequestorType, ClientInfoStatus>(authenticator_RequestorType0, clientInfoStatus0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Authenticator.RequestorType, ClientInfoStatus> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Authenticator.RequestorType, ClientInfoStatus>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      try { 
        httpRequest4.form((Map.Entry<?, ?>) abstractMap_SimpleEntry0, "boundary");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Month month0 = Month.MAY;
      PrintColor printColor0 = PrintColor.MONOCHROME;
      hashMap0.put(month0, printColor0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      try { 
        httpRequest0.form((Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("form-data; name=\"", "form-data; name=\"", 2975, "form-data; name=\"", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("form-data; name=\"", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("form-data; name=\"", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("form-data; name=\":2975", uRL0.getAuthority());
      assertEquals("form-data; name=\"", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("form-data; name=\"", uRL0.getFile());
      assertEquals(2975, uRL0.getPort());
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      assertNotNull(httpRequest0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("form-data; name=\"", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("form-data; name=\"", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("form-data; name=\":2975", uRL0.getAuthority());
      assertEquals("form-data; name=\"", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("form-data; name=\"", uRL0.getFile());
      assertEquals(2975, uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("form-data; name=\"", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("form-data; name=\"", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("form-data; name=\":2975", uRL0.getAuthority());
      assertEquals("form-data; name=\"", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("form-data; name=\"", uRL0.getFile());
      assertEquals(2975, uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      // Undeclared exception!
      try { 
        httpRequest1.header("Content-Encoding", (Number) (byte)121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-8");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertNotNull(mockFile1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/UTF-8", mockFile1.toString());
      assertEquals("UTF-8", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib", mockFile1.getParent());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URL uRL0 = mockFile1.toURL();
      assertNotNull(uRL0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/UTF-8", mockFile1.toString());
      assertEquals("UTF-8", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib", mockFile1.getParent());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "UTF-8");
      assertNotNull(httpRequest0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/UTF-8", mockFile1.toString());
      assertEquals("UTF-8", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib", mockFile1.getParent());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = mockFile1.createNewFile();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/UTF-8", mockFile1.toString());
      assertEquals("UTF-8", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib", mockFile1.getParent());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      assertNotNull(httpRequest_UploadProgress0);
      
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
      assertNotNull(httpRequest1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/UTF-8", mockFile1.toString());
      assertEquals("UTF-8", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib", mockFile1.getParent());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean1 = mockFile0.createNewFile();
      assertNotSame(mockFile0, mockFile1);
      assertTrue(boolean1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = mockFile0.setReadOnly();
      assertNotSame(mockFile0, mockFile1);
      assertTrue(boolean2);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HttpRequest httpRequest2 = httpRequest1.bufferSize(9);
      assertNotNull(httpRequest2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("UTF-8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", mockFile0.getName());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/UTF-8", mockFile1.toString());
      assertEquals("UTF-8", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(9, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(9, httpRequest1.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(9, httpRequest2.bufferSize());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedInputStream0.connect(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        httpRequest2.part("ETag", (InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      String string0 = MockURL.toString(uRL0);
      assertNotNull(string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.trace((CharSequence) "http://www.someFakeButWellFormedURL.org/fooExample");
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      
      String string1 = MockInetAddress.getHostName(inetAddress0);
      assertNotNull(string1);
      assertEquals("192.168.1.42", string1);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(string1.equals((Object)string0));
      
      try { 
        HttpRequest.encode("192.168.1.42");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 192.168.1.42
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest((CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<MultipleGradientPaint.ColorSpaceType, Thread.State> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Thread.State>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      Thread.State thread_State0 = Thread.State.WAITING;
      hashMap0.put(multipleGradientPaint_ColorSpaceType0, thread_State0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) null, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      HashMap<MultipleGradientPaint.ColorSpaceType, Collation> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Collation>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringBuffer stringBuffer1 = new StringBuffer("C{tQA8lL@R_GXbD$A");
      assertNotNull(stringBuffer1);
      assertEquals("C{tQA8lL@R_GXbD$A", stringBuffer1.toString());
      assertEquals(17, stringBuffer1.length());
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      
      StringBuffer stringBuffer2 = stringBuffer0.append(stringBuffer1);
      assertNotNull(stringBuffer2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(stringBuffer1, stringBuffer2);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotSame(stringBuffer2, stringBuffer1);
      assertEquals(17, stringBuffer0.length());
      assertEquals("C{tQA8lL@R_GXbD$A", stringBuffer0.toString());
      assertEquals("C{tQA8lL@R_GXbD$A", stringBuffer1.toString());
      assertEquals(17, stringBuffer1.length());
      assertEquals(17, stringBuffer2.length());
      assertEquals("C{tQA8lL@R_GXbD$A", stringBuffer2.toString());
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) stringBuffer0, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: C{tQA8lL@R_GXbD$A
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)5;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)50, (byte)47, (byte)0, (byte)16, (byte)0, (byte) (-49), (byte)5}, byteArray0);
      assertNotNull(string0);
      assertEquals("JTIvABAAzwU=", string0);
      
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("JTIvABAAzwU=", "JTIvABAAzwU=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: JTIvABAAzwU=
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Map<String, String> map0 = httpRequest0.getParams("");
      assertNotNull(map0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.header("", "");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      MockFile mockFile0 = new MockFile((File) null, "Proxy-Authorization");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals("Proxy-Authorization", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Proxy-Authorization", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      try { 
        httpRequest0.part("26dlIHka05AH@", "26dlIHka05AH@", (File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WK4C|s:%Tf";
      stringArray0[1] = "NYViI?W*sJna";
      stringArray0[2] = "&!:eJeGa[x&T8\"";
      stringArray0[3] = "http.proxyPort";
      HttpRequest.nonProxyHosts(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "boundary";
      HttpRequest.nonProxyHosts(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HttpRequest.nonProxyHosts(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HttpRequest httpRequest1 = httpRequest0.acceptCharset("v.RCWqw<ZpH+~/z;");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest1.contentType("application/json");
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      try { 
        httpRequest2.send((CharSequence) "DELETE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HttpRequest httpRequest1 = httpRequest0.acceptCharset((String) null);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)65, (int) (byte)65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have offset of 65 and length of 65 with array of length 1
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, 1925, (-1435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have length offset: -1435
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.SELECT_LIST_ONLY;
      AtomicReference<PseudoColumnUsage> atomicReference0 = new AtomicReference<PseudoColumnUsage>(pseudoColumnUsage0);
      assertNotNull(atomicReference0);
      assertEquals("SELECT_LIST_ONLY", atomicReference0.toString());
      
      String string0 = atomicReference0.toString();
      assertNotNull(string0);
      assertEquals("SELECT_LIST_ONLY", string0);
      assertEquals("SELECT_LIST_ONLY", atomicReference0.toString());
      
      HashMap<PseudoColumnUsage, Orientation> hashMap0 = new HashMap<PseudoColumnUsage, Orientation>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = HttpRequest.append((CharSequence) "SELECT_LIST_ONLY", (Map<?, ?>) hashMap0);
      assertNotNull(string1);
      assertEquals("SELECT_LIST_ONLY", string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.basic("Parsing URI failed", "uK6-)B1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URL uRL1 = MockURL.URL(uRL0, "To");
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/To", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/To", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/To", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/To", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      MockFile mockFile0 = new MockFile("application/json", "J0L97ZO_a},");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("J0L97ZO_a},", mockFile0.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/application/json/J0L97ZO_a},", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/application/json", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("J0L97ZO_a},", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/application/json/J0L97ZO_a},", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/application/json", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      try { 
        httpRequest0.receive((PrintStream) mockPrintStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockInetAddress mockInetAddress0 = new MockInetAddress();
      assertNotNull(mockInetAddress0);
      
      String string0 = mockInetAddress0.getMockedClassName();
      assertNotNull(string0);
      assertEquals("java.net.InetAddress", string0);
      
      HashMap<JTable.PrintMode, Side> hashMap0 = new HashMap<JTable.PrintMode, Side>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<JTable.PrintMode, Side> hashMap1 = new HashMap<JTable.PrintMode, Side>(hashMap0);
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "java.net.InetAddress", (Map<?, ?>) hashMap1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: java.net.InetAddress
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<PseudoColumnUsage, CacheHint> hashMap0 = new HashMap<PseudoColumnUsage, CacheHint>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.SELECT_LIST_ONLY;
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      CacheHint cacheHint0 = CacheHint.SCALE;
      hashMap0.put(pseudoColumnUsage0, cacheHint0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      CacheHint cacheHint1 = CacheHint.ROTATE;
      PseudoColumnUsage pseudoColumnUsage1 = PseudoColumnUsage.SELECT_LIST_ONLY;
      CacheHint cacheHint2 = hashMap0.put(pseudoColumnUsage1, cacheHint0);
      assertNotSame(cacheHint0, cacheHint1);
      assertSame(cacheHint0, cacheHint2);
      assertSame(pseudoColumnUsage1, pseudoColumnUsage0);
      assertNotSame(cacheHint2, cacheHint1);
      assertSame(cacheHint2, cacheHint0);
      assertEquals(CacheHint.SCALE, cacheHint2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(cacheHint0.equals((Object)cacheHint1));
      assertFalse(cacheHint2.equals((Object)cacheHint1));
      
      CacheHint cacheHint3 = hashMap0.put(pseudoColumnUsage0, cacheHint1);
      assertSame(pseudoColumnUsage0, pseudoColumnUsage1);
      assertNotSame(cacheHint1, cacheHint3);
      assertNotSame(cacheHint1, cacheHint0);
      assertNotSame(cacheHint1, cacheHint2);
      assertSame(cacheHint3, cacheHint0);
      assertSame(cacheHint3, cacheHint2);
      assertNotSame(cacheHint3, cacheHint1);
      assertEquals(CacheHint.SCALE, cacheHint3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(cacheHint1.equals((Object)cacheHint0));
      assertFalse(cacheHint1.equals((Object)cacheHint2));
      assertFalse(cacheHint3.equals((Object)cacheHint1));
      
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) null, (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
      assertNotNull(httpRequest0);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HttpRequest.proxyPort((-2535));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      try { 
        HttpRequest.delete((CharSequence) stringBuilder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      try { 
        httpRequest_ConnectionFactory0.create(uRL0, proxy0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.disconnect();
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest1.readTimeout(0);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HttpRequest.keepAlive(true);
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      assertNotNull(httpRequest0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.disconnect();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)2;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)126, (byte)2}, byteArray0);
      assertNotNull(string0);
      assertEquals("lA48", string0);
      
      try { 
        HttpRequest.post((CharSequence) "lH4C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: lH4C
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(244);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('3');
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("3", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("3", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      String string0 = charArrayWriter1.toString();
      assertNotNull(string0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("3", string0);
      assertEquals("3", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("3", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      try { 
        HttpRequest.get((CharSequence) "3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 3
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException((IOException) null);
      assertNotNull(httpRequest_HttpRequestException0);
      
      String string0 = httpRequest_HttpRequestException0.toString();
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[1] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) httpRequest_HttpRequestException0;
      objectArray0[4] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[5] = (Object) httpRequest_HttpRequestException0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable", false, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      String string0 = MockURL.getProtocol(uRL0);
      assertNotNull(string0);
      assertEquals("http", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      try { 
        HttpRequest.trace((CharSequence) "http");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: http
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Q", "Q");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: Q", sQLTransientConnectionException0.toString());
      assertEquals("Q", sQLTransientConnectionException0.getSQLState());
      assertEquals("Q", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      MockIOException mockIOException0 = new MockIOException("-IM(+9fl,T0", sQLTransientConnectionException0);
      assertNotNull(mockIOException0);
      assertEquals("java.sql.SQLTransientConnectionException: Q", sQLTransientConnectionException0.toString());
      assertEquals("Q", sQLTransientConnectionException0.getSQLState());
      assertEquals("Q", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      assertNotNull(httpRequest_HttpRequestException0);
      assertEquals("java.sql.SQLTransientConnectionException: Q", sQLTransientConnectionException0.toString());
      assertEquals("Q", sQLTransientConnectionException0.getSQLState());
      assertEquals("Q", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      String string0 = stack0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      ArrayList<KeyRep.Type> arrayList0 = new ArrayList<KeyRep.Type>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = stack0.containsAll(arrayList0);
      assertTrue(boolean0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[]";
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "[]", false, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$VALUES");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "$VALUES");
      assertNotNull(httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Map<String, String> map0 = httpRequest0.getParams("UTF-8");
      assertNotNull(map0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpRequest0.header("Authorization", "Authorization");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: $VALUES
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) null, false, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HttpRequest.maxConnections(12);
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(740);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (double) 0);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("0.0", stringBuilder2.toString());
      assertEquals("0.0", stringBuilder3.toString());
      
      StringBuilder stringBuilder4 = stringBuilder3.append(0);
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertEquals("0.00", stringBuilder0.toString());
      assertEquals("0.00", stringBuilder1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("0.00", stringBuilder2.toString());
      assertEquals("0.00", stringBuilder3.toString());
      assertEquals("0.00", stringBuilder4.toString());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuilder2;
      objectArray0[1] = (Object) stringBuilder4;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) stringBuilder2;
      objectArray0[4] = (Object) stringBuilder2;
      objectArray0[5] = (Object) stringBuilder4;
      String string0 = HttpRequest.append((CharSequence) stringBuilder4, objectArray0);
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertEquals("0.00?0.00=0.00&=0.00&0.00=0.00", string0);
      assertEquals("0.00", stringBuilder0.toString());
      assertEquals("0.00", stringBuilder1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("0.00", stringBuilder2.toString());
      assertEquals("0.00", stringBuilder3.toString());
      assertEquals("0.00", stringBuilder4.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("dp.e(8>>nq*Z*be", "", 9, "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.toExternalForm());
      assertEquals(9, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("dp.e(8>>nq*z*be", uRL0.getProtocol());
      assertEquals(":9", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.toExternalForm());
      assertEquals(9, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("dp.e(8>>nq*z*be", uRL0.getProtocol());
      assertEquals(":9", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HashMap<Locale.FilteringMode, DispatcherType> hashMap0 = new HashMap<Locale.FilteringMode, DispatcherType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.toExternalForm());
      assertEquals(9, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("dp.e(8>>nq*z*be", uRL0.getProtocol());
      assertEquals(":9", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest1.ifModifiedSince(923L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) null, true, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" Fr1'\"BA9|");
      assertNotNull(stringBuilder0);
      assertEquals(" Fr1'\"BA9|", stringBuilder0.toString());
      
      try { 
        HttpRequest.put((CharSequence) stringBuilder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol:  Fr1'\"BA9|
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      try { 
        httpRequest0.part("Last-Modified", "Content-Length", "User-Agent");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpRequest0.form((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Map<String, String> map0 = httpRequest0.getParams("Accept-Charset");
      assertNotNull(map0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.proxyBasic("*}7fdeQc~&,(a+a", "");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest1.ifModifiedSince((-1L));
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      HttpRequest httpRequest3 = httpRequest0.closeOutput();
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      
      try { 
        httpRequest0.bufferedReader(">+T7TV)4Y5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(14);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      assertNotNull(mockPrintStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "w~Zk>B-8lxh5N\" Yy";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "w~Zk>B-8lxh5N\" Yy", objectArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("w~Zk>B-8lxh5N\" Yy", byteArrayOutputStream0.toString());
      assertEquals(18, byteArrayOutputStream0.size());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      assertNotNull(mockPrintStream1);
      assertEquals("w~Zk>B-8lxh5N\" Yy", byteArrayOutputStream0.toString());
      assertEquals(18, byteArrayOutputStream0.size());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      
      mockPrintStream1.print("\n");
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, printStream0);
      assertEquals("w~Zk>B-8lxh5N\" Yy\n", byteArrayOutputStream0.toString());
      assertEquals(19, byteArrayOutputStream0.size());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      
      HttpRequest.RequestOutputStream httpRequest_RequestOutputStream0 = new HttpRequest.RequestOutputStream(mockPrintStream1, "", 704);
      assertNotNull(httpRequest_RequestOutputStream0);
      assertEquals("w~Zk>B-8lxh5N\" Yy\n", byteArrayOutputStream0.toString());
      assertEquals(19, byteArrayOutputStream0.size());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("From");
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1893);
      assertNotNull(bufferedOutputStream0);
      
      HttpRequest.RequestOutputStream httpRequest_RequestOutputStream0 = null;
      try {
        httpRequest_RequestOutputStream0 = new HttpRequest.RequestOutputStream(bufferedOutputStream0, "{!&ubv9ql5", 1893);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {!&ubv9ql5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        MockURL.URL("e", "File ", "(9;n342]L`SvH<d((z");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: e
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URL uRL1 = MockURL.URL(uRL0, "v{Aq");
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL1);
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      long long0 = httpRequest0.expires();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1L), long0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpRequest httpRequest1 = httpRequest0.trustAllCerts();
      assertNotNull(httpRequest1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string0 = httpRequest0.cacheControl();
      assertNull(string0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpRequest httpRequest2 = httpRequest1.chunk(6);
      assertNotNull(httpRequest2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpRequest httpRequest3 = httpRequest2.ifNoneMatch("\"s/5;Qqg");
      assertNotNull(httpRequest3);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest3);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpRequest httpRequest4 = HttpRequest.options(uRL1);
      assertNotNull(httpRequest4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpRequest4, httpRequest3);
      assertNotSame(httpRequest4, httpRequest1);
      assertNotSame(httpRequest4, httpRequest2);
      assertNotSame(httpRequest4, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/v{Aq", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpRequest4.equals((Object)httpRequest3));
      assertFalse(httpRequest4.equals((Object)httpRequest1));
      assertFalse(httpRequest4.equals((Object)httpRequest2));
      assertFalse(httpRequest4.equals((Object)httpRequest0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      String string0 = byteArrayOutputStream0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "", false, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ARRAY");
      assertNotNull(mockFile0);
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals("ARRAY", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      assertNotNull(mockFile1);
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals("ARRAY", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URL uRL0 = mockFile1.toURL();
      assertNotNull(uRL0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals("ARRAY", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals("ARRAY", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Content-Encoding");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)7;
      File file0 = mockFile1.getAbsoluteFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals("ARRAY", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("ARRAY", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      
      byteArray0[7] = (byte)119;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte) (-38), (byte)35, (byte) (-88), (byte)34, (byte) (-1), (byte)7, (byte)119}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpRequest httpRequest1 = httpRequest0.useProxy("QS", 16);
      assertNotNull(httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertSame(httpRequest0, httpRequest1);
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals("ARRAY", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.equals((Object)file0));
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 12);
      assertNotNull(pipedReader0);
      
      try { 
        httpRequest1.send((Reader) pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      String string0 = httpRequest0.charset();
      assertNull(string0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.accept((String) null);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest0.trustAllCerts();
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      
      byte[] byteArray0 = new byte[0];
      int int0 = 24;
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, 24, 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have offset of 24 and length of 24 with array of length 0
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Location");
      assertNotNull(stringBuilder0);
      assertEquals("Location", stringBuilder0.toString());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = 's';
      charArray0[2] = 'o';
      charArray0[3] = ',';
      charArray0[4] = '5';
      charArray0[5] = '\"';
      charArray0[6] = 'r';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'+', 's', 'o', ',', '5', '\"', 'r'}, charArray0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("Location+so,5\"r", stringBuilder0.toString());
      assertEquals("Location+so,5\"r", stringBuilder1.toString());
      
      try { 
        HttpRequest.post((CharSequence) stringBuilder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: Location+so,5\"r
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      
      String string0 = MockInetAddress.toString(inetAddress0);
      assertNotNull(string0);
      assertEquals("/192.168.1.42", string0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      
      HashMap<VerticalDirection, Pos> hashMap0 = new HashMap<VerticalDirection, Pos>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "/192.168.1.42", (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: /192.168.1.42
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      HttpRequest httpRequest1 = httpRequest0.proxyAuthorization("xO}nof>UF\"{N");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/HEAD/Proxy-Authorization");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)57;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)30, (byte) (-66), (byte) (-88), (byte) (-63), (byte) (-24), (byte)57}, byteArray0);
      assertTrue(boolean0);
      
      HttpRequest httpRequest2 = HttpRequest.trace(uRL0);
      assertNotNull(httpRequest2);
      assertNotSame(httpRequest2, httpRequest0);
      assertNotSame(httpRequest2, httpRequest1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.equals((Object)httpRequest0));
      assertFalse(httpRequest2.equals((Object)httpRequest1));
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-125);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpRequest httpRequest3 = httpRequest1.uncompress(false);
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest3);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertNotSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest1, httpRequest3);
      assertNotSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest3.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
      
      HttpRequest httpRequest4 = httpRequest3.header("4ej;f&'TK\"3.*=4TNNl", (Number) (byte)112);
      assertNotNull(httpRequest4);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertNotSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertNotSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest3.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      assertFalse(httpRequest4.equals((Object)httpRequest2));
      
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest5 = httpRequest3.form((Map<?, ?>) hashMap0, "j7giq Zx");
      assertNotNull(httpRequest5);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertNotSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertNotSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest3.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      assertFalse(httpRequest5.equals((Object)httpRequest2));
      
      Map<String, String> map0 = httpRequest5.parameters("j7giq Zx");
      assertNotNull(map0);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertNotSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertNotSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest3.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      assertFalse(httpRequest5.equals((Object)httpRequest2));
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpRequest httpRequest6 = httpRequest4.headers(map0);
      assertNotNull(httpRequest6);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest6);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertNotSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertNotSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest6);
      assertNotSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest6);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest6, httpRequest1);
      assertSame(httpRequest6, httpRequest4);
      assertSame(httpRequest6, httpRequest5);
      assertSame(httpRequest6, httpRequest3);
      assertNotSame(httpRequest6, httpRequest2);
      assertSame(httpRequest6, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(httpRequest6.ignoreCloseExceptions());
      assertEquals(8192, httpRequest6.bufferSize());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest3.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      assertFalse(httpRequest4.equals((Object)httpRequest2));
      assertFalse(httpRequest5.equals((Object)httpRequest2));
      assertFalse(httpRequest6.equals((Object)httpRequest2));
      
      InputStream inputStream0 = httpRequest6.stream();
      assertNotNull(inputStream0);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest6);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertNotSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertNotSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest6);
      assertNotSame(httpRequest5, httpRequest2);
      assertSame(httpRequest5, httpRequest6);
      assertSame(httpRequest5, httpRequest0);
      assertSame(httpRequest5, httpRequest4);
      assertSame(httpRequest5, httpRequest1);
      assertSame(httpRequest5, httpRequest3);
      assertSame(httpRequest6, httpRequest1);
      assertSame(httpRequest6, httpRequest4);
      assertSame(httpRequest6, httpRequest5);
      assertSame(httpRequest6, httpRequest3);
      assertNotSame(httpRequest6, httpRequest2);
      assertSame(httpRequest6, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpRequest5.ignoreCloseExceptions());
      assertEquals(8192, httpRequest5.bufferSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(httpRequest6.ignoreCloseExceptions());
      assertEquals(8192, httpRequest6.bufferSize());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest3.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      assertFalse(httpRequest4.equals((Object)httpRequest2));
      assertFalse(httpRequest5.equals((Object)httpRequest2));
      assertFalse(httpRequest6.equals((Object)httpRequest2));
      
      String string0 = httpRequest4.charset();
      assertNull(string0);
      assertSame(httpRequest0, httpRequest5);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest6);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertNotSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest6);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest4);
      assertSame(httpRequest3, httpRequest5);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest5);
      assertNotSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest6);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(httpRequest4, httpRequest2);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest5);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest6);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest3.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      assertFalse(httpRequest4.equals((Object)httpRequest2));
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      HttpRequest httpRequest7 = HttpRequest.head(uRL0);
      assertNotNull(httpRequest7);
      assertNotSame(httpRequest7, httpRequest4);
      assertNotSame(httpRequest7, httpRequest6);
      assertNotSame(httpRequest7, httpRequest0);
      assertNotSame(httpRequest7, httpRequest2);
      assertNotSame(httpRequest7, httpRequest3);
      assertNotSame(httpRequest7, httpRequest1);
      assertNotSame(httpRequest7, httpRequest5);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest7.bufferSize());
      assertTrue(httpRequest7.ignoreCloseExceptions());
      assertFalse(httpRequest7.equals((Object)httpRequest4));
      assertFalse(httpRequest7.equals((Object)httpRequest6));
      assertFalse(httpRequest7.equals((Object)httpRequest0));
      assertFalse(httpRequest7.equals((Object)httpRequest2));
      assertFalse(httpRequest7.equals((Object)httpRequest3));
      assertFalse(httpRequest7.equals((Object)httpRequest1));
      assertFalse(httpRequest7.equals((Object)httpRequest5));
      
      MockFile mockFile0 = new MockFile("HEAD", "Proxy-Authorization");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(7L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/HEAD", mockFile0.getParent());
      assertEquals("Proxy-Authorization", mockFile0.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/HEAD/Proxy-Authorization", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      
      // Undeclared exception!
      try { 
        httpRequest5.part("Authorization", (File) mockFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Msil?n<%?4>");
      assertNotNull(stringBuffer0);
      assertEquals(11, stringBuffer0.length());
      assertEquals("Msil?n<%?4>", stringBuffer0.toString());
      
      HashMap<Proxy.Type, StandardProtocolFamily> hashMap0 = new HashMap<Proxy.Type, StandardProtocolFamily>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) stringBuffer0, (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: Msil?n<%?4>
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockURL mockURL0 = new MockURL();
      assertNotNull(mockURL0);
      
      String string0 = mockURL0.getMockedClassName();
      assertNotNull(string0);
      assertEquals("java.net.URL", string0);
      
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "java.net.URL", (Map<?, ?>) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: java.net.URL
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockURL mockURL0 = new MockURL();
      assertNotNull(mockURL0);
      
      String string0 = mockURL0.getMockedClassName();
      assertNotNull(string0);
      assertEquals("java.net.URL", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockURL0;
      objectArray0[1] = (Object) "java.net.URL";
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "java.net.URL", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: java.net.URL?org.evosuite.runtime.mock.java.net.MockURL@3834f5ef=java.net.URL
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
      
      HashMap<StyleOrigin, CacheHint> hashMap0 = new HashMap<StyleOrigin, CacheHint>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      MockFile mockFile0 = new MockFile("Server", "ARRAY");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/Server", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/Server/ARRAY", mockFile0.toString());
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      MockFile mockFile1 = new MockFile(mockFile0, "Proxy-Authorization");
      assertNotNull(mockFile1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/Server", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/Server/ARRAY", mockFile0.toString());
      assertEquals("ARRAY", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/Server/ARRAY", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/Server/ARRAY/Proxy-Authorization", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertEquals("Proxy-Authorization", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      try { 
        httpRequest0.receive((File) mockFile1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      Map<String, String> map0 = httpRequest0.getParams("Accept-Charset");
      assertNotNull(map0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.header("Accept-Charset", "Accept-Charset");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String string0 = stack0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "[]", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: []
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertNotNull(httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      Map<String, String> map0 = httpRequest0.getParams("Accept-Charset");
      assertNotNull(map0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpRequest httpRequest1 = httpRequest0.proxyBasic("*}7fdeQc~&,(a+a", "");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      
      HttpRequest httpRequest2 = httpRequest0.closeOutput();
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      try { 
        httpRequest0.bufferedReader(">+T7TV)4Y5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "ARRAY";
      MockFile mockFile0 = new MockFile("ARRAY");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("ARRAY", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ARRAY", mockFile0.toString());
      
      MockFile mockFile1 = new MockFile(mockFile0, "ARRAY");
      assertNotNull(mockFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("ARRAY", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ARRAY", mockFile0.toString());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URL uRL0 = mockFile1.toURL();
      assertNotNull(uRL0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("ARRAY", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ARRAY", mockFile0.toString());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("ARRAY", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ARRAY", mockFile0.toString());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)7;
      File file0 = mockFile1.getAbsoluteFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("ARRAY", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ARRAY", mockFile0.toString());
      assertEquals("ARRAY", mockFile1.getName());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", mockFile1.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY", file0.getParent());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/ARRAY/ARRAY", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("ARRAY", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)mockFile1));
      
      byteArray0[7] = (byte)119;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte) (-38), (byte) (-30), (byte) (-88), (byte)34, (byte) (-1), (byte)7, (byte)119}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        httpRequest0.writePartHeader("ARRAY", "ED_|m7qZ-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "RelativeFileSet{basedir:";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) charset0;
      String string1 = HttpRequest.append((CharSequence) "RelativeFileSet{basedir:", objectArray0);
      assertNotNull(string1);
      assertEquals("RelativeFileSet{basedir:?UTF-8=UTF-8", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "RelativeFileSet{basedir:", (Map<?, ?>) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: RelativeFileSet{basedir:
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      
      HashMap<Month, PrintColor> hashMap0 = new HashMap<Month, PrintColor>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HttpRequest httpRequest1 = httpRequest0.userAgent("Expires");
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      HttpRequest httpRequest2 = httpRequest1.useCaches(false);
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      
      HttpRequest httpRequest3 = httpRequest2.referer("Accept-Charset");
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest3);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      
      int int0 = Short.BYTES;
      assertEquals(2, int0);
      
      try { 
        httpRequest3.part("ETag", (Number) 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      try { 
        HttpRequest.options((CharSequence) "d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: d
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "<raAH0";
      MockFile mockFile0 = new MockFile("<raAH0", "nativelib");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("nativelib", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/<raAH0/nativelib", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/cs527/evosuite/case_study/http-request/lib/<raAH0", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      assertEquals((byte)117, byte0);
      
      String string1 = "To";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "To", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: To
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNotNull(httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      
      Map<String, String> map0 = httpRequest0.getParams("UTF-8");
      assertNotNull(map0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      assertNotNull(httpURLConnection0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertNull(httpURLConnection0.getContentType());
      assertEquals("POST", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getDoOutput());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertNull(httpURLConnection0.getContentEncoding());
      assertEquals("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      
      HttpRequest httpRequest1 = httpRequest0.basic("alw]{7", (String) null);
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      long long0 = httpRequest1.date();
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertEquals((-1L), long0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      
      // Undeclared exception!
      try { 
        httpRequest0.part("application/x-www-form-urlencoded", "GET");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      String string0 = null;
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      int int0 = 3826;
      String string1 = "";
      HashMap<PrintSides, Preloader.StateChangeNotification.Type> hashMap0 = new HashMap<PrintSides, Preloader.StateChangeNotification.Type>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PrintSides printSides0 = PrintSides.ONE_SIDED;
      Preloader.StateChangeNotification.Type preloader_StateChangeNotification_Type0 = Preloader.StateChangeNotification.Type.BEFORE_INIT;
      hashMap0.put(printSides0, preloader_StateChangeNotification_Type0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "alw]{7", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: alw]{7?javafx.print.PrintSides@0000000001=BEFORE_INIT
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("C?=lass");
      assertNotNull(stringBuilder0);
      assertEquals("C?=lass", stringBuilder0.toString());
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[0] = object0;
      objectArray0[2] = (Object) "C?=lass";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "C?=lass";
      objectArray0[5] = (Object) "C?=lass";
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[6] = object2;
      objectArray0[7] = (Object) stringBuilder0;
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) stringBuilder0, true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: C?=lass&java.lang.Object@46806935=&C?=lass=java.lang.Object@e1445e5&C?=lass=C?=lass&java.lang.Object@77d219fa=C?=lass
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      httpRequest0.parameters("OPTIONS");
      httpRequest0.header("Accept-Charset", "Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch("Proxy-Authorization");
      httpRequest1.byteStream();
      int[] intArray0 = new int[4];
      intArray0[0] = 201;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[eIy40", "&c:^qC#", 201, batchUpdateException0);
      try { 
        httpRequest0.form((Object) sQLInvalidAuthorizationSpecException0, (Object) httpRequest1, "PUT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpRequest.keepAlive(true);
      String string0 = "To";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "To";
      objectArray0[1] = (Object) "To";
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "To", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: To?To=To
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      linkedList0.toString();
      HashMap<SQLWarning, Month> hashMap0 = new HashMap<SQLWarning, Month>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Parsing URI >failed";
      SQLWarning sQLWarning0 = new SQLWarning("Parsing URI >failed", "[|j~44)~bd./");
      Month month0 = Month.JANUARY;
      hashMap0.put(sQLWarning0, month0);
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "[]", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: []?java.sql.SQLWarning@0000000001=JANUARY
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-97);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)2;
      HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<MultipleGradientPaint.ColorSpaceType, SortOrder> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, SortOrder>();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) byteArray0;
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "AJ8CAAAAAAAA", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: AJ8CAAAAAAAA?null[]=0&null[]=-97&null[]=2&null[]=0&null[]=0&null[]=0&null[]=0&null[]=0&null[]=0
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }
}
