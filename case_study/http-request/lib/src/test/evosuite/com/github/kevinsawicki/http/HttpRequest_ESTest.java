/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:43:28 GMT 2017
 */

package com.github.kevinsawicki.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.kevinsawicki.http.HttpRequest;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.text.Normalizer;
import java.time.Month;
import java.util.AbstractMap;
import java.util.Formatter;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiFunction;
import java.util.function.Function;
import javax.servlet.DispatcherType;
import javax.servlet.SessionTrackingMode;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import javax.tools.DocumentationTool;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockNetworkInterface;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpRequest_ESTest extends HttpRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.part("PUT", "Proxy-Authorization", "User-Agent", "Date");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      AtomicReference<Month> atomicReference0 = new AtomicReference<Month>();
      atomicReference0.toString();
      Object[] objectArray0 = new Object[0];
      Map<String, String> map0 = httpRequest0.getParams("Z}");
      httpRequest0.headers(map0);
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "null", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: null
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jdbc:default:connection");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile1 = new MockFile(mockFile0, "jdbc:default:connection");
      URL uRL0 = mockFile1.toURL();
      URL uRL1 = MockURL.URL(uRL0, "Oqz?QIt8xNDr!)gA2");
      HttpRequest httpRequest0 = new HttpRequest(uRL1, "Oqz?QIt8xNDr!)gA2");
      // Undeclared exception!
      try { 
        httpRequest0.stream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HttpRequest.nonProxyHosts(stringArray0);
      HashMap<DispatcherType, SessionTrackingMode> hashMap0 = new HashMap<DispatcherType, SessionTrackingMode>();
      DispatcherType dispatcherType0 = DispatcherType.FORWARD;
      SessionTrackingMode sessionTrackingMode0 = SessionTrackingMode.URL;
      hashMap0.put(dispatcherType0, sessionTrackingMode0);
      DispatcherType dispatcherType1 = DispatcherType.INCLUDE;
      SessionTrackingMode sessionTrackingMode1 = SessionTrackingMode.URL;
      SessionTrackingMode sessionTrackingMode2 = SessionTrackingMode.COOKIE;
      Function<Object, SessionTrackingMode> function0 = (Function<Object, SessionTrackingMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(sessionTrackingMode2).when(function0).apply(any());
      hashMap0.computeIfAbsent(dispatcherType1, function0);
      hashMap0.put(dispatcherType1, sessionTrackingMode1);
      HttpRequest.append((CharSequence) "d3dQ;K.V1OepVF3C?", (Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "d3dQ;K.V1OepVF3C?", false, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: d3dQ;K.V1OepVF3C?
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "):DXe1DNedD#");
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.url();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      HttpRequest.options((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.notFound();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "charset");
      // Undeclared exception!
      try { 
        httpRequest0.acceptGzipEncoding();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: charset
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.ok();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.cacheControl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        httpRequest0.intHeader("H:,P0/bL8|`}|l:", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpRequest.keepAlive(false);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      MockURL.getFile(uRL0);
      Object[] objectArray0 = new Object[0];
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "");
      MockFile mockFile0 = new MockFile("ETag");
      HttpRequest httpRequest1 = httpRequest0.useProxy("Content-Type", 1);
      try { 
        httpRequest1.send((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpRequest.keepAlive(false);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      MockURL.getFile(uRL0);
      Object[] objectArray0 = new Object[0];
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "c");
      MockFile mockFile0 = new MockFile("ETag");
      // Undeclared exception!
      try { 
        httpRequest0.authorization("/fooExample");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: c
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.reader("password");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.bytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "r");
      // Undeclared exception!
      try { 
        httpRequest0.basic("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: r
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.writePartHeader("connection_type", "connection_type", "connection_type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "r");
      // Undeclared exception!
      try { 
        httpRequest0.contentType("<{P`7r+O1UcuWgAXA=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: r
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.part("application/x-www-form-urlencoded", "UTF-8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boundary");
      httpRequest0.cacheControl();
      try { 
        httpRequest0.part((String) null, "https.proxyHost", "https.proxyHost", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oB}#A9$&\"$f)I1Z`K[V");
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Server");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "get_column_name";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "get_column_name";
      objectArray0[5] = (Object) "get_column_name";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) httpRequest0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("get_column_name", objectArray0);
      // Undeclared exception!
      try { 
        httpRequest0.receive(printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = HttpRequest.head(uRL0);
      httpRequest1.server();
      httpRequest1.ignoreCloseExceptions(false);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      httpRequest0.contentType();
      try { 
        httpRequest0.notModified();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.part("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      httpRequest0.toString();
      HttpRequest httpRequest1 = httpRequest0.contentType("Content-Type", "Expires");
      httpRequest1.trustAllCerts();
      httpRequest0.header("If-None-Match");
      // Undeclared exception!
      try { 
        httpRequest0.useProxy(",}si%56#(4z35{dE", 875);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The connection has already been created. This method must be called before reading or writing to the request.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      try { 
        httpRequest0.body("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<ClientInfoStatus, Dialog.ModalExclusionType> hashMap0 = new HashMap<ClientInfoStatus, Dialog.ModalExclusionType>();
      hashMap0.clone();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      hashMap0.put(clientInfoStatus0, dialog_ModalExclusionType0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      BiFunction<Object, Object, Dialog.ModalExclusionType> biFunction0 = (BiFunction<Object, Object, Dialog.ModalExclusionType>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(dialog_ModalExclusionType1).when(biFunction0).apply(any() , any());
      hashMap0.compute(clientInfoStatus1, biFunction0);
      HttpRequest httpRequest0 = new HttpRequest((URL) null, "\r\n");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Referer", "Accept-Encoding");
      // Undeclared exception!
      try { 
        httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      try { 
        httpRequest0.part("Ob2<kxh.eZ", "", (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(uRL0, "", uRLStreamHandler1);
      int int0 = Float.MAX_EXPONENT;
      HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State>();
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put(multipleGradientPaint_ColorSpaceType0, cardTerminals_State0);
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      HttpRequest.setConnectionFactory(httpRequest_ConnectionFactory0);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        httpRequest0.followRedirects(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      httpRequest1.ignoreCloseExceptions(false);
      AtomicInteger atomicInteger0 = new AtomicInteger(21);
      HttpRequest httpRequest2 = httpRequest0.acceptCharset("Am1nXH");
      KeyRep.Type keyRep_Type0 = KeyRep.Type.PRIVATE;
      HashMap<Window.Type, Proxy.Type> hashMap0 = new HashMap<Window.Type, Proxy.Type>();
      HttpRequest.append((CharSequence) "", (Map<?, ?>) hashMap0);
      Window.Type window_Type0 = Window.Type.UTILITY;
      AbstractMap.SimpleImmutableEntry<KeyRep.Type, Window.Type> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<KeyRep.Type, Window.Type>(keyRep_Type0, window_Type0);
      AbstractMap.SimpleEntry<KeyRep.Type, Window.Type> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<KeyRep.Type, Window.Type>(abstractMap_SimpleImmutableEntry0);
      try { 
        httpRequest2.form((Map.Entry<?, ?>) abstractMap_SimpleEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      try { 
        httpRequest0.body();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      MockURI.URI("POST", "Last-Modified", "Content-Encoding");
      httpRequest0.intHeader("2*sFZ!.0b?vHY2/Ce", 0);
      httpRequest0.charset();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.dateHeader("\"; filename=\"", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, ")3O|;vBMY~vkPbe", uRLStreamHandler0);
      HttpRequest.post(uRL0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.expires();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      MockURI.toASCIIString(uRI0);
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "", (Map<?, ?>) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      int int0 = Float.MAX_EXPONENT;
      // Undeclared exception!
      try { 
        httpRequest1.part("", (Number) 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      URL uRL0 = MockURL.getHttpExample();
      httpRequest_ConnectionFactory0.create(uRL0);
      MockNetworkInterface mockNetworkInterface0 = new MockNetworkInterface();
      mockNetworkInterface0.getMockedClassName();
      HashMap<Component.BaselineResizeBehavior, Dialog.ModalExclusionType> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Dialog.ModalExclusionType>();
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "java.net.NetworkInterface", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: java.net.NetworkInterface
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HttpRequest.keepAlive(true);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("", "", 2147483645, "", uRLStreamHandler0);
      HashMap<CryptoPrimitive, DataTruncation> hashMap0 = new HashMap<CryptoPrimitive, DataTruncation>();
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "", (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)5;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)5;
      HttpRequest.Base64.encodeBytes(byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArray0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "zzs/BS8F";
      objectArray0[6] = (Object) "zzs/BS8F";
      objectArray0[7] = (Object) byteArray0;
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "zzs/BS8F", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: zzs/BS8F?[B@61edfa6=java.lang.Object@471ceca8&[B@61edfa6=java.lang.Object@75843bf&java.lang.Object@5863229a=zzs/BS8F&zzs/BS8F[]=-49&zzs/BS8F[]=59&zzs/BS8F[]=63&zzs/BS8F[]=5&zzs/BS8F[]=47&zzs/BS8F[]=5
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a");
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.userAgent("a");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      httpRequest0.lastModified();
      httpRequest1.ignoreCloseExceptions(false);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      httpRequest0.basic("Date", "If-None-Match");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.authorization("boundarty");
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      try { 
        httpRequest1.body(atomicReference0, "User-Agent");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("?QuA1+Mm)7*");
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      httpRequest_HttpRequestException0.getMessage();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: ?QuA1+Mm)7*";
      objectArray0[1] = (Object) httpRequest_HttpRequestException0;
      objectArray0[2] = (Object) "?QuA1+Mm)7*";
      objectArray0[3] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: ?QuA1+Mm)7*";
      objectArray0[4] = (Object) httpRequest_HttpRequestException0;
      objectArray0[5] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: ?QuA1+Mm)7*";
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable: ?QuA1+Mm)7*", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: org.evosuite.runtime.mock.java.lang.mockthrowable
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "jdbc:hsqldb:", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.post(uRL1);
      HttpRequest httpRequest1 = httpRequest0.bufferSize(5);
      // Undeclared exception!
      try { 
        httpRequest1.serverError();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpRequest.Base64.encode("");
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-121);
      HttpRequest.Base64.encodeBytes(byteArray0);
      try { 
        HttpRequest.get((CharSequence) "KgAAJoc=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: KgAAJoc=
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.trace((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.options((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Cannot have length offset: ");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Cannot have length offset: ";
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) charBuffer0, true, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Quk%k\\]0");
      mockIOException0.toString();
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      httpRequest_HttpRequestException0.printStackTrace();
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockIOException0;
      objectArray0[1] = (Object) "Quk%k\\]0";
      objectArray0[2] = (Object) iOException0;
      objectArray0[3] = (Object) iOException0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) httpRequest_HttpRequestException0;
      objectArray0[6] = (Object) iOException0;
      objectArray0[7] = (Object) mockIOException0;
      objectArray0[8] = (Object) iOException0;
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "Quk%k\\]0", false, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) stringWriter0;
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) stringBuffer0, false, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpRequest.Base64.encode("Size must be greater than zero");
      try { 
        HttpRequest.post((CharSequence) "U2l6ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: U2l6ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJv
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "iS>f,;1585");
      mockFile1.toURI();
      URL uRL0 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.badRequest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.append((CharSequence) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      String[] stringArray0 = new String[0];
      HttpRequest.nonProxyHosts(stringArray0);
      try { 
        httpRequest0.badRequest();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      // Undeclared exception!
      try { 
        httpRequest0.acceptEncoding("-J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Locale locale0 = Locale.forLanguageTag("a;'}t*A5ETXqg;AZX");
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayLanguage(locale1);
      locale0.getUnicodeLocaleKeys();
      charset0.displayName(locale0);
      charset0.aliases();
      try { 
        HttpRequest.delete((CharSequence) "UTF-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: UTF-8
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Month month0 = Month.JUNE;
      StandardLocation standardLocation0 = StandardLocation.CLASS_OUTPUT;
      AbstractMap.SimpleEntry<Month, StandardLocation> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Month, StandardLocation>(month0, standardLocation0);
      abstractMap_SimpleEntry0.toString();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) month0;
      objectArray0[1] = (Object) "JUNE=CLASS_OUTPUT";
      objectArray0[2] = (Object) "JUNE=CLASS_OUTPUT";
      objectArray0[3] = (Object) abstractMap_SimpleEntry0;
      objectArray0[4] = (Object) standardLocation0;
      objectArray0[5] = (Object) month0;
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "JUNE=CLASS_OUTPUT", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: JUNE=CLASS_OUTPUT?JUNE=JUNE=CLASS_OUTPUT&JUNE=CLASS_OUTPUT=JUNE=CLASS_OUTPUT&CLASS_OUTPUT=JUNE
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "8Fe-W{-*=9^");
      HashMap<Thread.State, SQLTransactionRollbackException> hashMap0 = new HashMap<Thread.State, SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "OPTIONS", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: OPTIONS
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getHostName(inetAddress0);
      HashMap<SortOrder, Authenticator.RequestorType> hashMap0 = new HashMap<SortOrder, Authenticator.RequestorType>();
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "127.0.0.1", (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: 127.0.0.1
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, InputStream> hashMap0 = new HashMap<SQLNonTransientConnectionException, InputStream>();
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) null, (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.displayName();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) "UTF-8";
      objectArray0[2] = (Object) "UTF-8";
      objectArray0[3] = (Object) charset0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "UTF-8", true, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("ci)uh:6)x I", "ci)uh:6)x I", 1, "~nl", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.useCaches(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("!>Hv[T`$B(");
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      httpRequest_HttpRequestException0.toString();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: !>Hv[T`$B(", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: org.evosuite.runtime.mock.java.lang.mockthrowable
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      String[] stringArray0 = new String[0];
      HttpRequest.nonProxyHosts(stringArray0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      httpRequest0.acceptCharset("Last-Modified");
      httpRequest0.useCaches(true);
      // Undeclared exception!
      try { 
        httpRequest0.readTimeout((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      // Undeclared exception!
      try { 
        httpRequest0.readTimeout((-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", (-1), "", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.readTimeout((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.send((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) uRL0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) httpRequest0;
      objectArray0[3] = (Object) httpRequest0;
      objectArray0[4] = (Object) httpRequest0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) httpRequest0;
      // Undeclared exception!
      try { 
        HttpRequest.append((CharSequence) "User-Agent", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-54);
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte) (-31), 162);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative offset: -31
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, Proxy.Type> hashMap0 = new HashMap<SQLSyntaxErrorException, Proxy.Type>();
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) null, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      httpRequest0.followRedirects(false);
      httpRequest0.contentLength();
      // Undeclared exception!
      try { 
        httpRequest0.contentLength("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      httpRequest0.acceptGzipEncoding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Cache-Control");
      httpRequest0.parameter("Content-Encoding", "");
      httpRequest0.acceptCharset((String) null);
      HttpRequest.get(uRL0);
      HttpRequest.RequestOutputStream httpRequest_RequestOutputStream0 = null;
      try {
        httpRequest_RequestOutputStream0 = new HttpRequest.RequestOutputStream(mockFileOutputStream0, "HEAD", 117);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // HEAD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2575);
      HttpRequest.RequestOutputStream httpRequest_RequestOutputStream0 = null;
      try {
        httpRequest_RequestOutputStream0 = new HttpRequest.RequestOutputStream(byteArrayOutputStream0, "Nt[>", 2575);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Nt[>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.displayName((Locale) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "UTF-8";
      objectArray0[1] = (Object) "UTF-8";
      objectArray0[2] = (Object) "UTF-8";
      objectArray0[3] = (Object) "UTF-8";
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "UTF-8", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: UTF-8?UTF-8=UTF-8&UTF-8=UTF-8
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("http.maxConnections");
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      httpRequest_HttpRequestException0.getMessage();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable: http.maxConnections", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: org.evosuite.runtime.mock.java.lang.mockthrowable
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) null, true, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getHostAddress(inetAddress0);
      HashMap<LayoutStyle.ComponentPlacement, String> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, String>();
      hashMap0.keySet();
      HttpRequest.append((CharSequence) "192.168.1.42", (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockNetworkInterface mockNetworkInterface0 = new MockNetworkInterface();
      mockNetworkInterface0.getMockedClassName();
      try { 
        HttpRequest.put((CharSequence) "java.net.NetworkInterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: java.net.NetworkInterface
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) null, false, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      try { 
        httpRequest0.writer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HttpRequest.nonProxyHosts(stringArray0);
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("com.github.kevinsawicki.http.HttpRequest$Base64", "shutdown");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: com.github.kevinsawicki.http.HttpRequest$Base64
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpRequest.proxyHost("\u0002J+^A");
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "\u0002J+^A", false, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: \u0002J+^A
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) null, false, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockURI.getRawAuthority(uRI1);
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpRequest.proxyPort(66);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("Accept-Charset", "YV-Y4b;");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleEntry1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest0.uncompress(true);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      long long0 = httpRequest2.dateHeader("application/x-www-form-urlencoded", 3254L);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertEquals(3254L, long0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      HttpRequest httpRequest3 = httpRequest0.acceptEncoding((String) null);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest3.bufferSize());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest3);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      HttpURLConnection httpURLConnection0 = httpRequest_ConnectionFactory0.create(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      assertNull(httpURLConnection0.getContentType());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertNull(httpURLConnection0.getContentEncoding());
      assertEquals("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotNull(httpURLConnection0);
      assertNotSame(uRL0, uRL1);
      
      HashMap<Window.Type, PseudoColumnUsage> hashMap0 = new HashMap<Window.Type, PseudoColumnUsage>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HttpRequest httpRequest4 = httpRequest1.form((Map<?, ?>) hashMap0, "charset");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(8192, httpRequest4.bufferSize());
      assertTrue(httpRequest4.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest4);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest4);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest4, httpRequest1);
      assertSame(httpRequest4, httpRequest3);
      assertSame(httpRequest4, httpRequest0);
      assertSame(httpRequest4, httpRequest2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.proxyBasic("D5K~M:!M?uk^v|", "YQ'T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.equals((Object)httpRequest0));
      assertNotNull(httpRequest1);
      assertNotSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.proxyAuthorization("d1FepM;(%WQ{");
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest1.equals((Object)httpRequest0));
      assertFalse(httpRequest2.equals((Object)httpRequest0));
      assertNotNull(httpRequest2);
      assertNotSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertNotSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      MockFile mockFile0 = new MockFile("boundary");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("boundary", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("boundary", mockFile0.getName());
      assertNotNull(mockFile0);
      
      try { 
        httpRequest0.send((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "'%", uRLStreamHandler0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      // Undeclared exception!
      try { 
        httpRequest0.header("'%", "Ol;Ia!<-wF3h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      assertNotNull(httpRequest_HttpRequestException0);
      
      Throwable[] throwableArray0 = httpRequest_HttpRequestException0.getSuppressed();
      assertNotNull(throwableArray0);
      
      String string0 = httpRequest_HttpRequestException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) httpRequest_HttpRequestException0;
      objectArray0[1] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[2] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[3] = (Object) httpRequest_HttpRequestException0;
      objectArray0[4] = (Object) httpRequest_HttpRequestException0;
      objectArray0[5] = (Object) mockIOException0;
      objectArray0[6] = (Object) httpRequest_HttpRequestException0;
      objectArray0[7] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable";
      String string1 = HttpRequest.append((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", objectArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable?org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable=org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable&org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable=org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable&org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable=org.evosuite.runtime.mock.java.lang.MockThrowable&org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable=org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.buffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      assertNotNull(httpRequest_HttpRequestException0);
      
      Throwable[] throwableArray0 = httpRequest_HttpRequestException0.getSuppressed();
      assertNotNull(throwableArray0);
      
      String string0 = httpRequest_HttpRequestException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[2] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[3] = (Object) httpRequest_HttpRequestException0;
      objectArray0[4] = (Object) httpRequest_HttpRequestException0;
      objectArray0[5] = (Object) mockIOException0;
      objectArray0[7] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable";
      String string1 = HttpRequest.append((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", objectArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable?null=org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable&org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable=org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable&org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable=org.evosuite.runtime.mock.java.lang.MockThrowable&null=org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      String string0 = charset0.displayName();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", string0);
      assertNotNull(string0);
      assertSame(charset0, charset1);
      
      HashMap<SortOrder, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<SortOrder, GraphicsDevice.WindowTranslucency>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+", "rw]fx]X`uC");
      assertEquals("java.sql.SQLTimeoutException: +", sQLTimeoutException0.toString());
      assertEquals("+", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("rw]fx]X`uC", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      hashMap0.remove((Object) sQLTimeoutException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLTimeoutException: +", sQLTimeoutException0.toString());
      assertEquals("+", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("rw]fx]X`uC", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "UTF-8", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: UTF-8
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<LayoutStyle.ComponentPlacement> stack0 = new Stack<LayoutStyle.ComponentPlacement>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string0 = stack0.toString();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) "[]", (Map<?, ?>) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: []
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.accept("-rR_GDKwvb9BQY");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.body((AtomicReference<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Window.Type, RowIdLifetime> hashMap0 = new HashMap<Window.Type, RowIdLifetime>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) null, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest((URL) null, "W*q`]j?Pb5)/nX+,>");
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Proxy-Authorization");
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.println(900L);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      assertNotNull(outputStreamWriter0);
      
      mockPrintStream0.print((double) 900L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        httpRequest0.receive((Writer) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        httpRequest0.header("", (Number) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNotNull(inetAddress0);
      
      String string0 = MockInetAddress.toString(inetAddress0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", string0);
      assertNotNull(string0);
      
      HashMap<GroupLayout.Alignment, RoundingMode> hashMap0 = new HashMap<GroupLayout.Alignment, RoundingMode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "/127.0.0.1", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: /127.0.0.1
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<InputStream, SQLException> hashMap0 = new HashMap<InputStream, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) null, (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpURLConnection httpURLConnection0 = httpRequest_ConnectionFactory0.create(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertNull(httpURLConnection0.getContentEncoding());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertNull(httpURLConnection0.getContentType());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      assertNotNull(httpURLConnection0);
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      try { 
        httpRequest0.receive((Writer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      HttpRequest httpRequest3 = httpRequest2.trustAllHosts();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest2, httpRequest3);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(32);
      assertEquals(32.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(32, atomicInteger0.get());
      assertEquals((short)32, atomicInteger0.shortValue());
      assertEquals((byte)32, atomicInteger0.byteValue());
      assertEquals(32L, atomicInteger0.longValue());
      assertEquals(32, atomicInteger0.intValue());
      assertEquals("32", atomicInteger0.toString());
      assertEquals(32.0, atomicInteger0.doubleValue(), 0.01);
      assertNotNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      try { 
        httpRequest0.part("):DXe1DNedD#", "):DXe1DNedD#", "):DXe1DNedD#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "1=", uRLStreamHandler0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      // Undeclared exception!
      try { 
        httpRequest0.partHeader("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest((URL) null, "W*q`]j?Pb5)/nX+,>");
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.disconnect();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toString());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler1);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("; charset=", uRL1.getFile());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("; charset=", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("; charset=", uRL1.getPath());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("; charset=", uRL1.getFile());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("; charset=", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("; charset=", uRL1.getPath());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boundary");
      assertFalse(boolean0);
      
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("; charset=", uRL1.getFile());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("; charset=", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("; charset=", uRL1.getPath());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.bufferedReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("H0e~[?2NG~gG", "", 6, "H0e~[?2NG~gG", uRLStreamHandler0);
      assertEquals(":6", uRL0.getAuthority());
      assertEquals("2NG~gG", uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(6, uRL0.getPort());
      assertEquals("h0e~[?2ng~gg", uRL0.getProtocol());
      assertEquals("H0e~[?2NG~gG", uRL0.getFile());
      assertEquals("H0e~[", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      String string0 = MockURL.getUserInfo(uRL0);
      assertEquals(":6", uRL0.getAuthority());
      assertEquals("2NG~gG", uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(6, uRL0.getPort());
      assertEquals("h0e~[?2ng~gg", uRL0.getProtocol());
      assertEquals("H0e~[?2NG~gG", uRL0.getFile());
      assertEquals("H0e~[", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) null, false, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_SESSION;
      AbstractMap.SimpleEntry<MultipleGradientPaint.ColorSpaceType, RowIdLifetime> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<MultipleGradientPaint.ColorSpaceType, RowIdLifetime>(multipleGradientPaint_ColorSpaceType0, rowIdLifetime0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<MultipleGradientPaint.ColorSpaceType, RowIdLifetime> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<MultipleGradientPaint.ColorSpaceType, RowIdLifetime>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<MultipleGradientPaint.ColorSpaceType, RowIdLifetime> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<MultipleGradientPaint.ColorSpaceType, RowIdLifetime>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      try { 
        httpRequest0.form((Map.Entry<?, ?>) abstractMap_SimpleEntry1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<ClientInfoStatus, Dialog.ModalExclusionType> hashMap0 = new HashMap<ClientInfoStatus, Dialog.ModalExclusionType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Object, Object> hashMap1 = (HashMap<Object, Object>)hashMap0.clone();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      BiFunction<Object, Object, Dialog.ModalExclusionType> biFunction0 = (BiFunction<Object, Object, Dialog.ModalExclusionType>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(clientInfoStatus0, biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpRequest httpRequest0 = new HttpRequest((URL) null, "\r\n");
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.openOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockIOException mockIOException0 = new MockIOException("http.maxConnections");
      assertNotNull(mockIOException0);
      
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      assertNotNull(httpRequest_HttpRequestException0);
      
      String string0 = httpRequest_HttpRequestException0.getMessage();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: http.maxConnections", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      try { 
        httpRequest0.startPart();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      assertEquals("spPXIRkA", string0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-109), (byte) (-41), (byte)33, (byte)25, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      try { 
        HttpRequest.options((CharSequence) "spPXIRkA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: spPXIRkA
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) "?QuA1+Mm)7*";
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "?QuA1+Mm)7*", true, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify an even number of parameter names/values
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      assertEquals("application/x-www-form-urlencoded", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      try { 
        httpRequest0.receive((Appendable) charArrayWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "kFjC:dqsjnj<");
      assertFalse(boolean0);
      
      try { 
        httpRequest0.bufferedReader();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lhPB?GGFL$K`J]Lr");
      assertFalse(mockFile0.exists());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, " ,bW?nZn");
      assertFalse(mockFile0.exists());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/lhPB?GGFL$K`J]Lr", mockFile1.getParent());
      assertEquals(" ,bW?nZn", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/lhPB?GGFL$K`J]Lr/ ,bW?nZn", mockFile1.toString());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      URL uRL0 = mockFile1.toURL();
      assertFalse(mockFile0.exists());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/lhPB?GGFL$K`J]Lr", mockFile1.getParent());
      assertEquals(" ,bW?nZn", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/lhPB?GGFL$K`J]Lr/ ,bW?nZn", mockFile1.toString());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("GGFL$K`J]Lr/ ,bW?nZn", uRL0.getQuery());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(uRL0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertFalse(mockFile0.exists());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("lhPB?GGFL$K`J]Lr", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/lhPB?GGFL$K`J]Lr", mockFile1.getParent());
      assertEquals(" ,bW?nZn", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/lhPB?GGFL$K`J]Lr/ ,bW?nZn", mockFile1.toString());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("GGFL$K`J]Lr/ ,bW?nZn", uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(httpRequest0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_INSERTION;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFD;
      AbstractMap.SimpleEntry<CardTerminals.State, Normalizer.Form> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<CardTerminals.State, Normalizer.Form>(cardTerminals_State0, normalizer_Form0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<CardTerminals.State, Normalizer.Form> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<CardTerminals.State, Normalizer.Form>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        httpRequest0.form((Map.Entry<?, ?>) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertNotNull(atomicInteger0);
      
      try { 
        httpRequest2.code(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("; charset=", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put(multipleGradientPaint_ColorSpaceType0, cardTerminals_State0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpURLConnection httpURLConnection0 = httpRequest_ConnectionFactory0.create(uRL0, proxy0);
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("; charset=", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpURLConnection0);
      
      HttpRequest.setConnectionFactory(httpRequest_ConnectionFactory0);
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) null, (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      try { 
        httpRequest_ConnectionFactory0.create(uRL0, proxy0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Character.UnicodeScript> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Character.UnicodeScript>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        HttpRequest.put((CharSequence) null, (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      URL uRL1 = httpRequest0.url();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotNull(uRL1);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      
      HttpRequest httpRequest1 = httpRequest0.uncompress(true);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(uRL0, uRL1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = HttpRequest.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.equals((Object)httpRequest0));
      assertFalse(httpRequest2.equals((Object)httpRequest1));
      assertNotNull(httpRequest2);
      assertSame(uRL0, uRL1);
      assertNotSame(httpRequest2, httpRequest0);
      assertNotSame(httpRequest2, httpRequest1);
      
      long long0 = httpRequest1.dateHeader("application/x-www-form-urlencoded", 3254L);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(3254L, long0);
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest1.equals((Object)httpRequest2));
      assertSame(uRL0, uRL1);
      assertNotSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertNotSame(httpRequest1, httpRequest2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.uncompress(true);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-64), (byte) (-31));
      assertEquals((-31), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-31), (byte)5, (byte) (-48), (byte)102, (byte)2}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        httpRequest1.part("Date", "ETag", "HEAD", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      String[] stringArray0 = httpRequest1.headers("jdbc:hsqldb:");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(stringArray0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      try { 
        httpRequest0.part("--afFYR$WX1SoUX%V", (InputStream) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest((URL) null, ",H?q{{H=t4!u");
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        httpRequest0.part("?FSW}9@'pFjb>))", (InputStream) bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Content-Type");
      assertFalse(boolean0);
      
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      AbstractMap.SimpleEntry<Component.BaselineResizeBehavior, ProcessBuilder.Redirect.Type> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Component.BaselineResizeBehavior, ProcessBuilder.Redirect.Type>(component_BaselineResizeBehavior0, processBuilder_Redirect_Type0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      try { 
        httpRequest0.form((Map.Entry<?, ?>) abstractMap_SimpleEntry0, "charset");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HashMap<SessionTrackingMode, RowIdLifetime> hashMap0 = new HashMap<SessionTrackingMode, RowIdLifetime>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SessionTrackingMode sessionTrackingMode0 = SessionTrackingMode.COOKIE;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_TRANSACTION;
      hashMap0.put(sessionTrackingMode0, rowIdLifetime0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpRequest0.form((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("");
      assertEquals("", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Server", (Throwable) null);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Server", sQLFeatureNotSupportedException0.toString());
      assertEquals("Server", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("hv{V;\"QV}hR(Kj#", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Server", sQLFeatureNotSupportedException0.toString());
      assertEquals("Server", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("hv{V;\"QV}hR(Kj#", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: hv{V;\"QV}hR(Kj#", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Server", "Content-Type", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Server", sQLFeatureNotSupportedException0.toString());
      assertEquals("Server", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Server", sQLNonTransientConnectionException0.getMessage());
      assertEquals("Content-Type", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Server", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        httpRequest0.form((Object) sQLWarning0, (Object) sQLNonTransientConnectionException0, "uA=^k.C/Csx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler1);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertEquals("; charset=", uRL1.getPath());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("; charset=", uRL1.getFile());
      assertNull(uRL1.toExternalForm());
      assertEquals("; charset=", uRL1.getHost());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertEquals("; charset=", uRL1.getPath());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("; charset=", uRL1.getFile());
      assertNull(uRL1.toExternalForm());
      assertEquals("; charset=", uRL1.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertEquals("; charset=", uRL1.getPath());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("; charset=", uRL1.getFile());
      assertNull(uRL1.toExternalForm());
      assertEquals("; charset=", uRL1.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      // Undeclared exception!
      try { 
        httpRequest0.referer("TRACE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1 NedD#");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest1 = httpRequest0.referer("If-None-Match");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      long long0 = httpRequest0.expires();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals((-1L), long0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      long long1 = httpRequest2.dateHeader("application/x-www-form-urlencoded", 3254L);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1 NedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertEquals(3254L, long1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(long1 == long0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      try { 
        httpRequest2.created();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler1);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("; charset=", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertEquals("", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("; charset=", uRL1.getPath());
      assertNull(uRL1.toString());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.toExternalForm());
      assertEquals("; charset=", uRL1.getFile());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      
      // Undeclared exception!
      try { 
        httpRequest0.ifModifiedSince(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest((URL) null, ",H?q{{H=t4!u");
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest1.bufferSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be greater than zero
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.parameters("boundary");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JDBCType, Component.BaselineResizeBehavior> hashMap0 = new HashMap<JDBCType, Component.BaselineResizeBehavior>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals("0", atomicInteger0.toString());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("");
      assertEquals("", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      try { 
        httpRequest0.form((Object) "", (Object) hashMap0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      String string0 = httpRequest0.toString();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals("DELETE http://www.someFakeButWellFormedURL.org/fooExample", string0);
      assertNotNull(string0);
      
      HttpRequest httpRequest1 = httpRequest0.trustAllCerts();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      String string1 = httpRequest0.getParam("If-None-Match", "PUT");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNull(string1);
      assertSame(httpRequest0, httpRequest1);
      
      HttpRequest httpRequest2 = httpRequest1.trustAllCerts();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      String string2 = httpRequest0.header("If-None-Match");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNull(string2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      
      // Undeclared exception!
      try { 
        httpRequest0.useProxy(",}si%56#(4z35{dE", 875);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The connection has already been created. This method must be called before reading or writing to the request.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      try { 
        httpRequest0.openOutput();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      assertEquals((byte)123, byte0);
      
      try { 
        httpRequest0.part("Basic ", (Number) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      String string0 = httpRequest0.toString();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals("DELETE http://www.someFakeButWellFormedURL.org/fooExample", string0);
      assertNotNull(string0);
      
      HttpRequest httpRequest1 = httpRequest0.contentType("Proxy-Authorization");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.trustAllCerts();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      String string1 = httpRequest0.header("If-None-Match");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNull(string1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      
      // Undeclared exception!
      try { 
        httpRequest0.useProxy(",}si%56#(4z35{dE", 875);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The connection has already been created. This method must be called before reading or writing to the request.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.trustAllCerts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptEncoding("Accept-Charset");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest0.readTimeout(0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      HttpRequest httpRequest3 = httpRequest0.connectTimeout(0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest2.connectTimeout((-2547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      assertNotNull(httpRequest_HttpRequestException0);
      
      mockIOException0.printStackTrace();
      String string0 = httpRequest_HttpRequestException0.getMessage();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockIOException0;
      objectArray0[1] = (Object) httpRequest_HttpRequestException0;
      objectArray0[2] = (Object) mockIOException0;
      objectArray0[3] = (Object) httpRequest_HttpRequestException0;
      objectArray0[4] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[5] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[6] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable";
      objectArray0[7] = (Object) httpRequest_HttpRequestException0;
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      MockFile mockFile0 = new MockFile("Authorization", "7-T~@DYM0CNG3;'");
      assertFalse(mockFile0.isDirectory());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/Authorization/7-T~@DYM0CNG3;'", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("7-T~@DYM0CNG3;'", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib/Authorization", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNotNull(mockFile0);
      
      try { 
        httpRequest0.part("org.evosuite.runtime.mock.java.lang.MockThrowable", "uYpvz", (File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("connection_type", "connection_type", 928, "connection_type", uRLStreamHandler0);
      assertEquals("connection_type:928", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("connection_type", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals(928, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("connection_type", uRL0.getHost());
      assertEquals("connection_type", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertEquals("connection_type", uRL0.getFile());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertEquals("connection_type:928", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("connection_type", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals(928, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("connection_type", uRL0.getHost());
      assertEquals("connection_type", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertEquals("connection_type", uRL0.getFile());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.accept("2i(s29wzh,-]xFOls");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.form((Object) "):DXe1DNedD#", (Object) uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getPath());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler1);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getPath());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertEquals("", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("; charset=", uRL1.getFile());
      assertNull(uRL1.getRef());
      assertEquals("; charset=", uRL1.getPath());
      assertEquals("; charset=", uRL1.getHost());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      Object[] objectArray0 = new Object[0];
      String string0 = HttpRequest.append((CharSequence) "", objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      hashMap0.put(multipleGradientPaint_ColorSpaceType0, cardTerminals_State0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType1 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      CardTerminals.State cardTerminals_State1 = hashMap0.put(multipleGradientPaint_ColorSpaceType1, cardTerminals_State0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(CardTerminals.State.CARD_ABSENT, cardTerminals_State1);
      assertSame(cardTerminals_State0, cardTerminals_State1);
      assertSame(multipleGradientPaint_ColorSpaceType1, multipleGradientPaint_ColorSpaceType0);
      assertSame(cardTerminals_State1, cardTerminals_State0);
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      HttpRequest.setConnectionFactory(httpRequest_ConnectionFactory0);
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) "Sw1#DcGO";
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) null, false, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) null, true, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("connection_type", "connection_type", 928, "connection_type", uRLStreamHandler0);
      assertEquals("connection_type", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("connection_type", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("connection_type", uRL0.getFile());
      assertEquals("connection_type:928", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(928, uRL0.getPort());
      assertEquals("connection_type", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertEquals("connection_type", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("connection_type", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("connection_type", uRL0.getFile());
      assertEquals("connection_type:928", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(928, uRL0.getPort());
      assertEquals("connection_type", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.body("connection_type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      MockFile mockFile0 = new MockFile("PUT");
      assertFalse(mockFile0.isDirectory());
      assertEquals("PUT", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("PUT", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      try { 
        httpRequest0.part("):DXe1DNedD#", "):DXe1DNedD#", "):DXe1DNedD#", (File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      // Undeclared exception!
      try { 
        httpRequest0.part("):DXe1DNedD#", (String) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      assertNotNull(httpRequest_UploadProgress0);
      
      httpRequest_UploadProgress0.onUpload((-1L), (-1L));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      assertEquals("application/x-www-form-urlencoded", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      URI uRI0 = MockURI.URI("POST", "Last-Modified", "Content-Encoding");
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("Content-Encoding", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertEquals("POST:Last-Modified#Content-Encoding", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("POST", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      Map<String, String> map0 = httpRequest0.getParams("2*sFZ!.0b?vHY2/Ce");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest((CharSequence) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      String string0 = httpRequest0.location();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNull(string0);
      
      HttpRequest httpRequest1 = httpRequest0.uncompress(true);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      long long0 = httpRequest1.dateHeader("application/x-www-form-urlencoded", 3254L);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(3254L, long0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      try { 
        httpRequest1.created();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.append((CharSequence) null, (Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      assertNull(uRL0.getRef());
      assertEquals("; charset=", uRL0.getHost());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler1);
      assertNull(uRL0.getRef());
      assertEquals("; charset=", uRL0.getHost());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.toExternalForm());
      assertEquals("; charset=", uRL1.getFile());
      assertEquals("; charset=", uRL1.getHost());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertEquals("; charset=", uRL1.getPath());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put(multipleGradientPaint_ColorSpaceType0, cardTerminals_State0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      HttpRequest.setConnectionFactory(httpRequest_ConnectionFactory0);
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("; charset=", uRL0.getHost());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)89, (byte)126, (byte) (-1), (byte)65, (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        httpRequest0.send((InputStream) byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HashMap<Component.BaselineResizeBehavior, Dialog.ModalExclusionType> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Dialog.ModalExclusionType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("dvFE:Wc~");
      assertEquals("dvFE:Wc~", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      atomicReference0.set("HXqq}*W$r]A2DrbR");
      assertEquals("HXqq}*W$r]A2DrbR", atomicReference0.toString());
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = HttpRequest.head(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.equals((Object)httpRequest0));
      assertNotNull(httpRequest1);
      assertNotSame(httpRequest1, httpRequest0);
      
      byte[] byteArray0 = new byte[1];
      try { 
        httpRequest1.send(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      assertEquals("application/x-www-form-urlencoded", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      HttpRequest httpRequest1 = httpRequest0.readTimeout(0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      boolean boolean0 = httpRequest1.isBodyEmpty();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertFalse(boolean0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      String string0 = httpRequest1.header((String) null);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNull(string0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest0.connectTimeout(0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest1.connectTimeout((-2547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      boolean boolean0 = httpRequest1.isBodyEmpty();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertFalse(boolean0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(true);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.useProxy("application/json", 1132);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The connection has already been created. This method must be called before reading or writing to the request.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.isBodyEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.contentEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.get());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, 33, (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have length offset: -1
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, 73, 73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have offset of 73 and length of 73 with array of length 1
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpRequest.keepAlive(false);
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytesToBytes((byte[]) null, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot serialize a null array.
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        HttpRequest.Base64.encodeBytes(byteArray0, 59, (-377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have length offset: -377
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest$Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "r");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.acceptJson();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: r
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.acceptJson();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(false);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertNotNull(atomicInteger0);
      
      HttpRequest httpRequest2 = httpRequest0.referer("$[S>q%Nnu|0t)9?$");
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.userAgent("90;e=4e{s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      HttpRequest httpRequest1 = httpRequest0.contentLength(0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      URI uRI0 = MockURI.URI("POST", "Last-Modified", "Content-Encoding");
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("POST", uRI0.getScheme());
      assertTrue(uRI0.isOpaque());
      assertEquals("POST:Last-Modified#Content-Encoding", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("Content-Encoding", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      String string0 = httpRequest0.toString();
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals("PUT http://www.someFakeButWellFormedURL.org/fooExample", string0);
      assertNotNull(string0);
      
      HttpRequest httpRequest1 = httpRequest0.basic("Content-Type", "DELETE");
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      try { 
        httpRequest1.buffer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode("+");
      assertEquals("Kw==", string0);
      assertNotNull(string0);
      
      try { 
        HttpRequest.trace((CharSequence) "Kw==");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: Kw==
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpRequest.keepAlive(false);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 1, "", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      String string0 = MockURL.getFile(uRL0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "");
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      MockFile mockFile0 = new MockFile("ETag");
      assertEquals("ETag", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("ETag", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        httpRequest0.authorization("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, CardTerminals.State>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put(multipleGradientPaint_ColorSpaceType0, cardTerminals_State0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      HttpRequest.nonProxyHosts((String[]) null);
      HttpRequest.setConnectionFactory(httpRequest_ConnectionFactory0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "3uUUSjzJq%6*G");
      assertFalse(boolean0);
      
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      HttpRequest.setConnectionFactory(httpRequest_ConnectionFactory0);
      URL uRL1 = MockURL.URL(uRL0, ")=");
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/)=", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/)=", uRL1.toExternalForm());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/)=", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/)=", uRL1.toExternalForm());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      try { 
        httpRequest0.form((Object) ")=", (Object) uRL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.contentType("s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      try { 
        httpRequest0.serverError();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      HttpRequest httpRequest3 = httpRequest2.disconnect();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertFalse(httpRequest3.ignoreCloseExceptions());
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest3);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger((-222));
      assertEquals((-222.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals("-222", atomicInteger0.toString());
      assertEquals((-222), atomicInteger0.intValue());
      assertEquals((-222), atomicInteger0.get());
      assertEquals((-222L), atomicInteger0.longValue());
      assertEquals((byte)34, atomicInteger0.byteValue());
      assertEquals((-222.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((short) (-222), atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      long long0 = httpRequest3.expires();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertFalse(httpRequest3.ignoreCloseExceptions());
      assertEquals((-1L), long0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest1, httpRequest3);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest3);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      
      HttpRequest httpRequest1 = httpRequest0.disconnect();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotNull(httpRequest1);
      assertNotSame(uRL0, uRL1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.uncompress(true);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotNull(httpRequest2);
      assertNotSame(uRL0, uRL1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      long long0 = httpRequest2.dateHeader("application/x-www-form-urlencoded", 3254L);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertEquals(3254L, long0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      try { 
        httpRequest2.created();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "):IXe1DNedD#");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.disconnect();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: ):IXe1DNedD#
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-117), (byte)87, (byte)78, (byte)1}, byteArray0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      String[] stringArray0 = new String[0];
      HttpRequest httpRequest1 = httpRequest0.readTimeout(0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      try { 
        httpRequest0.noContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/http-request/lib");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      assertFalse(boolean0);
      
      HttpRequest.keepAlive(false);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 1, "", uRLStreamHandler0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertEquals(":1", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      String string0 = MockURL.getFile(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toString());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.chunk(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      int int0 = httpRequest2.intHeader(" jBs9MhDG9Wz\"&hQ", (-222));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertEquals((-222), int0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger((-222));
      assertEquals((-222.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-222.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-222), atomicInteger0.intValue());
      assertEquals((byte)34, atomicInteger0.byteValue());
      assertEquals((-222), atomicInteger0.get());
      assertEquals((-222L), atomicInteger0.longValue());
      assertEquals((short) (-222), atomicInteger0.shortValue());
      assertEquals("-222", atomicInteger0.toString());
      assertNotNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HttpRequest.keepAlive(false);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 1, "", uRLStreamHandler0);
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      String string0 = MockURL.getFile(uRL0);
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "");
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(":1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      MockFile mockFile0 = new MockFile("ETag");
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("ETag", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("ETag", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        httpRequest0.receive((File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "boundary");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      String[] stringArray0 = new String[0];
      HttpRequest.nonProxyHosts(stringArray0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("application/x-www-form-urlencoded");
      assertEquals("application/x-www-form-urlencoded", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      HttpRequest httpRequest1 = httpRequest0.body(atomicReference0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals("boundary", atomicReference0.toString());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest0.readTimeout(0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      HttpRequest httpRequest3 = httpRequest0.connectTimeout(0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest3.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest2);
      
      // Undeclared exception!
      try { 
        httpRequest2.connectTimeout((-2547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("Tt^84`Wqo2ZNK!='p3", "gzip");
      assertNotNull(abstractMap_SimpleEntry0);
      
      HttpRequest httpRequest3 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleEntry0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertFalse(httpRequest3.ignoreCloseExceptions());
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest0);
      assertSame(httpRequest3, httpRequest1);
      
      MockFile mockFile0 = new MockFile("ETag");
      assertFalse(mockFile0.canWrite());
      assertEquals("ETag", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("ETag", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNotNull(mockFile0);
      
      try { 
        httpRequest1.receive((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      try { 
        httpRequest2.reader();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "boundary");
      assertFalse(boolean0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("4i9d?.0;3E", "charset", 64, "charset", uRLStreamHandler0);
      assertEquals(64, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("charset", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("charset:64", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("charset", uRL0.getHost());
      assertEquals("4i9d?.0;3e", uRL0.getProtocol());
      assertEquals("charset", uRL0.getFile());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertEquals(64, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("charset", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("charset:64", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("charset", uRL0.getHost());
      assertEquals("4i9d?.0;3e", uRL0.getProtocol());
      assertEquals("charset", uRL0.getFile());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.progress((HttpRequest.UploadProgress) null);
      assertEquals(64, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("charset", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("charset:64", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("charset", uRL0.getHost());
      assertEquals("4i9d?.0;3e", uRL0.getProtocol());
      assertEquals("charset", uRL0.getFile());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.closeOutputQuietly();
      assertEquals(64, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("charset", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("charset:64", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("charset", uRL0.getHost());
      assertEquals("4i9d?.0;3e", uRL0.getProtocol());
      assertEquals("charset", uRL0.getFile());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      // Undeclared exception!
      try { 
        httpRequest2.body(atomicReference0, "boundary");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$2(X\"3Lf-");
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("$2(X\"3Lf-", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("$2(X\"3Lf-", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("$2(X\"3Lf-", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("$2(X\"3Lf-", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("$2(X\"3Lf-", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("$2(X\"3Lf-", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      assertNotNull(httpRequest_UploadProgress0);
      
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("$2(X\"3Lf-", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("$2(X\"3Lf-", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest1.acceptGzipEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = httpRequest_ConnectionFactory0.create(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpURLConnection0.getContentType());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertTrue(httpURLConnection0.getDoInput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertNull(httpURLConnection0.getContentEncoding());
      assertEquals("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertNotNull(httpURLConnection0);
      
      MockNetworkInterface mockNetworkInterface0 = new MockNetworkInterface();
      assertNotNull(mockNetworkInterface0);
      
      String string0 = mockNetworkInterface0.getMockedClassName();
      assertEquals("java.net.NetworkInterface", string0);
      assertNotNull(string0);
      
      HashMap<Component.BaselineResizeBehavior, Dialog.ModalExclusionType> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Dialog.ModalExclusionType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("dvFE:Wc~");
      assertEquals("dvFE:Wc~", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      try { 
        httpRequest1.body(atomicReference0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("Proxy-Authorization");
      assertEquals("Proxy-Authorization", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      // Undeclared exception!
      try { 
        httpRequest0.body(atomicReference0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HashMap<Dialog.ModalityType, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Dialog.ModalityType, Formatter.BigDecimalLayoutForm>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      HttpRequest.maxConnections(875);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      try { 
        httpRequest0.send((CharSequence) ",}si%56#(4z35{dE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HttpRequest.maxConnections(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      String string0 = charArrayWriter0.toString();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HttpRequest.ConnectionFactory httpRequest_ConnectionFactory0 = HttpRequest.ConnectionFactory.DEFAULT;
      assertNotNull(httpRequest_ConnectionFactory0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = httpRequest_ConnectionFactory0.create(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpURLConnection0.usingProxy());
      assertNull(httpURLConnection0.getContentType());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getUseCaches());
      assertNull(httpURLConnection0.getContentEncoding());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertNotNull(httpURLConnection0);
      
      MockNetworkInterface mockNetworkInterface0 = new MockNetworkInterface();
      assertNotNull(mockNetworkInterface0);
      
      String string0 = mockNetworkInterface0.getMockedClassName();
      assertEquals("java.net.NetworkInterface", string0);
      assertNotNull(string0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>("dvFE:Wc~");
      assertEquals("dvFE:Wc~", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "java.net.NetworkInterface");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.server();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: java.net.NetworkInterface
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.connectTimeout((-1110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.writePartHeader("OPTIONS", "POST");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("w71]/=n");
      assertNotNull(mockIOException0);
      
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      assertNotNull(httpRequest_HttpRequestException0);
      
      String string0 = httpRequest_HttpRequestException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: w71]/=n", string0);
      assertNotNull(string0);
      
      try { 
        HttpRequest.encode("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: w71]/=n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: org.evosuite.runtime.mock.java.lang.mockthrowable
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.encode((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      assertNotNull(atomicInteger0);
      
      HttpRequest httpRequest3 = httpRequest0.acceptCharset("Am1nXH");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest3.bufferSize());
      assertFalse(httpRequest3.ignoreCloseExceptions());
      assertNotNull(httpRequest3);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest3);
      assertSame(httpRequest3, httpRequest2);
      assertSame(httpRequest3, httpRequest1);
      assertSame(httpRequest3, httpRequest0);
      
      try { 
        HttpRequest.head((CharSequence) "Server");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: Server
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      String string0 = MockURL.getUserInfo(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HashMap<SessionTrackingMode, RowIdLifetime> hashMap0 = new HashMap<SessionTrackingMode, RowIdLifetime>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest1.acceptCharset("OPTIONS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = HttpRequest.head(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertFalse(httpRequest1.equals((Object)httpRequest0));
      assertNotNull(httpRequest1);
      assertNotSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertFalse(httpRequest1.equals((Object)httpRequest0));
      assertFalse(httpRequest2.equals((Object)httpRequest0));
      assertNotNull(httpRequest2);
      assertNotSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertNotSame(httpRequest2, httpRequest0);
      assertSame(httpRequest2, httpRequest1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertNotNull(atomicInteger0);
      
      String string0 = httpRequest0.contentType();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest0.equals((Object)httpRequest2));
      assertFalse(httpRequest0.equals((Object)httpRequest1));
      assertNull(string0);
      assertNotSame(httpRequest0, httpRequest2);
      assertNotSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      String[] stringArray0 = new String[0];
      HttpRequest.nonProxyHosts(stringArray0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`zk4CCnc{?;?fBvc~y$");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "`zk4CCnc{?;?fBvc~y$";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "`zk4CCnc{?;?fBvc~y$";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "`zk4CCnc{?;?fBvc~y$", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: `zk4CCnc{?;?fBvc~y$&null=&`zk4CCnc{?;?fBvc~y$=&`zk4CCnc{?;?fBvc~y$=java.lang.Object@4155bf58
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "DELETE", false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: DELETE
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      try { 
        httpRequest0.reader("):DXe1DNedD#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      try { 
        httpRequest0.bufferedReader("charset");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(false);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(httpRequest1.ignoreCloseExceptions());
      assertEquals(8192, httpRequest1.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertFalse(httpRequest2.ignoreCloseExceptions());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      try { 
        httpRequest2.partHeader("Accept", "GET");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("Accept-Charset", "YV-Y4b;");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleEntry1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest0.uncompress(true);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      long long0 = httpRequest2.dateHeader("application/x-www-form-urlencoded", 3254L);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest2.bufferSize());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(3254L, long0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
      
      try { 
        httpRequest2.created();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      HttpRequest httpRequest1 = httpRequest0.acceptJson();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertNotNull(httpRequest1);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest1, httpRequest0);
      
      HttpRequest httpRequest2 = httpRequest1.ignoreCloseExceptions(true);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertEquals(8192, httpRequest1.bufferSize());
      assertTrue(httpRequest1.ignoreCloseExceptions());
      assertTrue(httpRequest2.ignoreCloseExceptions());
      assertEquals(8192, httpRequest2.bufferSize());
      assertNotNull(httpRequest2);
      assertSame(httpRequest0, httpRequest1);
      assertSame(httpRequest0, httpRequest2);
      assertSame(httpRequest1, httpRequest0);
      assertSame(httpRequest1, httpRequest2);
      assertSame(httpRequest2, httpRequest1);
      assertSame(httpRequest2, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("%'", "\r\n--00content0boundary00--\r\n", 1497, "%'", uRLStreamHandler0);
      assertEquals("\r\n--00content0boundary00--\r\n", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("%'", uRL0.getFile());
      assertEquals("%'", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("\r\n--00content0boundary00--\r\n:1497", uRL0.getAuthority());
      assertEquals("%'", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals(1497, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      assertEquals("\r\n--00content0boundary00--\r\n", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("%'", uRL0.getFile());
      assertEquals("%'", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("\r\n--00content0boundary00--\r\n:1497", uRL0.getAuthority());
      assertEquals("%'", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals(1497, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.trustAllHosts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("/=-$jlamv");
      assertNotNull(mockPrintStream0);
      
      try { 
        httpRequest0.receive((PrintStream) mockPrintStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HttpRequest.keepAlive(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 1, "", uRLStreamHandler0);
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      String string0 = MockURL.getFile(uRL0);
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "");
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(":1", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      MockFile mockFile0 = new MockFile("ETag");
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ETag", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("ETag", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        httpRequest0.intHeader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = new HttpRequest(uRL0, "");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertNotNull(httpRequest0);
      
      // Undeclared exception!
      try { 
        httpRequest0.trustAllHosts();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.ProtocolException: Invalid HTTP method: 
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCUMENTATION_OUTPUT;
      AbstractMap.SimpleEntry<StandardProtocolFamily, DocumentationTool.Location> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<StandardProtocolFamily, DocumentationTool.Location>(standardProtocolFamily0, documentationTool_Location0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<StandardProtocolFamily, DocumentationTool.Location> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<StandardProtocolFamily, DocumentationTool.Location>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      String string0 = abstractMap_SimpleEntry1.toString();
      assertEquals("INET6=DOCUMENTATION_OUTPUT", string0);
      assertNotNull(string0);
      
      HashMap<BufferedInputStream, SQLFeatureNotSupportedException> hashMap0 = new HashMap<BufferedInputStream, SQLFeatureNotSupportedException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        HttpRequest.post((CharSequence) "INET6=DOCUMENTATION_OUTPUT", (Map<?, ?>) hashMap0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: INET6=DOCUMENTATION_OUTPUT
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) "?QuA1+Mm)7*";
      // Undeclared exception!
      try { 
        HttpRequest.head((CharSequence) "?QuA1+Mm)7*", true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: ?QuA1+Mm)7*&null=&?QuA1+Mm)7*=&null=&null=
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      int int0 = 0;
      String[] stringArray0 = new String[1];
      HttpRequest.nonProxyHosts(stringArray0);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      AtomicReference<String> atomicReference0 = new AtomicReference<String>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      try { 
        httpRequest0.body(atomicReference0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "):DXe1DNedD#");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/):DXe1DNedD#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      try { 
        httpRequest0.form((Object) "):DXe1DNedD#", (Object) uRL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HttpRequest.nonProxyHosts(stringArray0);
      HashMap<DispatcherType, SessionTrackingMode> hashMap0 = new HashMap<DispatcherType, SessionTrackingMode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DispatcherType dispatcherType0 = DispatcherType.FORWARD;
      SessionTrackingMode sessionTrackingMode0 = SessionTrackingMode.URL;
      hashMap0.put(dispatcherType0, sessionTrackingMode0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      DispatcherType dispatcherType1 = DispatcherType.INCLUDE;
      SessionTrackingMode sessionTrackingMode1 = SessionTrackingMode.URL;
      SessionTrackingMode sessionTrackingMode2 = SessionTrackingMode.URL;
      Function<Object, SessionTrackingMode> function0 = (Function<Object, SessionTrackingMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(sessionTrackingMode2).when(function0).apply(any());
      SessionTrackingMode sessionTrackingMode3 = hashMap0.computeIfAbsent(dispatcherType1, function0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(SessionTrackingMode.URL, sessionTrackingMode3);
      assertFalse(dispatcherType1.equals((Object)dispatcherType0));
      assertNotSame(dispatcherType1, dispatcherType0);
      assertSame(sessionTrackingMode2, sessionTrackingMode0);
      assertSame(sessionTrackingMode2, sessionTrackingMode3);
      assertSame(sessionTrackingMode2, sessionTrackingMode1);
      assertSame(sessionTrackingMode3, sessionTrackingMode1);
      assertSame(sessionTrackingMode3, sessionTrackingMode2);
      assertSame(sessionTrackingMode3, sessionTrackingMode0);
      
      SessionTrackingMode sessionTrackingMode4 = hashMap0.put(dispatcherType1, sessionTrackingMode1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(SessionTrackingMode.URL, sessionTrackingMode4);
      assertFalse(dispatcherType1.equals((Object)dispatcherType0));
      assertNotSame(dispatcherType1, dispatcherType0);
      assertSame(sessionTrackingMode1, sessionTrackingMode0);
      assertSame(sessionTrackingMode1, sessionTrackingMode4);
      assertSame(sessionTrackingMode1, sessionTrackingMode2);
      assertSame(sessionTrackingMode1, sessionTrackingMode3);
      assertSame(sessionTrackingMode4, sessionTrackingMode0);
      assertSame(sessionTrackingMode4, sessionTrackingMode1);
      assertSame(sessionTrackingMode4, sessionTrackingMode3);
      assertSame(sessionTrackingMode4, sessionTrackingMode2);
      
      String string0 = HttpRequest.append((CharSequence) "com.github.kevinsawicki.http.HttpRequest$Base64", (Map<?, ?>) hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        HttpRequest.get((CharSequence) "com.github.kevinsawicki.http.HttpRequest$Base64", false, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: com.github.kevinsawicki.http.HttpRequest$Base64
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "; charset=", 1, "; charset=", uRLStreamHandler0);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler1);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL1.getFile());
      assertEquals(1, uRL1.getPort());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("; charset=", uRL1.getPath());
      assertNull(uRL1.getUserInfo());
      assertEquals("; charset=", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals("; charset=:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("; charset=", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("; charset=", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("; charset=", uRL0.getPath());
      assertEquals("; charset=", uRL1.getFile());
      assertEquals(1, uRL1.getPort());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("; charset=:1", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("; charset=", uRL1.getPath());
      assertNull(uRL1.getUserInfo());
      assertEquals("; charset=", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals(8192, httpRequest0.bufferSize());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpRequest0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      // Undeclared exception!
      try { 
        httpRequest0.basic("Content-Encoding", "Accept-Encoding");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertNotNull(httpRequest0);
      
      String string0 = httpRequest0.toString();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(8192, httpRequest0.bufferSize());
      assertTrue(httpRequest0.ignoreCloseExceptions());
      assertEquals("DELETE http://www.someFakeButWellFormedURL.org/fooExample", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        httpRequest0.writePartHeader("[", "P;uaa#A-~w<eR[wQ2i", "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-1);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      assertEquals("YS4Bf/8=", string0);
      assertArrayEquals(new byte[] {(byte)97, (byte)46, (byte)1, (byte)127, (byte) (-1)}, byteArray0);
      assertNotNull(string0);
      
      HashMap<PseudoColumnUsage, JTable.PrintMode> hashMap0 = new HashMap<PseudoColumnUsage, JTable.PrintMode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.WHERE_CLAUSE_ONLY;
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.FIT_WIDTH;
      hashMap0.put(pseudoColumnUsage0, jTable_PrintMode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      PseudoColumnUsage pseudoColumnUsage1 = PseudoColumnUsage.NO_USAGE_RESTRICTIONS;
      hashMap0.put(pseudoColumnUsage1, (JTable.PrintMode) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(pseudoColumnUsage1.equals((Object)pseudoColumnUsage0));
      assertNotSame(pseudoColumnUsage1, pseudoColumnUsage0);
      
      // Undeclared exception!
      try { 
        HttpRequest.delete((CharSequence) "YS4Bf/8=", (Map<?, ?>) hashMap0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: YS4Bf/8=?java.sql.PseudoColumnUsage@0000000001=&java.sql.PseudoColumnUsage@0000000002=FIT_WIDTH
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = (-232);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.part("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.github.kevinsawicki.http.HttpRequest", e);
      }
  }
}
