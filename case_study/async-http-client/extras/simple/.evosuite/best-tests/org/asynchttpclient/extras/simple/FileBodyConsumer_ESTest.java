/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:34:09 GMT 2017
 */

package org.asynchttpclient.extras.simple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.asynchttpclient.extras.simple.FileBodyConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileBodyConsumer_ESTest extends FileBodyConsumer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.putChar('X');
      fileBodyConsumer0.consume(byteBuffer1);
      assertFalse(byteBuffer1.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessFile0).length();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      long long0 = fileBodyConsumer0.getTransferredBytes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn(513L).when(randomAccessFile0).length();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      long long0 = fileBodyConsumer0.getTransferredBytes();
      assertEquals(513L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.resume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.getTransferredBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(243);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn((-2262L)).when(randomAccessFile0).length();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      long long0 = fileBodyConsumer0.getTransferredBytes();
      assertEquals((-2262L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      fileBodyConsumer0.close();
      assertEquals(0L, fileBodyConsumer0.getTransferredBytes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn((-2262L)).when(randomAccessFile0).length();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(randomAccessFile0);
      fileBodyConsumer0.resume();
      assertEquals((-2262L), fileBodyConsumer0.getTransferredBytes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }
}
