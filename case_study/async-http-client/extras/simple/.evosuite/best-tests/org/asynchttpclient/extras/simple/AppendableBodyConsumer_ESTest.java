/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:32:36 GMT 2017
 */

package org.asynchttpclient.extras.simple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.extras.simple.AppendableBodyConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AppendableBodyConsumer_ESTest extends AppendableBodyConsumer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer((Appendable) null);
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.putChar('S');
      // Undeclared exception!
      try { 
        appendableBodyConsumer0.consume(byteBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.AppendableBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer(mockPrintWriter0);
      appendableBodyConsumer0.close();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer((Appendable) null);
      appendableBodyConsumer0.close();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer(mockPrintWriter0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      CharBuffer charBuffer0 = CharBuffer.allocate(2987);
      ByteBuffer byteBuffer0 = utf8Encoder0.encode(charBuffer0);
      appendableBodyConsumer0.consume(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("rd=3N6]xsn5d'=q");
      Charset charset0 = Charset.defaultCharset();
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer(mockPrintStream0, charset0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(128);
      // Undeclared exception!
      try { 
        appendableBodyConsumer0.consume(byteBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
