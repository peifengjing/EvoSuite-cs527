/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:13:52 GMT 2017
 */

package org.asynchttpclient.extras.rxjava.single;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.extras.rxjava.single.ProgressAsyncSingleSubscriberBridge;
import org.asynchttpclient.handler.ProgressAsyncHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import rx.SingleSubscriber;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractProgressSingleSubscriberBridge_ESTest extends AbstractProgressSingleSubscriberBridge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SingleSubscriber<Void> singleSubscriber0 = (SingleSubscriber<Void>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSubscriber0).isUnsubscribed();
      ProgressAsyncHandler<Void> progressAsyncHandler0 = (ProgressAsyncHandler<Void>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncSingleSubscriberBridge<Void> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Void>(singleSubscriber0, progressAsyncHandler0);
      progressAsyncSingleSubscriberBridge0.onContentWriteProgress(1310L, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SingleSubscriber<Object> singleSubscriber0 = (SingleSubscriber<Object>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(singleSubscriber0).isUnsubscribed();
      ProgressAsyncHandler<Void> progressAsyncHandler0 = (ProgressAsyncHandler<Void>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncSingleSubscriberBridge<Object> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Object>(singleSubscriber0, progressAsyncHandler0);
      SingleSubscriber<Void> singleSubscriber1 = (SingleSubscriber<Void>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(singleSubscriber1).isUnsubscribed();
      ProgressAsyncSingleSubscriberBridge<Void> progressAsyncSingleSubscriberBridge1 = new ProgressAsyncSingleSubscriberBridge<Void>(singleSubscriber1, progressAsyncSingleSubscriberBridge0);
      AsyncHandler.State asyncHandler_State0 = progressAsyncSingleSubscriberBridge1.onContentWriteProgress(0L, 3002L, (-904L));
      assertEquals(AsyncHandler.State.ABORT, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SingleSubscriber<Object> singleSubscriber0 = (SingleSubscriber<Object>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSubscriber0).isUnsubscribed();
      ProgressAsyncHandler<String> progressAsyncHandler0 = (ProgressAsyncHandler<String>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncSingleSubscriberBridge<Object> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Object>(singleSubscriber0, progressAsyncHandler0);
      progressAsyncSingleSubscriberBridge0.onContentWriteProgress(0L, (-1984L), 0L);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SingleSubscriber<Object> singleSubscriber0 = (SingleSubscriber<Object>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(singleSubscriber0).isUnsubscribed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncSingleSubscriberBridge<Object> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Object>(singleSubscriber0, progressAsyncHandler0);
      AsyncHandler.State asyncHandler_State0 = progressAsyncSingleSubscriberBridge0.onContentWritten();
      assertEquals(AsyncHandler.State.ABORT, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SingleSubscriber<Object> singleSubscriber0 = (SingleSubscriber<Object>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSubscriber0).isUnsubscribed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWritten();
      ProgressAsyncSingleSubscriberBridge<Object> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Object>(singleSubscriber0, progressAsyncHandler0);
      progressAsyncSingleSubscriberBridge0.onContentWritten();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SingleSubscriber<Object> singleSubscriber0 = (SingleSubscriber<Object>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(singleSubscriber0).isUnsubscribed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncSingleSubscriberBridge<Object> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Object>(singleSubscriber0, progressAsyncHandler0);
      AsyncHandler.State asyncHandler_State0 = progressAsyncSingleSubscriberBridge0.onHeadersWritten();
      assertEquals(AsyncHandler.State.ABORT, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SingleSubscriber<Object> singleSubscriber0 = (SingleSubscriber<Object>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSubscriber0).isUnsubscribed();
      ProgressAsyncHandler<String> progressAsyncHandler0 = (ProgressAsyncHandler<String>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onHeadersWritten();
      ProgressAsyncSingleSubscriberBridge<Object> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Object>(singleSubscriber0, progressAsyncHandler0);
      progressAsyncSingleSubscriberBridge0.onHeadersWritten();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SingleSubscriber<Object> singleSubscriber0 = (SingleSubscriber<Object>) mock(SingleSubscriber.class, new ViolatedAssumptionAnswer());
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncSingleSubscriberBridge<Object> progressAsyncSingleSubscriberBridge0 = new ProgressAsyncSingleSubscriberBridge<Object>(singleSubscriber0, progressAsyncHandler0);
      ProgressAsyncHandler<?> progressAsyncHandler1 = progressAsyncSingleSubscriberBridge0.delegate();
      assertNotNull(progressAsyncHandler1);
  }
}
