/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:06:30 GMT 2017
 */

package org.asynchttpclient.extras.jdeferred;

import org.junit.Test;
import static org.junit.Assert.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import org.asynchttpclient.HttpResponseBodyPart;
import org.asynchttpclient.extras.jdeferred.HttpResponseBodyPartProgress;
import org.asynchttpclient.netty.EagerResponseBodyPart;
import org.asynchttpclient.netty.LazyResponseBodyPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpResponseBodyPartProgress_ESTest extends HttpResponseBodyPartProgress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpResponseBodyPartProgress httpResponseBodyPartProgress0 = new HttpResponseBodyPartProgress((HttpResponseBodyPart) null);
      HttpResponseBodyPart httpResponseBodyPart0 = httpResponseBodyPartProgress0.getPart();
      assertNull(httpResponseBodyPart0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, true);
      HttpResponseBodyPartProgress httpResponseBodyPartProgress0 = new HttpResponseBodyPartProgress(lazyResponseBodyPart0);
      HttpResponseBodyPart httpResponseBodyPart0 = httpResponseBodyPartProgress0.getPart();
      assertSame(httpResponseBodyPart0, lazyResponseBodyPart0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HttpResponseBodyPartProgress httpResponseBodyPartProgress0 = new HttpResponseBodyPartProgress((HttpResponseBodyPart) null);
      String string0 = httpResponseBodyPartProgress0.toString();
      assertEquals("HttpResponseBodyPartProgress [part=null]", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 15, 15);
      EagerResponseBodyPart eagerResponseBodyPart0 = new EagerResponseBodyPart(unpooledUnsafeDirectByteBuf0, false);
      HttpResponseBodyPartProgress httpResponseBodyPartProgress0 = new HttpResponseBodyPartProgress(eagerResponseBodyPart0);
      HttpResponseBodyPart httpResponseBodyPart0 = httpResponseBodyPartProgress0.getPart();
      assertFalse(httpResponseBodyPart0.isLast());
  }
}
