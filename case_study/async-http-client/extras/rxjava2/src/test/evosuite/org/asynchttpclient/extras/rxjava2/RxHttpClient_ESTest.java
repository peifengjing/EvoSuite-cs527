/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:25:48 GMT 2017
 */

package org.asynchttpclient.extras.rxjava2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.Maybe;
import java.util.function.Supplier;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.AsyncHttpClient;
import org.asynchttpclient.Request;
import org.asynchttpclient.Response;
import org.asynchttpclient.extras.rxjava2.DefaultRxHttpClient;
import org.asynchttpclient.extras.rxjava2.RxHttpClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RxHttpClient_ESTest extends RxHttpClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      DefaultRxHttpClient defaultRxHttpClient0 = new DefaultRxHttpClient(asyncHttpClient0);
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Supplier<AsyncHandler<Integer>> supplier0 = (Supplier<AsyncHandler<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Maybe<Integer> maybe0 = defaultRxHttpClient0.prepare(request0, (Supplier<? extends AsyncHandler<Integer>>) supplier0);
      assertNotNull(maybe0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      DefaultRxHttpClient defaultRxHttpClient0 = new DefaultRxHttpClient(asyncHttpClient0);
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultRxHttpClient0.prepare(request0, (Supplier<? extends AsyncHandler<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      RxHttpClient rxHttpClient0 = RxHttpClient.create(asyncHttpClient0);
      // Undeclared exception!
      try { 
        rxHttpClient0.prepare((Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        RxHttpClient.create((AsyncHttpClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      RxHttpClient rxHttpClient0 = RxHttpClient.create(asyncHttpClient0);
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Maybe<Response> maybe0 = rxHttpClient0.prepare(request0);
      assertNotNull(maybe0);
  }
}
