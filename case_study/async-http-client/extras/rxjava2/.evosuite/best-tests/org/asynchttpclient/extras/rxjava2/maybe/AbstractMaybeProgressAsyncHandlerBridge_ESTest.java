/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:23:40 GMT 2017
 */

package org.asynchttpclient.extras.rxjava2.maybe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import io.reactivex.MaybeEmitter;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.extras.rxjava2.maybe.ProgressAsyncMaybeEmitterBridge;
import org.asynchttpclient.handler.ProgressAsyncHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMaybeProgressAsyncHandlerBridge_ESTest extends AbstractMaybeProgressAsyncHandlerBridge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      AsyncHandler.State asyncHandler_State0 = AsyncHandler.State.CONTINUE;
      ProgressAsyncHandler<MockHijrahDate> progressAsyncHandler0 = (ProgressAsyncHandler<MockHijrahDate>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn(asyncHandler_State0).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      AsyncHandler.State asyncHandler_State1 = progressAsyncMaybeEmitterBridge0.onContentWriteProgress(1000L, 1981L, 0L);
      assertSame(asyncHandler_State1, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MaybeEmitter<String> maybeEmitter0 = (MaybeEmitter<String>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<String> progressAsyncHandler0 = (ProgressAsyncHandler<String>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWritten();
      ProgressAsyncMaybeEmitterBridge<String> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<String>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWritten();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWriteProgress((-408L), (-408L), (-408L));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      ProgressAsyncHandler<String> progressAsyncHandler0 = (ProgressAsyncHandler<String>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      ProgressAsyncHandler<?> progressAsyncHandler1 = progressAsyncMaybeEmitterBridge0.delegate();
      assertNotNull(progressAsyncHandler1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      AsyncHandler.State asyncHandler_State0 = progressAsyncMaybeEmitterBridge0.onContentWriteProgress((-408L), (-408L), (-408L));
      assertEquals(AsyncHandler.State.ABORT, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      AsyncHandler.State asyncHandler_State0 = AsyncHandler.State.CONTINUE;
      ProgressAsyncHandler<MockHijrahDate> progressAsyncHandler0 = (ProgressAsyncHandler<MockHijrahDate>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn(asyncHandler_State0).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      AsyncHandler.State asyncHandler_State1 = progressAsyncMaybeEmitterBridge0.onContentWriteProgress(0L, 1497L, 1497L);
      MaybeEmitter<MockMinguoDate> maybeEmitter1 = (MaybeEmitter<MockMinguoDate>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(maybeEmitter1).isDisposed();
      ProgressAsyncHandler<MockMinguoDate> progressAsyncHandler1 = (ProgressAsyncHandler<MockMinguoDate>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn(asyncHandler_State1).when(progressAsyncHandler1).onContentWritten();
      ProgressAsyncMaybeEmitterBridge<MockMinguoDate> progressAsyncMaybeEmitterBridge1 = new ProgressAsyncMaybeEmitterBridge<MockMinguoDate>(maybeEmitter1, progressAsyncHandler1);
      progressAsyncMaybeEmitterBridge1.onContentWritten();
      AsyncHandler.State asyncHandler_State2 = progressAsyncMaybeEmitterBridge1.onContentWritten();
      assertSame(asyncHandler_State2, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MaybeEmitter<MockJapaneseDate> maybeEmitter0 = (MaybeEmitter<MockJapaneseDate>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<MockJapaneseDate> progressAsyncHandler0 = (ProgressAsyncHandler<MockJapaneseDate>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<MockJapaneseDate> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<MockJapaneseDate>(maybeEmitter0, progressAsyncHandler0);
      AsyncHandler.State asyncHandler_State0 = progressAsyncMaybeEmitterBridge0.onHeadersWritten();
      assertEquals(AsyncHandler.State.ABORT, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MaybeEmitter<String> maybeEmitter0 = (MaybeEmitter<String>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<String> progressAsyncHandler0 = (ProgressAsyncHandler<String>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onHeadersWritten();
      ProgressAsyncMaybeEmitterBridge<String> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<String>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onHeadersWritten();
  }
}
