/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Oct 16 02:25:48 GMT 2017
 */

package org.asynchttpclient.extras.rxjava2;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class RxHttpClient_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.asynchttpclient.extras.rxjava2.RxHttpClient"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RxHttpClient_ESTest_scaffolding.class.getClassLoader() ,
      "io.reactivex.functions.BiFunction",
      "io.reactivex.MaybeOnSubscribe",
      "io.netty.handler.codec.http.HttpHeaders",
      "io.reactivex.internal.fuseable.ScalarCallable",
      "org.asynchttpclient.Request",
      "io.reactivex.internal.operators.maybe.MaybeCount",
      "io.reactivex.internal.operators.maybe.MaybeAmb",
      "io.reactivex.Completable",
      "io.reactivex.internal.operators.maybe.MaybeFlatMapSingle",
      "io.reactivex.exceptions.UndeliverableException",
      "io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher",
      "io.reactivex.internal.operators.maybe.MaybeIgnoreElementCompletable",
      "io.reactivex.internal.operators.maybe.MaybeOnErrorComplete",
      "org.asynchttpclient.AsyncHttpClientConfig",
      "io.reactivex.internal.operators.maybe.MaybeNever",
      "io.reactivex.internal.operators.maybe.MaybeFlatMapBiSelector",
      "io.reactivex.MaybeTransformer",
      "org.asynchttpclient.extras.rxjava2.RxHttpClient",
      "io.reactivex.internal.operators.maybe.MaybeError",
      "io.netty.resolver.NameResolver",
      "io.reactivex.internal.operators.maybe.MaybeContains",
      "io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher",
      "io.reactivex.internal.operators.maybe.MaybeConcatArray",
      "io.reactivex.CompletableObserver",
      "io.reactivex.internal.operators.maybe.MaybeSwitchIfEmptySingle",
      "io.reactivex.internal.operators.maybe.MaybeFlatMapNotification",
      "org.asynchttpclient.SignatureCalculator",
      "org.asynchttpclient.extras.rxjava2.DefaultRxHttpClient",
      "io.reactivex.internal.operators.maybe.MaybeJust",
      "io.reactivex.CompletableSource",
      "io.reactivex.MaybeSource",
      "io.reactivex.internal.schedulers.IoScheduler",
      "io.reactivex.internal.schedulers.ComputationScheduler",
      "org.asynchttpclient.request.body.generator.BodyGenerator",
      "org.asynchttpclient.AsyncHttpClient",
      "org.asynchttpclient.Realm",
      "io.reactivex.functions.BiConsumer",
      "io.reactivex.internal.operators.maybe.MaybeToObservable",
      "io.reactivex.Maybe",
      "io.reactivex.internal.operators.maybe.MaybeCreate",
      "org.asynchttpclient.ClientStats",
      "io.reactivex.internal.operators.maybe.MaybeFromCallable",
      "io.reactivex.Flowable",
      "org.asynchttpclient.ListenableFuture",
      "io.reactivex.internal.operators.maybe.MaybeLift",
      "io.reactivex.Observable",
      "io.reactivex.internal.functions.ObjectHelper",
      "io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable",
      "org.asynchttpclient.RequestBuilder",
      "io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn",
      "io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess",
      "io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable",
      "org.reactivestreams.Publisher",
      "io.reactivex.internal.operators.maybe.MaybeEqualSingle",
      "org.asynchttpclient.Response",
      "io.reactivex.internal.operators.flowable.FlowableConcatMapPublisher",
      "io.reactivex.functions.Predicate",
      "io.reactivex.internal.operators.maybe.MaybeMergeArray",
      "io.reactivex.internal.operators.maybe.MaybeFilter",
      "io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement",
      "io.reactivex.SingleObserver",
      "io.reactivex.internal.operators.maybe.MaybeToSingle",
      "io.reactivex.internal.operators.maybe.MaybeOnErrorReturn",
      "io.reactivex.Observer",
      "io.reactivex.MaybeOperator",
      "org.asynchttpclient.AsyncCompletionHandler",
      "io.reactivex.internal.operators.maybe.MaybeFromRunnable",
      "io.reactivex.internal.operators.maybe.MaybeCache",
      "io.reactivex.internal.operators.maybe.MaybeFromSingle",
      "org.asynchttpclient.channel.ChannelPoolPartitioning",
      "io.reactivex.MaybeObserver",
      "io.reactivex.internal.fuseable.HasUpstreamSingleSource",
      "io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable",
      "io.reactivex.functions.BiPredicate",
      "io.reactivex.SingleSource",
      "io.reactivex.internal.operators.maybe.MaybeUsing",
      "io.reactivex.internal.operators.maybe.MaybeHide",
      "io.reactivex.internal.operators.maybe.MaybeZipIterable",
      "io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher",
      "io.reactivex.internal.operators.maybe.MaybeFromFuture",
      "io.reactivex.internal.operators.maybe.MaybeFlatten",
      "io.reactivex.internal.schedulers.NewThreadScheduler",
      "io.reactivex.internal.operators.maybe.MaybeConcatIterable",
      "io.reactivex.internal.operators.maybe.MaybeFromAction",
      "io.reactivex.internal.operators.maybe.MaybeDefer",
      "io.reactivex.internal.operators.maybe.MaybePeek",
      "io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError",
      "io.reactivex.internal.operators.maybe.MaybeUnsafeCreate",
      "org.asynchttpclient.AsyncHandler",
      "io.reactivex.observers.TestObserver",
      "io.reactivex.plugins.RxJavaPlugins",
      "io.reactivex.internal.fuseable.HasUpstreamMaybeSource",
      "io.reactivex.disposables.Disposable",
      "io.reactivex.internal.operators.maybe.MaybeDelay",
      "org.asynchttpclient.BoundRequestBuilder",
      "io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher",
      "io.reactivex.internal.operators.maybe.MaybeMap",
      "io.reactivex.internal.operators.maybe.MaybeOnErrorNext",
      "io.reactivex.internal.fuseable.HasUpstreamCompletableSource",
      "io.reactivex.internal.operators.flowable.FlowableFlatMapPublisher",
      "io.reactivex.internal.operators.maybe.MaybeFromCompletable",
      "io.reactivex.MaybeEmitter",
      "io.reactivex.internal.operators.maybe.MaybeZipArray",
      "io.reactivex.internal.operators.maybe.MaybeDoOnEvent",
      "io.reactivex.internal.schedulers.SingleScheduler",
      "org.asynchttpclient.RequestBuilderBase",
      "io.reactivex.internal.operators.maybe.MaybeDetach",
      "io.reactivex.observers.BaseTestConsumer",
      "io.reactivex.Single",
      "io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty",
      "io.reactivex.functions.BooleanSupplier",
      "io.reactivex.internal.operators.maybe.MaybeToFlowable",
      "io.reactivex.internal.operators.maybe.MaybeTimer",
      "org.asynchttpclient.handler.ProgressAsyncHandler",
      "io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe",
      "io.reactivex.Scheduler",
      "io.reactivex.internal.operators.maybe.MaybeDoFinally",
      "io.reactivex.internal.operators.maybe.MaybeErrorCallable",
      "io.reactivex.ObservableSource",
      "io.reactivex.internal.operators.maybe.MaybeEmpty",
      "io.reactivex.internal.functions.ObjectHelper$BiObjectPredicate",
      "io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe",
      "io.reactivex.functions.Action",
      "io.reactivex.functions.Function3",
      "io.reactivex.internal.fuseable.FuseToMaybe",
      "org.asynchttpclient.AsyncCompletionHandlerBase",
      "io.reactivex.functions.Function5",
      "io.reactivex.internal.operators.maybe.MaybeSubscribeOn",
      "io.reactivex.functions.Function4",
      "io.reactivex.functions.Function7",
      "io.reactivex.functions.Function6",
      "io.reactivex.functions.Consumer",
      "org.asynchttpclient.proxy.ProxyServer",
      "io.reactivex.functions.Function9",
      "io.reactivex.functions.Function8",
      "io.reactivex.internal.operators.maybe.MaybeObserveOn",
      "io.reactivex.internal.operators.maybe.MaybeIsEmptySingle",
      "io.reactivex.functions.Function",
      "org.asynchttpclient.uri.Uri",
      "io.reactivex.internal.operators.maybe.AbstractMaybeWithUpstream"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.Supplier", false, RxHttpClient_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.asynchttpclient.AsyncHttpClient", false, RxHttpClient_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.asynchttpclient.Request", false, RxHttpClient_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RxHttpClient_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.reactivex.internal.functions.ObjectHelper",
      "io.reactivex.plugins.RxJavaPlugins",
      "org.asynchttpclient.extras.rxjava2.maybe.AbstractMaybeAsyncHandlerBridge"
    );
  }
}
