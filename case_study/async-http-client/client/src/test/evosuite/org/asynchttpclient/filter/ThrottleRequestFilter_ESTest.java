/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:08:49 GMT 2017
 */

package org.asynchttpclient.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.HttpResponseStatus;
import org.asynchttpclient.Request;
import org.asynchttpclient.filter.FilterContext;
import org.asynchttpclient.filter.ThrottleRequestFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThrottleRequestFilter_ESTest extends ThrottleRequestFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThrottleRequestFilter throttleRequestFilter0 = new ThrottleRequestFilter(2551, 2551);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThrottleRequestFilter throttleRequestFilter0 = new ThrottleRequestFilter(0, 0, true);
      FilterContext<Object> filterContext0 = (FilterContext<Object>) mock(FilterContext.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null).when(filterContext0).getAsyncHandler();
      doReturn((Request) null).when(filterContext0).getRequest();
      try { 
        throttleRequestFilter0.filter(filterContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No slot available for processing Request null with AsyncHandler null
         //
         verifyException("org.asynchttpclient.filter.ThrottleRequestFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThrottleRequestFilter throttleRequestFilter0 = new ThrottleRequestFilter(1);
      FilterContext<String> filterContext0 = (FilterContext<String>) mock(FilterContext.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null, (AsyncHandler) null).when(filterContext0).getAsyncHandler();
      doReturn((IOException) null).when(filterContext0).getIOException();
      doReturn((Request) null).when(filterContext0).getRequest();
      doReturn((HttpResponseStatus) null).when(filterContext0).getResponseStatus();
      doReturn(false).when(filterContext0).replayRequest();
      // Undeclared exception!
      try { 
        throttleRequestFilter0.filter(filterContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.filter.ReleasePermitOnComplete", e);
      }
  }
}
