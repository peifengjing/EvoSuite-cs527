/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:22:37 GMT 2017
 */

package org.asynchttpclient.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.uri.UriParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UriParser_ESTest extends UriParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("/..//..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /..//.. could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "////");
      uriParser0.parse((Uri) null, " could not be parsed into a proper Uri, missing scheme");
      uriParser0.parse((Uri) null, "/../");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = new Uri("WP", "0X}xDv]7PVDwo[f(Z", "org.asynchttpclient.uri.Uri", (-1), "**1S(;Jn", (String) null);
      Uri uri1 = Uri.create(uri0, "");
      assertEquals("**1S(;Jn", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("!-_u@J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // !-_u@J could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "url:(");
      uriParser0.parse((Uri) null, "#");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "////(");
      uriParser0.parse((Uri) null, "?");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.authority = "MGV\"EwL_6kl0tFK";
      Uri uri0 = new Uri("MGV\"EwL_6kl0tFK", (String) null, "Invalid port number :", (-1), "7", (String) null);
      uriParser0.parse(uri0, "wss");
      assertEquals("7", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Uri uri0 = new Uri("MGV\"EwL_6kl0tFK", (String) null, "Invalid port number :", (-1), "7", (String) null);
      Uri uri1 = Uri.create(uri0, "./");
      assertEquals("./", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("2T+*", "Invalid authority field: ", "8Q", (-1), "LoAj", "2T+*");
      uriParser0.parse(uri0, ".//].kQHqYTY");
      assertEquals("8Q", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("2T+*", "2T+*", "8Q", (-1), (String) null, "2T+*");
      uriParser0.parse(uri0, "/!/../..");
      assertEquals("2T+*", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("VIqxcd7)!c", (String) null, "VIqxcd7)!c", (-1), (String) null, (String) null);
      // Undeclared exception!
      try { 
        uriParser0.parse(uri0, "//':t8dd,\tZ#|1?G[+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t8dd,\tZ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Uri uri0 = new Uri("2T+*", "2T+*", "8Q", (-1), (String) null, "2T+*");
      Uri uri1 = Uri.create(uri0, "/../..//.");
      Uri uri2 = Uri.create(uri1, "2T+*");
      assertEquals("/../..//", uri1.getPath());
      assertEquals("/../..//2T+*", uri2.getPath());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("2T+*", "2T+*", "8Q", (-1), (String) null, "2T+*");
      uriParser0.parse(uri0, "#)qeur}xC/Xh-6c");
      uriParser0.parse(uri0, "/!/..");
      assertEquals("2T+*", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("2T+*", "Invalid authority field: ", "8Q", (-1), "LoAj", "2T+*");
      uriParser0.parse(uri0, "]s.`r;:o{15:u|]");
      assertEquals("2T+*", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ":{e]");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("A", (String) null, "A", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, "F:|");
      assertEquals("A", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("VIqxcd7)!c", (String) null, "VIqxcd7)!c", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, "cz0VI|Hp:&ma%k.|");
      assertEquals((-1), uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "//valid authority field: ");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, " could not be parsed into a proper Uri, missing scheme");
      uriParser0.parse((Uri) null, "////");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "?");
      uriParser0.parse((Uri) null, "?");
      uriParser0.parse((Uri) null, "?");
  }
}
