/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:31:57 GMT 2017
 */

package org.asynchttpclient.webdav;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.cookie.Cookie;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.asynchttpclient.Response;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.webdav.WebDavResponse;
import org.eclipse.jetty.util.InetAddressSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockNetworkInterface;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebDavResponse_ESTest extends WebDavResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Cookie> linkedList0 = new LinkedList<Cookie>();
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(response0).getCookies();
      doReturn((SocketAddress) null).when(response0).getLocalAddress();
      doReturn((SocketAddress) null).when(response0).getRemoteAddress();
      doReturn((InputStream) null).when(response0).getResponseBodyAsStream();
      doReturn((Uri) null, (Uri) null, (Uri) null).when(response0).getUri();
      doReturn(false).when(response0).hasResponseBody();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(document0).toString();
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getUri();
      webDavResponse0.getRemoteAddress();
      webDavResponse0.hasResponseBody();
      webDavResponse0.getLocalAddress();
      webDavResponse0.getBodyAsXML();
      webDavResponse0.getBodyAsXML();
      webDavResponse0.getCookies();
      webDavResponse0.getResponseBodyAsStream();
      webDavResponse0.getUri();
      Uri uri0 = webDavResponse0.getUri();
      assertNull(uri0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpHeaders0).toString();
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn("y_EdOo1edYhUlL").when(response0).getHeader(any(java.lang.CharSequence.class));
      doReturn(httpHeaders0).when(response0).getHeaders();
      doReturn("vz*hf[/:\u0003h").when(response0).getResponseBody(any(java.nio.charset.Charset.class));
      doReturn(true).when(response0).hasResponseBody();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      MockNetworkInterface mockNetworkInterface0 = new MockNetworkInterface();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      NetworkInterface networkInterface0 = MockNetworkInterface.getByInetAddress(inetAddress0);
      MockNetworkInterface.getSubInterfaces(networkInterface0);
      mockNetworkInterface0.getMockedClassName();
      webDavResponse0.getHeader("java.net.NetworkInterface");
      webDavResponse0.getHeaders();
      Charset charset0 = Charset.defaultCharset();
      webDavResponse0.getResponseBody(charset0);
      boolean boolean0 = webDavResponse0.hasResponseBody();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      byte[] byteArray0 = new byte[0];
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(response0).getResponseBodyAsStream();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getResponseBodyAsStream();
      Response response1 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn("").when(response1).getContentType();
      doReturn((List<Cookie>) null).when(response1).getCookies();
      doReturn((HttpHeaders) null, (HttpHeaders) null).when(response1).getHeaders();
      doReturn(linkedList0).when(response1).getHeaders(any(java.lang.CharSequence.class));
      doReturn("").when(response1).getResponseBody(any(java.nio.charset.Charset.class));
      doReturn(byteArray0).when(response1).getResponseBodyAsBytes();
      doReturn((InputStream) null).when(response1).getResponseBodyAsStream();
      doReturn(false).when(response1).isRedirected();
      Document document1 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(document1).toString();
      WebDavResponse webDavResponse1 = new WebDavResponse(response1, document1);
      webDavResponse1.getResponseBodyAsStream();
      webDavResponse1.getBodyAsXML();
      Charset charset0 = Charset.defaultCharset();
      webDavResponse1.getResponseBody(charset0);
      webDavResponse1.getContentType();
      webDavResponse1.getBodyAsXML();
      webDavResponse1.getHeaders((CharSequence) "");
      webDavResponse1.isRedirected();
      webDavResponse1.getCookies();
      webDavResponse1.getHeaders();
      webDavResponse1.getResponseBodyAsBytes();
      HttpHeaders httpHeaders0 = webDavResponse1.getHeaders();
      assertNull(httpHeaders0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn("").when(response0).getHeader(any(java.lang.CharSequence.class));
      doReturn("v7%.9sy0$T]S").when(response0).getStatusText();
      doReturn(true).when(response0).isRedirected();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getStatusText();
      Document document1 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse1 = new WebDavResponse(webDavResponse0, document1);
      webDavResponse0.getHeader("v7%.9sy0$T]S");
      boolean boolean0 = webDavResponse0.isRedirected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((HttpHeaders) null).when(response0).getHeaders();
      doReturn((SocketAddress) null).when(response0).getLocalAddress();
      doReturn((SocketAddress) null).when(response0).getRemoteAddress();
      doReturn((ByteBuffer) null).when(response0).getResponseBodyAsByteBuffer();
      doReturn((InputStream) null).when(response0).getResponseBodyAsStream();
      doReturn((Uri) null).when(response0).getUri();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getHeaders();
      webDavResponse0.getRemoteAddress();
      webDavResponse0.getLocalAddress();
      webDavResponse0.getResponseBodyAsByteBuffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)4;
      webDavResponse0.getResponseBodyAsStream();
      webDavResponse0.getUri();
      Response response1 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn("-_").when(response1).getContentType();
      doReturn((HttpHeaders) null).when(response1).getHeaders();
      doReturn((List<String>) null).when(response1).getHeaders(any(java.lang.CharSequence.class));
      doReturn((SocketAddress) null, (SocketAddress) null).when(response1).getLocalAddress();
      doReturn((SocketAddress) null).when(response1).getRemoteAddress();
      doReturn("", "e6.>Q*#|H&``").when(response1).getResponseBody();
      doReturn((ByteBuffer) null).when(response1).getResponseBodyAsByteBuffer();
      doReturn((Object) byteArray0, (Object) byteArray0).when(response1).getResponseBodyAsBytes();
      doReturn((InputStream) null).when(response1).getResponseBodyAsStream();
      doReturn(0, (int)(byte)4, (int)(byte)29).when(response1).getStatusCode();
      doReturn("-_", "").when(response1).getStatusText();
      doReturn((Uri) null, (Uri) null).when(response1).getUri();
      doReturn(true, true).when(response1).hasResponseBody();
      doReturn(false).when(response1).hasResponseStatus();
      Document document1 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse1 = new WebDavResponse(response1, document1);
      webDavResponse1.getStatusCode();
      webDavResponse1.getUri();
      webDavResponse1.getResponseBody();
      webDavResponse1.getStatusCode();
      webDavResponse1.getUri();
      String string0 = webDavResponse1.toString();
      webDavResponse1.getHeaders((CharSequence) "http");
      webDavResponse1.getRemoteAddress();
      webDavResponse1.getResponseBodyAsBytes();
      webDavResponse1.getLocalAddress();
      webDavResponse1.hasResponseBody();
      webDavResponse1.getStatusText();
      webDavResponse1.getHeaders();
      webDavResponse1.getStatusText();
      webDavResponse1.getResponseBodyAsByteBuffer();
      webDavResponse1.hasResponseBody();
      webDavResponse1.getResponseBody();
      webDavResponse1.getResponseBodyAsStream();
      webDavResponse1.hasResponseStatus();
      webDavResponse1.getResponseBodyAsBytes();
      webDavResponse1.getStatusCode();
      webDavResponse1.getLocalAddress();
      String string1 = webDavResponse1.getContentType();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      InetAddressSet inetAddressSet0 = new InetAddressSet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) inetAddressSet0);
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(response0).getHeaders(any(java.lang.CharSequence.class));
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      List<String> list1 = webDavResponse0.getHeaders((CharSequence) null);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Cookie> linkedList0 = new LinkedList<Cookie>();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(httpHeaders0).toString();
      SocketAddress socketAddress0 = mock(SocketAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(socketAddress0).toString();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputStream0).toString();
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn("D").when(response0).getContentType();
      doReturn(linkedList0).when(response0).getCookies();
      doReturn("W~1X'<$>wE(!)'Jx{&2", "D").when(response0).getHeader(any(java.lang.CharSequence.class));
      doReturn(httpHeaders0, httpHeaders0).when(response0).getHeaders();
      doReturn(socketAddress0, socketAddress0, (SocketAddress) null).when(response0).getLocalAddress();
      doReturn(socketAddress0, socketAddress0, socketAddress0).when(response0).getRemoteAddress();
      doReturn("W~1X'<$>wE(!)'Jx{&2").when(response0).getResponseBody();
      doReturn(inputStream0).when(response0).getResponseBodyAsStream();
      doReturn((-1)).when(response0).getStatusCode();
      doReturn(true, true).when(response0).hasResponseHeaders();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getResponseBodyAsStream();
      webDavResponse0.hasResponseHeaders();
      webDavResponse0.getContentType();
      webDavResponse0.getLocalAddress();
      webDavResponse0.getResponseBody();
      SocketAddress socketAddress1 = webDavResponse0.getRemoteAddress();
      webDavResponse0.getRemoteAddress();
      webDavResponse0.getHeaders();
      webDavResponse0.toString();
      webDavResponse0.getCookies();
      webDavResponse0.getRemoteAddress();
      webDavResponse0.getLocalAddress();
      webDavResponse0.getHeader("org.asynchttpclient.webdav.WebDavResponse@1");
      webDavResponse0.getStatusCode();
      webDavResponse0.hasResponseHeaders();
      webDavResponse0.getHeader("org.asynchttpclient.webdav.WebDavResponse@1");
      webDavResponse0.getHeaders();
      SocketAddress socketAddress2 = webDavResponse0.getLocalAddress();
      assertSame(socketAddress2, socketAddress1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(response0).getCookies();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      List<Cookie> list0 = webDavResponse0.getCookies();
      Response response1 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(response1).getCookies();
      doReturn(true).when(response1).hasResponseHeaders();
      doReturn(true).when(response1).hasResponseStatus();
      doReturn(false).when(response1).isRedirected();
      WebDavResponse webDavResponse1 = new WebDavResponse(response1, (Document) null);
      webDavResponse1.isRedirected();
      webDavResponse1.getCookies();
      boolean boolean0 = webDavResponse1.hasResponseHeaders();
      boolean boolean1 = webDavResponse1.hasResponseStatus();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(response0).getRemoteAddress();
      doReturn((Uri) null).when(response0).getUri();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getRemoteAddress();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      webDavResponse0.getUri();
      Response response1 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(response1).getCookies();
      doReturn((SocketAddress) null).when(response1).getLocalAddress();
      doReturn(byteArray0).when(response1).getResponseBodyAsBytes();
      doReturn((int)(byte)21).when(response1).getStatusCode();
      doReturn((Uri) null).when(response1).getUri();
      Document document1 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse1 = new WebDavResponse(response1, document1);
      webDavResponse1.getStatusCode();
      webDavResponse1.getLocalAddress();
      webDavResponse1.getResponseBodyAsBytes();
      webDavResponse1.getUri();
      List<Cookie> list0 = webDavResponse1.getCookies();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Cookie> linkedList0 = new LinkedList<Cookie>();
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(response0).getContentType();
      doReturn((List) null).when(response0).getCookies();
      doReturn((HttpHeaders) null).when(response0).getHeaders();
      doReturn((List) null, (List) null).when(response0).getHeaders(any(java.lang.CharSequence.class));
      doReturn((SocketAddress) null, (SocketAddress) null).when(response0).getLocalAddress();
      doReturn((SocketAddress) null, (SocketAddress) null).when(response0).getRemoteAddress();
      doReturn((String) null, (String) null).when(response0).getResponseBody();
      doReturn(0).when(response0).getStatusCode();
      doReturn((String) null, (String) null, (String) null).when(response0).getStatusText();
      doReturn(false, false, false, false).when(response0).hasResponseHeaders();
      doReturn(false).when(response0).hasResponseStatus();
      doReturn(false).when(response0).isRedirected();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.toString();
      webDavResponse0.getRemoteAddress();
      webDavResponse0.hasResponseHeaders();
      webDavResponse0.getStatusText();
      webDavResponse0.getContentType();
      webDavResponse0.getLocalAddress();
      webDavResponse0.getRemoteAddress();
      webDavResponse0.getLocalAddress();
      webDavResponse0.hasResponseHeaders();
      webDavResponse0.getHeaders();
      webDavResponse0.toString();
      webDavResponse0.getHeaders((CharSequence) null);
      webDavResponse0.getStatusText();
      webDavResponse0.getStatusText();
      webDavResponse0.getContentType();
      webDavResponse0.getHeaders((CharSequence) "org.asynchttpclient.webdav.WebDavResponse@1");
      webDavResponse0.getResponseBody();
      webDavResponse0.getResponseBody();
      webDavResponse0.getCookies();
      webDavResponse0.isRedirected();
      webDavResponse0.hasResponseStatus();
      webDavResponse0.hasResponseHeaders();
      webDavResponse0.hasResponseHeaders();
      int int0 = webDavResponse0.getStatusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      webDavResponse0.toString();
      // Undeclared exception!
      try { 
        webDavResponse0.getUri();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      Locale locale0 = Locale.US;
      Locale.forLanguageTag("P:K\"/%d-:c6Y/u");
      Locale.getISOLanguages();
      locale0.getExtensionKeys();
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayScript();
      // Undeclared exception!
      try { 
        webDavResponse0.getStatusText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.getContentType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      webDavResponse0.toString();
      // Undeclared exception!
      try { 
        webDavResponse0.getRemoteAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(response0).getResponseBodyAsByteBuffer();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      ByteBuffer byteBuffer0 = webDavResponse0.getResponseBodyAsByteBuffer();
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.getResponseBodyAsByteBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(response0).getRemoteAddress();
      doReturn(0).when(response0).getStatusCode();
      doReturn(false).when(response0).hasResponseBody();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getRemoteAddress();
      webDavResponse0.hasResponseBody();
      int int0 = webDavResponse0.getStatusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.hasResponseBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(response0).getCookies();
      doReturn(false).when(response0).hasResponseHeaders();
      doReturn(false).when(response0).hasResponseStatus();
      doReturn(false).when(response0).isRedirected();
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, (Document) null);
      boolean boolean0 = webDavResponse0.isRedirected();
      webDavResponse0.getCookies();
      webDavResponse0.hasResponseHeaders();
      boolean boolean1 = webDavResponse0.hasResponseStatus();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.getCookies();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).toString();
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      Document document1 = webDavResponse0.getBodyAsXML();
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(response0).getContentType();
      doReturn((SocketAddress) null).when(response0).getRemoteAddress();
      doReturn((String) null).when(response0).getStatusText();
      doReturn(false).when(response0).hasResponseStatus();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getRemoteAddress();
      webDavResponse0.hasResponseStatus();
      webDavResponse0.getContentType();
      String string0 = webDavResponse0.getStatusText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(response0).getHeaders(any(java.lang.CharSequence.class));
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      List<String> list0 = webDavResponse0.getHeaders((CharSequence) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(response0).getResponseBody();
      doReturn((InputStream) null).when(response0).getResponseBodyAsStream();
      doReturn((String) null).when(response0).getStatusText();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getStatusText();
      webDavResponse0.getResponseBodyAsStream();
      String string0 = webDavResponse0.getResponseBody();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(response0).getRemoteAddress();
      doReturn(0).when(response0).getStatusCode();
      doReturn(false).when(response0).isRedirected();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getStatusCode();
      webDavResponse0.isRedirected();
      SocketAddress socketAddress0 = webDavResponse0.getRemoteAddress();
      assertNull(socketAddress0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.isRedirected();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.getResponseBodyAsStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, (Document) null);
      webDavResponse0.toString();
      // Undeclared exception!
      try { 
        webDavResponse0.getStatusCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.getHeaders((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(response0).getLocalAddress();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      SocketAddress socketAddress0 = webDavResponse0.getLocalAddress();
      assertNull(socketAddress0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(response0).hasResponseHeaders();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      boolean boolean0 = webDavResponse0.hasResponseHeaders();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(response0).getResponseBody(any(java.nio.charset.Charset.class));
      doReturn((Uri) null).when(response0).getUri();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      webDavResponse0.getUri();
      String string0 = webDavResponse0.getResponseBody((Charset) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(response0).getResponseBodyAsBytes();
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, (Document) null);
      webDavResponse0.getResponseBodyAsBytes();
      webDavResponse0.getBodyAsXML();
      byte[] byteArray0 = webDavResponse0.getResponseBodyAsBytes();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, (Document) null);
      webDavResponse0.getBodyAsXML();
      // Undeclared exception!
      try { 
        webDavResponse0.getLocalAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.hasResponseHeaders();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(response0).getHeader(any(java.lang.CharSequence.class));
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayName();
      String string0 = webDavResponse0.getHeader("Korean (South Korea)");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      // Undeclared exception!
      try { 
        webDavResponse0.getResponseBodyAsBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, document0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        webDavResponse0.getResponseBody(charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((HttpHeaders) null).when(response0).getHeaders();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      WebDavResponse webDavResponse0 = new WebDavResponse(response0, document0);
      HttpHeaders httpHeaders0 = webDavResponse0.getHeaders();
      assertNull(httpHeaders0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Cookie> linkedList0 = new LinkedList<Cookie>();
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, (Document) null);
      // Undeclared exception!
      try { 
        webDavResponse0.getHeaders();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WebDavResponse webDavResponse0 = new WebDavResponse((Response) null, (Document) null);
      // Undeclared exception!
      try { 
        webDavResponse0.getResponseBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.webdav.WebDavResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
  }
}
