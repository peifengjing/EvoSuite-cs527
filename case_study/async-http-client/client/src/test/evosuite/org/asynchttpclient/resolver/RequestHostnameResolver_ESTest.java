/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:17:51 GMT 2017
 */

package org.asynchttpclient.resolver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.resolver.NameResolver;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import org.asynchttpclient.handler.AsyncHandlerExtensions;
import org.asynchttpclient.resolver.RequestHostnameResolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestHostnameResolver_ESTest extends RequestHostnameResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RequestHostnameResolver[] requestHostnameResolverArray0 = RequestHostnameResolver.values();
      assertNotNull(requestHostnameResolverArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RequestHostnameResolver requestHostnameResolver0 = RequestHostnameResolver.valueOf("INSTANCE");
      assertEquals(RequestHostnameResolver.INSTANCE, requestHostnameResolver0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RequestHostnameResolver requestHostnameResolver0 = RequestHostnameResolver.INSTANCE;
      NameResolver<InetAddress> nameResolver0 = (NameResolver<InetAddress>) mock(NameResolver.class, new ViolatedAssumptionAnswer());
      AsyncHandlerExtensions asyncHandlerExtensions0 = mock(AsyncHandlerExtensions.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        requestHostnameResolver0.resolve(nameResolver0, (InetSocketAddress) null, asyncHandlerExtensions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.resolver.RequestHostnameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RequestHostnameResolver requestHostnameResolver0 = RequestHostnameResolver.INSTANCE;
      NameResolver<InetAddress> nameResolver0 = (NameResolver<InetAddress>) mock(NameResolver.class, new ViolatedAssumptionAnswer());
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(395);
      AsyncHandlerExtensions asyncHandlerExtensions0 = mock(AsyncHandlerExtensions.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        requestHostnameResolver0.resolve(nameResolver0, mockInetSocketAddress0, asyncHandlerExtensions0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.ImmediateEventExecutor
         //
         verifyException("org.asynchttpclient.resolver.RequestHostnameResolver", e);
      }
  }
}
