/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:48:02 GMT 2017
 */

package org.asynchttpclient;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.handler.ssl.SslContext;
import io.netty.util.Timer;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadFactory;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.DefaultAsyncHttpClientConfig;
import org.asynchttpclient.Realm;
import org.asynchttpclient.SslEngineFactory;
import org.asynchttpclient.channel.ChannelPool;
import org.asynchttpclient.channel.KeepAliveStrategy;
import org.asynchttpclient.filter.IOExceptionFilter;
import org.asynchttpclient.filter.RequestFilter;
import org.asynchttpclient.filter.ResponseFilter;
import org.asynchttpclient.filter.ThrottleRequestFilter;
import org.asynchttpclient.handler.resumable.ResumableIOExceptionFilter;
import org.asynchttpclient.proxy.ProxyServer;
import org.asynchttpclient.proxy.ProxyServerSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultAsyncHttpClientConfig_ESTest extends DefaultAsyncHttpClientConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setWebSocketMaxFrameSize(128);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setMaxRequestRetry((-2327));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setUseOpenSsl(true);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.getAllocator();
      Map<ChannelOption<Object>, Object> map0 = defaultAsyncHttpClientConfig0.getChannelOptions();
      defaultAsyncHttpClientConfig0.getChannelPool();
      String[] stringArray0 = new String[0];
      defaultAsyncHttpClientConfig0.getWsAdditionalChannelInitializer();
      List<IOExceptionFilter> list0 = defaultAsyncHttpClientConfig0.getIoExceptionFilters();
      KeepAliveStrategy keepAliveStrategy0 = defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig0.getNettyTimer();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig0.getRealm();
      List<RequestFilter> list1 = defaultAsyncHttpClientConfig0.getRequestFilters();
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER;
      List<ResponseFilter> list2 = defaultAsyncHttpClientConfig0.getResponseFilters();
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
      defaultAsyncHttpClientConfig0.getThreadFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn(map0).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(128).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn((-2327)).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(128).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn(stringArray0).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn(stringArray0).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn((-167)).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn((-2327)).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn((-2957)).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn((-2327)).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn(list0).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(417).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn(keepAliveStrategy0).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(144).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn((-882)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn((-882)).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn((-3079)).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(1628).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn(proxyServerSelector0).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(128).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn(list1).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(46).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(asyncHttpClientConfig_ResponseBodyPartFactory0).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn(list2).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(2147483645).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(2651).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(2147483645).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(1023).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn((-644)).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(2147483645).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn((-2)).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn("").when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn("V^D9").when(asyncHttpClientConfig0).getUserAgent();
      doReturn(472).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(1929).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(true).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(true).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(true).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(true).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(true).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(true).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(true).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(true).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSoReuseAddress(false);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder4.removeResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder5.setKeepAlive(false);
      defaultAsyncHttpClientConfig_Builder6.setReadTimeout(1369);
      defaultAsyncHttpClientConfig_Builder6.setConnectTimeout(1);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder8 = defaultAsyncHttpClientConfig_Builder7.setReadTimeout(1369);
      defaultAsyncHttpClientConfig_Builder7.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder9 = defaultAsyncHttpClientConfig_Builder8.setUseProxyProperties(false);
      defaultAsyncHttpClientConfig_Builder9.setSoReuseAddress(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder9.build();
      defaultAsyncHttpClientConfig_Builder8.setHttpClientCodecMaxInitialLineLength(1369);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder10 = defaultAsyncHttpClientConfig_Builder8.setThreadPoolName("GknZadTZtoTdE&QM");
      defaultAsyncHttpClientConfig1.getConnectTimeout();
      defaultAsyncHttpClientConfig_Builder5.setUseProxyProperties(false);
      defaultAsyncHttpClientConfig_Builder7.setChunkedFileChunkSize(1);
      defaultAsyncHttpClientConfig1.isKeepEncodingHeader();
      defaultAsyncHttpClientConfig1.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig1.getAhcVersion();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder11 = defaultAsyncHttpClientConfig_Builder7.setDisableZeroCopy(false);
      defaultAsyncHttpClientConfig_Builder6.setUseNativeTransport(true);
      defaultAsyncHttpClientConfig1.getEnabledCipherSuites();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig2 = defaultAsyncHttpClientConfig_Builder7.build();
      defaultAsyncHttpClientConfig1.isAggregateWebSocketFrameFragments();
      defaultAsyncHttpClientConfig_Builder11.setKeepEncodingHeader(true);
      defaultAsyncHttpClientConfig2.isCompressionEnforced();
      defaultAsyncHttpClientConfig2.getNettyTimer();
      defaultAsyncHttpClientConfig_Builder10.setNettyTimer((Timer) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      defaultAsyncHttpClientConfig_Builder0.setConnectTimeout(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSoReuseAddress(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setThreadPoolName("ag$E->mJI");
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setIoThreadsCount(17);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setMaxConnections(17);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getMaxRequestRetry();
      defaultAsyncHttpClientConfig_Builder4.setSoSndBuf((-2));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder2.setMaxRedirects(0);
      defaultAsyncHttpClientConfig0.getChannelPool();
      defaultAsyncHttpClientConfig_Builder5.setShutdownQuietPeriod(0);
      defaultAsyncHttpClientConfig_Builder0.setChannelPool((ChannelPool) null);
      defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize();
      defaultAsyncHttpClientConfig_Builder1.setUseLaxCookieEncoder(false);
      defaultAsyncHttpClientConfig0.getRealm();
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig_Builder1.setSslContext((SslContext) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder3.setKeepEncodingHeader(false);
      defaultAsyncHttpClientConfig_Builder5.setMaxConnectionsPerHost(128000000);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder5.removeResponseFilter(responseFilter0);
      defaultAsyncHttpClientConfig0.getHandshakeTimeout();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder6.setMaxConnectionsPerHost(5);
      defaultAsyncHttpClientConfig_Builder7.setUseInsecureTrustManager(false);
      defaultAsyncHttpClientConfig0.getUserAgent();
      defaultAsyncHttpClientConfig0.getReadTimeout();
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder7.addIOExceptionFilter(iOExceptionFilter0);
      defaultAsyncHttpClientConfig0.getThreadFactory();
      defaultAsyncHttpClientConfig0.getMaxConnections();
      defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setMaxConnections(1);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setHttpClientCodecMaxInitialLineLength(1);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setFollowRedirect(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.getAllocator();
      Map<ChannelOption<Object>, Object> map0 = defaultAsyncHttpClientConfig0.getChannelOptions();
      defaultAsyncHttpClientConfig0.getChannelPool();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "/ahc-version.properties";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "`k;e7k4\"M${KU";
      stringArray0[5] = "";
      stringArray0[6] = "org.asynchttpclient.DefaultAsyncHttpClientConfig";
      stringArray0[7] = "8*U67,KZi|aOvUz";
      stringArray0[8] = "";
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      defaultAsyncHttpClientConfig0.getWsAdditionalChannelInitializer();
      List<IOExceptionFilter> list0 = defaultAsyncHttpClientConfig0.getIoExceptionFilters();
      KeepAliveStrategy keepAliveStrategy0 = defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig0.getNettyTimer();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      List<RequestFilter> list1 = defaultAsyncHttpClientConfig0.getRequestFilters();
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY;
      List<ResponseFilter> list2 = defaultAsyncHttpClientConfig0.getResponseFilters();
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
      defaultAsyncHttpClientConfig0.getThreadFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn(map0).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(1).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn((-1)).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(1500).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn(stringArray0).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn(stringArray0).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn((-1265)).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn((-1265)).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn((-725)).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn(list0).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(1500).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn(keepAliveStrategy0).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn((-725)).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn((-725)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn((-1)).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(16711680).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn(proxyServerSelector0).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn((-1)).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn(realm0).when(asyncHttpClientConfig0).getRealm();
      doReturn(list1).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn((-1511)).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(asyncHttpClientConfig_ResponseBodyPartFactory0).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn(list2).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn((-1265)).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn((-1265)).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((-1)).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(1).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn((-1)).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn("org.asynchttpclient.DefaultAsyncHttpClientConfig").when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn("").when(asyncHttpClientConfig0).getUserAgent();
      doReturn((-1)).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn((-1)).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(true).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(true).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(true).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(true).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(true).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(true).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(true).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setMaxRedirects(3904);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setIoThreadsCount(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder5.setWebSocketMaxBufferSize((-795));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder8 = defaultAsyncHttpClientConfig_Builder6.setUseProxyProperties(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder9 = defaultAsyncHttpClientConfig_Builder8.setHttpClientCodecMaxInitialLineLength(3904);
      defaultAsyncHttpClientConfig_Builder6.setHttpClientCodecMaxChunkSize(4533);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder10 = defaultAsyncHttpClientConfig_Builder6.setSoReuseAddress(true);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder9.build();
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder10.removeIOExceptionFilter(iOExceptionFilter0);
      defaultAsyncHttpClientConfig1.getThreadPoolName();
      ProxyServerSelector proxyServerSelector1 = defaultAsyncHttpClientConfig1.getProxyServerSelector();
      defaultAsyncHttpClientConfig_Builder5.setProxyServerSelector(proxyServerSelector1);
      defaultAsyncHttpClientConfig1.getShutdownTimeout();
      defaultAsyncHttpClientConfig1.getSoRcvBuf();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder11 = defaultAsyncHttpClientConfig_Builder10.setHttpClientCodecInitialBufferSize(3904);
      defaultAsyncHttpClientConfig_Builder9.setHttpClientCodecMaxHeaderSize(3904);
      defaultAsyncHttpClientConfig1.getThreadFactory();
      defaultAsyncHttpClientConfig_Builder8.setThreadFactory((ThreadFactory) null);
      Integer integer0 = new Integer((-618));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder12 = defaultAsyncHttpClientConfig_Builder8.setSslSessionCacheSize(integer0);
      defaultAsyncHttpClientConfig_Builder12.build();
      defaultAsyncHttpClientConfig_Builder12.setSoReuseAddress(true);
      ChannelOption<ThrottleRequestFilter> channelOption0 = (ChannelOption<ThrottleRequestFilter>) mock(ChannelOption.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder6.addChannelOption(channelOption0, (ThrottleRequestFilter) null);
      defaultAsyncHttpClientConfig_Builder11.removeResponseFilter((ResponseFilter) null);
      defaultAsyncHttpClientConfig_Builder7.setHttpClientCodecMaxChunkSize(8388608);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      Realm.Builder realm_Builder0 = mock(Realm.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((Realm) null).when(realm_Builder0).build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setRealm(realm_Builder0);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.removeResponseFilter(responseFilter0);
      ChannelOption<Integer> channelOption0 = (ChannelOption<Integer>) mock(ChannelOption.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(channelOption0).toString();
      Integer integer0 = new Integer((-2));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.addChannelOption(channelOption0, integer0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.getAllocator();
      Map<ChannelOption<Object>, Object> map0 = defaultAsyncHttpClientConfig0.getChannelOptions();
      defaultAsyncHttpClientConfig0.getChannelPool();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?X}20.T";
      stringArray0[1] = "MD5-sess";
      stringArray0[2] = "oCKy@t[/[`!";
      stringArray0[3] = " o";
      stringArray0[4] = "?xLt'^Z(|8L.jl(-qd";
      stringArray0[5] = "GJt{9`,e&Z/2Hg/Zz";
      stringArray0[6] = "io.netty.buffer.PoolArena";
      String[] stringArray1 = new String[0];
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      defaultAsyncHttpClientConfig0.getWsAdditionalChannelInitializer();
      List<IOExceptionFilter> list0 = defaultAsyncHttpClientConfig0.getIoExceptionFilters();
      defaultAsyncHttpClientConfig0.getNettyTimer();
      defaultAsyncHttpClientConfig0.getRealm();
      List<RequestFilter> list1 = defaultAsyncHttpClientConfig0.getRequestFilters();
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY;
      List<ResponseFilter> list2 = defaultAsyncHttpClientConfig0.getResponseFilters();
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
      defaultAsyncHttpClientConfig0.getThreadFactory();
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig1).getAllocator();
      doReturn(map0).when(asyncHttpClientConfig1).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig1).getChannelPool();
      doReturn(255).when(asyncHttpClientConfig1).getChunkedFileChunkSize();
      doReturn((-2)).when(asyncHttpClientConfig1).getConnectTimeout();
      doReturn(996).when(asyncHttpClientConfig1).getConnectionTtl();
      doReturn(stringArray0).when(asyncHttpClientConfig1).getEnabledCipherSuites();
      doReturn(stringArray1).when(asyncHttpClientConfig1).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig1).getEventLoopGroup();
      doReturn(255).when(asyncHttpClientConfig1).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig1).getHttpAdditionalChannelInitializer();
      doReturn(255).when(asyncHttpClientConfig1).getHttpClientCodecMaxChunkSize();
      doReturn((-2)).when(asyncHttpClientConfig1).getHttpClientCodecMaxHeaderSize();
      doReturn((-2)).when(asyncHttpClientConfig1).getHttpClientCodecMaxInitialLineLength();
      doReturn(list0).when(asyncHttpClientConfig1).getIoExceptionFilters();
      doReturn(255).when(asyncHttpClientConfig1).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig1).getKeepAliveStrategy();
      doReturn(4018).when(asyncHttpClientConfig1).getMaxConnections();
      doReturn((-2)).when(asyncHttpClientConfig1).getMaxConnectionsPerHost();
      doReturn(255).when(asyncHttpClientConfig1).getMaxRedirects();
      doReturn((-2)).when(asyncHttpClientConfig1).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig1).getNettyTimer();
      doReturn((-2)).when(asyncHttpClientConfig1).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig1).getProxyServerSelector();
      doReturn((-2367)).when(asyncHttpClientConfig1).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig1).getRealm();
      doReturn(list1).when(asyncHttpClientConfig1).getRequestFilters();
      doReturn((-2367)).when(asyncHttpClientConfig1).getRequestTimeout();
      doReturn(asyncHttpClientConfig_ResponseBodyPartFactory0).when(asyncHttpClientConfig1).getResponseBodyPartFactory();
      doReturn(list2).when(asyncHttpClientConfig1).getResponseFilters();
      doReturn((-2367)).when(asyncHttpClientConfig1).getShutdownQuietPeriod();
      doReturn(4018).when(asyncHttpClientConfig1).getShutdownTimeout();
      doReturn(248).when(asyncHttpClientConfig1).getSoLinger();
      doReturn(248).when(asyncHttpClientConfig1).getSoRcvBuf();
      doReturn(1).when(asyncHttpClientConfig1).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig1).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig1).getSslEngineFactory();
      doReturn((-2)).when(asyncHttpClientConfig1).getSslSessionCacheSize();
      doReturn(2147483645).when(asyncHttpClientConfig1).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig1).getThreadFactory();
      doReturn("?SMpwKf").when(asyncHttpClientConfig1).getThreadPoolName();
      doReturn("GJt{9`,e&Z/2Hg/Zz").when(asyncHttpClientConfig1).getUserAgent();
      doReturn(248).when(asyncHttpClientConfig1).getWebSocketMaxBufferSize();
      doReturn((-479)).when(asyncHttpClientConfig1).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig1).getWsAdditionalChannelInitializer();
      doReturn(true).when(asyncHttpClientConfig1).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig1).isDisableUrlEncodingForBoundRequests();
      doReturn(true).when(asyncHttpClientConfig1).isDisableZeroCopy();
      doReturn(true).when(asyncHttpClientConfig1).isFollowRedirect();
      doReturn(true).when(asyncHttpClientConfig1).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig1).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig1).isSoReuseAddress();
      doReturn(true).when(asyncHttpClientConfig1).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig1).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig1).isUseInsecureTrustManager();
      doReturn(true).when(asyncHttpClientConfig1).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig1);
      RequestFilter requestFilter0 = mock(RequestFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.removeRequestFilter(requestFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setDisableHttpsEndpointIdentificationAlgorithm(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder6.setKeepAlive(false);
      defaultAsyncHttpClientConfig_Builder7.setHttpClientCodecMaxChunkSize((-2956));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder8 = defaultAsyncHttpClientConfig_Builder7.setUseInsecureTrustManager(true);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder8.build();
      defaultAsyncHttpClientConfig1.getThreadFactory();
      Integer integer1 = new Integer(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder9 = defaultAsyncHttpClientConfig_Builder6.setSslSessionTimeout(integer1);
      defaultAsyncHttpClientConfig_Builder8.setUseInsecureTrustManager(true);
      defaultAsyncHttpClientConfig1.isFollowRedirect();
      defaultAsyncHttpClientConfig_Builder5.setWebSocketMaxBufferSize(0);
      defaultAsyncHttpClientConfig1.isFollowRedirect();
      defaultAsyncHttpClientConfig_Builder5.setMaxRequestRetry(1);
      defaultAsyncHttpClientConfig_Builder9.setUserAgent("");
      defaultAsyncHttpClientConfig1.isSoReuseAddress();
      defaultAsyncHttpClientConfig_Builder9.setRequestTimeout(4084);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.addResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig_Builder1.setSslContext((SslContext) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseNativeTransport(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setAggregateWebSocketFrameFragments(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setUseProxySelector(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultAsyncHttpClientConfig_Builder4.setSoLinger((-198));
      defaultAsyncHttpClientConfig_Builder2.setReadTimeout((-198));
      defaultAsyncHttpClientConfig_Builder0.setEnabledProtocols((String[]) null);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig1.isUseNativeTransport();
      byte[] byteArray0 = new byte[0];
      ResponseFilter responseFilter1 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder2.removeResponseFilter(responseFilter1);
      defaultAsyncHttpClientConfig_Builder4.setRequestTimeout((-143));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultAsyncHttpClientConfig1.getAhcVersion();
      defaultAsyncHttpClientConfig1.getSoRcvBuf();
      defaultAsyncHttpClientConfig1.isAggregateWebSocketFrameFragments();
      defaultAsyncHttpClientConfig1.getConnectionPoolCleanerPeriod();
      defaultAsyncHttpClientConfig1.getReadTimeout();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setShutdownQuietPeriod(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setMaxRequestRetry(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.getAllocator();
      Map<ChannelOption<Object>, Object> map0 = defaultAsyncHttpClientConfig0.getChannelOptions();
      defaultAsyncHttpClientConfig0.getChannelPool();
      String[] stringArray0 = new String[0];
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      List<IOExceptionFilter> list0 = defaultAsyncHttpClientConfig0.getIoExceptionFilters();
      defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig0.getNettyTimer();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig0.getRealm();
      List<RequestFilter> list1 = defaultAsyncHttpClientConfig0.getRequestFilters();
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER;
      List<ResponseFilter> list2 = defaultAsyncHttpClientConfig0.getResponseFilters();
      defaultAsyncHttpClientConfig0.getSslContext();
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig1).getAllocator();
      doReturn(map0).when(asyncHttpClientConfig1).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig1).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig1).getChunkedFileChunkSize();
      doReturn(7).when(asyncHttpClientConfig1).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig1).getConnectionTtl();
      doReturn(stringArray0).when(asyncHttpClientConfig1).getEnabledCipherSuites();
      doReturn(stringArray0).when(asyncHttpClientConfig1).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig1).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig1).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig1).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig1).getHttpClientCodecMaxChunkSize();
      doReturn(1).when(asyncHttpClientConfig1).getHttpClientCodecMaxHeaderSize();
      doReturn(31).when(asyncHttpClientConfig1).getHttpClientCodecMaxInitialLineLength();
      doReturn(list0).when(asyncHttpClientConfig1).getIoExceptionFilters();
      doReturn((-1)).when(asyncHttpClientConfig1).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig1).getKeepAliveStrategy();
      doReturn(7).when(asyncHttpClientConfig1).getMaxConnections();
      doReturn(31).when(asyncHttpClientConfig1).getMaxConnectionsPerHost();
      doReturn(1).when(asyncHttpClientConfig1).getMaxRedirects();
      doReturn((-2149)).when(asyncHttpClientConfig1).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig1).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig1).getPooledConnectionIdleTimeout();
      doReturn(proxyServerSelector0).when(asyncHttpClientConfig1).getProxyServerSelector();
      doReturn((-2708)).when(asyncHttpClientConfig1).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig1).getRealm();
      doReturn(list1).when(asyncHttpClientConfig1).getRequestFilters();
      doReturn((-2149)).when(asyncHttpClientConfig1).getRequestTimeout();
      doReturn(asyncHttpClientConfig_ResponseBodyPartFactory0).when(asyncHttpClientConfig1).getResponseBodyPartFactory();
      doReturn(list2).when(asyncHttpClientConfig1).getResponseFilters();
      doReturn(3632).when(asyncHttpClientConfig1).getShutdownQuietPeriod();
      doReturn(1).when(asyncHttpClientConfig1).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig1).getSoLinger();
      doReturn(1).when(asyncHttpClientConfig1).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig1).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig1).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig1).getSslEngineFactory();
      doReturn(1111).when(asyncHttpClientConfig1).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig1).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig1).getThreadFactory();
      doReturn("b").when(asyncHttpClientConfig1).getThreadPoolName();
      doReturn("ahc.version").when(asyncHttpClientConfig1).getUserAgent();
      doReturn(1).when(asyncHttpClientConfig1).getWebSocketMaxBufferSize();
      doReturn(4246).when(asyncHttpClientConfig1).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig1).getWsAdditionalChannelInitializer();
      doReturn(true).when(asyncHttpClientConfig1).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig1).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig1).isDisableZeroCopy();
      doReturn(true).when(asyncHttpClientConfig1).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig1).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig1).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig1).isSoReuseAddress();
      doReturn(true).when(asyncHttpClientConfig1).isStrict302Handling();
      doReturn(true).when(asyncHttpClientConfig1).isTcpNoDelay();
      doReturn(true).when(asyncHttpClientConfig1).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig1).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig1);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig1.getAhcVersion();
      defaultAsyncHttpClientConfig1.getWsAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder4.setWsAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      defaultAsyncHttpClientConfig_Builder4.setHttpClientCodecInitialBufferSize((-1));
      defaultAsyncHttpClientConfig1.isValidateResponseHeaders();
      defaultAsyncHttpClientConfig1.getEnabledProtocols();
      defaultAsyncHttpClientConfig1.isKeepAlive();
      defaultAsyncHttpClientConfig_Builder4.setIoThreadsCount(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecMaxChunkSize((-2590));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setHttpClientCodecMaxInitialLineLength(697);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setTcpNoDelay(true);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.getAllocator();
      Map<ChannelOption<Object>, Object> map0 = defaultAsyncHttpClientConfig0.getChannelOptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "/ahc-version.properties";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "CQ6T;CQ`p$]x!)";
      stringArray0[7] = "J[_RA";
      stringArray0[8] = "org.asynchttpclient.DefaultAsyncHttpClientConfig";
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      defaultAsyncHttpClientConfig0.getHttpAdditionalChannelInitializer();
      List<IOExceptionFilter> list0 = defaultAsyncHttpClientConfig0.getIoExceptionFilters();
      KeepAliveStrategy keepAliveStrategy0 = defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig0.getNettyTimer();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig0.getRealm();
      List<RequestFilter> list1 = defaultAsyncHttpClientConfig0.getRequestFilters();
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY;
      List<ResponseFilter> list2 = defaultAsyncHttpClientConfig0.getResponseFilters();
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
      defaultAsyncHttpClientConfig0.getThreadFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn(map0).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(697).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn((-862048943)).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn((-862048943)).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn(stringArray0).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn(stringArray0).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn((-16)).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn((-3186)).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(1401).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(1).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn(list0).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn((-16)).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn(keepAliveStrategy0).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn((-862048943)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn((-862048943)).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(2180).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn(proxyServerSelector0).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(2180).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn(list1).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn((-1051)).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(asyncHttpClientConfig_ResponseBodyPartFactory0).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn(list2).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(1777).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn((-1288)).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((-389)).when(asyncHttpClientConfig0).getSoLinger();
      doReturn((-1288)).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(697).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(107).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn("").when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn("").when(asyncHttpClientConfig0).getUserAgent();
      doReturn(1401).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(472).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(true).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(true).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(true).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(true).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(true).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(true).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSoReuseAddress(false);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder4.removeResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder5.setKeepAlive(false);
      defaultAsyncHttpClientConfig_Builder6.setReadTimeout(1369);
      defaultAsyncHttpClientConfig_Builder6.setConnectTimeout(1);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder8 = defaultAsyncHttpClientConfig_Builder7.setReadTimeout(1369);
      defaultAsyncHttpClientConfig_Builder7.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder9 = defaultAsyncHttpClientConfig_Builder8.setUseProxyProperties(false);
      defaultAsyncHttpClientConfig_Builder9.setSoReuseAddress(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder9.build();
      defaultAsyncHttpClientConfig_Builder8.setHttpClientCodecMaxInitialLineLength(1369);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder10 = defaultAsyncHttpClientConfig_Builder8.setThreadPoolName("GknZadTZtoTdE&QM");
      defaultAsyncHttpClientConfig1.getConnectTimeout();
      defaultAsyncHttpClientConfig_Builder5.setUseProxyProperties(false);
      defaultAsyncHttpClientConfig_Builder7.setChunkedFileChunkSize(1);
      defaultAsyncHttpClientConfig1.isKeepEncodingHeader();
      defaultAsyncHttpClientConfig1.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig1.getAhcVersion();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder11 = defaultAsyncHttpClientConfig_Builder7.setDisableZeroCopy(false);
      defaultAsyncHttpClientConfig_Builder6.setUseNativeTransport(false);
      defaultAsyncHttpClientConfig1.getEnabledCipherSuites();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig2 = defaultAsyncHttpClientConfig_Builder7.build();
      defaultAsyncHttpClientConfig1.isAggregateWebSocketFrameFragments();
      defaultAsyncHttpClientConfig_Builder11.setKeepEncodingHeader(false);
      defaultAsyncHttpClientConfig2.isCompressionEnforced();
      defaultAsyncHttpClientConfig2.getNettyTimer();
      defaultAsyncHttpClientConfig_Builder10.setNettyTimer((Timer) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      RequestFilter requestFilter0 = mock(RequestFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.addRequestFilter(requestFilter0);
      String[] stringArray0 = new String[0];
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setEnabledProtocols(stringArray0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setHttpClientCodecInitialBufferSize(7967);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getAllocator();
      defaultAsyncHttpClientConfig_Builder2.setAllocator((ByteBufAllocator) null);
      defaultAsyncHttpClientConfig_Builder0.setSoLinger(7967);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.removeResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig1.getSslSessionCacheSize();
      defaultAsyncHttpClientConfig1.getAhcVersion();
      defaultAsyncHttpClientConfig1.isTcpNoDelay();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setChunkedFileChunkSize((-1));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setShutdownTimeout((-1));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setTcpNoDelay(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setUseNativeTransport(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getChunkedFileChunkSize();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setDisableZeroCopy(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setCompressionEnforced(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setHttpClientCodecInitialBufferSize((-1));
      defaultAsyncHttpClientConfig_Builder2.setMaxConnectionsPerHost((-1));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setHandshakeTimeout((-1));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSoRcvBuf(0);
      ChannelOption<ThrottleRequestFilter> channelOption0 = (ChannelOption<ThrottleRequestFilter>) mock(ChannelOption.class, new ViolatedAssumptionAnswer());
      ThrottleRequestFilter throttleRequestFilter0 = mock(ThrottleRequestFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.addChannelOption(channelOption0, throttleRequestFilter0);
      defaultAsyncHttpClientConfig_Builder6.setUseProxySelector(false);
      defaultAsyncHttpClientConfig_Builder6.setPooledConnectionIdleTimeout(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder6.build();
      defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize();
      defaultAsyncHttpClientConfig0.getEnabledProtocols();
      defaultAsyncHttpClientConfig_Builder1.setSoLinger(1297);
      defaultAsyncHttpClientConfig_Builder4.setThreadPoolName("N[K|xPS-Q5S1u3kCi=");
      defaultAsyncHttpClientConfig0.getHandshakeTimeout();
      defaultAsyncHttpClientConfig0.isUseNativeTransport();
      defaultAsyncHttpClientConfig0.isTcpNoDelay();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setUseProxyProperties(false);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.removeResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setUseOpenSsl(false);
      RequestFilter requestFilter0 = mock(RequestFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.removeRequestFilter(requestFilter0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getUserAgent();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setMaxConnections(0);
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder0.setMaxRequestRetry(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.addIOExceptionFilter(iOExceptionFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setShutdownQuietPeriod(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder2.setDisableHttpsEndpointIdentificationAlgorithm(true);
      defaultAsyncHttpClientConfig_Builder3.setWebSocketMaxFrameSize(1412);
      Integer integer0 = new Integer(1412);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSslSessionCacheSize(integer0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder3.setSoLinger(98);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecMaxInitialLineLength(0);
      defaultAsyncHttpClientConfig_Builder4.removeResponseFilter(responseFilter0);
      defaultAsyncHttpClientConfig_Builder5.setChunkedFileChunkSize(2363);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder5.build();
      defaultAsyncHttpClientConfig0.getAhcVersion();
      defaultAsyncHttpClientConfig_Builder3.setConnectTimeout(1450);
      defaultAsyncHttpClientConfig_Builder3.setHttpClientCodecMaxHeaderSize(109);
      defaultAsyncHttpClientConfig_Builder6.setUseOpenSsl(true);
      defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost();
      defaultAsyncHttpClientConfig0.getShutdownQuietPeriod();
      ProxyServer.Builder proxyServer_Builder0 = mock(ProxyServer.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((ProxyServer) null).when(proxyServer_Builder0).build();
      defaultAsyncHttpClientConfig_Builder7.setProxyServer(proxyServer_Builder0);
      defaultAsyncHttpClientConfig_Builder6.setPooledConnectionIdleTimeout(109);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setMaxRedirects((-933));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseProxySelector(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setWebSocketMaxFrameSize((-933));
      ProxyServer.Builder proxyServer_Builder0 = mock(ProxyServer.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((ProxyServer) null).when(proxyServer_Builder0).build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setProxyServer(proxyServer_Builder0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder3.setUseInsecureTrustManager(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder4.setUseLaxCookieEncoder(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder6.addRequestFilter((RequestFilter) null);
      defaultAsyncHttpClientConfig_Builder1.setCompressionEnforced(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder8 = defaultAsyncHttpClientConfig_Builder3.setMaxConnections((-933));
      Integer integer0 = new Integer(2269);
      defaultAsyncHttpClientConfig_Builder8.setSslSessionCacheSize(integer0);
      defaultAsyncHttpClientConfig_Builder7.setShutdownQuietPeriod((-933));
      defaultAsyncHttpClientConfig_Builder1.setMaxRequestRetry(2269);
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY;
      defaultAsyncHttpClientConfig_Builder4.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      defaultAsyncHttpClientConfig_Builder6.setAggregateWebSocketFrameFragments(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder9 = defaultAsyncHttpClientConfig_Builder6.setHandshakeTimeout((-1326));
      defaultAsyncHttpClientConfig_Builder4.setHandshakeTimeout((-933));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder8.build();
      defaultAsyncHttpClientConfig_Builder3.setReadTimeout((-303));
      defaultAsyncHttpClientConfig0.getReadTimeout();
      defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize();
      defaultAsyncHttpClientConfig_Builder2.setDisableUrlEncodingForBoundRequests(false);
      defaultAsyncHttpClientConfig_Builder5.setConnectTimeout((-1326));
      defaultAsyncHttpClientConfig0.getSslSessionCacheSize();
      defaultAsyncHttpClientConfig_Builder5.setMaxRequestRetry(2269);
      defaultAsyncHttpClientConfig_Builder9.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      defaultAsyncHttpClientConfig0.getResponseFilters();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getAhcVersion();
      defaultAsyncHttpClientConfig0.getWsAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder0.setWsAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecInitialBufferSize((-1));
      defaultAsyncHttpClientConfig0.isValidateResponseHeaders();
      defaultAsyncHttpClientConfig0.getEnabledProtocols();
      defaultAsyncHttpClientConfig0.isKeepAlive();
      defaultAsyncHttpClientConfig_Builder0.setIoThreadsCount(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      Realm.Builder realm_Builder0 = mock(Realm.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((Realm) null).when(realm_Builder0).build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setRealm(realm_Builder0);
      String[] stringArray0 = new String[0];
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder0.setEnabledProtocols(stringArray0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.setShutdownQuietPeriod((-2024));
      defaultAsyncHttpClientConfig_Builder3.setKeepAlive(true);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig_Builder1.setProxyServerSelector(proxyServerSelector0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder3.build();
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER;
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder1.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      defaultAsyncHttpClientConfig1.getIoThreadsCount();
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder3.addIOExceptionFilter(iOExceptionFilter0);
      defaultAsyncHttpClientConfig_Builder2.setWebSocketMaxFrameSize((-702));
      defaultAsyncHttpClientConfig1.getShutdownQuietPeriod();
      defaultAsyncHttpClientConfig_Builder3.setKeepAlive(true);
      defaultAsyncHttpClientConfig1.getMaxRedirects();
      defaultAsyncHttpClientConfig0.getRealm();
      defaultAsyncHttpClientConfig_Builder4.setRealm((Realm) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setUseLaxCookieEncoder(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setMaxRedirects(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSoRcvBuf(0);
      ResumableIOExceptionFilter resumableIOExceptionFilter0 = mock(ResumableIOExceptionFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder1.addChannelOption((ChannelOption<ResumableIOExceptionFilter>) null, resumableIOExceptionFilter0);
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder2.setProxyServer(proxyServer0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder2.setShutdownTimeout(0);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder2.removeResponseFilter(responseFilter0);
      defaultAsyncHttpClientConfig_Builder1.setSoRcvBuf(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder5.build();
      defaultAsyncHttpClientConfig0.getNettyTimer();
      defaultAsyncHttpClientConfig_Builder4.setNettyTimer((Timer) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder4.setStrict302Handling(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&T";
      stringArray0[1] = "/ahc-version.properties";
      stringArray0[2] = "io.netty.allocator.pageSize";
      defaultAsyncHttpClientConfig_Builder5.setEnabledCipherSuites(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = ":";
      defaultAsyncHttpClientConfig_Builder1.setEnabledCipherSuites(stringArray1);
      defaultAsyncHttpClientConfig_Builder4.setNettyTimer((Timer) null);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder6.build();
      defaultAsyncHttpClientConfig1.getResponseFilters();
      defaultAsyncHttpClientConfig1.isUseLaxCookieEncoder();
      defaultAsyncHttpClientConfig1.getSoRcvBuf();
      defaultAsyncHttpClientConfig_Builder6.setShutdownQuietPeriod((-831));
      defaultAsyncHttpClientConfig_Builder3.setUseNativeTransport(true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setCompressionEnforced(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setDisableZeroCopy(false);
      defaultAsyncHttpClientConfig_Builder2.setMaxConnections((-1310));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setUseProxyProperties(true);
      ProxyServer.Builder proxyServer_Builder0 = mock(ProxyServer.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((ProxyServer) null).when(proxyServer_Builder0).build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setProxyServer(proxyServer_Builder0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getChunkedFileChunkSize();
      defaultAsyncHttpClientConfig0.getEnabledCipherSuites();
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder3.setProxyServer(proxyServer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      String[] stringArray0 = new String[0];
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setEnabledCipherSuites(stringArray0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseInsecureTrustManager(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.setHttpClientCodecInitialBufferSize((-2709));
      Realm.Builder realm_Builder0 = mock(Realm.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((Realm) null).when(realm_Builder0).build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setRealm(realm_Builder0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setUseProxySelector(true);
      defaultAsyncHttpClientConfig_Builder5.setStrict302Handling(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setProxyServerSelector(proxyServerSelector0);
      defaultAsyncHttpClientConfig0.getThreadFactory();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder6.setThreadFactory((ThreadFactory) null);
      defaultAsyncHttpClientConfig_Builder6.addRequestFilter((RequestFilter) null);
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
      defaultAsyncHttpClientConfig_Builder0.setSslEngineFactory((SslEngineFactory) null);
      defaultAsyncHttpClientConfig0.getChannelOptions();
      defaultAsyncHttpClientConfig_Builder7.setConnectionTtl(0);
      defaultAsyncHttpClientConfig_Builder2.setWebSocketMaxBufferSize(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setAllocator((ByteBufAllocator) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setKeepAlive(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getHttpAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder2.setWsAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setDisableZeroCopy(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setHttpClientCodecMaxHeaderSize((-1));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig1.isDisableUrlEncodingForBoundRequests();
      defaultAsyncHttpClientConfig1.getMaxConnectionsPerHost();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setThreadPoolName((String) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setSoRcvBuf((-2098));
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setProxyServer(proxyServer0);
      defaultAsyncHttpClientConfig0.getNettyTimer();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setNettyTimer((Timer) null);
      defaultAsyncHttpClientConfig_Builder6.setRequestTimeout((-2098));
      defaultAsyncHttpClientConfig_Builder6.setHttpClientCodecMaxHeaderSize(39);
      defaultAsyncHttpClientConfig_Builder4.setConnectTimeout(39);
      defaultAsyncHttpClientConfig0.getShutdownQuietPeriod();
      defaultAsyncHttpClientConfig0.isValidateResponseHeaders();
      defaultAsyncHttpClientConfig0.isKeepAlive();
      KeepAliveStrategy keepAliveStrategy0 = defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig_Builder1.setKeepAliveStrategy(keepAliveStrategy0);
      defaultAsyncHttpClientConfig0.getConnectTimeout();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setUseLaxCookieEncoder(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setConnectTimeout(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setHandshakeTimeout(0);
      defaultAsyncHttpClientConfig_Builder2.setUseOpenSsl(true);
      defaultAsyncHttpClientConfig_Builder1.setDisableHttpsEndpointIdentificationAlgorithm(true);
      defaultAsyncHttpClientConfig_Builder2.setSoReuseAddress(true);
      defaultAsyncHttpClientConfig_Builder1.setKeepAliveStrategy((KeepAliveStrategy) null);
      defaultAsyncHttpClientConfig_Builder3.setHttpAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      defaultAsyncHttpClientConfig_Builder1.setChunkedFileChunkSize(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder1.build();
      defaultAsyncHttpClientConfig0.getHttpAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize();
      defaultAsyncHttpClientConfig0.isUseOpenSsl();
      defaultAsyncHttpClientConfig_Builder0.setWebSocketMaxBufferSize(0);
      // Undeclared exception!
      try { 
        defaultAsyncHttpClientConfig_Builder1.setSslSessionTimeout((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.DefaultAsyncHttpClientConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setStrict302Handling(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseOpenSsl(true);
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.removeIOExceptionFilter(iOExceptionFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setWebSocketMaxFrameSize(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setConnectionTtl((-1508));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Kn4L{:%";
      defaultAsyncHttpClientConfig_Builder4.setHttpClientCodecInitialBufferSize(0);
      stringArray0[1] = "4ZUz4`?o";
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder2.build();
      defaultAsyncHttpClientConfig0.getRealm();
      defaultAsyncHttpClientConfig_Builder1.setRealm((Realm) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setEnabledCipherSuites(stringArray0);
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY;
      defaultAsyncHttpClientConfig_Builder1.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      defaultAsyncHttpClientConfig_Builder3.setCompressionEnforced(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder3.build();
      KeepAliveStrategy keepAliveStrategy0 = defaultAsyncHttpClientConfig1.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig_Builder6.setKeepAliveStrategy(keepAliveStrategy0);
      defaultAsyncHttpClientConfig_Builder5.setHttpClientCodecInitialBufferSize(0);
      defaultAsyncHttpClientConfig1.getConnectionTtl();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecMaxHeaderSize((-353));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getRealm();
      defaultAsyncHttpClientConfig_Builder0.setRealm((Realm) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setEnabledCipherSuites((String[]) null);
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY;
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setConnectionTtl((-353));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder2.build();
      defaultAsyncHttpClientConfig_Builder4.setHttpClientCodecMaxChunkSize((-353));
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig1.getProxyServerSelector();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setProxyServerSelector(proxyServerSelector0);
      defaultAsyncHttpClientConfig_Builder5.setEnabledCipherSuites((String[]) null);
      defaultAsyncHttpClientConfig_Builder5.setReadTimeout((-353));
      defaultAsyncHttpClientConfig_Builder2.setUseProxyProperties(true);
      defaultAsyncHttpClientConfig1.isCompressionEnforced();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder4.setUseProxySelector(true);
      defaultAsyncHttpClientConfig0.getRequestFilters();
      defaultAsyncHttpClientConfig1.isStrict302Handling();
      defaultAsyncHttpClientConfig1.isKeepEncodingHeader();
      defaultAsyncHttpClientConfig0.getShutdownTimeout();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder0.setDisableZeroCopy(false);
      defaultAsyncHttpClientConfig_Builder7.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      defaultAsyncHttpClientConfig_Builder5.setDisableHttpsEndpointIdentificationAlgorithm(false);
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig_Builder0.setSslContext((SslContext) null);
      defaultAsyncHttpClientConfig0.getResponseBodyPartFactory();
      defaultAsyncHttpClientConfig1.getMaxConnections();
      defaultAsyncHttpClientConfig1.getSslSessionTimeout();
      defaultAsyncHttpClientConfig1.getMaxRedirects();
      defaultAsyncHttpClientConfig_Builder6.setIoThreadsCount((-1));
      defaultAsyncHttpClientConfig_Builder0.setReadTimeout((-988));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = null;
      try {
        defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setConnectTimeout(16);
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.LAZY;
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      Integer integer0 = new Integer(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSslSessionCacheSize(integer0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setIoThreadsCount(375);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getIoThreadsCount();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getAllocator();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setAllocator((ByteBufAllocator) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUserAgent("s3a0D$v*6A;;67L");
      defaultAsyncHttpClientConfig0.getNettyTimer();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setNettyTimer((Timer) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setHttpClientCodecMaxInitialLineLength((-2));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setReadTimeout((-1250));
      defaultAsyncHttpClientConfig_Builder5.setConnectTimeout((-1250));
      defaultAsyncHttpClientConfig_Builder0.setPooledConnectionIdleTimeout((-2));
      defaultAsyncHttpClientConfig0.isUseInsecureTrustManager();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s3a0D$v*6A;;67L";
      stringArray0[1] = "s3a0D$v*6A;;67L";
      stringArray0[2] = "s3a0D$v*6A;;67L";
      stringArray0[3] = "s3a0D$v*6A;;67L";
      stringArray0[4] = "7:Ywj}~d~'[JW'%F";
      stringArray0[5] = "s3a0D$v*6A;;67L";
      stringArray0[6] = "s3a0D$v*6A;;67L";
      defaultAsyncHttpClientConfig_Builder3.setShutdownTimeout(0);
      stringArray0[7] = "s3a0D$v*6A;;67L";
      defaultAsyncHttpClientConfig_Builder0.setEnabledCipherSuites(stringArray0);
      defaultAsyncHttpClientConfig_Builder5.setRequestTimeout(257);
      defaultAsyncHttpClientConfig0.getResponseBodyPartFactory();
      defaultAsyncHttpClientConfig_Builder0.setReadTimeout(257);
      defaultAsyncHttpClientConfig0.getSoLinger();
      defaultAsyncHttpClientConfig0.getReadTimeout();
      defaultAsyncHttpClientConfig_Builder1.setSoLinger((-5));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getConnectTimeout();
      defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout();
      defaultAsyncHttpClientConfig0.getShutdownTimeout();
      defaultAsyncHttpClientConfig0.getHandshakeTimeout();
      defaultAsyncHttpClientConfig0.getWsAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder0.setHttpAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      Integer integer0 = new Integer(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSslSessionCacheSize(integer0);
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder1.removeIOExceptionFilter(iOExceptionFilter0);
      defaultAsyncHttpClientConfig0.getShutdownQuietPeriod();
      defaultAsyncHttpClientConfig_Builder1.setDisableZeroCopy(false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = null;
      try {
        defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setEventLoopGroup((EventLoopGroup) null);
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.removeIOExceptionFilter(iOExceptionFilter0);
      Realm.Builder realm_Builder0 = mock(Realm.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((Realm) null).when(realm_Builder0).build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setRealm(realm_Builder0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setShutdownQuietPeriod(5);
      defaultAsyncHttpClientConfig_Builder1.setFollowRedirect(false);
      defaultAsyncHttpClientConfig_Builder3.setConnectTimeout(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setUserAgent("nRSi");
      defaultAsyncHttpClientConfig_Builder6.setRequestTimeout(0);
      defaultAsyncHttpClientConfig0.getAllocator();
      defaultAsyncHttpClientConfig_Builder6.setAllocator((ByteBufAllocator) null);
      defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout();
      defaultAsyncHttpClientConfig0.getSslSessionTimeout();
      defaultAsyncHttpClientConfig_Builder2.setIoThreadsCount(60000);
      defaultAsyncHttpClientConfig0.getHttpAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder1.setHttpAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSoSndBuf(0);
      defaultAsyncHttpClientConfig_Builder1.setHandshakeTimeout(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setWebSocketMaxFrameSize((-947));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder2.build();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setProxyServerSelector(proxyServerSelector0);
      defaultAsyncHttpClientConfig0.getSslContext();
      defaultAsyncHttpClientConfig_Builder3.setSslContext((SslContext) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setConnectionTtl(0);
      Integer integer0 = new Integer((-1));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSslSessionTimeout(integer0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setKeepEncodingHeader(true);
      defaultAsyncHttpClientConfig0.getThreadPoolName();
      defaultAsyncHttpClientConfig0.getSslContext();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder2.setSslContext((SslContext) null);
      defaultAsyncHttpClientConfig_Builder5.setFollowRedirect(true);
      defaultAsyncHttpClientConfig0.getHandshakeTimeout();
      defaultAsyncHttpClientConfig_Builder6.setHttpClientCodecMaxChunkSize(0);
      defaultAsyncHttpClientConfig0.getEnabledProtocols();
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
      defaultAsyncHttpClientConfig_Builder0.setThreadPoolName("AsyncHttpClient");
      defaultAsyncHttpClientConfig_Builder7.setHttpClientCodecMaxChunkSize((-1));
      defaultAsyncHttpClientConfig_Builder6.setAggregateWebSocketFrameFragments(true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = null;
      try {
        defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecInitialBufferSize(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "S=l";
      stringArray0[1] = "{]?#cFf8";
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getRealm();
      defaultAsyncHttpClientConfig_Builder0.setRealm((Realm) null);
      stringArray0[2] = "xMmHzDJL0+";
      stringArray0[3] = "";
      stringArray0[4] = "org.asynchttpclient.DefaultAsyncHttpClientConfig";
      stringArray0[5] = "";
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setEnabledCipherSuites(stringArray0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.setSoRcvBuf(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder2.setChunkedFileChunkSize(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setHttpClientCodecMaxHeaderSize(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setMaxConnectionsPerHost(0);
      defaultAsyncHttpClientConfig_Builder6.setUseNativeTransport(false);
      defaultAsyncHttpClientConfig_Builder6.setReadTimeout(0);
      defaultAsyncHttpClientConfig_Builder5.setRequestTimeout(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder1.setUseProxySelector(false);
      defaultAsyncHttpClientConfig_Builder6.setHttpClientCodecInitialBufferSize(747);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig1.isValidateResponseHeaders();
      defaultAsyncHttpClientConfig_Builder7.setStrict302Handling(false);
      defaultAsyncHttpClientConfig1.getRealm();
      defaultAsyncHttpClientConfig1.getRequestTimeout();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER;
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setWebSocketMaxBufferSize((-1852));
      RequestFilter requestFilter0 = mock(RequestFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder2.removeRequestFilter(requestFilter0);
      Integer integer0 = new Integer(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSslSessionTimeout(integer0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setUseInsecureTrustManager(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setHttpClientCodecMaxInitialLineLength((-1852));
      defaultAsyncHttpClientConfig_Builder4.setMaxConnections(0);
      ProxyServer.Builder proxyServer_Builder0 = mock(ProxyServer.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((ProxyServer) null).when(proxyServer_Builder0).build();
      defaultAsyncHttpClientConfig_Builder5.setProxyServer(proxyServer_Builder0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig_Builder4.setHandshakeTimeout(0);
      defaultAsyncHttpClientConfig0.getMaxRedirects();
      defaultAsyncHttpClientConfig0.isUseNativeTransport();
      defaultAsyncHttpClientConfig0.isKeepAlive();
      defaultAsyncHttpClientConfig0.getChannelPool();
      defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig_Builder1.setDisableZeroCopy(true);
      defaultAsyncHttpClientConfig_Builder3.setConnectTimeout(1177);
      defaultAsyncHttpClientConfig0.isUseInsecureTrustManager();
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder2.addResponseFilter(responseFilter0);
      defaultAsyncHttpClientConfig_Builder5.setConnectionTtl((-2174));
      defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      defaultAsyncHttpClientConfig_Builder0.setMaxConnections(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setChunkedFileChunkSize(0);
      defaultAsyncHttpClientConfig_Builder0.setReadTimeout(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UNKNOWN";
      defaultAsyncHttpClientConfig_Builder1.setEnabledProtocols(stringArray0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder1.build();
      defaultAsyncHttpClientConfig0.isKeepAlive();
      defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize();
      defaultAsyncHttpClientConfig0.getSslContext();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder0.setSslContext((SslContext) null);
      defaultAsyncHttpClientConfig_Builder2.setWebSocketMaxBufferSize(0);
      defaultAsyncHttpClientConfig_Builder1.setDisableZeroCopy(true);
      defaultAsyncHttpClientConfig_Builder2.setThreadPoolName("UNKNOWN");
      defaultAsyncHttpClientConfig0.isCompressionEnforced();
      defaultAsyncHttpClientConfig_Builder1.setCompressionEnforced(false);
      defaultAsyncHttpClientConfig0.getThreadPoolName();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setConnectionTtl(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseLaxCookieEncoder(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSoLinger(955);
      ProxyServer.Builder proxyServer_Builder0 = mock(ProxyServer.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((ProxyServer) null).when(proxyServer_Builder0).build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setProxyServer(proxyServer_Builder0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getSoSndBuf();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setCompressionEnforced(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setMaxRequestRetry(2496);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSoSndBuf(2496);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setPooledConnectionIdleTimeout(2496);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments();
      defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[x@ShM";
      stringArray0[1] = "";
      stringArray0[2] = "Sn!T";
      stringArray0[3] = "A";
      stringArray0[4] = "_'cel#[SM_0)]Pje$";
      stringArray0[5] = "]ZJzm(Thx";
      stringArray0[6] = "";
      defaultAsyncHttpClientConfig_Builder4.setEnabledCipherSuites(stringArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setReadTimeout((-1742));
      Integer integer0 = new Integer(0);
      defaultAsyncHttpClientConfig_Builder1.setSslSessionCacheSize(integer0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.setStrict302Handling(true);
      defaultAsyncHttpClientConfig0.getSslContext();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setSslContext((SslContext) null);
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig_Builder3.setProxyServerSelector(proxyServerSelector0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSoLinger(660);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setUseProxyProperties(true);
      defaultAsyncHttpClientConfig_Builder6.setValidateResponseHeaders(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder6.setDisableZeroCopy(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder8 = defaultAsyncHttpClientConfig_Builder6.setReadTimeout(1);
      Integer integer1 = new Integer(660);
      defaultAsyncHttpClientConfig_Builder7.setSslSessionTimeout(integer1);
      defaultAsyncHttpClientConfig0.isTcpNoDelay();
      defaultAsyncHttpClientConfig0.getUserAgent();
      defaultAsyncHttpClientConfig0.getSslSessionTimeout();
      defaultAsyncHttpClientConfig_Builder8.setKeepAliveStrategy((KeepAliveStrategy) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder9 = defaultAsyncHttpClientConfig_Builder1.setAggregateWebSocketFrameFragments(true);
      defaultAsyncHttpClientConfig_Builder1.setIoThreadsCount((-1742));
      defaultAsyncHttpClientConfig_Builder2.setUserAgent("AHC/2.1");
      defaultAsyncHttpClientConfig0.isUseNativeTransport();
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      defaultAsyncHttpClientConfig_Builder8.setShutdownTimeout(0);
      defaultAsyncHttpClientConfig0.getConnectTimeout();
      defaultAsyncHttpClientConfig_Builder9.setHttpClientCodecInitialBufferSize(2719);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSoLinger(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig_Builder1.setProxyServerSelector(proxyServerSelector0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setSoReuseAddress(true);
      Integer integer0 = new Integer(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSslSessionCacheSize(integer0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig1.isUseInsecureTrustManager();
      defaultAsyncHttpClientConfig1.getSoSndBuf();
      defaultAsyncHttpClientConfig_Builder1.setTcpNoDelay(true);
      defaultAsyncHttpClientConfig1.getThreadFactory();
      defaultAsyncHttpClientConfig_Builder2.setThreadFactory((ThreadFactory) null);
      defaultAsyncHttpClientConfig1.isCompressionEnforced();
      defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm();
      defaultAsyncHttpClientConfig0.getIoThreadsCount();
      defaultAsyncHttpClientConfig1.getHttpAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder0.setWsAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      defaultAsyncHttpClientConfig0.getThreadFactory();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setThreadFactory((ThreadFactory) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setUseLaxCookieEncoder(true);
      defaultAsyncHttpClientConfig0.getAllocator();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setAllocator((ByteBufAllocator) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setMaxConnectionsPerHost(0);
      defaultAsyncHttpClientConfig0.getSslContext();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setSslContext((SslContext) null);
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig_Builder5.setProxyServerSelector(proxyServerSelector0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-Dio.netty.allocator.chunkSize: {}";
      stringArray0[2] = "uBo^Q$[n__";
      stringArray0[3] = "_t";
      stringArray0[4] = "|.\"5k";
      stringArray0[5] = "";
      stringArray0[6] = "4s',o;3ACBaf";
      stringArray0[7] = "SNPNdtN`~y^/r;pp$";
      defaultAsyncHttpClientConfig_Builder6.setEnabledProtocols(stringArray0);
      defaultAsyncHttpClientConfig0.getChannelPool();
      defaultAsyncHttpClientConfig_Builder4.setChannelPool((ChannelPool) null);
      defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize();
      defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize();
      defaultAsyncHttpClientConfig_Builder5.setProxyServerSelector(proxyServerSelector0);
      defaultAsyncHttpClientConfig0.getShutdownTimeout();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setRequestTimeout((-33));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder1.build();
      defaultAsyncHttpClientConfig0.getReadTimeout();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSoSndBuf(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      defaultAsyncHttpClientConfig_Builder0.setProxyServerSelector(proxyServerSelector0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setWsAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setUseNativeTransport(false);
      ProxyServer.Builder proxyServer_Builder0 = mock(ProxyServer.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((ProxyServer) null).when(proxyServer_Builder0).build();
      defaultAsyncHttpClientConfig_Builder3.setProxyServer(proxyServer_Builder0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig1.getSoLinger();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setHttpClientCodecInitialBufferSize(1737);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setHttpClientCodecMaxInitialLineLength(1737);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setHandshakeTimeout((-688));
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setSslEngineFactory((SslEngineFactory) null);
      defaultAsyncHttpClientConfig0.getAllocator();
      defaultAsyncHttpClientConfig_Builder6.setAllocator((ByteBufAllocator) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.addResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setKeepEncodingHeader(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setHttpClientCodecMaxInitialLineLength((-2794));
      ResponseFilter responseFilter1 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.removeResponseFilter(responseFilter1);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig1.isKeepEncodingHeader();
      defaultAsyncHttpClientConfig1.getChannelPool();
      defaultAsyncHttpClientConfig_Builder3.setChannelPool((ChannelPool) null);
      defaultAsyncHttpClientConfig0.getChunkedFileChunkSize();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setKeepAlive(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setDisableZeroCopy(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setHttpClientCodecInitialBufferSize(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setConnectionTtl(0);
      defaultAsyncHttpClientConfig0.getChannelPool();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setChannelPool((ChannelPool) null);
      defaultAsyncHttpClientConfig_Builder6.setShutdownTimeout(16384);
      defaultAsyncHttpClientConfig_Builder2.setWebSocketMaxBufferSize(0);
      defaultAsyncHttpClientConfig0.getMaxRedirects();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = null;
      try {
        defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = null;
      try {
        defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      // Undeclared exception!
      try { 
        defaultAsyncHttpClientConfig_Builder0.setProxyServer((ProxyServer.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.DefaultAsyncHttpClientConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseNativeTransport(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "failed to initialize the client-side SSL context";
      stringArray0[3] = ", high: ";
      stringArray0[4] = "0KH)w^R[./7ed";
      defaultAsyncHttpClientConfig_Builder2.setEnabledCipherSuites(stringArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecMaxHeaderSize(1849);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setMaxConnectionsPerHost(1849);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setHttpClientCodecMaxChunkSize(1849);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setTcpNoDelay(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setFollowRedirect(true);
      defaultAsyncHttpClientConfig_Builder5.setHttpClientCodecMaxInitialLineLength((-805));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.getChannelOptions();
      RequestFilter requestFilter0 = mock(RequestFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.addRequestFilter(requestFilter0);
      defaultAsyncHttpClientConfig_Builder6.setMaxRedirects((-754));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setMaxRedirects(548);
      Integer integer0 = new Integer(2048);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseNativeTransport(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.setSslSessionCacheSize(integer0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder2.build();
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      defaultAsyncHttpClientConfig_Builder0.setEventLoopGroup((EventLoopGroup) null);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig1.isFollowRedirect();
      defaultAsyncHttpClientConfig1.getRequestTimeout();
      defaultAsyncHttpClientConfig1.getRequestFilters();
      defaultAsyncHttpClientConfig_Builder0.setKeepAlive(false);
      defaultAsyncHttpClientConfig1.getHandshakeTimeout();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecMaxHeaderSize(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setSoLinger(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setMaxRequestRetry(0);
      defaultAsyncHttpClientConfig_Builder2.setWebSocketMaxFrameSize((-1));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setMaxConnectionsPerHost(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.isTcpNoDelay();
      defaultAsyncHttpClientConfig_Builder3.setDisableZeroCopy(true);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setValidateResponseHeaders(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseOpenSsl(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setKeepEncodingHeader(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setShutdownTimeout(177);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getRequestTimeout();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.isDisableUrlEncodingForBoundRequests();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseOpenSsl(false);
      defaultAsyncHttpClientConfig0.getNettyTimer();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setNettyTimer((Timer) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setMaxConnectionsPerHost((-278));
      defaultAsyncHttpClientConfig_Builder4.setSoSndBuf((-1836));
      Integer integer0 = new Integer(0);
      defaultAsyncHttpClientConfig_Builder0.setShutdownTimeout(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSslSessionTimeout(integer0);
      defaultAsyncHttpClientConfig_Builder5.setUseNativeTransport(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setIoThreadsCount((-278));
      defaultAsyncHttpClientConfig_Builder6.setHandshakeTimeout((-278));
      defaultAsyncHttpClientConfig_Builder6.setSoReuseAddress(false);
      defaultAsyncHttpClientConfig0.getMaxRequestRetry();
      defaultAsyncHttpClientConfig0.getThreadFactory();
      defaultAsyncHttpClientConfig_Builder5.setThreadFactory((ThreadFactory) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setDisableHttpsEndpointIdentificationAlgorithm(true);
      defaultAsyncHttpClientConfig_Builder0.setReadTimeout((-1062));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseProxyProperties(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setTcpNoDelay(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setAggregateWebSocketFrameFragments(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder3.setUseNativeTransport(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder5.build();
      defaultAsyncHttpClientConfig_Builder2.setStrict302Handling(false);
      defaultAsyncHttpClientConfig0.isSoReuseAddress();
      defaultAsyncHttpClientConfig0.getChannelPool();
      defaultAsyncHttpClientConfig_Builder0.setChannelPool((ChannelPool) null);
      defaultAsyncHttpClientConfig_Builder5.setUseProxySelector(true);
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER;
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder3.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
      defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder();
      defaultAsyncHttpClientConfig_Builder6.setWebSocketMaxFrameSize((-2662));
      defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize();
      defaultAsyncHttpClientConfig_Builder4.setConnectTimeout(8192);
      defaultAsyncHttpClientConfig_Builder1.setTcpNoDelay(true);
      defaultAsyncHttpClientConfig0.getAllocator();
      defaultAsyncHttpClientConfig_Builder5.setDisableHttpsEndpointIdentificationAlgorithm(false);
      defaultAsyncHttpClientConfig0.getMaxConnections();
      defaultAsyncHttpClientConfig_Builder3.setNettyTimer((Timer) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecInitialBufferSize(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      ProxyServerSelector proxyServerSelector0 = defaultAsyncHttpClientConfig0.getProxyServerSelector();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setProxyServerSelector(proxyServerSelector0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setHttpClientCodecMaxInitialLineLength(0);
      String[] stringArray0 = new String[0];
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setEnabledCipherSuites(stringArray0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setMaxConnectionsPerHost(1);
      defaultAsyncHttpClientConfig_Builder5.setProxyServerSelector(proxyServerSelector0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder0.setProxyServer(proxyServer0);
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      defaultAsyncHttpClientConfig_Builder0.setAggregateWebSocketFrameFragments(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = null;
      try {
        defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setUseOpenSsl(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setSoRcvBuf((-16777216));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setPooledConnectionIdleTimeout((-16777216));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setReadTimeout((-16777216));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder2.build();
      KeepAliveStrategy keepAliveStrategy0 = defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setKeepAliveStrategy(keepAliveStrategy0);
      defaultAsyncHttpClientConfig_Builder5.setReadTimeout((-16777216));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setAggregateWebSocketFrameFragments(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUseLaxCookieEncoder(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setUserAgent("k2/}oKU=Pn");
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder1.build();
      defaultAsyncHttpClientConfig0.getRealm();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setRealm((Realm) null);
      defaultAsyncHttpClientConfig0.getEventLoopGroup();
      defaultAsyncHttpClientConfig_Builder4.setEventLoopGroup((EventLoopGroup) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OJ+");
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecInitialBufferSize(3593);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setSoLinger(3593);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSoRcvBuf((-528));
      defaultAsyncHttpClientConfig_Builder2.setShutdownTimeout((-3424));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setChunkedFileChunkSize(3593);
      defaultAsyncHttpClientConfig_Builder4.setUseInsecureTrustManager(true);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getIoThreadsCount();
      defaultAsyncHttpClientConfig0.getThreadPoolName();
      defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm();
      defaultAsyncHttpClientConfig0.getThreadPoolName();
      defaultAsyncHttpClientConfig0.getHttpAdditionalChannelInitializer();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setDisableHttpsEndpointIdentificationAlgorithm(false);
      defaultAsyncHttpClientConfig_Builder0.setPooledConnectionIdleTimeout(359);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setChunkedFileChunkSize(1);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setMaxRequestRetry(1);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setTcpNoDelay(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder3.setConnectionTtl(359);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder4.setCompressionEnforced(false);
      defaultAsyncHttpClientConfig_Builder6.setKeepAlive(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder6.setHandshakeTimeout(0);
      defaultAsyncHttpClientConfig_Builder5.setProxyServerSelector((ProxyServerSelector) null);
      defaultAsyncHttpClientConfig_Builder0.setDisableHttpsEndpointIdentificationAlgorithm(false);
      defaultAsyncHttpClientConfig_Builder7.setStrict302Handling(false);
      defaultAsyncHttpClientConfig0.getSoRcvBuf();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setAggregateWebSocketFrameFragments(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setThreadPoolName("8_1&B+1t");
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setCompressionEnforced(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setUseInsecureTrustManager(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setMaxRequestRetry(3163);
      defaultAsyncHttpClientConfig_Builder5.setEventLoopGroup((EventLoopGroup) null);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setFollowRedirect(false);
      defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecInitialBufferSize(1008);
      Integer integer0 = new Integer(1008);
      defaultAsyncHttpClientConfig_Builder0.setSslSessionCacheSize(integer0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getResponseBodyPartFactory();
      defaultAsyncHttpClientConfig0.getUserAgent();
      defaultAsyncHttpClientConfig_Builder0.setSoSndBuf(1008);
      defaultAsyncHttpClientConfig0.getAllocator();
      defaultAsyncHttpClientConfig_Builder1.setAllocator((ByteBufAllocator) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setHttpClientCodecMaxInitialLineLength((-3043));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder1.build();
      defaultAsyncHttpClientConfig0.getHttpAdditionalChannelInitializer();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setHttpAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setSoLinger((-279));
      defaultAsyncHttpClientConfig_Builder1.setUseLaxCookieEncoder(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setUseProxyProperties(false);
      defaultAsyncHttpClientConfig_Builder0.setUseOpenSsl(false);
      defaultAsyncHttpClientConfig_Builder4.setAggregateWebSocketFrameFragments(false);
      defaultAsyncHttpClientConfig_Builder2.setMaxConnectionsPerHost((-3043));
      defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getWsAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder0.setHttpAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      defaultAsyncHttpClientConfig0.getSoSndBuf();
      defaultAsyncHttpClientConfig_Builder0.setRequestTimeout((-2258));
      defaultAsyncHttpClientConfig0.isDisableZeroCopy();
      defaultAsyncHttpClientConfig0.getSoSndBuf();
      defaultAsyncHttpClientConfig_Builder0.setUserAgent("}");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSoRcvBuf((-248));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder1.build();
      defaultAsyncHttpClientConfig0.getSslContext();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setSslContext((SslContext) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setWebSocketMaxFrameSize((-248));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setMaxConnectionsPerHost(1760);
      defaultAsyncHttpClientConfig_Builder4.setShutdownQuietPeriod(1871);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig0.getSslEngineFactory();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSoRcvBuf(3364);
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.addIOExceptionFilter(iOExceptionFilter0);
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setProxyServer(proxyServer0);
      defaultAsyncHttpClientConfig_Builder2.setHttpClientCodecMaxChunkSize(3364);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "hd~-Y6S-}A&Ye$91S";
      stringArray0[2] = "refCnt";
      stringArray0[3] = "))";
      stringArray0[4] = "%~]4=K{mLlL";
      stringArray0[5] = "";
      stringArray0[6] = "}aR\"NHx";
      defaultAsyncHttpClientConfig_Builder2.setEnabledProtocols(stringArray0);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder0.setWebSocketMaxBufferSize(3364);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.addResponseFilter(responseFilter0);
      defaultAsyncHttpClientConfig_Builder4.setWebSocketMaxFrameSize(3364);
      defaultAsyncHttpClientConfig_Builder4.setChunkedFileChunkSize(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize();
      defaultAsyncHttpClientConfig_Builder0.setMaxConnectionsPerHost(0);
      defaultAsyncHttpClientConfig_Builder1.setThreadPoolName("uID5");
      defaultAsyncHttpClientConfig0.isUseOpenSsl();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig_Builder0.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      defaultAsyncHttpClientConfig_Builder0.removeRequestFilter((RequestFilter) null);
      defaultAsyncHttpClientConfig_Builder0.setStrict302Handling(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setKeepEncodingHeader(true);
      defaultAsyncHttpClientConfig_Builder0.setTcpNoDelay(true);
      defaultAsyncHttpClientConfig_Builder1.setUseInsecureTrustManager(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setChunkedFileChunkSize(413);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setMaxRequestRetry(413);
      defaultAsyncHttpClientConfig_Builder2.setThreadPoolName("org.asynchttpclient.DefaultAsyncHttpClientConfig");
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setUseProxySelector(false);
      defaultAsyncHttpClientConfig0.getChannelPool();
      defaultAsyncHttpClientConfig_Builder3.setChannelPool((ChannelPool) null);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setHttpClientCodecInitialBufferSize((-2477));
      defaultAsyncHttpClientConfig_Builder6.setUseInsecureTrustManager(true);
      defaultAsyncHttpClientConfig_Builder1.setMaxConnections(413);
      Realm.Builder realm_Builder0 = mock(Realm.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((Realm) null).when(realm_Builder0).build();
      defaultAsyncHttpClientConfig_Builder6.setRealm(realm_Builder0);
      defaultAsyncHttpClientConfig0.isFollowRedirect();
      defaultAsyncHttpClientConfig0.getEnabledProtocols();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = null;
      try {
        defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setMaxConnectionsPerHost((-687));
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.removeResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder2.build();
      defaultAsyncHttpClientConfig0.isValidateResponseHeaders();
      Realm.Builder realm_Builder0 = mock(Realm.Builder.class, new ViolatedAssumptionAnswer());
      doReturn((Realm) null).when(realm_Builder0).build();
      defaultAsyncHttpClientConfig_Builder1.setRealm(realm_Builder0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder0.build();
      defaultAsyncHttpClientConfig1.getWsAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder2.setWsAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      defaultAsyncHttpClientConfig_Builder0.setConnectTimeout((-687));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setUseOpenSsl(true);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder2.setMaxRequestRetry((-687));
      defaultAsyncHttpClientConfig0.getSslSessionCacheSize();
      defaultAsyncHttpClientConfig0.isFollowRedirect();
      defaultAsyncHttpClientConfig0.isValidateResponseHeaders();
      defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize();
      defaultAsyncHttpClientConfig1.getWsAdditionalChannelInitializer();
      defaultAsyncHttpClientConfig_Builder3.setPooledConnectionIdleTimeout(11);
      defaultAsyncHttpClientConfig_Builder4.setSoReuseAddress(false);
      defaultAsyncHttpClientConfig1.getSslContext();
      defaultAsyncHttpClientConfig0.getIoThreadsCount();
      defaultAsyncHttpClientConfig0.getResponseFilters();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      RequestFilter requestFilter0 = mock(RequestFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.removeRequestFilter(requestFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setDisableHttpsEndpointIdentificationAlgorithm(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setKeepAlive(false);
      defaultAsyncHttpClientConfig_Builder3.setHttpClientCodecMaxChunkSize((-2956));
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setUseInsecureTrustManager(true);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder4.build();
      defaultAsyncHttpClientConfig0.getThreadFactory();
      Integer integer0 = new Integer(0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder2.setSslSessionTimeout(integer0);
      defaultAsyncHttpClientConfig_Builder4.setUseInsecureTrustManager(true);
      defaultAsyncHttpClientConfig0.isFollowRedirect();
      defaultAsyncHttpClientConfig_Builder1.setWebSocketMaxBufferSize(0);
      defaultAsyncHttpClientConfig0.isFollowRedirect();
      defaultAsyncHttpClientConfig_Builder1.setMaxRequestRetry(1);
      defaultAsyncHttpClientConfig_Builder5.setUserAgent("");
      defaultAsyncHttpClientConfig0.isSoReuseAddress();
      defaultAsyncHttpClientConfig_Builder5.setRequestTimeout(4084);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getChunkedFileChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getHttpAdditionalChannelInitializer();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxChunkSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxHeaderSize();
      doReturn(0).when(asyncHttpClientConfig0).getHttpClientCodecMaxInitialLineLength();
      doReturn((List) null).when(asyncHttpClientConfig0).getIoExceptionFilters();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn((Timer) null).when(asyncHttpClientConfig0).getNettyTimer();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn((AsyncHttpClientConfig.ResponseBodyPartFactory) null).when(asyncHttpClientConfig0).getResponseBodyPartFactory();
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn((AsyncHttpClientConfig.AdditionalChannelInitializer) null).when(asyncHttpClientConfig0).getWsAdditionalChannelInitializer();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setSoReuseAddress(false);
      ResponseFilter responseFilter0 = mock(ResponseFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder0.removeResponseFilter(responseFilter0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.setKeepAlive(false);
      defaultAsyncHttpClientConfig_Builder2.setReadTimeout(1369);
      defaultAsyncHttpClientConfig_Builder2.setConnectTimeout(1);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setReadTimeout(1369);
      defaultAsyncHttpClientConfig_Builder3.setValidateResponseHeaders(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setUseProxyProperties(false);
      defaultAsyncHttpClientConfig_Builder5.setSoReuseAddress(false);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder5.build();
      defaultAsyncHttpClientConfig_Builder4.setHttpClientCodecMaxInitialLineLength(1369);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder4.setThreadPoolName("GknZadTZtoTdE&QM");
      defaultAsyncHttpClientConfig0.getConnectTimeout();
      defaultAsyncHttpClientConfig_Builder1.setUseProxyProperties(false);
      defaultAsyncHttpClientConfig_Builder3.setChunkedFileChunkSize(1);
      defaultAsyncHttpClientConfig0.isKeepEncodingHeader();
      defaultAsyncHttpClientConfig0.getKeepAliveStrategy();
      defaultAsyncHttpClientConfig0.getAhcVersion();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder3.setDisableZeroCopy(false);
      defaultAsyncHttpClientConfig_Builder2.setUseNativeTransport(false);
      defaultAsyncHttpClientConfig0.getEnabledCipherSuites();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments();
      defaultAsyncHttpClientConfig_Builder7.setKeepEncodingHeader(false);
      defaultAsyncHttpClientConfig1.isCompressionEnforced();
      defaultAsyncHttpClientConfig1.getNettyTimer();
      defaultAsyncHttpClientConfig_Builder6.setNettyTimer((Timer) null);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setDisableUrlEncodingForBoundRequests(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setUserAgent("^ms6ZM#U_W*Z&#f");
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder1.setDisableUrlEncodingForBoundRequests(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder2.setStrict302Handling(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setRequestTimeout(0);
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder3.build();
      defaultAsyncHttpClientConfig0.getRealm();
      defaultAsyncHttpClientConfig_Builder5.setRealm((Realm) null);
      defaultAsyncHttpClientConfig_Builder5.setHttpClientCodecMaxChunkSize((-860));
      defaultAsyncHttpClientConfig_Builder2.setMaxConnectionsPerHost((-860));
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder5.build();
      defaultAsyncHttpClientConfig1.getResponseFilters();
      defaultAsyncHttpClientConfig_Builder4.setSoRcvBuf((-547));
      defaultAsyncHttpClientConfig_Builder2.setThreadPoolName("ahc.version");
      AsyncHttpClientConfig.ResponseBodyPartFactory asyncHttpClientConfig_ResponseBodyPartFactory0 = AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER;
      defaultAsyncHttpClientConfig_Builder1.setResponseBodyPartFactory(asyncHttpClientConfig_ResponseBodyPartFactory0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      assertNotNull(defaultAsyncHttpClientConfig_Builder0);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = defaultAsyncHttpClientConfig_Builder0.setUseNativeTransport(false);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertNotNull(defaultAsyncHttpClientConfig_Builder1);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setHttpClientCodecMaxHeaderSize(1794);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder2, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder2, defaultAsyncHttpClientConfig_Builder0);
      assertNotNull(defaultAsyncHttpClientConfig_Builder2);
      
      RequestFilter requestFilter0 = mock(RequestFilter.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder0.addRequestFilter(requestFilter0);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder3, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder3, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder3, defaultAsyncHttpClientConfig_Builder1);
      assertNotNull(defaultAsyncHttpClientConfig_Builder3);
      
      Integer integer0 = new Integer(611);
      assertEquals(611, (int)integer0);
      assertNotNull(integer0);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder1.setSslSessionCacheSize(integer0);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertNotNull(defaultAsyncHttpClientConfig_Builder4);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setSoReuseAddress(false);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertNotNull(defaultAsyncHttpClientConfig_Builder5);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setValidateResponseHeaders(false);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      assertNotNull(defaultAsyncHttpClientConfig_Builder6);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder7 = defaultAsyncHttpClientConfig_Builder5.setStrict302Handling(true);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder1);
      assertNotNull(defaultAsyncHttpClientConfig_Builder7);
      
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder6.build();
      assertFalse(defaultAsyncHttpClientConfig0.isKeepEncodingHeader());
      assertEquals(1000, defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRequestRetry());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig0.getResponseBodyPartFactory());
      assertTrue(defaultAsyncHttpClientConfig0.isTcpNoDelay());
      assertFalse(defaultAsyncHttpClientConfig0.isSoReuseAddress());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnections());
      assertTrue(defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments());
      assertEquals(5000, defaultAsyncHttpClientConfig0.getConnectTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableUrlEncodingForBoundRequests());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoSndBuf());
      assertEquals(611, defaultAsyncHttpClientConfig0.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseOpenSsl());
      assertEquals(10000, defaultAsyncHttpClientConfig0.getHandshakeTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isUseNativeTransport());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost());
      assertEquals(128000000, defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize());
      assertEquals(10240, defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize());
      assertTrue(defaultAsyncHttpClientConfig0.isStrict302Handling());
      assertFalse(defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder());
      assertFalse(defaultAsyncHttpClientConfig0.isValidateResponseHeaders());
      assertFalse(defaultAsyncHttpClientConfig0.isCompressionEnforced());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig0.getAhcVersion());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getConnectionTtl());
      assertEquals(1794, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseInsecureTrustManager());
      assertEquals(15000, defaultAsyncHttpClientConfig0.getShutdownTimeout());
      assertEquals(128, defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig0.isFollowRedirect());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getReadTimeout());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableZeroCopy());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoLinger());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getRequestTimeout());
      assertTrue(defaultAsyncHttpClientConfig0.isKeepAlive());
      assertEquals(0, defaultAsyncHttpClientConfig0.getIoThreadsCount());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig0.getUserAgent());
      assertEquals(0, defaultAsyncHttpClientConfig0.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig0.getThreadPoolName());
      assertEquals(4096, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxInitialLineLength());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoRcvBuf());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRedirects());
      assertEquals(2000, defaultAsyncHttpClientConfig0.getShutdownQuietPeriod());
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      assertNotNull(defaultAsyncHttpClientConfig0);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder8 = defaultAsyncHttpClientConfig_Builder4.setWebSocketMaxFrameSize((-1));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder6);
      assertNotNull(defaultAsyncHttpClientConfig_Builder8);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder9 = defaultAsyncHttpClientConfig_Builder7.setMaxConnections(116);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder9, defaultAsyncHttpClientConfig_Builder5);
      assertNotNull(defaultAsyncHttpClientConfig_Builder9);
      
      int int0 = defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize();
      assertFalse(defaultAsyncHttpClientConfig0.isKeepEncodingHeader());
      assertEquals(1000, defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRequestRetry());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig0.getResponseBodyPartFactory());
      assertTrue(defaultAsyncHttpClientConfig0.isTcpNoDelay());
      assertFalse(defaultAsyncHttpClientConfig0.isSoReuseAddress());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnections());
      assertTrue(defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments());
      assertEquals(5000, defaultAsyncHttpClientConfig0.getConnectTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableUrlEncodingForBoundRequests());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoSndBuf());
      assertEquals(611, defaultAsyncHttpClientConfig0.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseOpenSsl());
      assertEquals(10000, defaultAsyncHttpClientConfig0.getHandshakeTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isUseNativeTransport());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost());
      assertEquals(128000000, defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize());
      assertEquals(10240, defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize());
      assertTrue(defaultAsyncHttpClientConfig0.isStrict302Handling());
      assertFalse(defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder());
      assertFalse(defaultAsyncHttpClientConfig0.isValidateResponseHeaders());
      assertFalse(defaultAsyncHttpClientConfig0.isCompressionEnforced());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig0.getAhcVersion());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getConnectionTtl());
      assertEquals(1794, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseInsecureTrustManager());
      assertEquals(15000, defaultAsyncHttpClientConfig0.getShutdownTimeout());
      assertEquals(128, defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig0.isFollowRedirect());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getReadTimeout());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableZeroCopy());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoLinger());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getRequestTimeout());
      assertTrue(defaultAsyncHttpClientConfig0.isKeepAlive());
      assertEquals(0, defaultAsyncHttpClientConfig0.getIoThreadsCount());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig0.getUserAgent());
      assertEquals(0, defaultAsyncHttpClientConfig0.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig0.getThreadPoolName());
      assertEquals(4096, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxInitialLineLength());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoRcvBuf());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRedirects());
      assertEquals(2000, defaultAsyncHttpClientConfig0.getShutdownQuietPeriod());
      assertEquals(1794, int0);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      
      boolean boolean0 = defaultAsyncHttpClientConfig0.isValidateResponseHeaders();
      assertFalse(defaultAsyncHttpClientConfig0.isKeepEncodingHeader());
      assertEquals(1000, defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRequestRetry());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig0.getResponseBodyPartFactory());
      assertTrue(defaultAsyncHttpClientConfig0.isTcpNoDelay());
      assertFalse(defaultAsyncHttpClientConfig0.isSoReuseAddress());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnections());
      assertTrue(defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments());
      assertEquals(5000, defaultAsyncHttpClientConfig0.getConnectTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableUrlEncodingForBoundRequests());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoSndBuf());
      assertEquals(611, defaultAsyncHttpClientConfig0.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseOpenSsl());
      assertEquals(10000, defaultAsyncHttpClientConfig0.getHandshakeTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isUseNativeTransport());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost());
      assertEquals(128000000, defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize());
      assertEquals(10240, defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize());
      assertTrue(defaultAsyncHttpClientConfig0.isStrict302Handling());
      assertFalse(defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder());
      assertFalse(defaultAsyncHttpClientConfig0.isValidateResponseHeaders());
      assertFalse(defaultAsyncHttpClientConfig0.isCompressionEnforced());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig0.getAhcVersion());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getConnectionTtl());
      assertEquals(1794, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseInsecureTrustManager());
      assertEquals(15000, defaultAsyncHttpClientConfig0.getShutdownTimeout());
      assertEquals(128, defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig0.isFollowRedirect());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getReadTimeout());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableZeroCopy());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoLinger());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getRequestTimeout());
      assertTrue(defaultAsyncHttpClientConfig0.isKeepAlive());
      assertEquals(0, defaultAsyncHttpClientConfig0.getIoThreadsCount());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig0.getUserAgent());
      assertEquals(0, defaultAsyncHttpClientConfig0.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig0.getThreadPoolName());
      assertEquals(4096, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxInitialLineLength());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoRcvBuf());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRedirects());
      assertEquals(2000, defaultAsyncHttpClientConfig0.getShutdownQuietPeriod());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder10 = defaultAsyncHttpClientConfig_Builder6.setChunkedFileChunkSize(116);
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder10, defaultAsyncHttpClientConfig_Builder7);
      assertNotNull(defaultAsyncHttpClientConfig_Builder10);
      
      AsyncHttpClientConfig.AdditionalChannelInitializer asyncHttpClientConfig_AdditionalChannelInitializer0 = defaultAsyncHttpClientConfig0.getHttpAdditionalChannelInitializer();
      assertFalse(defaultAsyncHttpClientConfig0.isKeepEncodingHeader());
      assertEquals(1000, defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRequestRetry());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig0.getResponseBodyPartFactory());
      assertTrue(defaultAsyncHttpClientConfig0.isTcpNoDelay());
      assertFalse(defaultAsyncHttpClientConfig0.isSoReuseAddress());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnections());
      assertTrue(defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments());
      assertEquals(5000, defaultAsyncHttpClientConfig0.getConnectTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableUrlEncodingForBoundRequests());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoSndBuf());
      assertEquals(611, defaultAsyncHttpClientConfig0.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseOpenSsl());
      assertEquals(10000, defaultAsyncHttpClientConfig0.getHandshakeTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isUseNativeTransport());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost());
      assertEquals(128000000, defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize());
      assertEquals(10240, defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize());
      assertTrue(defaultAsyncHttpClientConfig0.isStrict302Handling());
      assertFalse(defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder());
      assertFalse(defaultAsyncHttpClientConfig0.isValidateResponseHeaders());
      assertFalse(defaultAsyncHttpClientConfig0.isCompressionEnforced());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig0.getAhcVersion());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getConnectionTtl());
      assertEquals(1794, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseInsecureTrustManager());
      assertEquals(15000, defaultAsyncHttpClientConfig0.getShutdownTimeout());
      assertEquals(128, defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig0.isFollowRedirect());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getReadTimeout());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableZeroCopy());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoLinger());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getRequestTimeout());
      assertTrue(defaultAsyncHttpClientConfig0.isKeepAlive());
      assertEquals(0, defaultAsyncHttpClientConfig0.getIoThreadsCount());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig0.getUserAgent());
      assertEquals(0, defaultAsyncHttpClientConfig0.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig0.getThreadPoolName());
      assertEquals(4096, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxInitialLineLength());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoRcvBuf());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRedirects());
      assertEquals(2000, defaultAsyncHttpClientConfig0.getShutdownQuietPeriod());
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      assertNull(asyncHttpClientConfig_AdditionalChannelInitializer0);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder11 = defaultAsyncHttpClientConfig_Builder7.setHttpAdditionalChannelInitializer((AsyncHttpClientConfig.AdditionalChannelInitializer) null);
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder9);
      assertNotNull(defaultAsyncHttpClientConfig_Builder11);
      
      int int1 = defaultAsyncHttpClientConfig0.getHttpClientCodecMaxInitialLineLength();
      assertFalse(defaultAsyncHttpClientConfig0.isKeepEncodingHeader());
      assertEquals(1000, defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRequestRetry());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig0.getResponseBodyPartFactory());
      assertTrue(defaultAsyncHttpClientConfig0.isTcpNoDelay());
      assertFalse(defaultAsyncHttpClientConfig0.isSoReuseAddress());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnections());
      assertTrue(defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments());
      assertEquals(5000, defaultAsyncHttpClientConfig0.getConnectTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableUrlEncodingForBoundRequests());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoSndBuf());
      assertEquals(611, defaultAsyncHttpClientConfig0.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseOpenSsl());
      assertEquals(10000, defaultAsyncHttpClientConfig0.getHandshakeTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isUseNativeTransport());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost());
      assertEquals(128000000, defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize());
      assertEquals(10240, defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize());
      assertTrue(defaultAsyncHttpClientConfig0.isStrict302Handling());
      assertFalse(defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder());
      assertFalse(defaultAsyncHttpClientConfig0.isValidateResponseHeaders());
      assertFalse(defaultAsyncHttpClientConfig0.isCompressionEnforced());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig0.getAhcVersion());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getConnectionTtl());
      assertEquals(1794, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseInsecureTrustManager());
      assertEquals(15000, defaultAsyncHttpClientConfig0.getShutdownTimeout());
      assertEquals(128, defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig0.isFollowRedirect());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getReadTimeout());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableZeroCopy());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoLinger());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getRequestTimeout());
      assertTrue(defaultAsyncHttpClientConfig0.isKeepAlive());
      assertEquals(0, defaultAsyncHttpClientConfig0.getIoThreadsCount());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig0.getUserAgent());
      assertEquals(0, defaultAsyncHttpClientConfig0.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig0.getThreadPoolName());
      assertEquals(4096, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxInitialLineLength());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoRcvBuf());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRedirects());
      assertEquals(2000, defaultAsyncHttpClientConfig0.getShutdownQuietPeriod());
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(4096, int1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      
      int int2 = defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod();
      assertFalse(defaultAsyncHttpClientConfig0.isKeepEncodingHeader());
      assertEquals(1000, defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRequestRetry());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig0.getResponseBodyPartFactory());
      assertTrue(defaultAsyncHttpClientConfig0.isTcpNoDelay());
      assertFalse(defaultAsyncHttpClientConfig0.isSoReuseAddress());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnections());
      assertTrue(defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments());
      assertEquals(5000, defaultAsyncHttpClientConfig0.getConnectTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableUrlEncodingForBoundRequests());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoSndBuf());
      assertEquals(611, defaultAsyncHttpClientConfig0.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseOpenSsl());
      assertEquals(10000, defaultAsyncHttpClientConfig0.getHandshakeTimeout());
      assertFalse(defaultAsyncHttpClientConfig0.isUseNativeTransport());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost());
      assertEquals(128000000, defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize());
      assertEquals(10240, defaultAsyncHttpClientConfig0.getWebSocketMaxFrameSize());
      assertTrue(defaultAsyncHttpClientConfig0.isStrict302Handling());
      assertFalse(defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder());
      assertFalse(defaultAsyncHttpClientConfig0.isValidateResponseHeaders());
      assertFalse(defaultAsyncHttpClientConfig0.isCompressionEnforced());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig0.getAhcVersion());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableHttpsEndpointIdentificationAlgorithm());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getConnectionTtl());
      assertEquals(1794, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxHeaderSize());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isUseInsecureTrustManager());
      assertEquals(15000, defaultAsyncHttpClientConfig0.getShutdownTimeout());
      assertEquals(128, defaultAsyncHttpClientConfig0.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig0.isFollowRedirect());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getReadTimeout());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig0.isDisableZeroCopy());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoLinger());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getRequestTimeout());
      assertTrue(defaultAsyncHttpClientConfig0.isKeepAlive());
      assertEquals(0, defaultAsyncHttpClientConfig0.getIoThreadsCount());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig0.getUserAgent());
      assertEquals(0, defaultAsyncHttpClientConfig0.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig0.getThreadPoolName());
      assertEquals(4096, defaultAsyncHttpClientConfig0.getHttpClientCodecMaxInitialLineLength());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoRcvBuf());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRedirects());
      assertEquals(2000, defaultAsyncHttpClientConfig0.getShutdownQuietPeriod());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1000, int2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      
      ChannelOption<ThrottleRequestFilter> channelOption0 = (ChannelOption<ThrottleRequestFilter>) mock(ChannelOption.class, new ViolatedAssumptionAnswer());
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder12 = defaultAsyncHttpClientConfig_Builder8.addChannelOption(channelOption0, (ThrottleRequestFilter) null);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder12, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder8, defaultAsyncHttpClientConfig_Builder10);
      assertNotNull(defaultAsyncHttpClientConfig_Builder12);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder13 = defaultAsyncHttpClientConfig_Builder7.setHandshakeTimeout((-942));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder13, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder9);
      assertNotNull(defaultAsyncHttpClientConfig_Builder13);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder14 = defaultAsyncHttpClientConfig_Builder5.setMaxConnectionsPerHost((-560));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder14, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertNotNull(defaultAsyncHttpClientConfig_Builder14);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder15 = defaultAsyncHttpClientConfig_Builder5.setHttpClientCodecMaxChunkSize(0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder15, defaultAsyncHttpClientConfig_Builder5);
      assertNotNull(defaultAsyncHttpClientConfig_Builder15);
      
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig1 = defaultAsyncHttpClientConfig_Builder6.build();
      assertFalse(defaultAsyncHttpClientConfig1.isUseInsecureTrustManager());
      assertEquals(1794, defaultAsyncHttpClientConfig1.getHttpClientCodecMaxHeaderSize());
      assertEquals(15000, defaultAsyncHttpClientConfig1.getShutdownTimeout());
      assertEquals(60000, defaultAsyncHttpClientConfig1.getRequestTimeout());
      assertEquals(60000, defaultAsyncHttpClientConfig1.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getWebSocketMaxFrameSize());
      assertFalse(defaultAsyncHttpClientConfig1.isDisableUrlEncodingForBoundRequests());
      assertFalse(defaultAsyncHttpClientConfig1.isFollowRedirect());
      assertEquals(0, defaultAsyncHttpClientConfig1.getHttpClientCodecMaxChunkSize());
      assertEquals(60000, defaultAsyncHttpClientConfig1.getReadTimeout());
      assertEquals(5000, defaultAsyncHttpClientConfig1.getConnectTimeout());
      assertEquals(116, defaultAsyncHttpClientConfig1.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig1.isKeepEncodingHeader());
      assertFalse(defaultAsyncHttpClientConfig1.isDisableHttpsEndpointIdentificationAlgorithm());
      assertTrue(defaultAsyncHttpClientConfig1.isTcpNoDelay());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getSoLinger());
      assertEquals(2000, defaultAsyncHttpClientConfig1.getShutdownQuietPeriod());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getSoRcvBuf());
      assertEquals(0, defaultAsyncHttpClientConfig1.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig1.getThreadPoolName());
      assertEquals(5, defaultAsyncHttpClientConfig1.getMaxRedirects());
      assertEquals(128000000, defaultAsyncHttpClientConfig1.getWebSocketMaxBufferSize());
      assertTrue(defaultAsyncHttpClientConfig1.isAggregateWebSocketFrameFragments());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig1.getUserAgent());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getSoSndBuf());
      assertEquals((-942), defaultAsyncHttpClientConfig1.getHandshakeTimeout());
      assertEquals(4096, defaultAsyncHttpClientConfig1.getHttpClientCodecMaxInitialLineLength());
      assertTrue(defaultAsyncHttpClientConfig1.isKeepAlive());
      assertFalse(defaultAsyncHttpClientConfig1.isUseOpenSsl());
      assertEquals(0, defaultAsyncHttpClientConfig1.getIoThreadsCount());
      assertEquals(5, defaultAsyncHttpClientConfig1.getMaxRequestRetry());
      assertEquals(128, defaultAsyncHttpClientConfig1.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig1.isSoReuseAddress());
      assertFalse(defaultAsyncHttpClientConfig1.isDisableZeroCopy());
      assertFalse(defaultAsyncHttpClientConfig1.isValidateResponseHeaders());
      assertEquals(116, defaultAsyncHttpClientConfig1.getMaxConnections());
      assertEquals((-560), defaultAsyncHttpClientConfig1.getMaxConnectionsPerHost());
      assertEquals(1000, defaultAsyncHttpClientConfig1.getConnectionPoolCleanerPeriod());
      assertEquals(611, defaultAsyncHttpClientConfig1.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig1.isUseNativeTransport());
      assertFalse(defaultAsyncHttpClientConfig1.isCompressionEnforced());
      assertFalse(defaultAsyncHttpClientConfig1.isUseLaxCookieEncoder());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig1.getAhcVersion());
      assertTrue(defaultAsyncHttpClientConfig1.isStrict302Handling());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getConnectionTtl());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig1.getResponseBodyPartFactory());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(defaultAsyncHttpClientConfig1.equals((Object)defaultAsyncHttpClientConfig0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      assertNotSame(defaultAsyncHttpClientConfig1, defaultAsyncHttpClientConfig0);
      assertNotNull(defaultAsyncHttpClientConfig1);
      
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder16 = defaultAsyncHttpClientConfig_Builder11.setShutdownQuietPeriod(0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder11, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder7, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder16, defaultAsyncHttpClientConfig_Builder7);
      assertNotNull(defaultAsyncHttpClientConfig_Builder16);
      
      List<IOExceptionFilter> list0 = defaultAsyncHttpClientConfig1.getIoExceptionFilters();
      assertFalse(defaultAsyncHttpClientConfig1.isUseInsecureTrustManager());
      assertEquals(1794, defaultAsyncHttpClientConfig1.getHttpClientCodecMaxHeaderSize());
      assertEquals(15000, defaultAsyncHttpClientConfig1.getShutdownTimeout());
      assertEquals(60000, defaultAsyncHttpClientConfig1.getRequestTimeout());
      assertEquals(60000, defaultAsyncHttpClientConfig1.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getWebSocketMaxFrameSize());
      assertFalse(defaultAsyncHttpClientConfig1.isDisableUrlEncodingForBoundRequests());
      assertFalse(defaultAsyncHttpClientConfig1.isFollowRedirect());
      assertEquals(0, defaultAsyncHttpClientConfig1.getHttpClientCodecMaxChunkSize());
      assertEquals(60000, defaultAsyncHttpClientConfig1.getReadTimeout());
      assertEquals(5000, defaultAsyncHttpClientConfig1.getConnectTimeout());
      assertEquals(116, defaultAsyncHttpClientConfig1.getChunkedFileChunkSize());
      assertFalse(defaultAsyncHttpClientConfig1.isKeepEncodingHeader());
      assertFalse(defaultAsyncHttpClientConfig1.isDisableHttpsEndpointIdentificationAlgorithm());
      assertTrue(defaultAsyncHttpClientConfig1.isTcpNoDelay());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getSoLinger());
      assertEquals(2000, defaultAsyncHttpClientConfig1.getShutdownQuietPeriod());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getSoRcvBuf());
      assertEquals(0, defaultAsyncHttpClientConfig1.getSslSessionTimeout());
      assertEquals("AsyncHttpClient", defaultAsyncHttpClientConfig1.getThreadPoolName());
      assertEquals(5, defaultAsyncHttpClientConfig1.getMaxRedirects());
      assertEquals(128000000, defaultAsyncHttpClientConfig1.getWebSocketMaxBufferSize());
      assertTrue(defaultAsyncHttpClientConfig1.isAggregateWebSocketFrameFragments());
      assertEquals("AHC/2.1", defaultAsyncHttpClientConfig1.getUserAgent());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getSoSndBuf());
      assertEquals((-942), defaultAsyncHttpClientConfig1.getHandshakeTimeout());
      assertEquals(4096, defaultAsyncHttpClientConfig1.getHttpClientCodecMaxInitialLineLength());
      assertTrue(defaultAsyncHttpClientConfig1.isKeepAlive());
      assertFalse(defaultAsyncHttpClientConfig1.isUseOpenSsl());
      assertEquals(0, defaultAsyncHttpClientConfig1.getIoThreadsCount());
      assertEquals(5, defaultAsyncHttpClientConfig1.getMaxRequestRetry());
      assertEquals(128, defaultAsyncHttpClientConfig1.getHttpClientCodecInitialBufferSize());
      assertFalse(defaultAsyncHttpClientConfig1.isSoReuseAddress());
      assertFalse(defaultAsyncHttpClientConfig1.isDisableZeroCopy());
      assertFalse(defaultAsyncHttpClientConfig1.isValidateResponseHeaders());
      assertEquals(116, defaultAsyncHttpClientConfig1.getMaxConnections());
      assertEquals((-560), defaultAsyncHttpClientConfig1.getMaxConnectionsPerHost());
      assertEquals(1000, defaultAsyncHttpClientConfig1.getConnectionPoolCleanerPeriod());
      assertEquals(611, defaultAsyncHttpClientConfig1.getSslSessionCacheSize());
      assertFalse(defaultAsyncHttpClientConfig1.isUseNativeTransport());
      assertFalse(defaultAsyncHttpClientConfig1.isCompressionEnforced());
      assertFalse(defaultAsyncHttpClientConfig1.isUseLaxCookieEncoder());
      assertEquals("2.1.0-SNAPSHOT", defaultAsyncHttpClientConfig1.getAhcVersion());
      assertTrue(defaultAsyncHttpClientConfig1.isStrict302Handling());
      assertEquals((-1), defaultAsyncHttpClientConfig1.getConnectionTtl());
      assertEquals(AsyncHttpClientConfig.ResponseBodyPartFactory.EAGER, defaultAsyncHttpClientConfig1.getResponseBodyPartFactory());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(defaultAsyncHttpClientConfig1.equals((Object)defaultAsyncHttpClientConfig0));
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder0, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder1, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder4, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder3);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder6);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder5, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder12);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder14);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder15);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder11);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder1);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder10);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder13);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder9);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder7);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder16);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder2);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder0);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder8);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder5);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder4);
      assertSame(defaultAsyncHttpClientConfig_Builder6, defaultAsyncHttpClientConfig_Builder3);
      assertNotSame(defaultAsyncHttpClientConfig1, defaultAsyncHttpClientConfig0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder();
      DefaultAsyncHttpClientConfig defaultAsyncHttpClientConfig0 = defaultAsyncHttpClientConfig_Builder0.build();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder1 = new DefaultAsyncHttpClientConfig.Builder(defaultAsyncHttpClientConfig0);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder2 = defaultAsyncHttpClientConfig_Builder1.setHttpClientCodecMaxInitialLineLength(32);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder3 = defaultAsyncHttpClientConfig_Builder2.setPooledConnectionIdleTimeout(32);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder4 = defaultAsyncHttpClientConfig_Builder3.setTcpNoDelay(false);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder5 = defaultAsyncHttpClientConfig_Builder4.setMaxRedirects(32);
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder6 = defaultAsyncHttpClientConfig_Builder5.setSoLinger(32);
      IOExceptionFilter iOExceptionFilter0 = mock(IOExceptionFilter.class, new ViolatedAssumptionAnswer());
      defaultAsyncHttpClientConfig_Builder6.removeIOExceptionFilter(iOExceptionFilter0);
      int int0 = defaultAsyncHttpClientConfig0.getIoThreadsCount();
      assertEquals(15000, defaultAsyncHttpClientConfig0.getShutdownTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnections());
      assertEquals(1000, defaultAsyncHttpClientConfig0.getConnectionPoolCleanerPeriod());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getConnectionTtl());
      assertFalse(defaultAsyncHttpClientConfig0.isFollowRedirect());
      assertTrue(defaultAsyncHttpClientConfig0.isAggregateWebSocketFrameFragments());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getRequestTimeout());
      assertEquals(8192, defaultAsyncHttpClientConfig0.getChunkedFileChunkSize());
      assertEquals(60000, defaultAsyncHttpClientConfig0.getReadTimeout());
      assertEquals(5000, defaultAsyncHttpClientConfig0.getConnectTimeout());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRequestRetry());
      assertTrue(defaultAsyncHttpClientConfig0.isValidateResponseHeaders());
      assertEquals(0, int0);
      assertEquals(60000, defaultAsyncHttpClientConfig0.getPooledConnectionIdleTimeout());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getSoLinger());
      assertFalse(defaultAsyncHttpClientConfig0.isUseLaxCookieEncoder());
      assertEquals((-1), defaultAsyncHttpClientConfig0.getMaxConnectionsPerHost());
      assertEquals(5, defaultAsyncHttpClientConfig0.getMaxRedirects());
      assertEquals(0, defaultAsyncHttpClientConfig0.getSslSessionCacheSize());
      assertEquals(2000, defaultAsyncHttpClientConfig0.getShutdownQuietPeriod());
      assertFalse(defaultAsyncHttpClientConfig0.isKeepEncodingHeader());
      assertEquals(128000000, defaultAsyncHttpClientConfig0.getWebSocketMaxBufferSize());
      assertFalse(defaultAsyncHttpClientConfig0.isCompressionEnforced());
  }
}
