/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:23:56 GMT 2017
 */

package org.asynchttpclient.request.body.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.Param;
import org.asynchttpclient.request.body.multipart.ByteArrayPart;
import org.asynchttpclient.request.body.multipart.StringPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PartBase_ESTest extends PartBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringPart stringPart0 = new StringPart((String) null, "", "");
      String string0 = stringPart0.getTransferEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("F=}4no}'*$->\"\u0005", "", "", charset0, " contentType=", "");
      String string0 = stringPart0.getTransferEncoding();
      assertEquals("", stringPart0.getContentType());
      assertEquals(" contentType=", stringPart0.getContentId());
      assertEquals("F=}4no}'*$->\"\u0005", stringPart0.getName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Charset charset0 = StringPart.DEFAULT_CHARSET;
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, "v^{sozTU", charset0, (String) null);
      String string0 = byteArrayPart0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      String string0 = byteArrayPart0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("application/octet-stream", byteArrayPart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      byteArrayPart0.setDispositionType("ByteArrayPart name= contentType=application/octet-stream charset=null tranferEncoding=null contentId=null dispositionType=null filename=null");
      byteArrayPart0.getDispositionType();
      assertEquals("application/octet-stream", byteArrayPart0.getContentType());
      assertEquals("", byteArrayPart0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringPart stringPart0 = new StringPart(",_DZ#", "", ",_DZ#");
      stringPart0.setDispositionType("");
      String string0 = stringPart0.getDispositionType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "", "");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      stringPart0.setCustomHeaders(linkedList0);
      List<Param> list0 = stringPart0.getCustomHeaders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringPart stringPart0 = new StringPart("q@AU5#s3(Eq'JiR9n", "q@AU5#s3(Eq'JiR9n");
      stringPart0.addCustomHeader("q@AU5#s3(Eq'JiR9n", "q@AU5#s3(Eq'JiR9n");
      List<Param> list0 = stringPart0.getCustomHeaders();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringPart stringPart0 = new StringPart("fdgCy :23g", "fdgCy :23g");
      String string0 = stringPart0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringPart stringPart0 = new StringPart("fdgCy :23g", "fdgCy :23g", "");
      String string0 = stringPart0.getContentType();
      assertEquals("", string0);
      assertEquals("fdgCy :23g", stringPart0.getName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringPart stringPart0 = new StringPart("LcE2", "LcE2", "LcE2", (Charset) null, "LcE2", " charset=");
      String string0 = stringPart0.getContentId();
      assertEquals(" charset=", stringPart0.getTransferEncoding());
      assertEquals("LcE2", stringPart0.getName());
      assertEquals("LcE2", stringPart0.getContentType());
      assertEquals("LcE2", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("c(q1\",a", "", "The wildcard array must not be null", charset0, "");
      String string0 = stringPart0.getContentId();
      assertEquals("c(q1\",a", stringPart0.getName());
      assertEquals("The wildcard array must not be null", stringPart0.getContentType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("1GIQ8-U_Sc`'#", "1GIQ8-U_Sc`'#", "1GIQ8-U_Sc`'#", charset0, "}@~`sj:NnCz!", "1GIQ8-U_Sc`'#");
      String string0 = stringPart0.getTransferEncoding();
      assertEquals("1GIQ8-U_Sc`'#", stringPart0.getContentType());
      assertEquals("}@~`sj:NnCz!", stringPart0.getContentId());
      assertEquals("1GIQ8-U_Sc`'#", stringPart0.getName());
      assertEquals("1GIQ8-U_Sc`'#", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("1GIQ8-U_Sc`'#", "1GIQ8-U_Sc`'#", "1GIQ8-U_Sc`'#", charset0, "}@~`sj:NnCz!", "1GIQ8-U_Sc`'#");
      String string0 = stringPart0.getName();
      assertEquals("1GIQ8-U_Sc`'#", string0);
      assertEquals("1GIQ8-U_Sc`'#", stringPart0.getTransferEncoding());
      assertEquals("1GIQ8-U_Sc`'#", stringPart0.getContentType());
      assertEquals("}@~`sj:NnCz!", stringPart0.getContentId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      byteArrayPart0.getCharset();
      assertEquals("", byteArrayPart0.getName());
      assertEquals("application/octet-stream", byteArrayPart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      String string0 = byteArrayPart0.getContentId();
      assertEquals("application/octet-stream", byteArrayPart0.getContentType());
      assertNull(string0);
      assertEquals("", byteArrayPart0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      byteArrayPart0.getDispositionType();
      assertEquals("", byteArrayPart0.getName());
      assertEquals("application/octet-stream", byteArrayPart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringPart stringPart0 = new StringPart("q@AU5#s3(Eq'JiR9n", "q@AU5#s3(Eq'JiR9n");
      stringPart0.addCustomHeader("q@AU5#s3(Eq'JiR9n", "q@AU5#s3(Eq'JiR9n");
      stringPart0.addCustomHeader("StringPart name=q@AU5#s3(Eq'JiR9n contentType=null charset=UTF-8 tranferEncoding=null contentId=null dispositionType=null", "q@AU5#s3(Eq'JiR9n");
      assertNull(stringPart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("F=}4no}'*$->\"\u0005", "", "", charset0, " contentType=", "");
      stringPart0.getCustomHeaders();
      assertEquals("", stringPart0.getContentType());
      assertEquals("F=}4no}'*$->\"\u0005", stringPart0.getName());
      assertEquals("", stringPart0.getTransferEncoding());
      assertEquals(" contentType=", stringPart0.getContentId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("F=}4no}'*$->\"\u0005", "", "", charset0, " contentType=", "");
      String string0 = stringPart0.toString();
      assertEquals("StringPart name=F=}4no}'*$->\"\u0005 contentType= charset=UTF-8 tranferEncoding= contentId= contentType= dispositionType=null", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("1GIQ8-U_Sc`'#", "1GIQ8-U_Sc`'#", "1GIQ8-U_Sc`'#", charset0, "}@~`sj:NnCz!", "1GIQ8-U_Sc`'#");
      String string0 = stringPart0.getContentType();
      assertEquals("1GIQ8-U_Sc`'#", stringPart0.getName());
      assertEquals("1GIQ8-U_Sc`'#", stringPart0.getTransferEncoding());
      assertEquals("1GIQ8-U_Sc`'#", string0);
      assertEquals("}@~`sj:NnCz!", stringPart0.getContentId());
  }
}
