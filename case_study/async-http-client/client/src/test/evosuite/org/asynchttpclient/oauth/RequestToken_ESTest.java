/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:37:11 GMT 2017
 */

package org.asynchttpclient.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.asynchttpclient.oauth.RequestToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestToken_ESTest extends RequestToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("\"Vy=|0}1 3J^i&oOx", "\"Vy=|0}1 3J^i&oOx");
      requestToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("{ key=", "{ key=");
      String string0 = requestToken0.getSecret();
      assertEquals("{ key=", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "");
      String string0 = requestToken0.getSecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("null", "null");
      String string0 = requestToken0.getPercentEncodedKey();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "");
      String string0 = requestToken0.getPercentEncodedKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("~.k", "~.k");
      String string0 = requestToken0.getKey();
      assertEquals("~.k", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "");
      String string0 = requestToken0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "");
      RequestToken requestToken1 = new RequestToken("", "");
      boolean boolean0 = requestToken0.equals(requestToken1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("}", "F PH{za/T{.J,");
      RequestToken requestToken1 = new RequestToken("}", "rMSQ|xD(\"AV>>");
      boolean boolean0 = requestToken0.equals(requestToken1);
      assertFalse(boolean0);
      assertEquals("}", requestToken1.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("rsg", "rsg");
      RequestToken requestToken1 = new RequestToken("ull", "{ key=\"rsg\", secret=\"rsg\"}");
      boolean boolean0 = requestToken0.equals(requestToken1);
      assertEquals("{ key=\"rsg\", secret=\"rsg\"}", requestToken1.getSecret());
      assertFalse(boolean0);
      assertEquals("ull", requestToken1.getKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("}", "F PH{za/T{.J,");
      boolean boolean0 = requestToken0.equals("}");
      assertEquals("F PH{za/T{.J,", requestToken0.getSecret());
      assertEquals("}", requestToken0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      boolean boolean0 = requestToken0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "");
      RequestToken requestToken1 = new RequestToken("9\"9hPu<zq}b|Uyy96&", "{ key=");
      // Undeclared exception!
      try { 
        requestToken0.equals(requestToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("}", "F PH{za/T{.J,");
      String string0 = requestToken0.toString();
      assertEquals("{ key=\"}\", secret=\"F PH{za/T{.J,\"}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      // Undeclared exception!
      try { 
        requestToken0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.oauth.RequestToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.toString();
      assertEquals("{ key=null, secret=null}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.getSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.getPercentEncodedKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken(", secret=", ", secret=");
      boolean boolean0 = requestToken0.equals(requestToken0);
      assertTrue(boolean0);
  }
}
