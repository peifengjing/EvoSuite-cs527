/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:24:40 GMT 2017
 */

package org.asynchttpclient.request.body.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledHeapByteBuf;
import java.util.ArrayDeque;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import org.asynchttpclient.request.body.Body;
import org.asynchttpclient.request.body.generator.BodyChunk;
import org.asynchttpclient.request.body.generator.PushBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushBody_ESTest extends PushBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(44);
      BodyChunk bodyChunk0 = new BodyChunk(byteBuf0, false);
      priorityQueue0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(priorityQueue0);
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, 44, 44);
      pushBody0.transferTo(unpooledHeapByteBuf0);
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<BodyChunk> linkedList0 = new LinkedList<BodyChunk>();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      LinkedHashSet<ByteBuf> linkedHashSet0 = new LinkedHashSet<ByteBuf>(3284);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, true, 3284, linkedHashSet0);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeChar(3284);
      BodyChunk bodyChunk0 = new BodyChunk(compositeByteBuf1, true);
      linkedList0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(linkedList0);
      pushBody0.transferTo(compositeByteBuf0);
      assertEquals(62, compositeByteBuf0.readerIndex());
      assertEquals(64, compositeByteBuf0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(40);
      BodyChunk bodyChunk0 = new BodyChunk(byteBuf0, true);
      priorityQueue0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(priorityQueue0);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(bodyChunk0.buffer);
      Body.BodyState body_BodyState1 = pushBody0.transferTo(byteBuf0);
      assertEquals(0, priorityQueue0.size());
      assertNotSame(body_BodyState1, body_BodyState0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<BodyChunk> linkedList0 = new LinkedList<BodyChunk>();
      PushBody pushBody0 = new PushBody(linkedList0);
      pushBody0.close();
      assertEquals((-1L), pushBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<BodyChunk> linkedList0 = new LinkedList<BodyChunk>();
      PushBody pushBody0 = new PushBody(linkedList0);
      long long0 = pushBody0.getContentLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      // Undeclared exception!
      try { 
        pushBody0.transferTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.generator.PushBody", e);
      }
  }
}
