/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:05:54 GMT 2017
 */

package org.asynchttpclient.netty.future;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.ClosedChannelException;
import org.asynchttpclient.netty.future.StackTraceInspector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackTraceInspector_ESTest extends StackTraceInspector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        StackTraceInspector.recoverOnReadOrWriteException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.future.StackTraceInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        StackTraceInspector.recoverOnNettyDisconnectException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.future.StackTraceInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClosedChannelException closedChannelException0 = new ClosedChannelException();
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(closedChannelException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable(mockIOException0);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClosedChannelException closedChannelException0 = new ClosedChannelException();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(closedChannelException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClosedChannelException closedChannelException0 = new ClosedChannelException();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      Throwable throwable0 = closedChannelException0.initCause(mockIOException0);
      MockIOException mockIOException1 = new MockIOException("/*", throwable0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("sun.nio.ch.SocketChannelImpl", "sun.nio.ch.SocketChannelImpl", "sun.nio.ch.SocketChannelImpl", 1078);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      MockThrowable mockThrowable1 = new MockThrowable("sun.nio.ch.SocketChannelImpl", mockThrowable0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
  }
}
