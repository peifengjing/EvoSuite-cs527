/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:13:28 GMT 2017
 */

package org.asynchttpclient.netty.request.body;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.UnpooledHeapByteBuf;
import io.netty.channel.Channel;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoop;
import org.asynchttpclient.netty.NettyResponseFuture;
import org.asynchttpclient.netty.request.body.NettyReactiveStreamsBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.reactivestreams.Publisher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NettyReactiveStreamsBody_ESTest extends NettyReactiveStreamsBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody(publisher0, 0L);
      long long0 = nettyReactiveStreamsBody0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody((Publisher<ByteBuf>) null, 1019L);
      long long0 = nettyReactiveStreamsBody0.getContentLength();
      assertEquals(1019L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody(publisher0, 2036L);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((EventLoop) null).when(channel0).eventLoop();
      doReturn((ChannelPipeline) null).when(channel0).pipeline();
      NettyResponseFuture<EmptyByteBuf> nettyResponseFuture0 = (NettyResponseFuture<EmptyByteBuf>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(nettyResponseFuture0).isStreamConsumed();
      // Undeclared exception!
      try { 
        nettyReactiveStreamsBody0.write(channel0, nettyResponseFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.request.body.NettyReactiveStreamsBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody(publisher0, 0L);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<UnpooledHeapByteBuf> nettyResponseFuture0 = (NettyResponseFuture<UnpooledHeapByteBuf>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(nettyResponseFuture0).isStreamConsumed();
      nettyReactiveStreamsBody0.write(channel0, nettyResponseFuture0);
      assertEquals(0L, nettyReactiveStreamsBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody(publisher0, (-243L));
      long long0 = nettyReactiveStreamsBody0.getContentLength();
      assertEquals((-243L), long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody(publisher0, 0L);
      EventLoop eventLoop0 = mock(EventLoop.class, new ViolatedAssumptionAnswer());
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      ChannelPipeline channelPipeline1 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channelPipeline1).addLast(anyString() , any(io.netty.channel.ChannelHandler.class));
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(eventLoop0).when(channel0).eventLoop();
      doReturn(channelPipeline1).when(channel0).pipeline();
      NettyResponseFuture<String> nettyResponseFuture0 = (NettyResponseFuture<String>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(nettyResponseFuture0).isStreamConsumed();
      nettyReactiveStreamsBody0.write(channel0, nettyResponseFuture0);
      assertEquals(0L, nettyReactiveStreamsBody0.getContentLength());
  }
}
