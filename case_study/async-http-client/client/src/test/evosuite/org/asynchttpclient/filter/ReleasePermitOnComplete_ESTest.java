/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:18:41 GMT 2017
 */

package org.asynchttpclient.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Semaphore;
import org.asynchttpclient.AsyncCompletionHandlerBase;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.filter.ReleasePermitOnComplete;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReleasePermitOnComplete_ESTest extends ReleasePermitOnComplete_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<AsyncCompletionHandlerBase> class0 = AsyncCompletionHandlerBase.class;
      Class<?>[] classArray0 = ReleasePermitOnComplete.allInterfaces(class0);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?>[] classArray0 = ReleasePermitOnComplete.allInterfaces(class0);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReleasePermitOnComplete.wrap((AsyncHandler<Object>) null, (Semaphore) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.filter.ReleasePermitOnComplete", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReleasePermitOnComplete releasePermitOnComplete0 = new ReleasePermitOnComplete();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn("_omT'k)$H-y9h<]").when(asyncHandler0).toString();
      Semaphore semaphore0 = mock(Semaphore.class, new ViolatedAssumptionAnswer());
      AsyncHandler<Object> asyncHandler1 = ReleasePermitOnComplete.wrap(asyncHandler0, semaphore0);
      assertTrue(asyncHandler1.equals((Object)asyncHandler0));
  }
}
