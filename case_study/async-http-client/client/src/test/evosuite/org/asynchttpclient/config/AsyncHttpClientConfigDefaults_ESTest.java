/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:28:58 GMT 2017
 */

package org.asynchttpclient.config;

import org.junit.Test;
import static org.junit.Assert.*;
import org.asynchttpclient.config.AsyncHttpClientConfigDefaults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncHttpClientConfigDefaults_ESTest extends AsyncHttpClientConfigDefaults_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultSoLinger();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultUseLaxCookieEncoder();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultMaxConnectionsPerHost();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultStrict302Handling();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultDisableZeroCopy();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultMaxRequestRetry();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultSoReuseAddress();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultShutdownQuietPeriod();
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultWebSocketMaxBufferSize();
      assertEquals(128000000, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultConnectTimeout();
      assertEquals(5000, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultConnectionTtl();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultUseProxyProperties();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultKeepEncodingHeader();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultShutdownTimeout();
      assertEquals(15000, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultRequestTimeout();
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultReadTimeout();
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultHandshakeTimeout();
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultAggregateWebSocketFrameFragments();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultFollowRedirect();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultHttpClientCodecMaxInitialLineLength();
      assertEquals(4096, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultSoSndBuf();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultSoRcvBuf();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultDisableUrlEncodingForBoundRequests();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultMaxRedirects();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultSslSessionTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultSslSessionCacheSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultUseOpenSsl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultHttpClientCodecMaxHeaderSize();
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultTcpNoDelay();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = AsyncHttpClientConfigDefaults.defaultUserAgent();
      assertEquals("AHC/2.1", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultWebSocketMaxFrameSize();
      assertEquals(10240, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultValidateResponseHeaders();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultKeepAlive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultUseNativeTransport();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultChunkedFileChunkSize();
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = AsyncHttpClientConfigDefaults.defaultEnabledProtocols();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultDisableHttpsEndpointIdentificationAlgorithm();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultUseInsecureTrustManager();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultConnectionPoolCleanerPeriod();
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultMaxConnections();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultHttpClientCodecMaxChunkSize();
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultCompressionEnforced();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = AsyncHttpClientConfigDefaults.defaultThreadPoolName();
      assertEquals("AsyncHttpClient", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultIoThreadsCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultPooledConnectionIdleTimeout();
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = AsyncHttpClientConfigDefaults.defaultHttpClientCodecInitialBufferSize();
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = AsyncHttpClientConfigDefaults.defaultUseProxySelector();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = AsyncHttpClientConfigDefaults.defaultEnabledCipherSuites();
      assertNull(stringArray0);
  }
}
