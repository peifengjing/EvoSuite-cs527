/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:41:37 GMT 2017
 */

package org.asynchttpclient.proxy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.asynchttpclient.Realm;
import org.asynchttpclient.proxy.ProxyServer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProxyServer_ESTest extends ProxyServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("E", (-742));
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost("&tbsnnYF");
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("&tbsnnYF");
      assertTrue(boolean0);
      assertEquals((-742), proxyServer0.getSecuredPort());
      assertEquals((-742), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("hostname", "");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      realm_Builder0.setScheme(realm_AuthScheme0);
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 873);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setRealm(realm_Builder0);
      assertSame(proxyServer_Builder0, proxyServer_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("hostname", "");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      realm_Builder0.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder0.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("", 873, 0, realm0, linkedList0);
      int int0 = proxyServer0.getSecuredPort();
      assertEquals(873, proxyServer0.getPort());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("5Si:)Ml`Ao<Luc3dx'w", "auth");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder1.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("5Si:)Ml`Ao<Luc3dx'w", 0, (-1), realm0, linkedList0);
      int int0 = proxyServer0.getSecuredPort();
      assertEquals((-1), int0);
      assertEquals(0, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("p)ejks2c?$e", ", useAbsoluteURI='");
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader("hostname");
      Realm realm0 = realm_Builder2.build();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ProxyServer proxyServer0 = new ProxyServer("hostname", 48, 56, realm0, list0);
      proxyServer0.getRealm();
      assertEquals(48, proxyServer0.getPort());
      assertEquals(56, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("{Zu3Z0Ub?", 19);
      Realm.Builder realm_Builder0 = new Realm.Builder("{Zu3Z0Ub?", "@d{~[?Hi");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      realm_Builder0.setUseAbsoluteURI(true);
      Realm realm0 = realm_Builder1.build();
      proxyServer_Builder0.setRealm(realm0);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getRealm();
      assertEquals(19, proxyServer0.getSecuredPort());
      assertEquals(19, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("{Zu3Z0Ub?", 19);
      Realm.Builder realm_Builder0 = new Realm.Builder("{Zu3Z0Ub?", "@d{~[?Hi");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      realm_Builder0.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm realm0 = realm_Builder1.build();
      proxyServer_Builder0.setRealm(realm0);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getRealm();
      assertEquals(19, proxyServer0.getSecuredPort());
      assertEquals(19, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("5Si:)Ml`Ao<Luc3dx'w", "auth");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder1.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("5Si:)Ml`Ao<Luc3dx'w", 0, (-1), realm0, linkedList0);
      int int0 = proxyServer0.getPort();
      assertEquals(0, int0);
      assertEquals((-1), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("8\"d'B04$QxR", (-1557));
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      int int0 = proxyServer0.getPort();
      assertEquals((-1557), int0);
      assertEquals((-1557), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("6|xXV`\"p", "6|xXV`\"p");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("6|xXV`\"p");
      Realm realm0 = realm_Builder1.build();
      ProxyServer proxyServer0 = new ProxyServer("6|xXV`\"p", (-2253), (-2253), realm0, (List<String>) null);
      proxyServer0.getNonProxyHosts();
      assertEquals((-2253), proxyServer0.getSecuredPort());
      assertEquals((-2253), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("+", (-1680));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHosts(list0);
      proxyServer_Builder1.setNonProxyHost("");
      ProxyServer proxyServer0 = new ProxyServer("", (-1680), (-1680), (Realm) null, list0);
      proxyServer0.getNonProxyHosts();
      assertEquals((-1680), proxyServer0.getPort());
      assertEquals((-1680), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("z&0MMo", "");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder1.build();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ProxyServer proxyServer0 = new ProxyServer((String) null, 0, 0, realm0, list0);
      proxyServer0.getHost();
      assertEquals(0, proxyServer0.getPort());
      assertEquals(0, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("org.eclipse.jetty.util.PathWatcher", (-1368));
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getHost();
      assertEquals((-1368), proxyServer0.getSecuredPort());
      assertEquals((-1368), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, 4319);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost((String) null);
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      // Undeclared exception!
      try { 
        proxyServer0.isIgnoredForHost("http://");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.proxy.ProxyServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("hostname", 2682, 0, (Realm) null, linkedList0);
      // Undeclared exception!
      try { 
        proxyServer0.isIgnoredForHost((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hostname
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 1208);
      proxyServer_Builder0.setNonProxyHost("Tg,A*");
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("9'%");
      assertFalse(boolean0);
      assertEquals(1208, proxyServer0.getSecuredPort());
      assertEquals(1208, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("{", (-742));
      proxyServer_Builder0.setNonProxyHost("k B)");
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("?^JUo82')*ynW(");
      assertEquals((-742), proxyServer0.getPort());
      assertTrue(boolean0);
      assertEquals((-742), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 0);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost("");
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("");
      assertEquals(0, proxyServer0.getPort());
      assertEquals(0, proxyServer0.getSecuredPort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 1208);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost("*g,Az");
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("*g,Az");
      assertTrue(boolean0);
      assertEquals(1208, proxyServer0.getPort());
      assertEquals(1208, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 1208);
      proxyServer_Builder0.setNonProxyHost("*g,Az");
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("");
      assertFalse(boolean0);
      assertEquals(1208, proxyServer0.getSecuredPort());
      assertEquals(1208, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("hostname", 2682, 0, (Realm) null, linkedList0);
      boolean boolean0 = proxyServer0.isIgnoredForHost("cNPO#");
      assertEquals(0, proxyServer0.getSecuredPort());
      assertEquals(2682, proxyServer0.getPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ProxyServer proxyServer0 = new ProxyServer("", (-1680), (-1680), (Realm) null, list0);
      proxyServer0.getNonProxyHosts();
      assertEquals((-1680), proxyServer0.getSecuredPort());
      assertEquals((-1680), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 1208);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      int int0 = proxyServer0.getPort();
      assertEquals(1208, int0);
      assertEquals(1208, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 1208);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getRealm();
      assertEquals(1208, proxyServer0.getPort());
      assertEquals(1208, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 1208);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getHost();
      assertEquals(1208, proxyServer0.getPort());
      assertEquals(1208, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, 1);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      int int0 = proxyServer0.getSecuredPort();
      assertEquals(1, proxyServer0.getPort());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("{", (-742));
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setSecuredPort((-742));
      assertSame(proxyServer_Builder1, proxyServer_Builder0);
  }
}
