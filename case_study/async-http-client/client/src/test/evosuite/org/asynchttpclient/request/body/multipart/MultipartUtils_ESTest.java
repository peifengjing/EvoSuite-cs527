/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:26:11 GMT 2017
 */

package org.asynchttpclient.request.body.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.handler.codec.http.CombinedHttpHeaders;
import io.netty.handler.codec.http.EmptyHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import java.io.File;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.asynchttpclient.request.body.multipart.ByteArrayPart;
import org.asynchttpclient.request.body.multipart.FilePart;
import org.asynchttpclient.request.body.multipart.MultipartBody;
import org.asynchttpclient.request.body.multipart.MultipartUtils;
import org.asynchttpclient.request.body.multipart.Part;
import org.asynchttpclient.request.body.multipart.StringPart;
import org.asynchttpclient.request.body.multipart.part.MultipartPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipartUtils_ESTest extends MultipartUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<Part> vector0 = new Vector<Part>();
      // Undeclared exception!
      try { 
        MultipartUtils.newMultipartBody(vector0, (HttpHeaders) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultipartUtils.newMultipartBody((List<Part>) null, (HttpHeaders) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parts
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        MultipartUtils.generateMultipartParts((List<Part>) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Stack<Part> stack0 = new Stack<Part>();
      byte[] byteArray0 = new byte[7];
      stack0.add((Part) null);
      // Undeclared exception!
      try { 
        MultipartUtils.generateMultipartParts(stack0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown part type: null
         //
         verifyException("org.asynchttpclient.request.body.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<Part> arrayList0 = new ArrayList<Part>();
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("-4ntKqv,TQ1", "-4ntKqv,TQ1", "-4ntKqv,TQ1", charset0);
      arrayList0.add((Part) stringPart0);
      byte[] byteArray0 = new byte[1];
      List<MultipartPart<? extends Part>> list0 = MultipartUtils.generateMultipartParts(arrayList0, byteArray0);
      assertEquals(1, arrayList0.size());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Stack<Part> stack0 = new Stack<Part>();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      stack0.add((Part) null);
      // Undeclared exception!
      try { 
        MultipartUtils.newMultipartBody(stack0, combinedHttpHeaders0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown part type: null
         //
         verifyException("org.asynchttpclient.request.body.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Stack<Part> stack0 = new Stack<Part>();
      byte[] byteArray0 = new byte[9];
      MockFile mockFile0 = new MockFile("'V8HiTq<R9r*_P(");
      File file0 = MockFile.createTempFile("'V8HiTq<R9r*_P(", "'V8HiTq<R9r*_P(", (File) mockFile0);
      FilePart filePart0 = new FilePart("'V8HiTq<R9r*_P(", file0);
      stack0.push(filePart0);
      List<MultipartPart<? extends Part>> list0 = MultipartUtils.generateMultipartParts(stack0, byteArray0);
      assertEquals(1, stack0.size());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Part> linkedList0 = new LinkedList<Part>();
      byte[] byteArray0 = new byte[2];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("K=VF!w3rS", byteArray0, "K=VF!w3rS", (Charset) null, "K=VF!w3rS", "K=VF!w3rS");
      linkedList0.add((Part) byteArrayPart0);
      List<MultipartPart<? extends Part>> list0 = MultipartUtils.generateMultipartParts(linkedList0, byteArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EmptyHttpHeaders emptyHttpHeaders0 = EmptyHttpHeaders.INSTANCE;
      ArrayList<Part> arrayList0 = new ArrayList<Part>();
      MultipartBody multipartBody0 = MultipartUtils.newMultipartBody(arrayList0, emptyHttpHeaders0);
      //  // Unstable assertion: assertEquals(37L, multipartBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultipartUtils multipartUtils0 = new MultipartUtils();
  }
}
