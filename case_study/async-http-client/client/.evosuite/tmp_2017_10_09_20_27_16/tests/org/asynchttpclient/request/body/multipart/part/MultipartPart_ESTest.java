/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:06:38 GMT 2017
 */

package org.asynchttpclient.request.body.multipart.part;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import java.io.FileDescriptor;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.charset.Charset;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.request.body.multipart.ByteArrayPart;
import org.asynchttpclient.request.body.multipart.StringPart;
import org.asynchttpclient.request.body.multipart.part.ByteArrayMultipartPart;
import org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart;
import org.asynchttpclient.request.body.multipart.part.MultipartState;
import org.asynchttpclient.request.body.multipart.part.PartVisitor;
import org.asynchttpclient.request.body.multipart.part.StringMultipartPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipartPart_ESTest extends MultipartPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "", charset0, "Content-Transfer-Encoding: ", "Content-Transfer-Encoding: ");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitTransferEncodingHeader(partVisitor_CounterPartVisitor0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, ",#<aT!c)-iG", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitStart(partVisitor_CounterPartVisitor0);
      assertEquals(5, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "; charset=");
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitPreContent(partVisitor_CounterPartVisitor0);
      assertEquals(53, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)66;
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.directBuffer(1400);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      messageEndMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
      assertEquals(MultipartState.PRE_CONTENT, messageEndMultipartPart0.getState());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARLx~PkBb", byteArray0, "", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitEndOfHeaders(partVisitor_CounterPartVisitor0);
      assertEquals(4, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("5/n", byteArray0, "5/n");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitDispositionHeader(partVisitor_CounterPartVisitor0);
      assertEquals(44, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      ByteBuffer byteBuffer0 = byteBuf0.internalNioBuffer((byte)69, (byte)69);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      byteArrayMultipartPart0.visitCustomHeaders(partVisitor_ByteBufferVisitor0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("--", byteArray0, "--", charset0, "--", "--", "--");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_CounterPartVisitor0);
      assertEquals(33, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0, "$VALUES", "$VALUES");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitContentIdHeader(partVisitor_CounterPartVisitor0);
      assertEquals(21, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("registerTree {} Y} {}", byteArray0, " m?Hc%1j('");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = byteArrayMultipartPart0.transferContentTo(emptyByteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("n must be positive", byteArray0, "n must be positive");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, (byte)32, 3461);
      long long0 = byteArrayMultipartPart0.transferContentTo(unpooledDirectByteBuf0);
      assertEquals(6, unpooledDirectByteBuf0.writerIndex());
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)79);
      SocketChannel socketChannel0 = SocketChannel.open();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("", "", "=+68&<MARax~Pkgb", charset0);
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      long long0 = stringMultipartPart0.transfer(byteBuf0, socketChannel0, multipartState0);
      assertEquals(0L, long0);
      assertFalse(stringMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayMultipartPart0.slowTarget = true;
      boolean boolean0 = byteArrayMultipartPart0.isTargetSlow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("leak", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.getContentLength();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("^", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      int int0 = byteArrayMultipartPart0.computePreContentLength();
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("^", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuf byteBuf0 = byteArrayMultipartPart0.computePreContentBytes((byte)34);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      int int0 = byteArrayMultipartPart0.computePostContentLength();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitTransferEncodingHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("K", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitStart((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("^BOQKKKN%qQT%!", "", "^BOQKKKN%qQT%!", charset0, "^BOQKKKN%qQT%!");
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(unpooledUnsafeDirectByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitStart(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(2) exceeds maxCapacity(0): UnpooledUnsafeDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringPart stringPart0 = new StringPart("#$L8wn=1.;$ghP", "#$L8wn=1.;$ghP", "9k");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuffer byteBuffer0 = stringPart0.DEFAULT_CHARSET.encode("");
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitPreContent(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPreContent(partVisitor_CounterPartVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPreContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      ByteBuffer byteBuffer0 = byteBuf0.internalNioBuffer((byte)69, (byte)69);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPostContent(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("4kvaZ", byteArray0, (String) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.PartVisitor$ByteBufVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)56);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("}j[L@gcQ[g\"", "}j[L@gcQ[g\"", "0n", charset0, "}j[L@gcQ[g\"", "");
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor((ByteBuffer) null);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.PartVisitor$ByteBufferVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("g.Y6Y", byteArray0, "", charset0, ">$H.Y");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("java.vm.name", byteArray0, (String) null, charset0, "j DkexX;-", ")99T7,j7e$(^IsOS", "J6Z2!<q&9g-#t~8<d");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitDispositionHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.PartVisitor$ByteBufVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitDispositionHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitCustomHeaders((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.PartVisitor$ByteBufVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitContentIdHeader((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) datagramChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("<2/n<Um`jG`W)O)HH", byteArray0, "", (Charset) null, "availableProcessors is already set to [%d], rejecting [%d]", ">=");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      MultipartState multipartState0 = MultipartState.CONTENT;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transfer((ByteBuf) null, socketChannel0, multipartState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", (Charset) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transfer((ByteBuf) null, (ByteBuf) null, multipartState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StringPart stringPart0 = new StringPart("", "", "");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.computePreContentBytes((-424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -424 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(" Xq^xY", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.computePostContentBytes((byte) (-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -38 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuf byteBuf0 = byteArrayMultipartPart0.computePostContentBytes(0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      long long0 = messageEndMultipartPart0.transfer(byteBuf0, byteBuf0, multipartState0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("leak", byteArray0);
      byteArrayPart0.addCustomHeader("ByteArrayPart name=leak contentType=application/octet-stream charset=null tranferEncoding=null contentId=null dispositionType=null filename=null", "2]X\"hI5H^P@D}\tS");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitCustomHeaders(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("}j[L@gcQ[g\"", "}j[L@gcQ[g\"", "0n", charset0, "}j[L@gcQ[g\"", "");
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      // Undeclared exception!
      try { 
        stringMultipartPart0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException("io.netty.buffer.AbstractReferenceCountedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      StringPart stringPart0 = new StringPart("V1Y_x<J{7pF_.'PSNR%", "V1Y_x<J{7pF_.'PSNR%");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes((byte)109);
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("V1Y_x<J{7pF_.'PSNR%", byteArray0, "Content-ID: ", stringPart0.DEFAULT_CHARSET, "\r\n", "Content-ID: ", (String) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.DONE;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transfer(byteBuf0, socketChannel0, multipartState0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayPart0.setDispositionType("%qGQ\"");
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      long long0 = byteArrayMultipartPart0.transferTo(byteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("leak", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      long long0 = byteArrayMultipartPart0.transferContentTo(datagramChannel0);
      assertEquals(0L, long0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      byteArrayMultipartPart0.transferTo(byteBuf0);
      byteArrayMultipartPart0.close();
      assertEquals(MultipartState.PRE_CONTENT, byteArrayMultipartPart0.getState());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      byteArrayMultipartPart0.transferTo(byteBuf0);
      long long0 = byteArrayMultipartPart0.transferTo(byteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)59);
      byteArrayMultipartPart0.transferTo(byteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, ",#<aT!c)-iG", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      byteArrayMultipartPart0.transfer(byteBuf0, byteBuf0, multipartState0);
      byteArrayMultipartPart0.transferTo(byteBuf0);
      byteArrayMultipartPart0.close();
      assertEquals(MultipartState.POST_CONTENT, byteArrayMultipartPart0.getState());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkg", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      MultipartState multipartState0 = MultipartState.CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      long long0 = byteArrayMultipartPart0.transferTo(byteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.DONE;
      byteArrayMultipartPart0.state = multipartState0;
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)69);
      long long0 = byteArrayMultipartPart0.transferTo(byteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      boolean boolean0 = byteArrayMultipartPart0.isTargetSlow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("=+68&<MARax~Pkgb", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.length();
      assertEquals(122L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      StringPart stringPart0 = new StringPart("V1Y_x<J{7F_.'PSNR%", "V1Y_x<J{7F_.'PSNR%", "V1Y_x<J{7F_.'PSNR%");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes((byte)0);
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("The array of suffixes must not be null", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.transferTo(byteBuf0);
      assertEquals(62L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("leak", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = byteArrayMultipartPart0.getState();
      assertEquals(MultipartState.PRE_CONTENT, multipartState0);
  }
}
