/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:35:04 GMT 2017
 */

package org.asynchttpclient.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.uri.UriParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UriParser_ESTest extends UriParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "/.");
      uriParser0.parse((Uri) null, "?XT4/7|]Qy");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "/./..");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("ilP///", (String) null, "aT:J-N}z4", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, ".//../.");
      assertNull(uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("|U}a2z*O", "/6k.iB4/..", "CBT|R?2&3zU%8", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, " could not be parsed into a proper Uri, missing host");
      Uri uri1 = new Uri("/6k.iB4/..", "/could not be parsed into a proper Uri, missing host", "/could not be parsed into a proper Uri, missing host", (-1975), "/6k.iB4/..", "/could not be parsed into a proper Uri, missing host");
      Uri uri2 = uri1.withNewScheme("|U}a2z*O");
      uriParser0.parse(uri2, "");
      assertNotSame(uri2, uri1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("~zOY3g7", "/..", "lS", 0, "Nl", (String) null);
      Uri uri1 = Uri.create(uri0, "!I&(a");
      uriParser0.parse(uri1, "Nl");
      assertEquals("!I&(a", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      // Undeclared exception!
      try { 
        uriParser0.parse((Uri) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // orginalUri
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("RJ_*7EE$T", (String) null, "\"40!", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, "#o,65=8]:");
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("RD", "aT://N}z4", "./", (-1), "Q", "s.}>*=ZhN)1");
      uriParser0.parse(uri0, "http");
      uriParser0.authority = "]x)Zd+;55x";
      uriParser0.parse(uri0, "s5nt:=]lN|6L2<Fr");
      assertEquals("aT://N}z4", uri0.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("RD", "aT://N}z4", "./", (-1), "Q", "s.}>*=ZhN)1");
      uriParser0.parse(uri0, "./");
      uriParser0.parse(uri0, "http");
      assertEquals("Q", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("/6k.iB4/..:///could not be parsed into a proper Uri, missing host@org.asynchttpclient.util.StringBuilderPool:-1963/6k.iB4/..?org.asynchttpclient.util.StringBuilderPool");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /6k.iB4/..:///could not be parsed into a proper Uri, missing host@org.asynchttpclient.util.StringBuilderPool:-1963/6k.iB4/..?org.asynchttpclient.util.StringBuilderPool could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Uri uri0 = new Uri("|U}a2z*O", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (-1), (String) null, (String) null);
      Uri uri1 = Uri.create(uri0, "/../");
      assertEquals("/../", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("///", (String) null, "aT:J-N}z4", (-1), (String) null, "4ufv*q=W 2(:$Y*[R");
      uriParser0.parse(uri0, "n.//../.");
      assertEquals(80, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "//:");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("|U}a2z*O", "/6k.iB4/..", "CBT|R?2&3zU%8", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, " could not be parsed into a proper Uri, missing host");
      uriParser0.parse(uri0, "://");
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("//d$fW[2{/7C-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // //d$fW[2{/7C- could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("|U}a2z*O", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, "If]##Tu|>.X3N?oe5");
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "-v:");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "://");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("http:// 3leW64f=y_@url:..? 3leW64f=y_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"..\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "Invalid port number :");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("////", (String) null, "aT:J-N}z4", (-1), "/-v:", "/-v:");
      uriParser0.parse(uri0, "epty? ");
      assertEquals((-1), uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri("RD", "aT://N}z4", "./", (-1), "Q", "s.}>*=ZhN)1");
      Uri uri1 = Uri.create(uri0, "url:..");
      assertEquals("..", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("|U}a2z*O", "org.asynchttpclient.util.StringBuilderPool", "CBT|R?2&3zU%8", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, "");
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "?XT4");
      uriParser0.parse((Uri) null, "?XT4");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "////./.");
      uriParser0.parse((Uri) null, "?XT4");
  }
}
