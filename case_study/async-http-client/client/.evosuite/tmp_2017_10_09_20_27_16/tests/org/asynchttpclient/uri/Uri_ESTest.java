/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:49:13 GMT 2017
 */

package org.asynchttpclient.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Uri_ESTest extends Uri_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Uri uri0 = new Uri(" could not be parsed into a proper Uri, missing scheme", " could not be parsed into a proper Uri, missing scheme", "t*d@q$r3my:i", (-1624066543), "//", (String) null);
      String string0 = uri0.toBaseUrl();
      assertEquals(" could not be parsed into a proper Uri, missing scheme://t*d@q$r3my:i:-1624066543//", string0);
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri0.getUserInfo());
      assertFalse(uri0.isWebSocket());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Uri uri0 = new Uri("https", "ca2[CDe]hOZ", "ca2[CDe]hOZ", 443, "https", "https");
      Uri uri1 = uri0.withNewScheme("wss");
      assertFalse(uri1.equals((Object)uri0));
      assertTrue(uri0.isSecured());
      assertEquals("ca2[CDe]hOZ", uri1.getHost());
      assertTrue(uri1.isWebSocket());
      assertFalse(uri0.isWebSocket());
      assertEquals("https", uri1.getPath());
      assertEquals("ca2[CDe]hOZ", uri1.getUserInfo());
      assertTrue(uri1.isSecured());
      assertEquals("https", uri1.getQuery());
      assertEquals(443, uri1.getExplicitPort());
      assertEquals(443, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.uri.Uri", "org.asynchttpclient.uri.Uri", "org.asynchttpclient.uri.Uri", 0, "org.asynchttpclient.uri.Uri", "");
      Uri uri1 = uri0.withNewScheme("http");
      assertEquals("", uri1.getQuery());
      assertFalse(uri1.isWebSocket());
      assertEquals("http", uri1.getScheme());
      assertEquals("org.asynchttpclient.uri.Uri", uri1.getPath());
      assertEquals("org.asynchttpclient.uri.Uri", uri1.getHost());
      assertEquals("org.asynchttpclient.uri.Uri", uri1.getUserInfo());
      assertEquals(0, uri1.getExplicitPort());
      assertEquals(80, uri1.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Uri uri0 = new Uri("wss", "lbg INdn", "lbg INdn", (-2781), "lbg INdn", "\" q");
      Uri uri1 = uri0.withNewQuery("");
      assertEquals("", uri1.getQuery());
      assertEquals("lbg INdn", uri1.getUserInfo());
      assertTrue(uri1.isWebSocket());
      assertEquals("lbg INdn", uri1.getHost());
      assertEquals(443, uri1.getSchemeDefaultPort());
      assertEquals("lbg INdn", uri1.getPath());
      assertEquals((-2781), uri1.getExplicitPort());
      assertEquals((-2781), uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Uri uri0 = new Uri("https", "ca2[CDe]hOZ", "ca2[CDe]hOZ", 443, "https", "https");
      Uri uri1 = uri0.withNewQuery("\"q");
      assertEquals("ca2[CDe]hOZ", uri1.getUserInfo());
      assertFalse(uri1.isWebSocket());
      assertEquals(443, uri0.getExplicitPort());
      assertEquals(443, uri1.getSchemeDefaultPort());
      assertEquals("https", uri1.getPath());
      assertEquals("ca2[CDe]hOZ", uri1.getHost());
      assertEquals(443, uri1.getPort());
      assertEquals("\"q", uri1.getQuery());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Uri uri0 = new Uri("h@pos", "l\"Dd", "h@pos", 0, "l\"Dd", "l\"Dd");
      Uri uri1 = uri0.withNewQuery("h@pos");
      assertEquals("l\"Dd", uri0.getQuery());
      assertFalse(uri1.isWebSocket());
      assertEquals("l\"Dd", uri1.getUserInfo());
      assertFalse(uri1.isSecured());
      assertEquals("h@pos", uri1.getQuery());
      assertEquals("h@pos", uri1.getHost());
      assertEquals(0, uri1.getPort());
      assertEquals("l\"Dd", uri1.getPath());
      assertEquals("h@pos", uri1.getScheme());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Uri uri0 = new Uri("url:", "g", "url:", 0, "g", "g");
      URI uRI0 = uri0.toJavaNetURI();
      assertFalse(uri0.isSecured());
      assertEquals("url:://g@url::0g?g", uRI0.toString());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, (String) null, "http");
      URI uRI0 = uri0.toJavaNetURI();
      assertEquals("org.asynchttpclient.util.StringBuilderPool://org.asynchttpclient.util.StringBuilderPool@org.asynchttpclient.util.StringBuilderPool:0?http", uRI0.toString());
      assertFalse(uri0.isSecured());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 46, (String) null, "ws");
      URI uRI0 = uri0.toJavaNetURI();
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertTrue(uri0.isWebSocket());
      assertEquals("ws://ws@ws:46?ws", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Uri uri0 = new Uri("wss", "lbg INdn", "lbg INdn", (-2781), "lbg INdn", "\" q");
      boolean boolean0 = uri0.isWebSocket();
      assertTrue(boolean0);
      assertEquals("lbg INdn", uri0.getHost());
      assertEquals("lbg INdn", uri0.getUserInfo());
      assertEquals("wss", uri0.getScheme());
      assertEquals(443, uri0.getSchemeDefaultPort());
      assertEquals("lbg INdn", uri0.getPath());
      assertEquals((-2781), uri0.getExplicitPort());
      assertEquals("\" q", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Uri uri0 = new Uri("wss", "lbg INdn", "lbg INdn", (-2781), "lbg INdn", "\" q");
      boolean boolean0 = uri0.isSecured();
      assertTrue(uri0.isWebSocket());
      assertEquals("lbg INdn", uri0.getHost());
      assertEquals("lbg INdn", uri0.getUserInfo());
      assertEquals("\" q", uri0.getQuery());
      assertTrue(boolean0);
      assertEquals("wss", uri0.getScheme());
      assertEquals((-2781), uri0.getExplicitPort());
      assertEquals("lbg INdn", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Uri uri0 = new Uri("+^l", "g", "+^l", 0, "g", "g");
      String string0 = uri0.getUserInfo();
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("+^l", uri0.getHost());
      assertEquals("g", string0);
      assertEquals("+^l", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals(0, uri0.getPort());
      assertEquals("g", uri0.getPath());
      assertEquals("g", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Uri uri0 = new Uri("m$\"h(XqoK++j", "", "m$\"h(XqoK++j", 1, "", "n3][+ ZrVtXc1],\"#K");
      String string0 = uri0.getUserInfo();
      assertEquals("", string0);
      assertEquals("m$\"h(XqoK++j", uri0.getHost());
      assertEquals("m$\"h(XqoK++j", uri0.getScheme());
      assertEquals("", uri0.getPath());
      assertFalse(uri0.isWebSocket());
      assertEquals("n3][+ ZrVtXc1],\"#K", uri0.getQuery());
      assertFalse(uri0.isSecured());
      assertEquals(1, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Uri uri0 = new Uri("uM]$ZE8JOpzc/\"`YO0", "uM]$ZE8JOpzc/\"`YO0", "org.asynchttpclient.util.StringBuilderPool", 63, "c2oyc;[9zCO", "!Xc=p\"P>");
      String string0 = uri0.getQuery();
      assertEquals("uM]$ZE8JOpzc/\"`YO0", uri0.getScheme());
      assertEquals("c2oyc;[9zCO", uri0.getPath());
      assertFalse(uri0.isWebSocket());
      assertEquals(63, uri0.getPort());
      assertEquals("uM]$ZE8JOpzc/\"`YO0", uri0.getUserInfo());
      assertEquals("!Xc=p\"P>", string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.uri.Uri", "org.asynchttpclient.uri.Uri", "org.asynchttpclient.uri.Uri", 0, "org.asynchttpclient.uri.Uri", "");
      String string0 = uri0.getQuery();
      assertEquals("", string0);
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getUserInfo());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getPath());
      assertFalse(uri0.isWebSocket());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getScheme());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getHost());
      assertEquals(0, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Uri uri0 = new Uri("+^l", "g", "+^l", 80, "g", "g");
      int int0 = uri0.getPort();
      assertEquals("g", uri0.getUserInfo());
      assertEquals("+^l", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertFalse(uri0.isSecured());
      assertEquals(80, int0);
      assertEquals("g", uri0.getQuery());
      assertEquals("g", uri0.getPath());
      assertEquals("+^l", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", " could not be parsed into a proper Uri, missing host", (-5291), " could not be parsed into a proper Uri, missing host", "ws");
      int int0 = uri0.getPort();
      assertEquals("ws", uri0.getScheme());
      assertEquals((-5291), int0);
      assertEquals("ws", uri0.getUserInfo());
      assertEquals("ws", uri0.getQuery());
      assertEquals(" could not be parsed into a proper Uri, missing host", uri0.getPath());
      assertEquals(" could not be parsed into a proper Uri, missing host", uri0.getHost());
      assertTrue(uri0.isWebSocket());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Uri uri0 = new Uri("<*D@J$R3mY:i", "BZ*C_|CxMyd", "true", 63, (String) null, "BZ*C_|CxMyd");
      String string0 = uri0.getPath();
      assertNull(string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("BZ*C_|CxMyd", uri0.getUserInfo());
      assertEquals("BZ*C_|CxMyd", uri0.getQuery());
      assertEquals("<*D@J$R3mY:i", uri0.getScheme());
      assertEquals("true", uri0.getHost());
      assertFalse(uri0.isWebSocket());
      assertEquals(63, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Uri uri0 = new Uri("uM]$ZE8JOpzc/\"`YO0", "uM]$ZE8JOpzc/\"`YO0", "org.asynchttpclient.util.StringBuilderPool", 63, "c2oyc;[9zCO", "!Xc=p\"P>");
      String string0 = uri0.getPath();
      assertEquals("uM]$ZE8JOpzc/\"`YO0", uri0.getScheme());
      assertEquals("!Xc=p\"P>", uri0.getQuery());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("uM]$ZE8JOpzc/\"`YO0", uri0.getUserInfo());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getHost());
      assertEquals("c2oyc;[9zCO", string0);
      assertFalse(uri0.isWebSocket());
      assertEquals(63, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, (String) null, "http");
      int int0 = uri0.getExplicitPort();
      assertFalse(uri0.isWebSocket());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getHost());
      assertEquals("http", uri0.getQuery());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getUserInfo());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getScheme());
      assertEquals(0, int0);
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Uri uri0 = new Uri("wss", "lbg INdn", "lbg INdn", (-2781), "lbg INdn", "\" q");
      Uri uri1 = Uri.create(uri0, "?rFWp");
      assertEquals("/", uri1.getPath());
      assertEquals("lbg INdn", uri1.getUserInfo());
      assertTrue(uri1.isWebSocket());
      assertEquals((-2781), uri0.getPort());
      assertEquals("lbg INdn", uri1.getHost());
      assertEquals("rFWp", uri1.getQuery());
      assertTrue(uri1.isSecured());
      assertEquals((-2781), uri1.getPort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri("-(", "k&F,$Qp=a", "-(", (-726), "5", "org.asynchttpclient.uri.Uri");
      // Undeclared exception!
      try { 
        uri0.withNewScheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Uri uri0 = new Uri(" could not be parsed into a proper Uri, missing host", " could not be parsed into a proper Uri, missing host", "K", (-3173), "K", " could not be parsed into a proper Uri, missing host");
      // Undeclared exception!
      try { 
        uri0.withNewScheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // orginalUri
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // orginalUri
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri("://", "b)4LA$v", (String) null, 2326, "://", "://");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri("", "", "", 1818, (String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Uri uri0 = new Uri("27$mS", "27$mS", "0N);", 26, "0N);", (String) null);
      String string0 = uri0.toUrl();
      assertEquals("0N);", uri0.getHost());
      assertEquals("27$mS", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals("0N);", uri0.getPath());
      assertEquals("27$mS", uri0.getUserInfo());
      assertNotNull(string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, (String) null, "http");
      Uri uri1 = Uri.create(uri0, "org.asynchttpclient.util.StringBuilderPool");
      String string0 = uri1.toUrl();
      assertFalse(uri0.isWebSocket());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("org.asynchttpclient.util.StringBuilderPool://org.asynchttpclient.util.StringBuilderPool@org.asynchttpclient.util.StringBuilderPool:0/org.asynchttpclient.util.StringBuilderPool", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Uri uri0 = new Uri("wss", "lbg INdn", "lbg INdn", (-2781), "lbg INdn", "\" q");
      int int0 = uri0.getSchemeDefaultPort();
      assertEquals(443, int0);
      assertTrue(uri0.isWebSocket());
      assertEquals("lbg INdn", uri0.getHost());
      assertEquals("\" q", uri0.getQuery());
      assertEquals("lbg INdn", uri0.getPath());
      assertTrue(uri0.isSecured());
      assertEquals("wss", uri0.getScheme());
      assertEquals("lbg INdn", uri0.getUserInfo());
      assertEquals((-2781), uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Uri uri0 = new Uri(" i/S_|C)0'{;nSbP", "://", "://", 2099, "://", (String) null);
      int int0 = uri0.getSchemeDefaultPort();
      assertEquals("://", uri0.getUserInfo());
      assertEquals("://", uri0.getHost());
      assertEquals(" i/S_|C)0'{;nSbP", uri0.getScheme());
      assertEquals(80, int0);
      assertEquals(2099, uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("://", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Uri uri0 = new Uri(" i/S_|C)0'{;nSbP", "://", "://", 2099, "://", (String) null);
      String string0 = uri0.getScheme();
      assertEquals("://", uri0.getPath());
      assertFalse(uri0.isWebSocket());
      assertEquals("://", uri0.getUserInfo());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("://", uri0.getHost());
      assertEquals(" i/S_|C)0'{;nSbP", string0);
      assertEquals(2099, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Uri uri0 = new Uri(" i/S_|C)0'{;nSbP", "://", "://", 2099, "://", (String) null);
      String string0 = uri0.getQuery();
      assertFalse(uri0.isWebSocket());
      assertEquals(2099, uri0.getPort());
      assertNull(string0);
      assertEquals(" i/S_|C)0'{;nSbP", uri0.getScheme());
      assertEquals("://", uri0.getUserInfo());
      assertEquals("://", uri0.getPath());
      assertEquals("://", uri0.getHost());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Uri uri0 = new Uri("+^l", "g", "+^l", 0, "g", "g");
      int int0 = uri0.getPort();
      assertFalse(uri0.isWebSocket());
      assertEquals("g", uri0.getUserInfo());
      assertEquals("+^l", uri0.getScheme());
      assertEquals("g", uri0.getQuery());
      assertEquals(0, int0);
      assertEquals("g", uri0.getPath());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("+^l", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Uri uri0 = new Uri("+^l", "g", "+^l", 80, "g", "g");
      String string0 = uri0.getHost();
      assertEquals("g", uri0.getUserInfo());
      assertEquals("+^l", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals(80, uri0.getPort());
      assertEquals("+^l", string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("g", uri0.getPath());
      assertEquals("g", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Uri uri0 = new Uri("uM]$ZE8JOpzc/\"`YO0", "uM]$ZE8JOpzc/\"`YO0", "org.asynchttpclient.util.StringBuilderPool", 63, "c2oyc;[9zCO", "!Xc=p\"P>");
      boolean boolean0 = uri0.isSecured();
      assertEquals("c2oyc;[9zCO", uri0.getPath());
      assertEquals("uM]$ZE8JOpzc/\"`YO0", uri0.getUserInfo());
      assertEquals("uM]$ZE8JOpzc/\"`YO0", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getHost());
      assertEquals("!Xc=p\"P>", uri0.getQuery());
      assertEquals(63, uri0.getExplicitPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.uri.Uri", (String) null, "oKH\u0001u9!.0`v", 361, "org.asynchttpclient.uri.Uri", "org.asynchttpclient.uri.Uri");
      String string0 = uri0.getUserInfo();
      assertEquals("oKH\u0001u9!.0`v", uri0.getHost());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getScheme());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getQuery());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getPath());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertFalse(uri0.isWebSocket());
      assertNull(string0);
      assertEquals(361, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Uri uri0 = new Uri("host", "l\"Dd", "host", (-3415), "", "E=h/7`");
      String string0 = uri0.getPath();
      assertFalse(uri0.isWebSocket());
      assertEquals("", string0);
      assertEquals("l\"Dd", uri0.getUserInfo());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("E=h/7`", uri0.getQuery());
      assertEquals("host", uri0.getScheme());
      assertEquals("host", uri0.getHost());
      assertEquals((-3415), uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Uri uri0 = new Uri("Invalid port number :", "Invalid port number :", "Invalid port number :", 2, "Invalid port number :", "Invalid port number :");
      Uri uri1 = uri0.withNewQuery("-");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals("Invalid port number :", uri1.getHost());
      assertFalse(uri1.isSecured());
      assertEquals("Invalid port number :", uri1.getScheme());
      assertFalse(boolean0);
      assertEquals(2, uri0.getPort());
      assertEquals("Invalid port number :", uri1.getPath());
      assertEquals(2, uri1.getExplicitPort());
      assertFalse(uri1.isWebSocket());
      assertEquals("Invalid port number :", uri1.getUserInfo());
      assertEquals("-", uri1.getQuery());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Uri uri0 = new Uri(" could not be parsed into a proper Uri, missing scheme", " could not be parsed into a proper Uri, missing scheme", "t*d@q$r3my:i", (-1624066543), "//", (String) null);
      Uri uri1 = uri0.withNewQuery("t*d@q$r3my:i");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals("t*d@q$r3my:i", uri1.getHost());
      assertEquals("t*d@q$r3my:i", uri1.getQuery());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri1.getUserInfo());
      assertFalse(uri1.isWebSocket());
      assertFalse(uri1.isSecured());
      assertFalse(boolean0);
      assertEquals("//", uri1.getPath());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri1.getScheme());
      assertEquals((-1624066543), uri1.getPort());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Uri uri0 = new Uri("S70", "Q%", "S70", 166, "Q%", "Q%");
      Uri uri1 = Uri.create(uri0, "org.asynchttpclient.util.StringBuilderPool");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri1.getPath());
      assertEquals("Q%", uri0.getQuery());
      assertEquals("S70", uri1.getHost());
      assertEquals("Q%", uri1.getUserInfo());
      assertFalse(boolean0);
      assertEquals("S70", uri1.getScheme());
      assertFalse(uri1.isWebSocket());
      assertEquals(166, uri0.getExplicitPort());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Uri uri0 = new Uri("Invalid port number :", "Invalid port number :", "Invalid port number :", 2, (String) null, "Invalid port number :");
      Uri uri1 = uri0.withNewQuery("Invalid port number :");
      boolean boolean0 = uri0.equals(uri1);
      assertFalse(uri1.isSecured());
      assertEquals("Invalid port number :", uri0.getQuery());
      assertEquals("Invalid port number :", uri1.getHost());
      assertTrue(boolean0);
      assertEquals("Invalid port number :", uri0.getScheme());
      assertFalse(uri1.isWebSocket());
      assertEquals("Invalid port number :", uri1.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Uri uri0 = new Uri(" could not be parsed into a proper Uri, missing scheme", " could not be parsed into a proper Uri, missing scheme", "*d@1jq$r3my:i", (-1624066543), "*d@1jq$r3my:i", (String) null);
      Uri uri1 = uri0.withNewScheme("ws");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri1.getUserInfo());
      assertTrue(uri1.isWebSocket());
      assertFalse(uri0.isWebSocket());
      assertFalse(boolean0);
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals((-1624066543), uri1.getExplicitPort());
      assertEquals((-1624066543), uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Uri uri0 = new Uri("h@pos", "l\"Dd", "h@pos", 0, "l\"Dd", "l\"Dd");
      Uri uri1 = new Uri("l\"Dd", "http", "https", (-1110685280), "h@pos", "wss");
      boolean boolean0 = uri0.equals(uri1);
      assertFalse(boolean0);
      assertEquals("h@pos", uri1.getPath());
      assertEquals("l\"Dd", uri0.getQuery());
      assertEquals("https", uri1.getHost());
      assertEquals("http", uri1.getUserInfo());
      assertFalse(uri1.isWebSocket());
      assertEquals("l\"Dd", uri0.getUserInfo());
      assertEquals("l\"Dd", uri1.getScheme());
      assertEquals("wss", uri1.getQuery());
      assertFalse(uri1.isSecured());
      assertEquals((-1110685280), uri1.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Uri uri0 = new Uri(";s\"heDe", ";s\"heDe", ";s\"heDe", (-7), (String) null, ";s\"heDe");
      Uri uri1 = new Uri("ws", "ws", ";s\"heDe", (-7), "https", "http");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals("ws", uri1.getUserInfo());
      assertEquals("https", uri1.getPath());
      assertTrue(uri1.isWebSocket());
      assertEquals(";s\"heDe", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals(";s\"heDe", uri0.getUserInfo());
      assertEquals("http", uri1.getQuery());
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals(";s\"heDe", uri1.getHost());
      assertEquals("ws", uri1.getScheme());
      assertEquals((-7), uri1.getPort());
      assertFalse(boolean0);
      assertEquals(";s\"heDe", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Uri uri0 = new Uri("<*D@J$R3mY:i", "<*D@J$R3mY:i", "true", 63, (String) null, "<*D@J$R3mY:i");
      boolean boolean0 = uri0.equals((Object) null);
      assertEquals("<*D@J$R3mY:i", uri0.getUserInfo());
      assertFalse(uri0.isWebSocket());
      assertEquals(63, uri0.getPort());
      assertEquals("true", uri0.getHost());
      assertFalse(boolean0);
      assertEquals("<*D@J$R3mY:i", uri0.getQuery());
      assertEquals("<*D@J$R3mY:i", uri0.getScheme());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Uri uri0 = new Uri("Invalid port number :", "Invalid port number :", "Invalid port number :", 2, "Invalid port number :", "Invalid port number :");
      boolean boolean0 = uri0.equals(uri0);
      assertEquals("Invalid port number :", uri0.getPath());
      assertEquals("Invalid port number :", uri0.getQuery());
      assertTrue(boolean0);
      assertFalse(uri0.isWebSocket());
      assertEquals(2, uri0.getExplicitPort());
      assertEquals("Invalid port number :", uri0.getHost());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("Invalid port number :", uri0.getUserInfo());
      assertEquals("Invalid port number :", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Uri uri0 = new Uri("url:", "g", "url:", 0, "g", "g");
      boolean boolean0 = uri0.equals("url:");
      assertEquals("g", uri0.getUserInfo());
      assertFalse(boolean0);
      assertFalse(uri0.isWebSocket());
      assertEquals("url:", uri0.getHost());
      assertEquals("g", uri0.getQuery());
      assertEquals("g", uri0.getPath());
      assertEquals("url:", uri0.getScheme());
      assertEquals(0, uri0.getExplicitPort());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.uri.Uri", (String) null, "oKH\u0001u9!.0`v", 361, "org.asynchttpclient.uri.Uri", "org.asynchttpclient.uri.Uri");
      uri0.hashCode();
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getQuery());
      assertEquals(361, uri0.getPort());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("oKH\u0001u9!.0`v", uri0.getHost());
      assertFalse(uri0.isWebSocket());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Uri uri0 = new Uri("~Rniru}W4`r$[dm", "/.", "/.", (-649), "/.", "/.");
      Uri uri1 = Uri.create(uri0, "wss");
      uri1.hashCode();
      assertEquals("/wss", uri1.getPath());
      assertEquals("/.", uri1.getHost());
      assertFalse(uri1.isSecured());
      assertEquals("/.", uri1.getUserInfo());
      assertEquals((-649), uri1.getPort());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 46, (String) null, "ws");
      uri0.hashCode();
      assertEquals("ws", uri0.getQuery());
      assertEquals("ws", uri0.getUserInfo());
      assertEquals("ws", uri0.getScheme());
      assertEquals(46, uri0.getExplicitPort());
      assertTrue(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Uri uri0 = new Uri("27$mS", "27$mS", "0N);", 26, "0N);", (String) null);
      String string0 = uri0.toRelativeUrl();
      assertEquals("27$mS", uri0.getScheme());
      assertEquals("0N);", string0);
      assertFalse(uri0.isWebSocket());
      assertEquals("27$mS", uri0.getUserInfo());
      assertFalse(uri0.isSecured());
      assertEquals("0N);", uri0.getHost());
      assertEquals(26, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Uri uri0 = new Uri("~Rniru}W4`r$[dm", "/.", "/.", (-649), "/.", "/.");
      String string0 = uri0.toRelativeUrl();
      assertFalse(uri0.isWebSocket());
      assertEquals("~Rniru}W4`r$[dm", uri0.getScheme());
      assertEquals("/.", uri0.getUserInfo());
      assertEquals((-649), uri0.getPort());
      assertEquals("/.?/.", string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("/.", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Uri uri0 = new Uri("<*D@J$R3mY:i", "BZ*C_|CxMyd", "true", 63, (String) null, "BZ*C_|CxMyd");
      String string0 = uri0.toRelativeUrl();
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("<*D@J$R3mY:i", uri0.getScheme());
      assertEquals("/?BZ*C_|CxMyd", string0);
      assertFalse(uri0.isWebSocket());
      assertEquals(63, uri0.getPort());
      assertEquals("BZ*C_|CxMyd", uri0.getUserInfo());
      assertEquals("true", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Uri uri0 = new Uri("<*D@J$R3mY:i", "BZ*C_|CxMyd", "true", 63, (String) null, "BZ*C_|CxMyd");
      String string0 = uri0.toBaseUrl();
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("BZ*C_|CxMyd", uri0.getUserInfo());
      assertFalse(uri0.isWebSocket());
      assertEquals("BZ*C_|CxMyd", uri0.getQuery());
      assertEquals("<*D@J$R3mY:i://true:63", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Uri uri0 = new Uri("[f}-zt^", "&u2t ", "5RC~7w5", (-1), "org.asynchttpclient.util.sringbuilderpool", "[f}-zt^");
      String string0 = uri0.toBaseUrl();
      assertEquals("&u2t ", uri0.getUserInfo());
      assertEquals("[f}-zt^", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("[f}-zt^://5RC~7w5org.asynchttpclient.util.sringbuilderpool", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Uri uri0 = new Uri(" could not be parsed into a proper Uri, missing scheme", " could not be parsed into a proper Uri, missing scheme", "t*d@q$r3my:i", (-1624066543), "//", (String) null);
      String string0 = uri0.toString();
      assertNotNull(string0);
      assertEquals(" could not be parsed into a proper Uri, missing scheme:// could not be parsed into a proper Uri, missing scheme@t*d@q$r3my:i:-1624066543//", string0);
      assertFalse(uri0.isWebSocket());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Uri uri0 = new Uri("<*D@J$R3mY:i", "BZ*C_|CxMyd", "true", 63, (String) null, "BZ*C_|CxMyd");
      String string0 = uri0.toUrl();
      assertNotNull(string0);
      assertFalse(uri0.isWebSocket());
      assertFalse(uri0.isSecured());
      assertEquals("<*D@J$R3mY:i://BZ*C_|CxMyd@true:63?BZ*C_|CxMyd", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Uri uri0 = new Uri("Kj5O", "Kj5O", "Kj5O", (-1), "Kj5O", "Kj5O");
      String string0 = uri0.toUrl();
      assertFalse(uri0.isWebSocket());
      assertEquals("Kj5O://Kj5O@Kj5OKj5O?Kj5O", string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Uri uri0 = new Uri("~Rniru}W4`r$[dm", "/.", "/.", (-649), "/.", "/.");
      uri0.toUrl();
      try { 
        uri0.toJavaNetURI();
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: ~Rniru}W4`r$[dm:///.@/.:-649/.?/.
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Uri uri0 = new Uri("[f}-zt^", "&u2t ", "5RC~7w5", (-1), "org.asynchttpclient.util.sringbuilderpool", "[f}-zt^");
      int int0 = uri0.getExplicitPort();
      assertEquals("&u2t ", uri0.getUserInfo());
      assertEquals("[f}-zt^", uri0.getScheme());
      assertEquals(80, int0);
      assertEquals("5RC~7w5", uri0.getHost());
      assertEquals("org.asynchttpclient.util.sringbuilderpool", uri0.getPath());
      assertEquals("[f}-zt^", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Uri uri0 = new Uri("wss", "lbg INdn", "lbg INdn", (-2781), "lbg INdn", "\" q");
      int int0 = uri0.getExplicitPort();
      assertEquals("lbg INdn", uri0.getUserInfo());
      assertTrue(uri0.isWebSocket());
      assertEquals("\" q", uri0.getQuery());
      assertEquals("lbg INdn", uri0.getHost());
      assertEquals("lbg INdn", uri0.getPath());
      assertEquals("wss", uri0.getScheme());
      assertEquals((-2781), int0);
      assertTrue(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Uri uri0 = new Uri("ws", (String) null, "/%", (-1173607037), "/%", "ws");
      String string0 = uri0.toUrl();
      assertNotNull(string0);
      assertEquals("ws:///%:-1173607037/%?ws", string0);
      assertTrue(uri0.isWebSocket());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "z_wA9YKoAva`fCp", 0, "z_wA9YKoAva`fCp", "");
      // Undeclared exception!
      try { 
        Uri.create(uri0, "wss://wss@z_wA9YKoAva`fCp:0z_wA9YKoAva`fCp?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0z_wA9YKoAva`fCp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Uri uri0 = new Uri("https", "ca2[CDe]hOZ", "ca2[CDe]hOZ", 443, "https", "https");
      String string0 = uri0.toBaseUrl();
      assertEquals("https", uri0.getQuery());
      assertTrue(uri0.isSecured());
      assertEquals("ca2[CDe]hOZ", uri0.getUserInfo());
      assertFalse(uri0.isWebSocket());
      assertEquals("https://ca2[CDe]hOZhttps", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, "qJ:fDHj#mno3$rZX{.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qJ:fDHj#mno3$rZX{. could not be parsed into a proper Uri, missing host
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("s&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s& could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Uri uri0 = new Uri("~Rniru}W4`r$[dm", "/.", "/.", (-649), "/.", "/.");
      Uri uri1 = uri0.withNewScheme("/.");
      URI uRI0 = uri1.toJavaNetURI();
      assertEquals("/.", uri0.getHost());
      assertEquals("/.", uri0.getQuery());
      assertEquals("/.", uri0.getPath());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertFalse(uri1.isWebSocket());
      assertEquals("/.", uri0.getUserInfo());
      assertEquals("/.:///.@/.:-649/.?/.", uRI0.toString());
      assertEquals((-649), uri0.getExplicitPort());
      assertEquals("~Rniru}W4`r$[dm", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("ws:// could not be parsed into a proper Uri, missing host:-5291 could not be parsed into a proper Uri, missing host");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-5291 could not be parsed into a proper Uri, missing host\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Uri uri0 = new Uri("host", "l\"Dd", "host", (-3415), "", "E=h/7`");
      boolean boolean0 = uri0.isWebSocket();
      assertEquals("host", uri0.getHost());
      assertEquals("E=h/7`", uri0.getQuery());
      assertFalse(boolean0);
      assertEquals((-3415), uri0.getPort());
      assertEquals("host", uri0.getScheme());
      assertEquals("", uri0.getPath());
      assertFalse(uri0.isSecured());
      assertEquals("l\"Dd", uri0.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.uri.Uri", (String) null, "oKH\u0001u9!.0`v", 361, "org.asynchttpclient.uri.Uri", "org.asynchttpclient.uri.Uri");
      String string0 = uri0.toBaseUrl();
      assertFalse(uri0.isWebSocket());
      assertEquals("org.asynchttpclient.uri.Uri://oKH\u0001u9!.0`v:361org.asynchttpclient.uri.Uri", string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getQuery());
  }
}
