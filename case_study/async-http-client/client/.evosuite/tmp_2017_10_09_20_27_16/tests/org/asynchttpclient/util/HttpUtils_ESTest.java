/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:11:31 GMT 2017
 */

package org.asynchttpclient.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.Param;
import org.asynchttpclient.Request;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.util.HttpUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUtils_ESTest extends HttpUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = HttpUtils.parseCharset("[um;N#'S#m{{");
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Uri uri0 = new Uri("( Sgy", "( Sgy", "( Sgy", (-9999), "( Sgy", "");
      Uri uri1 = uri0.withNewQuery("%-oYXk9b");
      boolean boolean0 = HttpUtils.isSameBase(uri0, uri1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = new Uri("(success)", "(success)", "(success)", 0, "(success)", "Qq9");
      String string0 = HttpUtils.getAuthority(uri0);
      assertEquals("(success):0", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.validateSupportedScheme((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.isSameBase((Uri) null, (Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getNonEmptyPath((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getBaseUrl((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpUtils.followRedirect(asyncHttpClientConfig0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.computeOriginHeader((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Uri uri0 = new Uri("http://", (String) null, "http://", (-347), "http://", "io.reactivex.processors.ReplayProcessor$TimedNode");
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.computeOriginHeader(uri1);
      assertEquals("https://http://:-347", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Uri uri0 = new Uri("other is null", "other is null", "other is null", 2199, "other is null", "M:xY9~-Oe\"B");
      String string0 = HttpUtils.computeOriginHeader(uri0);
      assertEquals("http://other is null:2199", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("E:", "Registering watch on {} {}");
      stack0.add(param0);
      Charset charset0 = HttpUtils.DEFAULT_CHARSET;
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(39, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param("", (String) null);
      linkedList0.add(param0);
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams(linkedList0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpUtils httpUtils0 = new HttpUtils();
      Vector<Param> vector0 = new Vector<Param>();
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams(vector0, httpUtils0.DEFAULT_CHARSET);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset("charset=00000001");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 00000001
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = HttpUtils.parseCharset("charset=");
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Uri uri0 = new Uri("http://", (String) null, "http://", (-347), "http://", "io.reactivex.processors.ReplayProcessor$TimedNode");
      String string0 = HttpUtils.getNonEmptyPath(uri0);
      assertEquals("http://", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Uri uri0 = new Uri("nO94Fm+^)v1!%GIiLrA", "nO94Fm+^)v1!%GIiLrA", "nO94Fm+^)v1!%GIiLrA", 1000, "", "b0#/Ocm");
      String string0 = HttpUtils.getNonEmptyPath(uri0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Uri uri0 = new Uri("( Sgy", "( Sgy", "( Sgy", (-9999), "( Sgy", "");
      // Undeclared exception!
      try { 
        HttpUtils.validateSupportedScheme(uri0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The URI scheme, of the URI ( Sgy://( Sgy@( Sgy:-9999( Sgy?, must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getAuthority((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri("http://", (String) null, "http://", (-347), "http://", "io.reactivex.processors.ReplayProcessor$TimedNode");
      String string0 = HttpUtils.getBaseUrl(uri0);
      assertEquals("http://://http://:-347", string0);
  }
}
