/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:25:29 GMT 2017
 */

package org.asynchttpclient.handler.resumable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.handler.codec.http.CombinedHttpHeaders;
import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.cookie.Cookie;
import io.netty.resolver.NameResolver;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.PushbackInputStream;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.DefaultRequest;
import org.asynchttpclient.HttpResponseBodyPart;
import org.asynchttpclient.HttpResponseStatus;
import org.asynchttpclient.Param;
import org.asynchttpclient.Realm;
import org.asynchttpclient.Request;
import org.asynchttpclient.Response;
import org.asynchttpclient.channel.ChannelPoolPartitioning;
import org.asynchttpclient.handler.TransferCompletionHandler;
import org.asynchttpclient.handler.resumable.PropertiesBasedResumableProcessor;
import org.asynchttpclient.handler.resumable.ResumableAsyncHandler;
import org.asynchttpclient.handler.resumable.ResumableListener;
import org.asynchttpclient.proxy.ProxyServer;
import org.asynchttpclient.request.body.generator.InputStreamBodyGenerator;
import org.asynchttpclient.request.body.multipart.Part;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResumableAsyncHandler_ESTest extends ResumableAsyncHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
          HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
          propertiesBasedResumableProcessor0.save(hashMap0);
          assertEquals(0, hashMap0.size());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      propertiesBasedResumableProcessor0.remove(",'!");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      propertiesBasedResumableProcessor0.put("z", 2242L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      Map<String, Long> map0 = propertiesBasedResumableProcessor0.load();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(transferCompletionHandler0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(true);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(500000L, resumableAsyncHandler0);
      assertFalse(resumableAsyncHandler1.equals((Object)resumableAsyncHandler0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(true);
      try { 
        resumableAsyncHandler0.onStatusReceived((HttpResponseStatus) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(0L);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(resumableAsyncHandler0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      AsyncHandler.State asyncHandler_State0 = resumableAsyncHandler1.onHeadersReceived(combinedHttpHeaders0);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      resumableAsyncHandler0.onHeadersReceived(combinedHttpHeaders0);
      try { 
        resumableAsyncHandler0.onHeadersReceived(combinedHttpHeaders0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException("io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0, false);
      try { 
        resumableAsyncHandler0.onBodyPartReceived((HttpResponseBodyPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("v4]06D", "access-control-allow-headers");
      resumableAsyncHandler0.onThrowable(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      Uri uri0 = new Uri("@?W(= yD!", "2uf\"FVl\"Hzm", "2uf\"FVl\"Hzm", 60, "", "Sl;|MM");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      Stack<Cookie> stack0 = new Stack<Cookie>();
      byte[] byteArray0 = new byte[6];
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      InputStreamBodyGenerator inputStreamBodyGenerator0 = new InputStreamBodyGenerator(byteArrayInputStream0);
      ArrayList<Param> arrayList0 = new ArrayList<Param>();
      ArrayList<Part> arrayList1 = new ArrayList<Part>();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      ProxyServer proxyServer0 = new ProxyServer("https", (-2062), 0, realm0, (List<String>) null);
      Realm realm1 = mock(Realm.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("http");
      Boolean boolean0 = new Boolean(true);
      Charset charset0 = Charset.defaultCharset();
      DefaultRequest defaultRequest0 = new DefaultRequest("Sl;|MM", uri0, inetAddress0, inetAddress0, (HttpHeaders) null, stack0, byteArray0, linkedList0, "@?W(= yD!", byteBuffer0, pushbackInputStream0, inputStreamBodyGenerator0, arrayList0, arrayList1, (String) null, proxyServer0, realm1, mockFile0, boolean0, 0, 421, 3478L, charset0, (ChannelPoolPartitioning) null, (NameResolver<InetAddress>) null);
      // Undeclared exception!
      try { 
        resumableAsyncHandler0.adjustRequestRange(defaultRequest0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.asynchttpclient.RequestBuilder
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0, true);
      try { 
        resumableAsyncHandler0.onBodyPartReceived((HttpResponseBodyPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.Response$ResponseBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(false);
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders(false);
      resumableAsyncHandler0.onTrailingHeadersReceived(defaultHttpHeaders0);
      try { 
        resumableAsyncHandler0.onTrailingHeadersReceived(defaultHttpHeaders0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException("io.netty.handler.codec.DefaultHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0);
      // Undeclared exception!
      try { 
        resumableAsyncHandler0.adjustRequestRange((Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(true);
      try { 
        resumableAsyncHandler0.onHeadersReceived((HttpHeaders) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(0L);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(resumableAsyncHandler0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("3d\"ly", "3d\"ly", (-2584));
      resumableAsyncHandler1.onThrowable(sQLIntegrityConstraintViolationException0);
      assertEquals("3d\"ly", sQLIntegrityConstraintViolationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      resumableAsyncHandler0.setResumableListener((ResumableListener) null);
      try { 
        resumableAsyncHandler0.onCompleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(resumableAsyncHandler0);
      Response response0 = resumableAsyncHandler1.onCompleted();
      assertNull(response0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      Response response0 = resumableAsyncHandler0.onCompleted();
      assertNull(response0);
  }
}
