/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 04:34:45 GMT 2017
 */

package org.asynchttpclient;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import org.asynchttpclient.Param;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Param_ESTest extends Param_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      String string0 = param0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Param param0 = new Param("#", "#");
      String string0 = param0.getValue();
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Param param0 = new Param("#", "#");
      String string0 = param0.getName();
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Param param0 = new Param("", "");
      String string0 = param0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Param param0 = new Param("", "");
      Param param1 = new Param("", "");
      boolean boolean0 = param0.equals(param1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Param param0 = new Param("1S&]QFJaseU_K}", "1S&]QFJaseU_K}");
      Param param1 = new Param("1S&]QFJaseU_K}", (String) null);
      boolean boolean0 = param1.equals(param0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Param param0 = new Param("#", "#");
      Param param1 = new Param("P", "Adding hidden files and directories to exclusions");
      boolean boolean0 = param0.equals(param1);
      assertEquals("Adding hidden files and directories to exclusions", param1.getValue());
      assertEquals("P", param1.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      Param param1 = new Param("diFGruWA}/t7rC85", (String) null);
      boolean boolean0 = param0.equals(param1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      Param param1 = new Param((String) null, (String) null);
      boolean boolean0 = param0.equals(param1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      boolean boolean0 = param0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Param param0 = new Param("", "");
      boolean boolean0 = param0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Param param0 = new Param("", "");
      boolean boolean0 = param0.equals(param0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Param param0 = new Param("GaR !qL#7Yz", "Mi");
      Param param1 = new Param("GaR !qL#7Yz", "");
      boolean boolean0 = param0.equals(param1);
      assertFalse(boolean0);
      assertEquals("GaR !qL#7Yz", param1.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      param0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Param param0 = new Param("GaR !qL#7Yz", "Mi");
      param0.hashCode();
      assertEquals("GaR !qL#7Yz", param0.getName());
      assertEquals("Mi", param0.getValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("J0y");
      Function<Object, List<String>> function0 = (Function<Object, List<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(function0).apply(any());
      hashMap0.computeIfAbsent("", function0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Function<Object, List<String>> function0 = (Function<Object, List<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(function0).apply(any());
      hashMap0.computeIfAbsent("", function0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("", (List<String>) null);
      // Undeclared exception!
      try { 
        Param.map2ParamList(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Param> list0 = Param.map2ParamList((Map<String, List<String>>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Param param0 = new Param("@'v?Qr_}DogP;X", "");
      String string0 = param0.getValue();
      assertEquals("@'v?Qr_}DogP;X", param0.getName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      String string0 = param0.getName();
      assertNull(string0);
  }
}
