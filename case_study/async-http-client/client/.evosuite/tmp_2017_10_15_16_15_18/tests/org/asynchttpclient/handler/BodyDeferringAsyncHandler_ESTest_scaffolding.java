/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Oct 16 00:54:41 GMT 2017
 */

package org.asynchttpclient.handler;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class BodyDeferringAsyncHandler_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.asynchttpclient.handler.BodyDeferringAsyncHandler"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
    java.lang.System.setProperty("sun.arch.data.model", "64"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BodyDeferringAsyncHandler_ESTest_scaffolding.class.getClassLoader() ,
      "io.netty.util.internal.SystemPropertyUtil$1",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef",
      "io.netty.handler.codec.http.HttpHeaders",
      "io.netty.util.AttributeMap",
      "io.netty.util.internal.Cleaner",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad",
      "io.netty.handler.codec.http.HttpMessage",
      "io.netty.util.AsciiString",
      "io.netty.util.internal.PlatformDependent0",
      "io.netty.handler.codec.http.CombinedHttpHeaders",
      "io.netty.handler.codec.http.HttpObject",
      "org.asynchttpclient.netty.NettyResponseStatus",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerIndexField",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL2Pad",
      "io.netty.util.internal.ReflectionUtil",
      "org.asynchttpclient.AsyncHandler$State",
      "io.netty.handler.codec.http.DefaultHttpHeaders$2",
      "io.netty.handler.codec.http.DefaultHttpHeaders$1",
      "io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue",
      "org.eclipse.jetty.util.InetAddressSet$SingletonInetRange",
      "org.asynchttpclient.webdav.WebDavResponse",
      "io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueue",
      "io.netty.util.internal.logging.Slf4JLoggerFactory",
      "io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue",
      "org.eclipse.jetty.util.InetAddressSet$MinMaxInetRange",
      "io.netty.util.internal.shaded.org.jctools.queues.SpscLinkedQueue",
      "io.netty.util.internal.PlatformDependent0$3",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad",
      "io.netty.util.internal.PlatformDependent0$4",
      "io.netty.util.internal.PlatformDependent0$5",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef",
      "io.netty.util.internal.CleanerJava6",
      "io.netty.util.internal.PlatformDependent0$1",
      "io.netty.handler.codec.DefaultHeadersImpl",
      "io.netty.util.internal.PlatformDependent0$2",
      "io.netty.handler.codec.http.EmptyHttpHeaders",
      "io.netty.util.internal.logging.InternalLogger",
      "org.eclipse.jetty.util.InetAddressSet$CidrInetRange",
      "io.netty.util.internal.PlatformDependent0$10",
      "io.netty.util.internal.PlatformDependent$1",
      "io.netty.util.internal.PlatformDependent$2",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue",
      "io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad0",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad1",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueue",
      "io.netty.util.internal.LongCounter",
      "org.eclipse.jetty.util.InetAddressSet$InetPattern",
      "io.netty.handler.codec.CharSequenceValueConverter",
      "io.netty.util.internal.logging.AbstractInternalLogger",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad",
      "io.netty.handler.codec.DefaultHeaders$NameValidator",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad2",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad",
      "io.netty.util.ByteProcessor",
      "org.asynchttpclient.Response",
      "io.netty.util.ReferenceCounted",
      "io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad",
      "io.netty.channel.Channel",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueConsumerIndexField",
      "io.netty.handler.codec.ValueConverter",
      "io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef",
      "io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider",
      "org.eclipse.jetty.util.InetAddressSet$LegacyInetRange",
      "io.netty.util.internal.logging.InternalLoggerFactory",
      "io.netty.handler.codec.DecoderResultProvider",
      "io.netty.handler.codec.http.HttpUtil",
      "org.apache.commons.io.filefilter.IOFileFilter",
      "io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue",
      "io.netty.buffer.ByteBufAllocator",
      "org.asynchttpclient.HttpResponseStatus",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField",
      "io.netty.util.internal.PlatformDependent",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue",
      "io.netty.util.internal.ObjectUtil",
      "io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper",
      "org.asynchttpclient.netty.util.ByteBufUtils",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "io.netty.util.AsciiString$CharEqualityComparator",
      "org.asynchttpclient.AsyncHandler",
      "io.netty.handler.codec.DefaultHeaders",
      "io.netty.handler.codec.Headers",
      "io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad2",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad",
      "io.netty.handler.codec.http.DefaultHttpHeaders",
      "io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad0",
      "org.asynchttpclient.HttpResponseBodyPart",
      "io.netty.handler.codec.http.DefaultHttpHeaders$HeaderValueConverterAndValidator",
      "io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad1",
      "io.netty.channel.ChannelOutboundInvoker",
      "org.eclipse.jetty.util.InetAddressSet",
      "io.netty.handler.codec.http.HttpResponse",
      "org.asynchttpclient.netty.LazyResponseBodyPart",
      "org.apache.commons.io.FilenameUtils",
      "io.netty.util.AsciiString$2",
      "org.apache.commons.io.IOCase",
      "org.asynchttpclient.handler.BodyDeferringAsyncHandler$BodyDeferringInputStream",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue",
      "org.asynchttpclient.netty.EagerResponseBodyPart",
      "io.netty.util.AsciiString$1",
      "io.netty.util.HashingStrategy",
      "io.netty.buffer.ByteBuf",
      "io.netty.util.internal.MathUtil",
      "io.netty.util.internal.logging.Slf4JLogger",
      "org.asynchttpclient.Response$ResponseBuilder",
      "io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl",
      "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField",
      "io.netty.util.internal.OutOfDirectMemoryError",
      "org.asynchttpclient.handler.BodyDeferringAsyncHandler",
      "io.netty.handler.codec.DefaultHeaders$HeaderEntry",
      "io.netty.handler.codec.DefaultHeaders$NameValidator$1",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.SpscLinkedAtomicQueue",
      "io.netty.handler.codec.http.HttpHeaderValues",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "io.netty.util.internal.SystemPropertyUtil",
      "io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators",
      "io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL1Pad",
      "io.netty.handler.codec.http.DefaultHttpHeaders$HeaderValueConverter",
      "org.asynchttpclient.uri.Uri"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("io.netty.buffer.ByteBuf", false, BodyDeferringAsyncHandler_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.concurrent.Future", false, BodyDeferringAsyncHandler_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BodyDeferringAsyncHandler_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.asynchttpclient.AsyncHandler$State",
      "io.netty.util.internal.MathUtil",
      "io.netty.util.AsciiString",
      "io.netty.handler.codec.http.HttpHeaderValues",
      "io.netty.handler.codec.http.HttpUtil",
      "io.netty.handler.codec.http.HttpHeaders",
      "io.netty.handler.codec.http.EmptyHttpHeaders",
      "io.netty.handler.codec.http.DefaultHttpHeaders",
      "io.netty.handler.codec.DefaultHeaders",
      "io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl",
      "io.netty.handler.codec.CharSequenceValueConverter",
      "io.netty.handler.codec.http.DefaultHttpHeaders$HeaderValueConverter",
      "io.netty.handler.codec.http.DefaultHttpHeaders$HeaderValueConverterAndValidator",
      "io.netty.handler.codec.DefaultHeaders$NameValidator",
      "io.netty.util.internal.logging.InternalLoggerFactory",
      "io.netty.util.internal.logging.Slf4JLoggerFactory",
      "io.netty.util.internal.logging.AbstractInternalLogger",
      "io.netty.util.internal.logging.Slf4JLogger",
      "io.netty.util.internal.SystemPropertyUtil",
      "io.netty.util.internal.StringUtil",
      "io.netty.util.internal.PlatformDependent0",
      "io.netty.util.internal.CleanerJava6",
      "io.netty.util.internal.PlatformDependent"
    );
  }
}
